digraph  {
n452 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA", span=""];
n453 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container", span=""];
n454 [label=circularList, span=""];
n455 [label=json, span=""];
n456 [label=circularDictionary, span=""];
n457 [label=json, span=""];
n458 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition", span=""];
n459 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions", span=""];
n460 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User", span=""];
n461 [label=json, span=""];
n0 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()"];
n1 [label="B = new ContentB()", span="61-61", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()"];
n2 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()"];
n3 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentB.ContentB()", span="49-49", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentB.ContentB()"];
n4 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.CanConvert(System.Type)", span="67-67", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.CanConvert(System.Type)"];
n5 [label="return true;", span="69-69", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.CanConvert(System.Type)"];
n6 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.CanConvert(System.Type)", span="67-67", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.CanConvert(System.Type)"];
n7 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="72-72", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n8 [label="return new ContentA() { B = serializer.Deserialize<ContentB>(reader) };", span="74-74", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n9 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="72-72", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n10 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="865-865", cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)"];
n11 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="77-77", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n12 [label="ContentB b = ((ContentA)value).B", span="79-79", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n13 [label="serializer.Serialize(writer, b)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n14 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="77-77", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n15 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1066-1066", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)"];
n16 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", span="89-89", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()"];
n17 [label="ListA = new List<ContentA>()", span="91-91", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()"];
n18 [label="ListB = new List<ContentA>()", span="92-92", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()"];
n20 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n19 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", span="89-89", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()"];
n21 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n22 [label="JsonSerializerSettings settings = new JsonSerializerSettings()", span="99-99", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n23 [label="settings.PreserveReferencesHandling = PreserveReferencesHandling.All", span="100-100", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n37 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="447-447", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()"];
n24 [label="settings.TypeNameHandling = TypeNameHandling.All", span="101-101", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n25 [label="settings.Formatting = Formatting.Indented", span="102-102", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n31 [label="string s = JsonConvert.SerializeObject(c1, settings)", span="110-110", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n33 [label="Container c2 = JsonConvert.DeserializeObject<Container>(s, settings)", span="137-137", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n26 [label="Container c1 = new Container()", span="104-104", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n27 [label="ContentA content = new ContentA()", span="105-105", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n29 [label="c1.ListA.Add(content)", span="107-107", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n30 [label="c1.ListB.Add(content)", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n28 [label="content.B.SomeValue = true", span="106-106", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n38 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n32 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests+Container, Newtonsoft.Json.Tests'''',\r\n  ''''ListA'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''$type'''': '''''' + ReflectionUtils.GetTypeName(typeof(List<ContentA>), 0, DefaultSerializationBinder.Instance) + @'''''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$id'''': ''''3'''',\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests+ContentB, Newtonsoft.Json.Tests'''',\r\n        ''''SomeValue'''': true\r\n      }\r\n    ]\r\n  },\r\n  ''''ListB'''': {\r\n    ''''$id'''': ''''4'''',\r\n    ''''$type'''': '''''' + ReflectionUtils.GetTypeName(typeof(List<ContentA>), 0, DefaultSerializationBinder.Instance) + @'''''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$ref'''': ''''3''''\r\n      }\r\n    ]\r\n  }\r\n}'', s)", span="112-135", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n39 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="582-582", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)"];
n40 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", span="145-145", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)"];
n41 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="341-341", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)"];
n34 [label="Assert.AreEqual(c2.ListA[0], c2.ListB[0])", span="139-139", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n42 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)"];
n35 [label="Assert.AreEqual(true, c2.ListA[0].B.SomeValue)", span="140-140", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n43 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual"];
n36 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()"];
n44 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", span="167-167", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n45 [label="Child c = new Child\r\n            {\r\n                PropertyName = ''value?''\r\n            }", span="169-172", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n46 [label="IList<string> l = new List<string>\r\n            {\r\n                ''value!''\r\n            }", span="173-176", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n58 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Child.Child()", span="162-162", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Child.Child()"];
n47 [label="Parent p = new Parent\r\n            {\r\n                Child1 = c,\r\n                Child2 = c,\r\n                List1 = l,\r\n                List2 = l\r\n            }", span="177-183", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n48 [label="string json = JsonConvert.SerializeObject(p, new JsonSerializerSettings\r\n            {\r\n                Formatting = Formatting.Indented,\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            })", span="185-189", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n59 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Parent.Parent()", span="143-143", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Parent.Parent()"];
n49 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''ReadOnlyChild'''': {\r\n    ''''PropertyName'''': ''''value?''''\r\n  },\r\n  ''''Child1'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''PropertyName'''': ''''value?''''\r\n  },\r\n  ''''Child2'''': {\r\n    ''''$ref'''': ''''2''''\r\n  },\r\n  ''''ReadOnlyList'''': [\r\n    ''''value!''''\r\n  ],\r\n  ''''List1'''': {\r\n    ''''$id'''': ''''3'''',\r\n    ''''$values'''': [\r\n      ''''value!''''\r\n    ]\r\n  },\r\n  ''''List2'''': {\r\n    ''''$ref'''': ''''3''''\r\n  }\r\n}'', json)", span="191-215", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n50 [label="Parent newP = JsonConvert.DeserializeObject<Parent>(json, new JsonSerializerSettings\r\n            {\r\n                Formatting = Formatting.Indented,\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            })", span="217-221", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n51 [label="Assert.AreEqual(''value?'', newP.Child1.PropertyName)", span="223-223", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n52 [label="Assert.AreEqual(newP.Child1, newP.Child2)", span="224-224", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n53 [label="Assert.AreEqual(newP.Child1, newP.ReadOnlyChild)", span="225-225", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n54 [label="Assert.AreEqual(''value!'', newP.List1[0])", span="227-227", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n55 [label="Assert.AreEqual(newP.List1, newP.List2)", span="228-228", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n56 [label="Assert.AreEqual(newP.List1, newP.ReadOnlyList)", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n57 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", span="167-167", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()"];
n60 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", span="233-233", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n61 [label="CircularDictionary circularDictionary = new CircularDictionary()", span="235-235", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n62 [label="circularDictionary.Add(''other'', new CircularDictionary { { ''blah'', null } })", span="236-236", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n67 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", span="433-433", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()"];
n63 [label="circularDictionary.Add(''self'', circularDictionary)", span="237-237", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n64 [label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="239-240", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n68 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)"];
n65 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="242-251", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n69 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)"];
n66 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", span="233-233", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()"];
n70 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", span="255-255", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()"];
n71 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}''", span="257-266", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", color=red, community=0];
n72 [label="CircularDictionary circularDictionary = JsonConvert.DeserializeObject<CircularDictionary>(json,\r\n                new JsonSerializerSettings\r\n                {\r\n                    PreserveReferencesHandling = PreserveReferencesHandling.All\r\n                })", span="268-272", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()"];
n73 [label="Assert.AreEqual(2, circularDictionary.Count)", span="274-274", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()"];
n74 [label="Assert.AreEqual(1, circularDictionary[''other''].Count)", span="275-275", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()"];
n75 [label="Assert.IsTrue(ReferenceEquals(circularDictionary, circularDictionary[''self'']))", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()"];
n76 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", span="255-255", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()"];
n77 [label="Entry object.ReferenceEquals(object, object)", span="0-0", cluster="object.ReferenceEquals(object, object)"];
n78 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue"];
n79 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", span="284-284", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n80 [label="string classRef = typeof(CircularList).FullName", span="286-286", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n81 [label="CircularList circularList = new CircularList()", span="288-288", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n85 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { JsonConvert.SerializeObject(circularList, Formatting.Indented); }, ''Self referencing loop detected with type ''' + classRef + '''. Path '[2][0]'.'')", span="293-293", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n82 [label="circularList.Add(null)", span="289-289", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n87 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularList.CircularList()", span="279-279", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularList.CircularList()"];
n83 [label="circularList.Add(new CircularList { null })", span="290-290", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n84 [label="circularList.Add(new CircularList { new CircularList { circularList } })", span="291-291", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n90 [label="JsonConvert.SerializeObject(circularList, Formatting.Indented)", span="293-293", cluster="lambda expression"];
n86 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", span="284-284", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()"];
n88 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="370-370", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])"];
n89 [label="Entry lambda expression", span="293-293", cluster="lambda expression"];
n91 [label="Exit lambda expression", span="293-293", cluster="lambda expression"];
n92 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)"];
n93 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", span="297-297", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n94 [label="CircularList circularList = new CircularList()", span="299-299", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n95 [label="circularList.Add(null)", span="300-300", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n96 [label="circularList.Add(new CircularList { null })", span="301-301", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n97 [label="circularList.Add(new CircularList { new CircularList { circularList } })", span="302-302", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n98 [label="string json = JsonConvert.SerializeObject(circularList,\r\n                Formatting.Indented,\r\n                new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })", span="304-306", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n99 [label="StringAssert.AreEqual(@''[\r\n  null,\r\n  [\r\n    null\r\n  ],\r\n  [\r\n    []\r\n  ]\r\n]'', json)", span="308-316", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n100 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", span="297-297", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()"];
n101 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", span="320-320", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n102 [label="CircularList circularList = new CircularList()", span="322-322", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n103 [label="circularList.Add(null)", span="323-323", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n104 [label="circularList.Add(new CircularList { null })", span="324-324", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n105 [label="circularList.Add(new CircularList { new CircularList { circularList } })", span="325-325", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n106 [label="string json = JsonConvert.SerializeObject(circularList, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="327-328", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n107 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    null,\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        null\r\n      ]\r\n    },\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$id'''': ''''4'''',\r\n          ''''$values'''': [\r\n            {\r\n              ''''$ref'''': ''''1''''\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}'', json)", span="330-354", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n108 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", span="320-320", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()"];
n109 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", span="358-358", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n110 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    null,\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        null\r\n      ]\r\n    },\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$id'''': ''''4'''',\r\n          ''''$values'''': [\r\n            {\r\n              ''''$ref'''': ''''1''''\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}''", span="360-384", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n111 [label="CircularList circularList = JsonConvert.DeserializeObject<CircularList>(json,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="386-387", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n112 [label="Assert.AreEqual(3, circularList.Count)", span="389-389", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n113 [label="Assert.AreEqual(null, circularList[0])", span="390-390", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n114 [label="Assert.AreEqual(1, circularList[1].Count)", span="391-391", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n115 [label="Assert.AreEqual(1, circularList[2].Count)", span="392-392", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n116 [label="Assert.AreEqual(1, circularList[2][0].Count)", span="393-393", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n117 [label="Assert.IsTrue(ReferenceEquals(circularList, circularList[2][0][0]))", span="394-394", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n118 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", span="358-358", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()"];
n119 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", span="398-398", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()"];
n120 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    null,\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        null\r\n      ]\r\n    },\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$id'''': ''''4'''',\r\n          ''''$values'''': [\r\n            {\r\n              ''''$ref'''': ''''1''''\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}''", span="400-424", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()"];
n121 [label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All });\r\n            }, @''Cannot preserve reference to array or readonly list, or list created from a non-default constructor: System.String[][]. Path '$values', line 3, position 14.'')", span="426-430", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()"];
n125 [label="JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="428-429", cluster="lambda expression"];
n122 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", span="398-398", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()"];
n123 [label="Entry Unk.>", span="", cluster="Unk.>"];
n124 [label="Entry lambda expression", span="426-430", cluster="lambda expression"];
n126 [label="Exit lambda expression", span="426-430", cluster="lambda expression"];
n127 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", span="438-438", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n128 [label="string classRef = typeof(CircularDictionary).FullName", span="440-440", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n129 [label="CircularDictionary circularDictionary = new CircularDictionary()", span="442-442", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n132 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { JsonConvert.SerializeObject(circularDictionary, Formatting.Indented); }, @''Self referencing loop detected with type ''' + classRef + '''. Path ''.'')", span="446-446", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n130 [label="circularDictionary.Add(''other'', new CircularDictionary { { ''blah'', null } })", span="443-443", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n131 [label="circularDictionary.Add(''self'', circularDictionary)", span="444-444", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n135 [label="JsonConvert.SerializeObject(circularDictionary, Formatting.Indented)", span="446-446", cluster="lambda expression"];
n133 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", span="438-438", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()"];
n134 [label="Entry lambda expression", span="446-446", cluster="lambda expression"];
n136 [label="Exit lambda expression", span="446-446", cluster="lambda expression"];
n137 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", span="450-450", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n138 [label="CircularDictionary circularDictionary = new CircularDictionary()", span="452-452", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n139 [label="circularDictionary.Add(''other'', new CircularDictionary { { ''blah'', null } })", span="453-453", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n140 [label="circularDictionary.Add(''self'', circularDictionary)", span="454-454", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n141 [label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })", span="456-457", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n142 [label="StringAssert.AreEqual(@''{\r\n  ''''other'''': {\r\n    ''''blah'''': null\r\n  }\r\n}'', json)", span="459-463", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n143 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", span="450-450", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()"];
n144 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", span="467-467", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()"];
n145 [label="string json = @''{\r\n  ''''$id'''':''", span="469-470", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()"];
n146 [label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings\r\n                    {\r\n                        PreserveReferencesHandling = PreserveReferencesHandling.All,\r\n                        MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n                    });\r\n            }, @''Unexpected end when reading JSON. Path '$id', line 2, position 8.'')", span="472-480", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()"];
n149 [label="JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings\r\n                    {\r\n                        PreserveReferencesHandling = PreserveReferencesHandling.All,\r\n                        MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n                    })", span="474-479", cluster="lambda expression"];
n147 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", span="467-467", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()"];
n148 [label="Entry lambda expression", span="472-480", cluster="lambda expression"];
n150 [label="Exit lambda expression", span="472-480", cluster="lambda expression"];
n151 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="485-485", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n152 [label="CircularReferenceClass circularReferenceClass = (CircularReferenceClass)value", span="487-487", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n153 [label="string reference = serializer.ReferenceResolver.GetReference(serializer, circularReferenceClass)", span="489-489", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n156 [label="me[''$type''] = new JValue(value.GetType().Name)", span="493-493", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n158 [label="JObject o = JObject.FromObject(circularReferenceClass.Child, serializer)", span="496-496", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n160 [label="me.WriteTo(writer)", span="499-499", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n157 [label="me[''Name''] = new JValue(circularReferenceClass.Name)", span="494-494", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n154 [label="JObject me = new JObject()", span="491-491", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n162 [label="Entry Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(object, object)", span="46-46", cluster="Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(object, object)"];
n155 [label="me[''$id''] = new JValue(reference)", span="492-492", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n163 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="84-84", cluster="Newtonsoft.Json.Linq.JObject.JObject()"];
n159 [label="me[''Child''] = o", span="497-497", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n164 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(string)", span="154-154", cluster="Newtonsoft.Json.Linq.JValue.JValue(string)"];
n165 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n166 [label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object, Newtonsoft.Json.JsonSerializer)", span="441-441", cluster="Newtonsoft.Json.Linq.JObject.FromObject(object, Newtonsoft.Json.JsonSerializer)"];
n161 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="485-485", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
n167 [label="Entry Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="458-458", cluster="Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])"];
n168 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="502-502", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n169 [label="JObject o = JObject.Load(reader)", span="504-504", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n173 [label="serializer.Populate(o.CreateReader(), circularReferenceClass)", span="509-509", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n176 [label="return serializer.ReferenceResolver.ResolveReference(serializer, reference);", span="515-515", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n170 [label="string id = (string)o[''$id'']", span="505-505", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n178 [label="Entry Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)", span="339-339", cluster="Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)"];
n175 [label="string reference = (string)o[''$ref'']", span="514-514", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n171 [label="id != null", span="506-506", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n172 [label="CircularReferenceClass circularReferenceClass = new CircularReferenceClass()", span="508-508", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n179 [label="Entry Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()"];
n174 [label="return circularReferenceClass;", span="510-510", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n180 [label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1875-1875", cluster="Newtonsoft.Json.Linq.JToken.CreateReader()"];
n181 [label="Entry Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", span="802-802", cluster="Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)"];
n177 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="502-502", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)"];
n182 [label="Entry Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(object, string)", span="38-38", cluster="Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(object, string)"];
n183 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CanConvert(System.Type)", span="519-519", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CanConvert(System.Type)"];
n184 [label="return (objectType == typeof(CircularReferenceClass));", span="521-521", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CanConvert(System.Type)"];
n185 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CanConvert(System.Type)", span="519-519", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CanConvert(System.Type)"];
n186 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n187 [label="CircularReferenceClass c1 = new CircularReferenceClass { Name = ''c1'' }", span="528-528", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n188 [label="CircularReferenceClass c2 = new CircularReferenceClass { Name = ''c2'' }", span="529-529", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n190 [label="c1.Child = c2", span="532-532", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n192 [label="c3.Child = c1", span="534-534", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n193 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects,\r\n                Converters = new List<JsonConverter> { new CircularReferenceClassConverter() }\r\n            })", span="536-540", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n189 [label="CircularReferenceClass c3 = new CircularReferenceClass { Name = ''c3'' }", span="530-530", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n191 [label="c2.Child = c3", span="533-533", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n194 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''CircularReferenceClass'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''$type'''': ''''CircularReferenceClass'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$type'''': ''''CircularReferenceClass'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="542-559", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n196 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CircularReferenceClassConverter()", span="483-483", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CircularReferenceClassConverter()"];
n195 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()"];
n197 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", span="563-563", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n198 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''CircularReferenceClass'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''$type'''': ''''CircularReferenceClass'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$type'''': ''''CircularReferenceClass'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}''", span="565-582", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n199 [label="CircularReferenceClass c1 = JsonConvert.DeserializeObject<CircularReferenceClass>(json, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects,\r\n                Converters = new List<JsonConverter> { new CircularReferenceClassConverter() }\r\n            })", span="584-588", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n200 [label="Assert.AreEqual(''c1'', c1.Name)", span="590-590", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n201 [label="Assert.AreEqual(''c2'', c1.Child.Name)", span="591-591", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n202 [label="Assert.AreEqual(''c3'', c1.Child.Child.Name)", span="592-592", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n203 [label="Assert.AreEqual(''c1'', c1.Child.Child.Child.Name)", span="593-593", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n204 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", span="563-563", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()"];
n205 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", span="597-597", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n206 [label="EmployeeReference mikeManager = new EmployeeReference\r\n            {\r\n                Name = ''Mike Manager''\r\n            }", span="599-602", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n207 [label="EmployeeReference joeUser = new EmployeeReference\r\n            {\r\n                Name = ''Joe User'',\r\n                Manager = mikeManager\r\n            }", span="603-607", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n212 [label="Entry Newtonsoft.Json.Tests.TestObjects.EmployeeReference.EmployeeReference()", span="28-28", cluster="Newtonsoft.Json.Tests.TestObjects.EmployeeReference.EmployeeReference()"];
n208 [label="List<EmployeeReference> employees = new List<EmployeeReference>\r\n            {\r\n                mikeManager,\r\n                joeUser\r\n            }", span="609-613", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n209 [label="string json = JsonConvert.SerializeObject(employees, Formatting.Indented)", span="615-615", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n210 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''Mike Manager'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''Joe User'''',\r\n    ''''Manager'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n]'', json)", span="616-629", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n211 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", span="597-597", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()"];
n213 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", span="633-633", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n214 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''Mike Manager'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''Joe User'''',\r\n    ''''Manager'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n]''", span="635-648", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n215 [label="List<EmployeeReference> employees = JsonConvert.DeserializeObject<List<EmployeeReference>>(json)", span="650-650", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n216 [label="Assert.AreEqual(2, employees.Count)", span="652-652", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n221 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)"];
n217 [label="Assert.AreEqual(''Mike Manager'', employees[0].Name)", span="653-653", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n218 [label="Assert.AreEqual(''Joe User'', employees[1].Name)", span="654-654", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n219 [label="Assert.AreEqual(employees[0], employees[1].Manager)", span="655-655", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n220 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", span="633-633", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()"];
n222 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition.Condition(int)", span="663-663", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition.Condition(int)"];
n223 [label="Value = value", span="665-665", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition.Condition(int)"];
n224 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition.Condition(int)", span="663-663", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition.Condition(int)"];
n225 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions.ClassWithConditions(Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition, Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition)", span="675-675", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions.ClassWithConditions(Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition, Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition)"];
n226 [label="Condition1 = condition1", span="677-677", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions.ClassWithConditions(Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition, Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition)"];
n227 [label="Condition2 = condition2", span="678-678", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions.ClassWithConditions(Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition, Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition)"];
n228 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions.ClassWithConditions(Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition, Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition)", span="675-675", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions.ClassWithConditions(Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition, Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition)"];
n229 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()", span="683-683", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()"];
n230 [label="Condition condition = new Condition(1)", span="685-685", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()"];
n231 [label="ClassWithConditions value = new ClassWithConditions(condition, condition)", span="686-686", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()"];
n232 [label="string json = JsonConvert.SerializeObject(value, Formatting.Indented)", span="688-688", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()"];
n233 [label="StringAssert.AreEqual(@''{\r\n  ''''Condition1'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Value'''': 1\r\n  },\r\n  ''''Condition2'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="689-697", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()"];
n234 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()", span="683-683", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeIsReferenceReadonlyProperty()"];
n235 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()", span="701-701", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()"];
n236 [label="string json = @''{\r\n  ''''Condition1'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Value'''': 1\r\n  },\r\n  ''''Condition2'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}''", span="703-711", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()"];
n237 [label="ClassWithConditions value = JsonConvert.DeserializeObject<ClassWithConditions>(json)", span="713-713", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()"];
n238 [label="Assert.AreEqual(value.Condition1.Value, 1)", span="714-714", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()"];
n239 [label="Assert.AreEqual(value.Condition1, value.Condition2)", span="715-715", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()"];
n240 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()", span="701-701", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeIsReferenceReadonlyProperty()"];
n241 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", span="719-719", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n242 [label="CircularReferenceClass c1 = new CircularReferenceClass { Name = ''c1'' }", span="721-721", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n243 [label="CircularReferenceClass c2 = new CircularReferenceClass { Name = ''c2'' }", span="722-722", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n245 [label="c1.Child = c2", span="725-725", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n247 [label="c3.Child = c1", span="727-727", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n248 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n            })", span="729-732", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n244 [label="CircularReferenceClass c3 = new CircularReferenceClass { Name = ''c3'' }", span="723-723", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n246 [label="c2.Child = c3", span="726-726", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n249 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="734-748", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n250 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", span="719-719", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()"];
n251 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", span="752-752", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n252 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}''", span="754-768", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n253 [label="CircularReferenceClass c1 =\r\n                JsonConvert.DeserializeObject<CircularReferenceClass>(json, new JsonSerializerSettings\r\n                {\r\n                    PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n                })", span="770-774", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n254 [label="Assert.AreEqual(''c1'', c1.Name)", span="776-776", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n255 [label="Assert.AreEqual(''c2'', c1.Child.Name)", span="777-777", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n256 [label="Assert.AreEqual(''c3'', c1.Child.Child.Name)", span="778-778", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n257 [label="Assert.AreEqual(''c1'', c1.Child.Child.Child.Name)", span="779-779", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n258 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", span="752-752", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()"];
n259 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", span="783-783", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n260 [label="EmployeeReference e1 = new EmployeeReference { Name = ''e1'' }", span="785-785", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n261 [label="EmployeeReference e2 = new EmployeeReference { Name = ''e2'' }", span="786-786", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n262 [label="List<EmployeeReference> employees = new List<EmployeeReference> { e1, e2, e1, e2 }", span="788-788", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n263 [label="string json = JsonConvert.SerializeObject(employees, Formatting.Indented)", span="790-790", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n264 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]'', json)", span="792-809", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n265 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", span="783-783", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()"];
n266 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", span="813-813", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n267 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]''", span="815-832", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n268 [label="List<EmployeeReference> employees = JsonConvert.DeserializeObject<List<EmployeeReference>>(json)", span="834-834", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n269 [label="Assert.AreEqual(4, employees.Count)", span="835-835", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n270 [label="Assert.AreEqual(''e1'', employees[0].Name)", span="837-837", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n271 [label="Assert.AreEqual(''e2'', employees[1].Name)", span="838-838", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n272 [label="Assert.AreEqual(''e1'', employees[2].Name)", span="839-839", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n273 [label="Assert.AreEqual(''e2'', employees[3].Name)", span="840-840", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n274 [label="Assert.AreEqual(employees[0], employees[2])", span="842-842", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n275 [label="Assert.AreEqual(employees[1], employees[3])", span="843-843", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n276 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", span="813-813", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()"];
n277 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", span="847-847", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n278 [label="EmployeeReference e1 = new EmployeeReference { Name = ''e1'' }", span="849-849", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n279 [label="EmployeeReference e2 = new EmployeeReference { Name = ''e2'' }", span="850-850", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n280 [label="Dictionary<string, EmployeeReference> employees = new Dictionary<string, EmployeeReference>\r\n            {\r\n                { ''One'', e1 },\r\n                { ''Two'', e2 },\r\n                { ''Three'', e1 },\r\n                { ''Four'', e2 }\r\n            }", span="852-858", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n281 [label="string json = JsonConvert.SerializeObject(employees, Formatting.Indented)", span="860-860", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n284 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n282 [label="StringAssert.AreEqual(@''{\r\n  ''''One'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Two'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Three'''': {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  ''''Four'''': {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n}'', json)", span="862-879", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n283 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", span="847-847", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()"];
n285 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", span="883-883", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n286 [label="string json = @''{\r\n  ''''One'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Two'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Three'''': {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  ''''Four'''': {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n}''", span="885-902", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n287 [label="Dictionary<string, EmployeeReference> employees = JsonConvert.DeserializeObject<Dictionary<string, EmployeeReference>>(json)", span="904-904", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n288 [label="Assert.AreEqual(4, employees.Count)", span="905-905", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n289 [label="EmployeeReference e1 = employees[''One'']", span="907-907", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n290 [label="EmployeeReference e2 = employees[''Two'']", span="908-908", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n293 [label="Assert.AreEqual(e1, employees[''Three''])", span="913-913", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n294 [label="Assert.AreEqual(e2, employees[''Four''])", span="914-914", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n291 [label="Assert.AreEqual(''e1'', e1.Name)", span="910-910", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n292 [label="Assert.AreEqual(''e2'', e2.Name)", span="911-911", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n295 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", span="883-883", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()"];
n296 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", span="918-918", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n297 [label="Person p = new Person\r\n            {\r\n                BirthDate = new DateTime(1980, 12, 23, 0, 0, 0, DateTimeKind.Utc),\r\n                LastModified = new DateTime(2009, 2, 20, 12, 59, 21, DateTimeKind.Utc),\r\n                Department = ''IT'',\r\n                Name = ''James''\r\n            }", span="920-926", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n298 [label="List<Person> people = new List<Person>()", span="928-928", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n303 [label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", span="34-34", cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()"];
n304 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)"];
n299 [label="people.Add(p)", span="929-929", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n300 [label="people.Add(p)", span="930-930", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n301 [label="string json = JsonConvert.SerializeObject(people, Formatting.Indented)", span="932-932", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n302 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", span="918-918", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()"];
n305 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", span="948-948", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n306 [label="Person p = new Person\r\n            {\r\n                BirthDate = new DateTime(1980, 12, 23, 0, 0, 0, DateTimeKind.Utc),\r\n                LastModified = new DateTime(2009, 2, 20, 12, 59, 21, DateTimeKind.Utc),\r\n                Department = ''IT'',\r\n                Name = ''James''\r\n            }", span="950-956", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n307 [label="List<Person> people = new List<Person>()", span="958-958", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n308 [label="people.Add(p)", span="959-959", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n309 [label="people.Add(p)", span="960-960", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n310 [label="string json = JsonConvert.SerializeObject(people, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects })", span="962-963", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n311 [label="List<Person> deserializedPeople = JsonConvert.DeserializeObject<List<Person>>(json,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects })", span="976-977", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n312 [label="Assert.AreEqual(2, deserializedPeople.Count)", span="979-979", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n313 [label="Person p1 = deserializedPeople[0]", span="981-981", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n314 [label="Person p2 = deserializedPeople[1]", span="982-982", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n315 [label="Assert.AreEqual(''James'', p1.Name)", span="984-984", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n317 [label="bool equal = Object.ReferenceEquals(p1, p2)", span="987-987", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n316 [label="Assert.AreEqual(''James'', p2.Name)", span="985-985", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n318 [label="Assert.AreEqual(true, equal)", span="988-988", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n319 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", span="948-948", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()"];
n320 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User()", span="1012-1012", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User()"];
n321 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User()", span="1012-1012", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User()"];
n322 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", span="1016-1016", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)"];
n323 [label="Login = login", span="1019-1019", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)"];
n324 [label="SecretType = secretType", span="1020-1020", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)"];
n325 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", span="1016-1016", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)"];
n326 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", span="1025-1025", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()"];
n327 [label="return SecretType.GetHashCode();", span="1027-1027", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()"];
n328 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", span="1025-1025", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()"];
n329 [label="Entry System.Type.GetHashCode()", span="0-0", cluster="System.Type.GetHashCode()"];
n330 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", span="1030-1030", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()"];
n331 [label="return string.Format(''SecretType: {0}, Login: {1}'', secretType, Login);", span="1032-1032", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()"];
n332 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", span="1030-1030", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()"];
n333 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
n334 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", span="1038-1038", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n335 [label="User user1 = new User(''Peter'', typeof(Version))", span="1040-1040", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n336 [label="User user2 = new User(''Michael'', typeof(Version))", span="1041-1041", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n337 [label="user1.Friend = user2", span="1043-1043", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n339 [label="string json = JsonConvert.SerializeObject(user1, Formatting.Indented, serializerSettings)", span="1053-1053", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n338 [label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,\r\n                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n            }", span="1045-1051", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n340 [label="User deserializedUser = JsonConvert.DeserializeObject<User>(json, serializerSettings)", span="1055-1055", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n341 [label="Assert.IsNotNull(deserializedUser)", span="1056-1056", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n342 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", span="1038-1038", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()"];
n343 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull"];
n344 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", span="1060-1060", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n345 [label="MyClass c = new MyClass()", span="1062-1062", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n346 [label="IList<MyClass> myClasses1 = new List<MyClass>\r\n            {\r\n                c,\r\n                c\r\n            }", span="1064-1068", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n364 [label="Entry Newtonsoft.Json.Tests.TestObjects.MyClass.MyClass()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.MyClass.MyClass()"];
n347 [label="var ser = new JsonSerializer()\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            }", span="1070-1073", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n351 [label="ser.Serialize(writer, myClasses1)", span="1080-1080", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n362 [label="Assert.AreNotEqual(myClasses1[0], myClasses2[0])", span="1112-1112", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n348 [label="MemoryStream ms = new MemoryStream()", span="1075-1075", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n365 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="557-557", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()"];
n359 [label="myClasses2 = ser.Deserialize<IList<MyClass>>(reader)", span="1106-1106", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n349 [label="var sw = new StreamWriter(ms)", span="1077-1077", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n366 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()"];
n352 [label="byte[] data = ms.ToArray()", span="1083-1083", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n350 [label="var writer = new JsonTextWriter(sw) { Formatting = Formatting.Indented }", span="1078-1078", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n367 [label="Entry System.IO.StreamWriter.StreamWriter(System.IO.Stream)", span="0-0", cluster="System.IO.StreamWriter.StreamWriter(System.IO.Stream)"];
n368 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)"];
n353 [label="string json = Encoding.UTF8.GetString(data, 0, data.Length)", span="1084-1084", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n369 [label="Entry System.IO.MemoryStream.ToArray()", span="0-0", cluster="System.IO.MemoryStream.ToArray()"];
n355 [label="ms = new MemoryStream(data)", span="1100-1100", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n354 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''PreProperty'''': 0,\r\n      ''''PostProperty'''': 0\r\n    },\r\n    {\r\n      ''''$ref'''': ''''2''''\r\n    }\r\n  ]\r\n}'', json)", span="1086-1098", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n370 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)"];
n356 [label="IList<MyClass> myClasses2", span="1101-1101", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n371 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])"];
n357 [label="var sr = new StreamReader(ms)", span="1103-1103", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n358 [label="var reader = new JsonTextReader(sr)", span="1104-1104", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n372 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)"];
n373 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="82-82", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)"];
n360 [label="Assert.AreEqual(2, myClasses2.Count)", span="1109-1109", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n361 [label="Assert.AreEqual(myClasses2[0], myClasses2[1])", span="1110-1110", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n363 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", span="1060-1060", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()"];
n374 [label="Entry Unk.AreNotEqual", span="", cluster="Unk.AreNotEqual"];
n375 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", span="1116-1116", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n376 [label="ReferencedList<int> l = new ReferencedList<int>()", span="1118-1118", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n377 [label="l.Add(1)", span="1119-1119", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n383 [label="Entry Newtonsoft.Json.Tests.Serialization.ReferencedList<T>.ReferencedList()", span="1329-1329", cluster="Newtonsoft.Json.Tests.Serialization.ReferencedList<T>.ReferencedList()"];
n378 [label="l.Add(2)", span="1120-1120", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n379 [label="l.Add(3)", span="1121-1121", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n380 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1123-1123", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n381 [label="StringAssert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="1124-1128", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n382 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", span="1116-1116", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()"];
n384 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", span="1132-1132", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n385 [label="var c1 = new TestComponentSimple()", span="1134-1134", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n386 [label="ReferencedList<TestComponentSimple> l = new ReferencedList<TestComponentSimple>()", span="1136-1136", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n393 [label="Entry Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", span="33-33", cluster="Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()"];
n387 [label="l.Add(c1)", span="1137-1137", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n389 [label="l.Add(c1)", span="1139-1139", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n388 [label="l.Add(new TestComponentSimple())", span="1138-1138", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n390 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1141-1141", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n391 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n]'', json)", span="1142-1154", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n392 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", span="1132-1132", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()"];
n394 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", span="1158-1158", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n395 [label="ReferencedDictionary<int> l = new ReferencedDictionary<int>()", span="1160-1160", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n396 [label="l.Add(''First'', 1)", span="1161-1161", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n402 [label="Entry Newtonsoft.Json.Tests.Serialization.ReferencedDictionary<T>.ReferencedDictionary()", span="1334-1334", cluster="Newtonsoft.Json.Tests.Serialization.ReferencedDictionary<T>.ReferencedDictionary()"];
n397 [label="l.Add(''Second'', 2)", span="1162-1162", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n398 [label="l.Add(''Third'', 3)", span="1163-1163", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n399 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1165-1165", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n400 [label="StringAssert.AreEqual(@''{\r\n  ''''First'''': 1,\r\n  ''''Second'''': 2,\r\n  ''''Third'''': 3\r\n}'', json)", span="1166-1170", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n401 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", span="1158-1158", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()"];
n403 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", span="1174-1174", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n404 [label="var c1 = new TestComponentSimple()", span="1176-1176", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n405 [label="ReferencedDictionary<TestComponentSimple> l = new ReferencedDictionary<TestComponentSimple>()", span="1178-1178", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n406 [label="l.Add(''First'', c1)", span="1179-1179", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n408 [label="l.Add(''Third'', c1)", span="1181-1181", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n407 [label="l.Add(''Second'', new TestComponentSimple())", span="1180-1180", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n409 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1183-1183", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n410 [label="StringAssert.AreEqual(@''{\r\n  ''''First'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  ''''Second'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  ''''Third'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="1184-1196", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n411 [label="ReferencedDictionary<TestComponentSimple> d = JsonConvert.DeserializeObject<ReferencedDictionary<TestComponentSimple>>(json)", span="1198-1198", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n412 [label="Assert.AreEqual(3, d.Count)", span="1199-1199", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n413 [label="Assert.IsTrue(ReferenceEquals(d[''First''], d[''Third'']))", span="1200-1200", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n414 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", span="1174-1174", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()"];
n415 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", span="1204-1204", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n416 [label="ReferenceObject o1 = new ReferenceObject()", span="1206-1206", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n417 [label="o1.Component1 = new TestComponentSimple { MyProperty = 1 }", span="1208-1208", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n429 [label="Entry Newtonsoft.Json.Tests.Serialization.ReferenceObject.ReferenceObject()", span="1339-1339", cluster="Newtonsoft.Json.Tests.Serialization.ReferenceObject.ReferenceObject()"];
n418 [label="o1.Component2 = o1.Component1", span="1209-1209", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n419 [label="o1.ComponentNotReference = new TestComponentSimple()", span="1210-1210", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n420 [label="o1.String = ''String!''", span="1211-1211", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n421 [label="o1.Integer = int.MaxValue", span="1212-1212", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n422 [label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1214-1214", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n423 [label="string expected = @''{\r\n  ''''Component1'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''MyProperty'''': 1\r\n  },\r\n  ''''Component2'''': {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  ''''ComponentNotReference'''': {\r\n    ''''MyProperty'''': 0\r\n  },\r\n  ''''String'''': ''''String!'''',\r\n  ''''Integer'''': 2147483647\r\n}''", span="1215-1228", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n424 [label="StringAssert.AreEqual(expected, json)", span="1229-1229", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n425 [label="ReferenceObject referenceObject = JsonConvert.DeserializeObject<ReferenceObject>(json)", span="1231-1231", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n426 [label="Assert.IsNotNull(referenceObject)", span="1232-1232", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n427 [label="Assert.IsTrue(ReferenceEquals(referenceObject.Component1, referenceObject.Component2))", span="1234-1234", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n428 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", span="1204-1204", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()"];
n430 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", span="1238-1238", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n431 [label="TestComponentSimple c1 = new TestComponentSimple()", span="1240-1240", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n432 [label="PropertyItemIsReferenceObject o1 = new PropertyItemIsReferenceObject\r\n            {\r\n                Data = new PropertyItemIsReferenceBody\r\n                {\r\n                    Prop1 = c1,\r\n                    Prop2 = c1,\r\n                    Data = new List<TestComponentSimple>\r\n                    {\r\n                        c1\r\n                    }\r\n                }\r\n            }", span="1242-1253", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n433 [label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1255-1255", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n442 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceObject.PropertyItemIsReferenceObject()", span="1316-1316", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceObject.PropertyItemIsReferenceObject()"];
n443 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceBody.PropertyItemIsReferenceBody()", span="1309-1309", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceBody.PropertyItemIsReferenceBody()"];
n434 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''Prop1'''': {\r\n      ''''$id'''': ''''1'''',\r\n      ''''MyProperty'''': 0\r\n    },\r\n    ''''Prop2'''': {\r\n      ''''$ref'''': ''''1''''\r\n    },\r\n    ''''Data'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''MyProperty'''': 0\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="1256-1274", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n435 [label="PropertyItemIsReferenceObject o2 = JsonConvert.DeserializeObject<PropertyItemIsReferenceObject>(json)", span="1276-1276", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n436 [label="TestComponentSimple c2 = o2.Data.Prop1", span="1278-1278", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n437 [label="TestComponentSimple c3 = o2.Data.Prop2", span="1279-1279", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n438 [label="TestComponentSimple c4 = o2.Data.Data[0]", span="1280-1280", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n439 [label="Assert.IsTrue(ReferenceEquals(c2, c3))", span="1282-1282", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n440 [label="Assert.IsFalse(ReferenceEquals(c2, c4))", span="1283-1283", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n441 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", span="1238-1238", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()"];
n444 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse"];
n445 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", span="1287-1287", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()"];
n446 [label="string json = @''{\r\n  ''''Data'''': {\r\n    ''''Prop1'''': {\r\n      ''''$id'''': ''''1'''',\r\n      ''''MyProperty'''': 0\r\n    },\r\n    ''''Prop2'''': {\r\n      ''''$id'''': ''''1'''',\r\n      ''''MyProperty'''': 0\r\n    }\r\n  }\r\n}''", span="1289-1300", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()"];
n447 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<PropertyItemIsReferenceObject>(json, new JsonSerializerSettings\r\n            {\r\n                MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n            }), ''Error reading object reference '1'. Path 'Data.Prop2.MyProperty', line 9, position 19.'')", span="1302-1305", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()"];
n450 [label="JsonConvert.DeserializeObject<PropertyItemIsReferenceObject>(json, new JsonSerializerSettings\r\n            {\r\n                MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n            })", span="1302-1305", cluster="lambda expression"];
n448 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", span="1287-1287", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()"];
n449 [label="Entry lambda expression", span="1302-1305", cluster="lambda expression"];
n451 [label="Exit lambda expression", span="1302-1305", cluster="lambda expression"];
d6 [label="ValidationUtils.ArgumentNotNull(stream, ''stream'')", span="92-92", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)", color=green, community=0];
d5 [label="Entry Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)", span="90-90", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)"];
d7 [label="_reader = new BinaryReader(stream)", span="93-93", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)", color=green, community=0];
d11 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="94-94", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)"];
d323 [label="Newtonsoft.Json.Bson.BsonReader", span=""];
d8 [label="_stack = new List<ContainerContext>()", span="94-94", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)", color=green, community=0];
d12 [label="Entry System.IO.BinaryReader.BinaryReader(System.IO.Stream)", span="0-0", cluster="System.IO.BinaryReader.BinaryReader(System.IO.Stream)"];
d9 [label="_rootTypeIsArray = rootTypeIsArray", span="95-95", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)", color=green, community=0];
d10 [label="Exit Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)", span="90-90", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream, bool)"];
d15 [label="_currentElementType = ReadType()", span="100-100", cluster="Newtonsoft.Json.Bson.BsonReader.ReadElement()", color=green, community=0];
d14 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadElement()", span="98-98", cluster="Newtonsoft.Json.Bson.BsonReader.ReadElement()"];
d16 [label="string elementName = ReadString()", span="101-101", cluster="Newtonsoft.Json.Bson.BsonReader.ReadElement()"];
d19 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadType()", span="556-556", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType()"];
d23 [label="TokenType != JsonToken.Bytes", span="114-114", cluster="Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()", color=green, community=0];
d22 [label="Read()", span="113-113", cluster="Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()"];
d24 [label="throw new JsonReaderException(''Error reading bytes. Expected bytes but got {0}.''.FormatWith(CultureInfo.InvariantCulture, TokenType));", span="115-115", cluster="Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()", color=green, community=0];
d25 [label="return (byte[])Value;", span="117-117", cluster="Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()"];
d26 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()", span="111-111", cluster="Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()"];
d28 [label="Entry Newtonsoft.Json.JsonReaderException.JsonReaderException(string)", span="59-59", cluster="Newtonsoft.Json.JsonReaderException.JsonReaderException(string)"];
d29 [label="Entry string.FormatWith(System.IFormatProvider, params object[])", span="48-48", cluster="string.FormatWith(System.IFormatProvider, params object[])"];
d136 [label="context.Type == JTokenType.Array", span="286-286", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()", color=green, community=0];
d131 [label="ContainerContext context = _currentContext", span="278-278", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d135 [label="context.Position < lengthMinusEnd", span="284-284", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d137 [label="ReadElement()", span="288-288", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d140 [label="SetToken(JsonToken.PropertyName, ReadElement())", span="294-294", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d227 [label="throw new ArgumentOutOfRangeException(''type'', ''Unexpected BsonType value: '' + type);", span="428-428", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)", color=green, community=0];
d159 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)", span="351-351", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d177 [label=type, span="353-353", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d228 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)", span="351-351", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d234 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)"];
d224 [label="BsonType.TimeStamp", span="423-423", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)", color=green, community=0];
d225 [label="BsonType.Long", span="424-424", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)", color=green, community=0];
d226 [label="SetToken(JsonToken.Integer, ReadInt64())", span="425-425", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)", color=green, community=0];
d232 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadInt64()", span="550-550", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt64()"];
d81 [label="Entry Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken, object)", span="241-241", cluster="Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken, object)"];
d235 [label="int dataLength = ReadInt32()", span="434-434", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBinary()", color=green, community=0];
d112 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadBytes(int)", span="567-567", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBytes(int)"];
d230 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadBinary()", span="432-432", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBinary()"];
d236 [label="ReadByte()", span="437-437", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBinary()", color=green, community=0];
d82 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadInt32()", span="544-544", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt32()"];
d237 [label="return ReadBytes(dataLength);", span="439-439", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBinary()"];
d160 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadByte()", span="345-345", cluster="Newtonsoft.Json.Bson.BsonReader.ReadByte()"];
d30 [label=_bsonReaderState, span="130-130", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d32 [label="return ReadNormal();", span="133-133", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d36 [label="return ReadReference();", span="137-137", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d42 [label="return ReadCodeWScope();", span="143-143", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d43 [label="throw new JsonReaderException(''Unexpected state: {0}''.FormatWith(CultureInfo.InvariantCulture, _bsonReaderState));", span="145-145", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d50 [label=_bsonReaderState, span="156-156", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d52 [label="SetToken(JsonToken.PropertyName, ''$code'')", span="159-159", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d53 [label="_bsonReaderState = BsonReaderState.CodeWScopeCode", span="160-160", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d56 [label="ReadInt32()", span="164-164", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d57 [label="SetToken(JsonToken.String, ReadLengthString())", span="166-166", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d58 [label="_bsonReaderState = BsonReaderState.CodeWScopeScope", span="167-167", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d61 [label="CurrentState == State.PostValue", span="170-170", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d62 [label="SetToken(JsonToken.PropertyName, ''$scope'')", span="172-172", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d64 [label="SetToken(JsonToken.StartObject)", span="177-177", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d65 [label="_bsonReaderState = BsonReaderState.CodeWScopeScopeObject", span="178-178", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d67 [label="PushContext(newContext)", span="181-181", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d68 [label="newContext.Length = ReadInt32()", span="182-182", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d71 [label="bool result = ReadNormal()", span="187-187", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d72 [label="result && TokenType == JsonToken.EndObject", span="188-188", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d73 [label="_bsonReaderState = BsonReaderState.CodeWScopeScopeEnd", span="189-189", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d76 [label="SetToken(JsonToken.EndObject)", span="193-193", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d77 [label="_bsonReaderState = BsonReaderState.Normal", span="194-194", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d87 [label=CurrentState, span="203-203", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d89 [label="SetToken(JsonToken.PropertyName, ''$ref'')", span="207-207", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d90 [label="_bsonReaderState = BsonReaderState.ReferenceRef", span="208-208", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d93 [label="_bsonReaderState == BsonReaderState.ReferenceRef", span="213-213", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d94 [label="SetToken(JsonToken.String, ReadLengthString())", span="215-215", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d96 [label="_bsonReaderState == BsonReaderState.ReferenceId", span="218-218", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d97 [label="SetToken(JsonToken.Bytes, ReadBytes(12))", span="220-220", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d99 [label="throw new JsonReaderException(''Unexpected state when reading BSON reference: '' + _bsonReaderState);", span="225-225", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d101 [label="_bsonReaderState == BsonReaderState.ReferenceRef", span="230-230", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d102 [label="SetToken(JsonToken.PropertyName, ''$id'')", span="232-232", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d103 [label="_bsonReaderState = BsonReaderState.ReferenceId", span="233-233", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d105 [label="_bsonReaderState == BsonReaderState.ReferenceId", span="236-236", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d106 [label="SetToken(JsonToken.EndObject)", span="238-238", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d107 [label="_bsonReaderState = BsonReaderState.Normal", span="239-239", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d109 [label="throw new JsonReaderException(''Unexpected state when reading BSON reference: '' + _bsonReaderState);", span="244-244", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d110 [label="throw new JsonReaderException(''Unexpected state when reading BSON reference: '' + CurrentState);", span="248-248", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d113 [label=CurrentState, span="254-254", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d115 [label="JsonToken token = (!_rootTypeIsArray) ? JsonToken.StartObject : JsonToken.StartArray", span="258-258", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d116 [label="JTokenType type = (!_rootTypeIsArray) ? JTokenType.Object : JTokenType.Array", span="259-259", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d117 [label="SetToken(token)", span="261-261", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d119 [label="PushContext(newContext)", span="263-263", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d120 [label="newContext.Length = ReadInt32()", span="264-264", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d126 [label="ReadType(_currentElementType)", span="272-272", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d138 [label="ReadType(_currentElementType)", span="289-289", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d143 [label="ReadByte() != 0", span="300-300", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d145 [label="PopContext()", span="303-303", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d146 [label="_currentContext != null", span="304-304", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d147 [label="MovePosition(context.Length)", span="305-305", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d149 [label="SetToken(endToken)", span="308-308", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d163 [label="_stack.RemoveAt(_stack.Count - 1)", span="332-332", cluster="Newtonsoft.Json.Bson.BsonReader.PopContext()"];
d164 [label="_stack.Count == 0", span="333-333", cluster="Newtonsoft.Json.Bson.BsonReader.PopContext()"];
d165 [label="_currentContext = null", span="334-334", cluster="Newtonsoft.Json.Bson.BsonReader.PopContext()"];
d166 [label="_currentContext = _stack[_stack.Count - 1]", span="336-336", cluster="Newtonsoft.Json.Bson.BsonReader.PopContext()"];
d169 [label="_stack.Add(newContext)", span="341-341", cluster="Newtonsoft.Json.Bson.BsonReader.PushContext(Newtonsoft.Json.Bson.BsonReader.ContainerContext)"];
d170 [label="_currentContext = newContext", span="342-342", cluster="Newtonsoft.Json.Bson.BsonReader.PushContext(Newtonsoft.Json.Bson.BsonReader.ContainerContext)"];
d173 [label="MovePosition(1)", span="347-347", cluster="Newtonsoft.Json.Bson.BsonReader.ReadByte()"];
d174 [label="return _reader.ReadByte();", span="348-348", cluster="Newtonsoft.Json.Bson.BsonReader.ReadByte()"];
d179 [label="SetToken(JsonToken.Float, ReadDouble())", span="356-356", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d182 [label="SetToken(JsonToken.String, ReadLengthString())", span="360-360", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d184 [label="SetToken(JsonToken.StartObject)", span="364-364", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d186 [label="PushContext(newContext)", span="367-367", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d187 [label="newContext.Length = ReadInt32()", span="368-368", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d189 [label="SetToken(JsonToken.StartArray)", span="373-373", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d191 [label="PushContext(newContext)", span="376-376", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d192 [label="newContext.Length = ReadInt32()", span="377-377", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d194 [label="SetToken(JsonToken.Bytes, ReadBinary())", span="381-381", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d196 [label="SetToken(JsonToken.Undefined)", span="384-384", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d198 [label="byte[] oid = ReadBytes(12)", span="387-387", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d199 [label="SetToken(JsonToken.Bytes, oid)", span="388-388", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d201 [label="bool b = Convert.ToBoolean(ReadByte())", span="391-391", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d202 [label="SetToken(JsonToken.Boolean, b)", span="392-392", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d204 [label="long ticks = ReadInt64()", span="395-395", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d206 [label="SetToken(JsonToken.Date, dateTime)", span="397-397", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d208 [label="SetToken(JsonToken.Null)", span="400-400", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d210 [label="string expression = ReadString()", span="403-403", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d211 [label="string modifiers = ReadString()", span="404-404", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d213 [label="SetToken(JsonToken.String, regex)", span="407-407", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d215 [label="SetToken(JsonToken.StartObject)", span="410-410", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d216 [label="_bsonReaderState = BsonReaderState.ReferenceStart", span="411-411", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d218 [label="SetToken(JsonToken.String, ReadLengthString())", span="414-414", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d220 [label="SetToken(JsonToken.StartObject)", span="417-417", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d221 [label="_bsonReaderState = BsonReaderState.CodeWScopeStart", span="418-418", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d223 [label="SetToken(JsonToken.Integer, (long)ReadInt32())", span="421-421", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d239 [label="EnsureBuffers()", span="444-444", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d244 [label="byteCount < MaxCharBytesSize && (b = _reader.ReadByte()) > 0", span="453-453", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d245 [label="_byteBuffer[byteCount++] = b", span="455-455", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d247 [label="int length = Encoding.UTF8.GetChars(_byteBuffer, 0, byteCount, _charBuffer, 0)", span="459-459", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d249 [label="MovePosition(totalBytesRead + 1)", span="463-463", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d250 [label="return new string(_charBuffer, 0, length);", span="464-464", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d253 [label="builder.Append(_charBuffer, 0, length)", span="470-470", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d255 [label="MovePosition(totalBytesRead + 1)", span="474-474", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d265 [label="int length = ReadInt32()", span="483-483", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d266 [label="MovePosition(length)", span="485-485", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d267 [label="string s = GetString(length - 1)", span="487-487", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d268 [label="_reader.ReadByte()", span="488-488", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d274 [label="EnsureBuffers()", span="498-498", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d278 [label="int byteCount = _reader.BaseStream.Read(_byteBuffer, 0, count)", span="506-506", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d281 [label="int charCount = Encoding.UTF8.GetChars(_byteBuffer, 0, byteCount, _charBuffer, 0)", span="510-510", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d283 [label="return new string(_charBuffer, 0, charCount);", span="512-512", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d286 [label="builder.Append(_charBuffer, 0, charCount)", span="517-517", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d293 [label="_byteBuffer == null", span="527-527", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d294 [label="_byteBuffer = new byte[MaxCharBytesSize]", span="529-529", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d295 [label="_charBuffer == null", span="531-531", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d297 [label="_charBuffer = new char[charBufferSize]", span="534-534", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d300 [label="MovePosition(8)", span="540-540", cluster="Newtonsoft.Json.Bson.BsonReader.ReadDouble()"];
d301 [label="return _reader.ReadDouble();", span="541-541", cluster="Newtonsoft.Json.Bson.BsonReader.ReadDouble()"];
d304 [label="MovePosition(4)", span="546-546", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt32()"];
d305 [label="return _reader.ReadInt32();", span="547-547", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt32()"];
d308 [label="MovePosition(8)", span="552-552", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt64()"];
d309 [label="return _reader.ReadInt64();", span="553-553", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt64()"];
d312 [label="MovePosition(1)", span="558-558", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType()"];
d313 [label="return (BsonType)_reader.ReadSByte();", span="559-559", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType()"];
d316 [label="_currentContext.Position += count", span="564-564", cluster="Newtonsoft.Json.Bson.BsonReader.MovePosition(int)"];
d318 [label="MovePosition(count)", span="569-569", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBytes(int)"];
d319 [label="return _reader.ReadBytes(count);", span="570-570", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBytes(int)"];
d18 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadElement()", span="98-98", cluster="Newtonsoft.Json.Bson.BsonReader.ReadElement()"];
d17 [label="return elementName;", span="102-102", cluster="Newtonsoft.Json.Bson.BsonReader.ReadElement()"];
d20 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadString()", span="442-442", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d314 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadType()", span="556-556", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType()"];
d21 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()", span="111-111", cluster="Newtonsoft.Json.Bson.BsonReader.ReadAsBytes()"];
d27 [label="Entry Newtonsoft.Json.Bson.BsonReader.Read()", span="126-126", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d151 [label="throw new JsonReaderException(''Read past end of current container context.'');", span="313-313", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d144 [label="throw new JsonReaderException(''Unexpected end of object byte value.'');", span="301-301", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d85 [label="Entry Newtonsoft.Json.Bson.BsonReader.PushContext(Newtonsoft.Json.Bson.BsonReader.ContainerContext)", span="339-339", cluster="Newtonsoft.Json.Bson.BsonReader.PushContext(Newtonsoft.Json.Bson.BsonReader.ContainerContext)"];
d130 [label="State.PostValue", span="277-277", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d132 [label="context == null", span="279-279", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d134 [label="int lengthMinusEnd = context.Length - 1", span="282-282", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d142 [label="context.Position == lengthMinusEnd", span="298-298", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d148 [label="JsonToken endToken = (context.Type == JTokenType.Object) ? JsonToken.EndObject : JsonToken.EndArray", span="307-307", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d141 [label="return true;", span="295-295", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d178 [label="BsonType.Number", span="355-355", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d180 [label="BsonType.String", span="358-358", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d183 [label="BsonType.Object", span="362-362", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d188 [label="BsonType.Array", span="371-371", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d193 [label="BsonType.Binary", span="380-380", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d195 [label="BsonType.Undefined", span="383-383", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d197 [label="BsonType.Oid", span="386-386", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d200 [label="BsonType.Boolean", span="390-390", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d203 [label="BsonType.Date", span="394-394", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d207 [label="BsonType.Null", span="399-399", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d209 [label="BsonType.Regex", span="402-402", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d214 [label="BsonType.Reference", span="409-409", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d217 [label="BsonType.Code", span="413-413", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d219 [label="BsonType.CodeWScope", span="416-416", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d222 [label="BsonType.Integer", span="420-420", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d310 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadInt64()", span="550-550", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt64()"];
d162 [label="Entry Newtonsoft.Json.Bson.BsonReader.MovePosition(int)", span="562-562", cluster="Newtonsoft.Json.Bson.BsonReader.MovePosition(int)"];
d320 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadBytes(int)", span="567-567", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBytes(int)"];
d238 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadBinary()", span="432-432", cluster="Newtonsoft.Json.Bson.BsonReader.ReadBinary()"];
d306 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadInt32()", span="544-544", cluster="Newtonsoft.Json.Bson.BsonReader.ReadInt32()"];
d175 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadByte()", span="345-345", cluster="Newtonsoft.Json.Bson.BsonReader.ReadByte()"];
d31 [label="BsonReaderState.Normal", span="132-132", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d33 [label="BsonReaderState.ReferenceStart", span="134-134", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d37 [label="BsonReaderState.CodeWScopeStart", span="138-138", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d46 [label="Exit Newtonsoft.Json.Bson.BsonReader.Read()", span="126-126", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d47 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadNormal()", span="252-252", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d35 [label="BsonReaderState.ReferenceId", span="136-136", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d48 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadReference()", span="201-201", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d41 [label="BsonReaderState.CodeWScopeScopeEnd", span="142-142", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d49 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()", span="154-154", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d51 [label="BsonReaderState.CodeWScopeStart", span="158-158", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d55 [label="BsonReaderState.CodeWScopeCode", span="162-162", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d60 [label="BsonReaderState.CodeWScopeScope", span="169-169", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d70 [label="BsonReaderState.CodeWScopeScopeObject", span="186-186", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d75 [label="BsonReaderState.CodeWScopeScopeEnd", span="192-192", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d79 [label="throw new ArgumentOutOfRangeException();", span="197-197", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d54 [label="return true;", span="161-161", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d83 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadLengthString()", span="481-481", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d59 [label="return true;", span="168-168", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d63 [label="return true;", span="173-173", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d84 [label="Entry Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)", span="231-231", cluster="Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)"];
d66 [label="ContainerContext newContext = new ContainerContext(JTokenType.Object)", span="180-180", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d69 [label="return true;", span="184-184", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d74 [label="return result;", span="191-191", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d78 [label="return true;", span="195-195", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d88 [label="State.ObjectStart", span="205-205", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d92 [label="State.Property", span="211-211", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d100 [label="State.PostValue", span="228-228", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d91 [label="return true;", span="209-209", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d95 [label="return true;", span="216-216", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d98 [label="return true;", span="221-221", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d111 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadReference()", span="201-201", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d104 [label="return true;", span="234-234", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d108 [label="return true;", span="240-240", cluster="Newtonsoft.Json.Bson.BsonReader.ReadReference()"];
d114 [label="State.Start", span="256-256", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d122 [label="State.Complete", span="267-267", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d125 [label="State.Property", span="270-270", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d128 [label="State.ObjectStart", span="275-275", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d152 [label="State.ConstructorStart", span="315-315", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d153 [label="State.Constructor", span="317-317", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d154 [label="State.Error", span="319-319", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d155 [label="State.Finished", span="321-321", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d156 [label="throw new ArgumentOutOfRangeException();", span="324-324", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d118 [label="ContainerContext newContext = new ContainerContext(type)", span="262-262", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d121 [label="return true;", span="265-265", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d127 [label="return true;", span="273-273", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d139 [label="return true;", span="290-290", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d161 [label="Entry Newtonsoft.Json.Bson.BsonReader.PopContext()", span="330-330", cluster="Newtonsoft.Json.Bson.BsonReader.PopContext()"];
d150 [label="return true;", span="309-309", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d168 [label="Entry System.Collections.Generic.List<T>.RemoveAt(int)", span="0-0", cluster="System.Collections.Generic.List<T>.RemoveAt(int)"];
d167 [label="Exit Newtonsoft.Json.Bson.BsonReader.PopContext()", span="330-330", cluster="Newtonsoft.Json.Bson.BsonReader.PopContext()"];
d172 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
d171 [label="Exit Newtonsoft.Json.Bson.BsonReader.PushContext(Newtonsoft.Json.Bson.BsonReader.ContainerContext)", span="339-339", cluster="Newtonsoft.Json.Bson.BsonReader.PushContext(Newtonsoft.Json.Bson.BsonReader.ContainerContext)"];
d176 [label="Entry System.IO.BinaryReader.ReadByte()", span="0-0", cluster="System.IO.BinaryReader.ReadByte()"];
d229 [label="Entry Newtonsoft.Json.Bson.BsonReader.ReadDouble()", span="538-538", cluster="Newtonsoft.Json.Bson.BsonReader.ReadDouble()"];
d181 [label="BsonType.Symbol", span="359-359", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d185 [label="ContainerContext newContext = new ContainerContext(JTokenType.Object)", span="366-366", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d190 [label="ContainerContext newContext = new ContainerContext(JTokenType.Array)", span="375-375", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d231 [label="Entry System.Convert.ToBoolean(byte)", span="0-0", cluster="System.Convert.ToBoolean(byte)"];
d205 [label="DateTime dateTime = JsonConvert.ConvertJavaScriptTicksToDateTime(ticks)", span="396-396", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d212 [label="string regex = @''/'' + expression + @''/'' + modifiers", span="406-406", cluster="Newtonsoft.Json.Bson.BsonReader.ReadType(Newtonsoft.Json.Bson.BsonType)"];
d240 [label="StringBuilder builder = null", span="446-446", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d259 [label="Entry Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()", span="525-525", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d242 [label="int byteCount = 0", span="451-451", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d243 [label="byte b", span="452-452", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d246 [label="totalBytesRead += byteCount", span="457-457", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d248 [label="byteCount < MaxCharBytesSize && builder == null", span="461-461", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d254 [label="byteCount < MaxCharBytesSize", span="472-472", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d260 [label="Entry System.Text.Encoding.GetChars(byte[], int, int, char[], int)", span="0-0", cluster="System.Text.Encoding.GetChars(byte[], int, int, char[], int)"];
d258 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadString()", span="442-442", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d261 [label="Entry string.String(char[], int, int)", span="0-0", cluster="string.String(char[], int, int)"];
d251 [label="builder == null", span="467-467", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d252 [label="builder = new StringBuilder(MaxCharBytesSize * 2)", span="468-468", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d263 [label="Entry System.Text.StringBuilder.Append(char[], int, int)", span="0-0", cluster="System.Text.StringBuilder.Append(char[], int, int)"];
d256 [label="return builder.ToString();", span="475-475", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d271 [label="Entry Newtonsoft.Json.Bson.BsonReader.GetString(int)", span="493-493", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d269 [label="return s;", span="490-490", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d272 [label="length == 0", span="495-495", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d275 [label="StringBuilder builder = null", span="500-500", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d277 [label="int count = ((length - totalBytesRead) > MaxCharBytesSize) ? MaxCharBytesSize : (length - totalBytesRead)", span="505-505", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d276 [label="int totalBytesRead = 0", span="502-502", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d279 [label="byteCount == 0", span="507-507", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d291 [label="Entry System.IO.Stream.Read(byte[], int, int)", span="0-0", cluster="System.IO.Stream.Read(byte[], int, int)"];
d282 [label="totalBytesRead == 0 && byteCount == length", span="511-511", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d287 [label="totalBytesRead += byteCount", span="518-518", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d290 [label="Exit Newtonsoft.Json.Bson.BsonReader.GetString(int)", span="493-493", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d285 [label="builder = new StringBuilder(length)", span="515-515", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d284 [label="builder == null", span="514-514", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d296 [label="int charBufferSize = Encoding.UTF8.GetMaxCharCount(MaxCharBytesSize)", span="533-533", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d298 [label="Exit Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()", span="525-525", cluster="Newtonsoft.Json.Bson.BsonReader.EnsureBuffers()"];
d302 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadDouble()", span="538-538", cluster="Newtonsoft.Json.Bson.BsonReader.ReadDouble()"];
d303 [label="Entry System.IO.BinaryReader.ReadDouble()", span="0-0", cluster="System.IO.BinaryReader.ReadDouble()"];
d307 [label="Entry System.IO.BinaryReader.ReadInt32()", span="0-0", cluster="System.IO.BinaryReader.ReadInt32()"];
d311 [label="Entry System.IO.BinaryReader.ReadInt64()", span="0-0", cluster="System.IO.BinaryReader.ReadInt64()"];
d315 [label="Entry System.IO.BinaryReader.ReadSByte()", span="0-0", cluster="System.IO.BinaryReader.ReadSByte()"];
d317 [label="Exit Newtonsoft.Json.Bson.BsonReader.MovePosition(int)", span="562-562", cluster="Newtonsoft.Json.Bson.BsonReader.MovePosition(int)"];
d321 [label="Entry System.IO.BinaryReader.ReadBytes(int)", span="0-0", cluster="System.IO.BinaryReader.ReadBytes(int)"];
d45 [label="return false;", span="150-150", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d158 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadNormal()", span="252-252", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d129 [label="State.ArrayStart", span="276-276", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d133 [label="return false;", span="280-280", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d34 [label="BsonReaderState.ReferenceRef", span="135-135", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d38 [label="BsonReaderState.CodeWScopeCode", span="139-139", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d40 [label="BsonReaderState.CodeWScopeScopeObject", span="141-141", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d80 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()", span="154-154", cluster="Newtonsoft.Json.Bson.BsonReader.ReadCodeWScope()"];
d86 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()"];
d270 [label="Exit Newtonsoft.Json.Bson.BsonReader.ReadLengthString()", span="481-481", cluster="Newtonsoft.Json.Bson.BsonReader.ReadLengthString()"];
d0 [label="Entry Newtonsoft.Json.Bson.BsonReader.ContainerContext.ContainerContext(Newtonsoft.Json.Linq.JTokenType)", span="71-71", cluster="Newtonsoft.Json.Bson.BsonReader.ContainerContext.ContainerContext(Newtonsoft.Json.Linq.JTokenType)"];
d123 [label="State.Closed", span="268-268", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d157 [label="return false;", span="327-327", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d233 [label="Entry Newtonsoft.Json.JsonConvert.ConvertJavaScriptTicksToDateTime(long)", span="192-192", cluster="Newtonsoft.Json.JsonConvert.ConvertJavaScriptTicksToDateTime(long)"];
d241 [label="int totalBytesRead = 0", span="448-448", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d257 [label=true, span="478-478", cluster="Newtonsoft.Json.Bson.BsonReader.ReadString()"];
d262 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)"];
d264 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
d288 [label="totalBytesRead < length", span="520-520", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d273 [label="return string.Empty;", span="496-496", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d289 [label="return builder.ToString();", span="522-522", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d280 [label="throw new EndOfStreamException(''Unable to read beyond the end of the stream.'');", span="508-508", cluster="Newtonsoft.Json.Bson.BsonReader.GetString(int)"];
d299 [label="Entry System.Text.Encoding.GetMaxCharCount(int)", span="0-0", cluster="System.Text.Encoding.GetMaxCharCount(int)"];
d44 [label=EndOfStreamException, span="148-148", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d124 [label="return false;", span="269-269", cluster="Newtonsoft.Json.Bson.BsonReader.ReadNormal()"];
d39 [label="BsonReaderState.CodeWScopeScope", span="140-140", cluster="Newtonsoft.Json.Bson.BsonReader.Read()"];
d2 [label="Exit Newtonsoft.Json.Bson.BsonReader.ContainerContext.ContainerContext(Newtonsoft.Json.Linq.JTokenType)", span="71-71", cluster="Newtonsoft.Json.Bson.BsonReader.ContainerContext.ContainerContext(Newtonsoft.Json.Linq.JTokenType)"];
d1 [label="Type = type", span="73-73", cluster="Newtonsoft.Json.Bson.BsonReader.ContainerContext.ContainerContext(Newtonsoft.Json.Linq.JTokenType)"];
d292 [label="Entry System.IO.EndOfStreamException.EndOfStreamException(string)", span="0-0", cluster="System.IO.EndOfStreamException.EndOfStreamException(string)"];
d322 [label="Newtonsoft.Json.Bson.BsonReader.ContainerContext", span=""];
m0_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", span="26-26", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", file="BsonReaderTests.cs"];
m0_1 [label="File file = new File\r\n            {\r\n                Id = Guid.NewGuid(),\r\n                Name = ''ImportantLegalDocuments.docx'',\r\n                Size = 50 * 1024\r\n            }", span="29-34", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", file="BsonReaderTests.cs"];
m0_2 [label="string json = JsonConvert.SerializeObject(file, Formatting.Indented)", span="36-36", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", file="BsonReaderTests.cs"];
m0_3 [label="Console.WriteLine(json)", span="38-38", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", file="BsonReaderTests.cs"];
m0_4 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", span="26-26", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.Example()", file="BsonReaderTests.cs"];
m0_5 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.File.File()", span="12-12", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DataContractAndDataMember.File.File()", file="BsonReaderTests.cs"];
m0_6 [label="Entry System.Guid.NewGuid()", span="0-0", cluster="System.Guid.NewGuid()", file="BsonReaderTests.cs"];
m0_8 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="BsonReaderTests.cs"];
m1_16 [label="Entry Newtonsoft.Json.Tests.LinqToSql.PersonRole.PersonRole()", span="449-449", cluster="Newtonsoft.Json.Tests.LinqToSql.PersonRole.PersonRole()", file="BsonWriterTests.cs"];
m1_15 [label="Entry Newtonsoft.Json.Tests.LinqToSql.Person.Person()", span="136-136", cluster="Newtonsoft.Json.Tests.LinqToSql.Person.Person()", file="BsonWriterTests.cs"];
m1_18 [label="Entry Newtonsoft.Json.Tests.LinqToSql.Department.Department()", span="635-635", cluster="Newtonsoft.Json.Tests.LinqToSql.Department.Department()", file="BsonWriterTests.cs"];
m1_42 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="BsonWriterTests.cs"];
m1_43 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute<T>(object)", span="323-323", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute<T>(object)", file="BsonWriterTests.cs"];
m1_14 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)", file="BsonWriterTests.cs"];
m1_44 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="BsonWriterTests.cs"];
m1_21 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="331-331", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="BsonWriterTests.cs"];
m1_0 [label="Entry Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", span="43-43", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_1 [label="Role role = new Role()", span="45-45", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_2 [label="role.Name = ''Role1''", span="46-46", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_3 [label="role.RoleId = new Guid(''67EA92B7-4BD3-4718-BD75-3C7EDF800B34'')", span="47-47", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_8 [label="person.PersonRoles.Add(new PersonRole\r\n            {\r\n                PersonRoleId = new Guid(''B012DD41-71DF-4839-B8D5-D1333FB886BC''),\r\n                Role = role\r\n            })", span="53-57", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_4 [label="Person person = new Person()", span="49-49", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_5 [label="person.FirstName = ''FirstName!''", span="50-50", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_6 [label="person.LastName = ''LastName!''", span="51-51", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_7 [label="person.PersonId = new Guid(''7AA027AA-C995-4986-908D-999D8063599F'')", span="52-52", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_9 [label="person.Department = new Department\r\n            {\r\n                DepartmentId = new Guid(''08F68BF9-929B-4434-BC47-C9489D22112B''),\r\n                Name = ''Name!''\r\n            }", span="59-63", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_10 [label="string json = JsonConvert.SerializeObject(person, Formatting.Indented, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })", span="65-65", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_11 [label="StringAssert.AreEqual(@''{\r\n  ''''first_name'''': ''''FirstName!'''',\r\n  ''''LastName'''': ''''LastName!'''',\r\n  ''''PersonId'''': ''''7aa027aa-c995-4986-908d-999d8063599f'''',\r\n  ''''DepartmentId'''': ''''08f68bf9-929b-4434-bc47-c9489d22112b'''',\r\n  ''''PersonRoles'''': [\r\n    {\r\n      ''''PersonId'''': ''''7aa027aa-c995-4986-908d-999d8063599f'''',\r\n      ''''RoleId'''': ''''67ea92b7-4bd3-4718-bd75-3c7edf800b34'''',\r\n      ''''PersonRoleId'''': ''''b012dd41-71df-4839-b8d5-d1333fb886bc'''',\r\n      ''''Role'''': {\r\n        ''''Name'''': ''''Role1'''',\r\n        ''''RoleId'''': ''''t5LqZ9NLGEe9dTx+34ALNA==''''\r\n      }\r\n    }\r\n  ],\r\n  ''''Department'''': {\r\n    ''''DepartmentId'''': ''''08f68bf9-929b-4434-bc47-c9489d22112b'''',\r\n    ''''Name'''': ''''!emaN''''\r\n  }\r\n}'', json)", span="67-87", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_12 [label="Exit Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", span="43-43", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="BsonWriterTests.cs"];
m1_22 [label="Entry Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", span="91-91", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_23 [label="string json = @''{\r\n  ''''first_name'''': ''''FirstName!'''',\r\n  ''''LastName'''': ''''LastName!'''',\r\n  ''''PersonId'''': ''''7aa027aa-c995-4986-908d-999d8063599f'''',\r\n  ''''PersonRoles'''': [\r\n    {\r\n      ''''PersonId'''': ''''7aa027aa-c995-4986-908d-999d8063599f'''',\r\n      ''''RoleId'''': ''''67ea92b7-4bd3-4718-bd75-3c7edf800b34'''',\r\n      ''''PersonRoleId'''': ''''b012dd41-71df-4839-b8d5-d1333fb886bc'''',\r\n      ''''Role'''': {\r\n        ''''Name'''': ''''Role1'''',\r\n        ''''RoleId'''': ''''t5LqZ9NLGEe9dTx+34ALNA==''''\r\n      }\r\n    }\r\n  ],\r\n  ''''Department'''': {\r\n    ''''DepartmentId'''': ''''08f68bf9-929b-4434-bc47-c9489d22112b'''',\r\n    ''''Name'''': ''''!emaN''''\r\n  }\r\n}''", span="93-112", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_24 [label="Person person = JsonConvert.DeserializeObject<Person>(json)", span="114-114", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_25 [label="Assert.IsNotNull(person)", span="115-115", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_26 [label="Assert.AreEqual(new Guid(''7AA027AA-C995-4986-908D-999D8063599F''), person.PersonId)", span="117-117", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_27 [label="Assert.AreEqual(''FirstName!'', person.FirstName)", span="118-118", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_28 [label="Assert.AreEqual(''LastName!'', person.LastName)", span="119-119", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_29 [label="Assert.AreEqual(1, person.PersonRoles.Count)", span="120-120", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_30 [label="Assert.AreEqual(person.PersonId, person.PersonRoles[0].PersonId)", span="121-121", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_31 [label="Assert.AreEqual(new Guid(''67EA92B7-4BD3-4718-BD75-3C7EDF800B34''), person.PersonRoles[0].RoleId)", span="122-122", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_32 [label="Assert.IsNotNull(person.PersonRoles[0].Role)", span="123-123", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_33 [label="Assert.AreEqual(1, person.PersonRoles[0].Role.PersonRoles.Count)", span="124-124", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_34 [label="Assert.AreEqual(''Name!'', person.Department.Name)", span="126-126", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_35 [label="TableAttribute tableAttribute = JsonTypeReflector.GetAttribute<TableAttribute>(typeof(Person))", span="128-128", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_36 [label="Assert.AreEqual('''', tableAttribute.Name)", span="129-129", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_37 [label="ColumnAttribute columnAttribute = JsonTypeReflector.GetAttribute<ColumnAttribute>(typeof(Person).GetProperty(''FirstName''))", span="131-131", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_38 [label="Assert.AreEqual(''_FirstName'', columnAttribute.Storage)", span="132-132", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_39 [label="Exit Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", span="91-91", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="BsonWriterTests.cs"];
m1_17 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="BsonWriterTests.cs"];
m1_40 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="739-739", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="BsonWriterTests.cs"];
m1_41 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="BsonWriterTests.cs"];
m1_20 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="606-606", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="BsonWriterTests.cs"];
m1_13 [label="Entry Newtonsoft.Json.Tests.LinqToSql.Role.Role()", span="329-329", cluster="Newtonsoft.Json.Tests.LinqToSql.Role.Role()", file="BsonWriterTests.cs"];
m2_417 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="782-782", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_418 [label="JsonReader reader = new JsonTextReader(new StringReader(@''true''))", span="784-784", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_419 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error reading bytes. Unexpected token: Boolean. Path '', line 1, position 4.'',\r\n        () =>\r\n          {\r\n            reader.ReadAsBytes();\r\n          })", span="786-791", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_420 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="782-782", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_608 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="DataTableConverterTests.cs"];
m2_623 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1125-1125", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_624 [label="string input = @''[\r\n  NaN,\r\n  Infinity,\r\n  -Infinity\r\n]''", span="1127-1131", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_625 [label="StringReader sr = new StringReader(input)", span="1133-1133", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_626 [label="JsonReader jsonReader = new JsonTextReader(sr)", span="1135-1135", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_627 [label="jsonReader.Read()", span="1137-1137", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_628 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="1138-1138", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_629 [label="jsonReader.Read()", span="1140-1140", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_630 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1141-1141", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_631 [label="Assert.AreEqual(jsonReader.Value, double.NaN)", span="1142-1142", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_632 [label="jsonReader.Read()", span="1144-1144", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_633 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1145-1145", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_634 [label="Assert.AreEqual(jsonReader.Value, double.PositiveInfinity)", span="1146-1146", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_635 [label="jsonReader.Read()", span="1148-1148", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_636 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1149-1149", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_637 [label="Assert.AreEqual(jsonReader.Value, double.NegativeInfinity)", span="1150-1150", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_638 [label="jsonReader.Read()", span="1152-1152", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_639 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="1153-1153", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_640 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1125-1125", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="DataTableConverterTests.cs"];
m2_995 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="1707-1707", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_996 [label="string json = @''{''''Offset'''':''''2011-08-01T21:25Z''''}''", span="1709-1709", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_997 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1711-1711", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_998 [label="Assert.IsTrue(reader.Read())", span="1713-1713", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_999 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1714-1714", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1000 [label="Assert.IsTrue(reader.Read())", span="1716-1716", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1001 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1717-1717", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1002 [label="reader.ReadAsDateTimeOffset()", span="1719-1719", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1003 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1720-1720", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1004 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1721-1721", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1005 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2011, 8, 1, 21, 25, 0, DateTimeKind.Utc), TimeSpan.Zero), reader.Value)", span="1722-1722", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1006 [label="Assert.IsTrue(reader.Read())", span="1724-1724", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1007 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1725-1725", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_1008 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="1707-1707", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="DataTableConverterTests.cs"];
m2_22 [label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="298-298", cluster="Newtonsoft.Json.JsonTextReader.Read()", file="DataTableConverterTests.cs"];
m2_993 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="DataTableConverterTests.cs"];
m2_441 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="DataTableConverterTests.cs"];
m2_450 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="835-835", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_451 [label="string newLinesText = StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed + StringUtils.LineFeed + StringUtils.CarriageReturnLineFeed + '' '' + StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed", span="837-837", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_452 [label="string json =\r\n        newLinesText\r\n        + ''{'' + newLinesText\r\n        + ''''' + newLinesText\r\n        + ''name1'' + newLinesText\r\n        + ''''' + newLinesText\r\n        + '':'' + newLinesText\r\n        + ''['' + newLinesText\r\n        + ''new'' + newLinesText\r\n        + ''Date'' + newLinesText\r\n        + ''('' + newLinesText\r\n        + ''1'' + newLinesText\r\n        + '','' + newLinesText\r\n        + ''null'' + newLinesText\r\n        + ''/*'' + newLinesText\r\n        + ''blah comment'' + newLinesText\r\n        + ''*/'' + newLinesText\r\n        + '')'' + newLinesText\r\n        + '','' + newLinesText\r\n        + ''1.1111'' + newLinesText\r\n        + '']'' + newLinesText\r\n        + '','' + newLinesText\r\n        + ''name2'' + newLinesText\r\n        + '':'' + newLinesText\r\n        + ''{'' + newLinesText\r\n        + ''}'' + newLinesText\r\n        + ''}'' + newLinesText", span="839-865", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_454 [label="StringReader sr = new StringReader(newLinesText)", span="868-868", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_462 [label="Assert.AreEqual(newLinesText + ''name1'' + newLinesText, reader.Value)", span="880-880", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_477 [label="Assert.AreEqual(newLinesText + ''blah comment'' + newLinesText, reader.Value)", span="900-900", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_453 [label="int count = 0", span="867-867", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_457 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="874-874", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_456 [label="count++", span="871-871", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_455 [label="sr.ReadLine() != null", span="869-869", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_458 [label="Assert.IsTrue(reader.Read())", span="875-875", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_459 [label="Assert.AreEqual(7, reader.LineNumber)", span="876-876", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_460 [label="Assert.IsTrue(reader.Read())", span="878-878", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_461 [label="Assert.AreEqual(31, reader.LineNumber)", span="879-879", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_463 [label="Assert.IsTrue(reader.Read())", span="882-882", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_464 [label="Assert.AreEqual(37, reader.LineNumber)", span="883-883", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_465 [label="Assert.IsTrue(reader.Read())", span="885-885", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_466 [label="Assert.AreEqual(55, reader.LineNumber)", span="886-886", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_467 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="887-887", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_468 [label="Assert.AreEqual(''Date'', reader.Value)", span="888-888", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_469 [label="Assert.IsTrue(reader.Read())", span="890-890", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_470 [label="Assert.AreEqual(61, reader.LineNumber)", span="891-891", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_471 [label="Assert.AreEqual(1L, reader.Value)", span="892-892", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_472 [label="Assert.IsTrue(reader.Read())", span="894-894", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_473 [label="Assert.AreEqual(73, reader.LineNumber)", span="895-895", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_474 [label="Assert.AreEqual(null, reader.Value)", span="896-896", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_475 [label="Assert.IsTrue(reader.Read())", span="898-898", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_476 [label="Assert.AreEqual(91, reader.LineNumber)", span="899-899", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_478 [label="Assert.IsTrue(reader.Read())", span="902-902", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_479 [label="Assert.AreEqual(97, reader.LineNumber)", span="903-903", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_480 [label="Assert.IsTrue(reader.Read())", span="905-905", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_481 [label="Assert.AreEqual(109, reader.LineNumber)", span="906-906", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_482 [label="Assert.IsTrue(reader.Read())", span="908-908", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_483 [label="Assert.AreEqual(115, reader.LineNumber)", span="909-909", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_484 [label="Assert.IsTrue(reader.Read())", span="911-911", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_485 [label="Assert.AreEqual(133, reader.LineNumber)", span="912-912", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_486 [label="Assert.AreEqual(''name2'', reader.Value)", span="913-913", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_487 [label="Assert.IsTrue(reader.Read())", span="915-915", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_488 [label="Assert.AreEqual(139, reader.LineNumber)", span="916-916", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_489 [label="Assert.IsTrue(reader.Read())", span="918-918", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_490 [label="Assert.AreEqual(145, reader.LineNumber)", span="919-919", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_491 [label="Assert.IsTrue(reader.Read())", span="921-921", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_492 [label="Assert.AreEqual(151, reader.LineNumber)", span="922-922", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_493 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="835-835", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="DataTableConverterTests.cs"];
m2_431 [label="Entry System.Convert.ToBase64String(byte[])", span="0-0", cluster="System.Convert.ToBase64String(byte[])", file="DataTableConverterTests.cs"];
m2_1254 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="2145-2145", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_1255 [label="string json = ''new Date,()''", span="2147-2147", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_1256 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2148-2148", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_1257 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected character while parsing constructor: ,. Path '', line 1, position 8.'',\r\n        () =>\r\n          {\r\n            Assert.IsTrue(reader.Read());\r\n          })", span="2150-2155", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_1258 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="2145-2145", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="DataTableConverterTests.cs"];
m2_1043 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="1780-1780", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1044 [label="string json = @''{''''Name'''':1}''", span="1782-1782", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1045 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1784-1784", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1046 [label="Assert.IsTrue(reader.Read())", span="1786-1786", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1047 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1787-1787", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1048 [label="Assert.IsTrue(reader.Read())", span="1789-1789", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1049 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1790-1790", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1050 [label="reader.ReadAsDecimal()", span="1792-1792", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1051 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1793-1793", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1052 [label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="1794-1794", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1053 [label="Assert.AreEqual(1m, reader.Value)", span="1795-1795", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_1054 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="1780-1780", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="DataTableConverterTests.cs"];
m2_78 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="219-219", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="DataTableConverterTests.cs"];
m2_79 [label="string input = @''{\r\n''''matches'''' : [\r\n{''''t'''':''''C'''', ''''n'''':''''Citigroup Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''662713''''}\r\n,{''''t'''':''''CHL'''', ''''n'''':''''China Mobile Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''660998''''}\r\n,{''''t'''':''''PTR'''', ''''n'''':''''PetroChina Company Limited (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''664536''''}\r\n,{''''t'''':''''RIO'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''671472''''}\r\n,{''''t'''':''''RIOPR'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''3512643''''}\r\n,{''''t'''':''''CSCO'''', ''''n'''':''''Cisco Systems, Inc.'''', ''''e'''':''''NASDAQ'''', ''''id'''':''''99624''''}\r\n,{''''t'''':''''CVX'''', ''''n'''':''''Chevron Corporation'''', ''''e'''':''''NYSE'''', ''''id'''':''''667226''''}\r\n,{''''t'''':''''TM'''', ''''n'''':''''Toyota Motor Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''655880''''}\r\n,{''''t'''':''''JPM'''', ''''n'''':''''JPMorgan Chase \\x26 Co.'''', ''''e'''':''''NYSE'''', ''''id'''':''''665639''''}\r\n,{''''t'''':''''COP'''', ''''n'''':''''ConocoPhillips'''', ''''e'''':''''NYSE'''', ''''id'''':''''1691168''''}\r\n,{''''t'''':''''LFC'''', ''''n'''':''''China Life Insurance Company Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''688679''''}\r\n,{''''t'''':''''NOK'''', ''''n'''':''''Nokia Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''657729''''}\r\n,{''''t'''':''''KO'''', ''''n'''':''''The Coca-Cola Company'''', ''''e'''':''''NYSE'''', ''''id'''':''''6550''''}\r\n,{''''t'''':''''VZ'''', ''''n'''':''''Verizon Communications Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''664887''''}\r\n,{''''t'''':''''AMX'''', ''''n'''':''''America Movil S.A.B de C.V. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''665834''''}],\r\n''''all'''' : false\r\n}\r\n''", span="221-240", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="DataTableConverterTests.cs"];
m2_80 [label="JsonReader jsonReader = new JsonTextReader(new StringReader(input))", span="242-242", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="DataTableConverterTests.cs"];
m2_81 [label="jsonReader.Read()", span="244-244", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="DataTableConverterTests.cs"];
m2_82 [label="Console.WriteLine(jsonReader.Value)", span="246-246", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="DataTableConverterTests.cs"];
m2_83 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="219-219", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="DataTableConverterTests.cs"];
m2_104 [label="Entry System.Text.UTF8Encoding.UTF8Encoding(bool)", span="0-0", cluster="System.Text.UTF8Encoding.UTF8Encoding(bool)", file="DataTableConverterTests.cs"];
m2_1026 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="DataTableConverterTests.cs"];
m2_994 [label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0", cluster="System.TimeSpan.Add(System.TimeSpan)", file="DataTableConverterTests.cs"];
m2_1411 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="2393-2393", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="DataTableConverterTests.cs"];
m2_1412 [label="string json = ''[[]]''", span="2395-2395", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="DataTableConverterTests.cs"];
m2_1413 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))\r\n        {\r\n          MaxDepth = 1\r\n        }", span="2397-2400", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="DataTableConverterTests.cs"];
m2_1414 [label="Assert.IsTrue(reader.Read())", span="2402-2402", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="DataTableConverterTests.cs"];
m2_1415 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''The reader's MaxDepth of 1 has been exceeded. Path '[0]', line 1, position 2.'',\r\n        () =>\r\n          {\r\n            Assert.IsTrue(reader.Read());\r\n          })", span="2404-2409", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="DataTableConverterTests.cs"];
m2_1416 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="2393-2393", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="DataTableConverterTests.cs"];
m2_616 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(decimal)", span="950-950", cluster="Newtonsoft.Json.JsonWriter.WriteValue(decimal)", file="DataTableConverterTests.cs"];
m2_670 [label="Entry System.Convert.ToInt32(char)", span="0-0", cluster="System.Convert.ToInt32(char)", file="DataTableConverterTests.cs"];
m2_886 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="1538-1538", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="DataTableConverterTests.cs"];
m2_887 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1.0]''))", span="1540-1540", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="DataTableConverterTests.cs"];
m2_888 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected token when reading bytes: Float. Path '[0]', line 1, position 4.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsBytes();\r\n        })", span="1542-1547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="DataTableConverterTests.cs"];
m2_889 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="1538-1538", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="DataTableConverterTests.cs"];
m2_757 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1552 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="2602-2602", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1553 [label="ToggleReaderError toggleReaderError = new ToggleReaderError(new StringReader(''{'first':1,'second':2,'third':3}''))", span="2604-2604", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1554 [label="JsonTextReader jsonTextReader = new JsonTextReader(toggleReaderError)", span="2605-2605", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1556 [label="toggleReaderError.Error = true", span="2609-2609", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1559 [label="toggleReaderError.Error = false", span="2618-2618", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1562 [label="toggleReaderError.Error = true", span="2623-2623", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1564 [label="toggleReaderError.Error = false", span="2629-2629", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1567 [label="toggleReaderError.Error = true", span="2634-2634", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1571 [label="toggleReaderError.Error = false", span="2646-2646", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1555 [label="Assert.IsTrue(jsonTextReader.Read())", span="2607-2607", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1557 [label="ExceptionAssert.Throws<Exception>(\r\n        ''Read error'',\r\n        () => jsonTextReader.Read())", span="2611-2613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1558 [label="ExceptionAssert.Throws<Exception>(\r\n        ''Read error'',\r\n        () => jsonTextReader.Read())", span="2614-2616", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1560 [label="Assert.IsTrue(jsonTextReader.Read())", span="2620-2620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1561 [label="Assert.AreEqual(''first'', jsonTextReader.Value)", span="2621-2621", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1563 [label="ExceptionAssert.Throws<Exception>(\r\n        ''Read error'',\r\n        () => jsonTextReader.Read())", span="2625-2627", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1565 [label="Assert.IsTrue(jsonTextReader.Read())", span="2631-2631", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1566 [label="Assert.AreEqual(1L, jsonTextReader.Value)", span="2632-2632", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1568 [label="ExceptionAssert.Throws<Exception>(\r\n        ''Read error'',\r\n        () => jsonTextReader.Read())", span="2636-2638", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1569 [label="ExceptionAssert.Throws<Exception>(\r\n        ''Read error'',\r\n        () => jsonTextReader.Read())", span="2639-2641", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1570 [label="ExceptionAssert.Throws<Exception>(\r\n        ''Read error'',\r\n        () => jsonTextReader.Read())", span="2642-2644", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_1572 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="2602-2602", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="DataTableConverterTests.cs"];
m2_37 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="DataTableConverterTests.cs"];
m2_1408 [label="Entry double.ToString(System.IFormatProvider)", span="0-0", cluster="double.ToString(System.IFormatProvider)", file="DataTableConverterTests.cs"];
m2_410 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="769-769", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="DataTableConverterTests.cs"];
m2_411 [label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\''))", span="771-771", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="DataTableConverterTests.cs"];
m2_412 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unterminated string. Expected delimiter: '. Path '', line 1, position 3.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="773-778", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="DataTableConverterTests.cs"];
m2_413 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="769-769", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="DataTableConverterTests.cs"];
m2_797 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="1386-1386", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_798 [label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1388-1388", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_799 [label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1389-1389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_800 [label="Assert.IsTrue(jsonReader.Read())", span="1391-1391", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_801 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1392-1392", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_802 [label="jsonReader.ReadAsInt32()", span="1394-1394", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_803 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1395-1395", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_804 [label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="1396-1396", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_805 [label="Assert.AreEqual(250, jsonReader.Value)", span="1397-1397", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_806 [label="jsonReader.ReadAsInt32()", span="1399-1399", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_807 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1400-1400", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_808 [label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="1401-1401", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_809 [label="Assert.AreEqual(250, jsonReader.Value)", span="1402-1402", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_810 [label="jsonReader.ReadAsInt32()", span="1404-1404", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_811 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1405-1405", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_812 [label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="1406-1406", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_813 [label="Assert.AreEqual(250, jsonReader.Value)", span="1407-1407", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_814 [label="Assert.IsTrue(jsonReader.Read())", span="1409-1409", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_815 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1410-1410", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_816 [label="Assert.IsFalse(jsonReader.Read())", span="1412-1412", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_817 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="1386-1386", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="DataTableConverterTests.cs"];
m2_1263 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="2159-2159", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1264 [label="string json = ''\x00a0{\x00a0'h\x00a0i\x00a0'\x00a0:\x00a0[\x00a0true\x00a0,\x00a0new\x00a0Date\x00a0(\x00a0)\x00a0]\x00a0/*\x00a0comment\x00a0*/\x00a0}\x00a0''", span="2161-2161", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1265 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="2162-2162", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1266 [label="Assert.IsTrue(reader.Read())", span="2164-2164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1267 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2165-2165", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1268 [label="Assert.IsTrue(reader.Read())", span="2167-2167", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1269 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2168-2168", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1270 [label="Assert.IsTrue(reader.Read())", span="2170-2170", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1271 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2171-2171", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1272 [label="Assert.IsTrue(reader.Read())", span="2173-2173", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1273 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2174-2174", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1274 [label="Assert.IsTrue(reader.Read())", span="2176-2176", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1275 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2177-2177", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1276 [label="Assert.IsTrue(reader.Read())", span="2179-2179", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1277 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2180-2180", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1278 [label="Assert.IsTrue(reader.Read())", span="2182-2182", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1279 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2183-2183", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1280 [label="Assert.IsTrue(reader.Read())", span="2185-2185", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1281 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2186-2186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1282 [label="Assert.IsTrue(reader.Read())", span="2188-2188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1283 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2189-2189", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1284 [label="Assert.IsFalse(reader.Read())", span="2191-2191", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1285 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="2159-2159", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="DataTableConverterTests.cs"];
m2_1573 [label="Entry Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="2686-2686", cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="DataTableConverterTests.cs"];
m2_1610 [label="_inner = inner", span="2688-2688", cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="DataTableConverterTests.cs"];
m2_1611 [label="Exit Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="2686-2686", cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="DataTableConverterTests.cs"];
m2_1142 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="DataTableConverterTests.cs"];
m2_1549 [label="Entry System.DateTime.DateTime(long, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(long, System.DateTimeKind)", file="DataTableConverterTests.cs"];
m2_86 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="252-252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_87 [label="string json = @''{''''DefaultConverter'''':new Date(0, ''''hi''''),''''MemberConverter'''':''''1970-01-01T00:00:00Z''''}''", span="254-254", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_88 [label="JsonReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="256-256", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_89 [label="Assert.IsTrue(reader.Read())", span="258-258", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_90 [label="Assert.IsTrue(reader.Read())", span="259-259", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_91 [label="Assert.IsTrue(reader.Read())", span="260-260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_92 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="261-261", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_93 [label="Assert.AreEqual(''Date'', reader.Value)", span="262-262", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_94 [label="Assert.IsTrue(reader.Read())", span="264-264", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_95 [label="Assert.AreEqual(0L, reader.Value)", span="265-265", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_96 [label="Assert.IsTrue(reader.Read())", span="267-267", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_97 [label="Assert.AreEqual(''hi'', reader.Value)", span="268-268", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_98 [label="Assert.IsTrue(reader.Read())", span="270-270", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_99 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="271-271", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_100 [label="Assert.IsTrue(reader.Read())", span="273-273", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_101 [label="Assert.AreEqual(''MemberConverter'', reader.Value)", span="274-274", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_102 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="252-252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="DataTableConverterTests.cs"];
m2_442 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="821-821", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="DataTableConverterTests.cs"];
m2_443 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{aww''))", span="823-823", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="DataTableConverterTests.cs"];
m2_444 [label="Assert.IsTrue(reader.Read())", span="824-824", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="DataTableConverterTests.cs"];
m2_445 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected end while parsing unquoted property name. Path '', line 1, position 4.'',\r\n        () =>\r\n        {\r\n          reader.Read();\r\n        })", span="826-831", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="DataTableConverterTests.cs"];
m2_446 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="821-821", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="DataTableConverterTests.cs"];
m2_641 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1158-1158", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_642 [label="int length = 20000", span="1160-1160", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_643 [label="string json = @''['''''' + new string(' ', length) + @'''''']''", span="1161-1161", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_644 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1163-1163", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_645 [label="reader.Read()", span="1165-1165", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_646 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1166-1166", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_647 [label="reader.Read()", span="1168-1168", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_648 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1169-1169", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_649 [label="Assert.AreEqual(typeof(string), reader.ValueType)", span="1170-1170", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_650 [label="Assert.AreEqual(20000, reader.Value.ToString().Length)", span="1171-1171", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_651 [label="Assert.IsTrue(reader.Read())", span="1173-1173", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_652 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1174-1174", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_653 [label="Assert.IsFalse(reader.Read())", span="1176-1176", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_654 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1177-1177", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_655 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1158-1158", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="DataTableConverterTests.cs"];
m2_343 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="DataTableConverterTests.cs"];
m2_76 [label="Entry Newtonsoft.Json.JsonTextReader.Close()", span="1489-1489", cluster="Newtonsoft.Json.JsonTextReader.Close()", file="DataTableConverterTests.cs"];
m2_1636 [label="Entry System.Array.Copy(System.Array, int, System.Array, int, int)", span="0-0", cluster="System.Array.Copy(System.Array, int, System.Array, int, int)", file="DataTableConverterTests.cs"];
m2_1635 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)", file="DataTableConverterTests.cs"];
m2_1355 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="2310-2310", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="DataTableConverterTests.cs"];
m2_1356 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{}}''))", span="2312-2312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="DataTableConverterTests.cs"];
m2_1357 [label="Assert.IsTrue(reader.Read())", span="2313-2313", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="DataTableConverterTests.cs"];
m2_1358 [label="Assert.IsTrue(reader.Read())", span="2314-2314", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="DataTableConverterTests.cs"];
m2_1359 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Additional text encountered after finished reading JSON content: }. Path '', line 1, position 2.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="2316-2321", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="DataTableConverterTests.cs"];
m2_1360 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="2310-2310", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="DataTableConverterTests.cs"];
m2_25 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="134-134", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_26 [label="string json = @''{ ''''MATHEMATICAL ITALIC CAPITAL ALPHA'''': ''''\uD835\uDEE2'''' }''", span="136-136", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_27 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="138-138", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_28 [label="Assert.IsTrue(reader.Read())", span="140-140", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_29 [label="Assert.IsTrue(reader.Read())", span="141-141", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_30 [label="Assert.IsTrue(reader.Read())", span="143-143", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_31 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="144-144", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_32 [label="string s = reader.Value.ToString()", span="146-146", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_33 [label="Assert.AreEqual(2, s.Length)", span="147-147", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_34 [label="StringInfo stringInfo = new StringInfo(s)", span="149-149", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_35 [label="Assert.AreEqual(1, stringInfo.LengthInTextElements)", span="150-150", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_36 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="134-134", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="DataTableConverterTests.cs"];
m2_776 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="1356-1356", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_777 [label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1358-1358", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_778 [label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1359-1359", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_779 [label="Assert.IsTrue(jsonReader.Read())", span="1361-1361", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_780 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1362-1362", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_781 [label="jsonReader.Read()", span="1364-1364", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_782 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1365-1365", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_783 [label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="1366-1366", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_784 [label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="1367-1367", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_785 [label="jsonReader.Read()", span="1369-1369", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_786 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1370-1370", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_787 [label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="1371-1371", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_788 [label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="1372-1372", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_789 [label="jsonReader.Read()", span="1374-1374", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_790 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1375-1375", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_791 [label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="1376-1376", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_792 [label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="1377-1377", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_793 [label="Assert.IsTrue(jsonReader.Read())", span="1379-1379", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_794 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1380-1380", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_795 [label="Assert.IsFalse(jsonReader.Read())", span="1382-1382", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_796 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="1356-1356", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="DataTableConverterTests.cs"];
m2_755 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsBytes()", span="316-316", cluster="Newtonsoft.Json.JsonTextReader.ReadAsBytes()", file="DataTableConverterTests.cs"];
m2_827 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="1431-1431", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="DataTableConverterTests.cs"];
m2_828 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1433-1433", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="DataTableConverterTests.cs"];
m2_829 [label="Assert.IsNull(reader.ReadAsDecimal())", span="1435-1435", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="DataTableConverterTests.cs"];
m2_830 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1436-1436", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="DataTableConverterTests.cs"];
m2_831 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="1431-1431", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="DataTableConverterTests.cs"];
m2_386 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="716-716", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_387 [label="string json = @''\r\n{\r\n  ''''description'''': ''''A person'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", span="718-731", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_388 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="733-733", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_389 [label="reader.SetCharBuffer(new char[129])", span="734-734", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_392 [label="Assert.IsTrue(reader.Read())", span="738-738", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_394 [label="Assert.IsTrue(reader.Read())", span="741-741", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_395 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="742-742", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_396 [label="Assert.AreEqual(''type'', reader.Value)", span="743-743", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_390 [label="int i = 0", span="736-736", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_391 [label="i < 14", span="736-736", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_393 [label="i++", span="736-736", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_397 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="716-716", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="DataTableConverterTests.cs"];
m2_671 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="1202-1202", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_672 [label="string json =\r\n        @''[0.0,0.0,0.1,1.0,1.000001,1E-06,4.94065645841247E-324,Infinity,-Infinity,NaN,1.7976931348623157E+308,-1.7976931348623157E+308,Infinity,-Infinity,NaN,0e-10,0.25e-5,0.3e10]''", span="1204-1205", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_673 [label="JsonReader jsonReader = new JsonTextReader(new StringReader(json))", span="1207-1207", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_674 [label="jsonReader.Read()", span="1209-1209", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_675 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1210-1210", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_676 [label="jsonReader.Read()", span="1212-1212", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_677 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1213-1213", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_678 [label="Assert.AreEqual(0.0, jsonReader.Value)", span="1214-1214", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_679 [label="jsonReader.Read()", span="1216-1216", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_680 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1217-1217", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_681 [label="Assert.AreEqual(0.0, jsonReader.Value)", span="1218-1218", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_682 [label="jsonReader.Read()", span="1220-1220", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_683 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1221-1221", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_684 [label="Assert.AreEqual(0.1, jsonReader.Value)", span="1222-1222", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_685 [label="jsonReader.Read()", span="1224-1224", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_686 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1225-1225", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_687 [label="Assert.AreEqual(1.0, jsonReader.Value)", span="1226-1226", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_688 [label="jsonReader.Read()", span="1228-1228", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_689 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1229-1229", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_690 [label="Assert.AreEqual(1.000001, jsonReader.Value)", span="1230-1230", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_691 [label="jsonReader.Read()", span="1232-1232", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_692 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1233-1233", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_693 [label="Assert.AreEqual(1E-06, jsonReader.Value)", span="1234-1234", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_694 [label="jsonReader.Read()", span="1236-1236", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_695 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1237-1237", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_696 [label="Assert.AreEqual(4.94065645841247E-324, jsonReader.Value)", span="1238-1238", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_697 [label="jsonReader.Read()", span="1240-1240", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_698 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1241-1241", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_699 [label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="1242-1242", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_700 [label="jsonReader.Read()", span="1244-1244", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_701 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1245-1245", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_702 [label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="1246-1246", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_703 [label="jsonReader.Read()", span="1248-1248", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_704 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1249-1249", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_705 [label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="1250-1250", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_706 [label="jsonReader.Read()", span="1252-1252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_707 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1253-1253", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_708 [label="Assert.AreEqual(double.MaxValue, jsonReader.Value)", span="1254-1254", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_709 [label="jsonReader.Read()", span="1256-1256", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_710 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1257-1257", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_711 [label="Assert.AreEqual(double.MinValue, jsonReader.Value)", span="1258-1258", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_712 [label="jsonReader.Read()", span="1260-1260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_713 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1261-1261", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_714 [label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="1262-1262", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_715 [label="jsonReader.Read()", span="1264-1264", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_716 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1265-1265", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_717 [label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="1266-1266", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_718 [label="jsonReader.Read()", span="1268-1268", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_719 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1269-1269", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_720 [label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="1270-1270", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_721 [label="jsonReader.Read()", span="1272-1272", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_722 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1273-1273", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_723 [label="Assert.AreEqual(0d, jsonReader.Value)", span="1274-1274", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_724 [label="jsonReader.Read()", span="1276-1276", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_725 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1277-1277", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_726 [label="Assert.AreEqual(0.0000025d, jsonReader.Value)", span="1278-1278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_727 [label="jsonReader.Read()", span="1280-1280", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_728 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1281-1281", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_729 [label="Assert.AreEqual(3000000000d, jsonReader.Value)", span="1282-1282", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_730 [label="jsonReader.Read()", span="1284-1284", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_731 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1285-1285", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_732 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="1202-1202", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="DataTableConverterTests.cs"];
m2_1027 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="1754-1754", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1028 [label="string json = @''{''''Offset'''':''''30/1/2011''''}''", span="1756-1756", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1029 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1758-1758", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1030 [label="reader.Culture = new CultureInfo(''en-NZ'')", span="1759-1759", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1031 [label="Assert.IsTrue(reader.Read())", span="1761-1761", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1032 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1762-1762", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1033 [label="Assert.IsTrue(reader.Read())", span="1764-1764", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1034 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1765-1765", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1035 [label="reader.ReadAsDateTimeOffset()", span="1767-1767", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1036 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1768-1768", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1037 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1769-1769", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1038 [label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="1771-1771", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1040 [label="Assert.IsTrue(reader.Read())", span="1774-1774", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1041 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1775-1775", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1039 [label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="1772-1772", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1042 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="1754-1754", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="DataTableConverterTests.cs"];
m2_1617 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="DataTableConverterTests.cs"];
m2_1192 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="2042-2042", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_1193 [label="string json = ''[true ''", span="2044-2044", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_1194 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2045-2045", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_1195 [label="Assert.IsTrue(reader.Read())", span="2047-2047", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_1196 [label="Assert.IsTrue(reader.Read())", span="2048-2048", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_1197 [label="Assert.IsFalse(reader.Read())", span="2049-2049", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_1198 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="2042-2042", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="DataTableConverterTests.cs"];
m2_565 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="1030-1030", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="DataTableConverterTests.cs"];
m2_403 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", span="756-756", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="DataTableConverterTests.cs"];
m2_404 [label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\u123''))", span="758-758", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="DataTableConverterTests.cs"];
m2_405 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected end while parsing unicode character. Path '', line 1, position 4.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="760-765", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="DataTableConverterTests.cs"];
m2_406 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", span="756-756", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="DataTableConverterTests.cs"];
m2_1619 [label="Entry Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", span="2706-2706", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="DataTableConverterTests.cs"];
m2_1620 [label="this.bytes = content", span="2708-2708", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="DataTableConverterTests.cs"];
m2_1622 [label="this.bytesPerRead = bytesPerRead", span="2710-2710", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="DataTableConverterTests.cs"];
m2_1621 [label="this.totalBytesRead = 0", span="2709-2709", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="DataTableConverterTests.cs"];
m2_1623 [label="Exit Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", span="2706-2706", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="DataTableConverterTests.cs"];
m2_344 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", span="635-635", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_345 [label="string json = ''\0{\0'\0h\0i\0'\0:\0[\01\0,\0'\0'\0\0,\0null\0]\0,\0do\0:true\0}\0\0/*\0sd\0f\0*/\0/*\0sd\0f\0*/ \0''", span="637-637", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_346 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="638-638", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_347 [label="Assert.IsTrue(reader.Read())", span="640-640", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_348 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="641-641", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_349 [label="Assert.IsTrue(reader.Read())", span="643-643", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_350 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="644-644", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_351 [label="Assert.IsTrue(reader.Read())", span="646-646", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_352 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="647-647", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_353 [label="Assert.IsTrue(reader.Read())", span="649-649", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_354 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="650-650", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_355 [label="Assert.IsTrue(reader.Read())", span="652-652", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_356 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="653-653", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_357 [label="Assert.IsTrue(reader.Read())", span="655-655", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_358 [label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="656-656", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_359 [label="Assert.IsTrue(reader.Read())", span="658-658", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_360 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="659-659", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_361 [label="Assert.IsTrue(reader.Read())", span="661-661", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_362 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="662-662", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_363 [label="Assert.IsTrue(reader.Read())", span="664-664", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_364 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="665-665", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_365 [label="Assert.IsTrue(reader.Read())", span="667-667", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_366 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="668-668", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_367 [label="Assert.IsTrue(reader.Read())", span="670-670", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_368 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="671-671", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_369 [label="Assert.AreEqual(''\0sd\0f\0'', reader.Value)", span="672-672", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_370 [label="Assert.IsTrue(reader.Read())", span="674-674", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_371 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="675-675", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_372 [label="Assert.AreEqual(''\0sd\0f\0'', reader.Value)", span="676-676", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_373 [label="Assert.IsFalse(reader.Read())", span="678-678", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_374 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", span="635-635", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="DataTableConverterTests.cs"];
m2_566 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", span="1030-1030", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="DataTableConverterTests.cs"];
m2_567 [label="string json = @''[\r\n  true,\r\n  {\r\n    ''''integer'''': 99,\r\n    ''''string'''': ''''how now brown cow?'''',\r\n    ''''array'''': [\r\n      0,\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      {\r\n        ''''decimal'''': 990.00990099\r\n      },\r\n      5\r\n    ]\r\n  },\r\n  ''''This is a string.'''',\r\n  null,\r\n  null\r\n]''", span="1032-1052", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="DataTableConverterTests.cs"];
m2_568 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1054-1054", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="DataTableConverterTests.cs"];
m2_569 [label="reader.Read()", span="1055-1055", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="DataTableConverterTests.cs"];
m2_570 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", span="1030-1030", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="DataTableConverterTests.cs"];
m2_609 [label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder)", span="0-0", cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder)", file="DataTableConverterTests.cs"];
m2_1215 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", span="2081-2081", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1216 [label="string json = ''{hi:1, ''", span="2083-2083", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1217 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2084-2084", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1218 [label="Assert.IsTrue(reader.Read())", span="2086-2086", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1219 [label="Assert.IsTrue(reader.Read())", span="2087-2087", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1220 [label="Assert.IsTrue(reader.Read())", span="2088-2088", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1221 [label="Assert.IsFalse(reader.Read())", span="2089-2089", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1222 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", span="2081-2081", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="DataTableConverterTests.cs"];
m2_297 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", span="574-574", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="DataTableConverterTests.cs"];
m2_298 [label="ExceptionAssert.Throws<ArgumentNullException>(\r\n        @''Value cannot be null.\r\nParameter name: reader'',\r\n        () =>\r\n          {\r\n            new JsonTextReader(null);\r\n          })", span="576-582", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="DataTableConverterTests.cs"];
m2_299 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", span="574-574", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="DataTableConverterTests.cs"];
m2_435 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", span="811-811", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_436 [label="JsonReader reader = new JsonTextReader(new StringReader(@''[  ''))", span="813-813", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_437 [label="Assert.IsTrue(reader.Read())", span="814-814", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_438 [label="Assert.IsNull(reader.ReadAsBytes())", span="816-816", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_439 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="817-817", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_440 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", span="811-811", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_134 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", span="334-334", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="DataTableConverterTests.cs"];
m2_135 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]   \r\n\r\n''", span="336-342", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="DataTableConverterTests.cs"];
m2_136 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="344-344", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="DataTableConverterTests.cs"];
m2_137 [label="reader.Read()", span="345-345", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="DataTableConverterTests.cs"];
m2_138 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", span="334-334", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="DataTableConverterTests.cs"];
m2_494 [label="Entry System.IO.StringReader.ReadLine()", span="0-0", cluster="System.IO.StringReader.ReadLine()", file="DataTableConverterTests.cs"];
m2_1095 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", span="1872-1872", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="DataTableConverterTests.cs"];
m2_1096 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''/sdf''))", span="1874-1874", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="DataTableConverterTests.cs"];
m2_1097 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error parsing comment. Expected: *, got s. Path '', line 1, position 1.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="1876-1881", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="DataTableConverterTests.cs"];
m2_1098 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", span="1872-1872", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="DataTableConverterTests.cs"];
m2_147 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", span="368-368", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_148 [label="string input = @''{\r\n  CPU: 'Intel',\r\n  Drives: [\r\n    'DVD read/writer',\r\n    ''''500 gigabyte hard drive''''\r\n  ]\r\n}''", span="370-376", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_149 [label="StringReader sr = new StringReader(input)", span="378-378", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_150 [label="JsonTextReader jsonReader = new JsonTextReader(sr)", span="380-380", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_151 [label="jsonReader.SetCharBuffer(new char[5])", span="382-382", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_152 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.None)", span="384-384", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_153 [label="Assert.AreEqual(0, jsonReader.LineNumber)", span="385-385", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_154 [label="Assert.AreEqual(0, jsonReader.LinePosition)", span="386-386", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_155 [label="jsonReader.Read()", span="388-388", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_156 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartObject)", span="389-389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_157 [label="Assert.AreEqual(1, jsonReader.LineNumber)", span="390-390", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_158 [label="Assert.AreEqual(1, jsonReader.LinePosition)", span="391-391", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_159 [label="jsonReader.Read()", span="393-393", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_160 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="394-394", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_161 [label="Assert.AreEqual(jsonReader.Value, ''CPU'')", span="395-395", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_162 [label="Assert.AreEqual(2, jsonReader.LineNumber)", span="396-396", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_163 [label="Assert.AreEqual(7, jsonReader.LinePosition)", span="397-397", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_164 [label="jsonReader.Read()", span="399-399", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_165 [label="Assert.AreEqual(JsonToken.String, jsonReader.TokenType)", span="400-400", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_166 [label="Assert.AreEqual(''Intel'', jsonReader.Value)", span="401-401", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_167 [label="Assert.AreEqual(2, jsonReader.LineNumber)", span="402-402", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_168 [label="Assert.AreEqual(15, jsonReader.LinePosition)", span="403-403", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_169 [label="jsonReader.Read()", span="405-405", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_170 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="406-406", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_171 [label="Assert.AreEqual(jsonReader.Value, ''Drives'')", span="407-407", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_172 [label="Assert.AreEqual(3, jsonReader.LineNumber)", span="408-408", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_173 [label="Assert.AreEqual(10, jsonReader.LinePosition)", span="409-409", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_174 [label="jsonReader.Read()", span="411-411", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_175 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="412-412", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_176 [label="Assert.AreEqual(3, jsonReader.LineNumber)", span="413-413", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_177 [label="Assert.AreEqual(12, jsonReader.LinePosition)", span="414-414", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_178 [label="jsonReader.Read()", span="416-416", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_179 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="417-417", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_180 [label="Assert.AreEqual(jsonReader.Value, ''DVD read/writer'')", span="418-418", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_181 [label="Assert.AreEqual(jsonReader.QuoteChar, '\'')", span="419-419", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_182 [label="Assert.AreEqual(4, jsonReader.LineNumber)", span="420-420", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_183 [label="Assert.AreEqual(22, jsonReader.LinePosition)", span="421-421", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_184 [label="jsonReader.Read()", span="423-423", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_185 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="424-424", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_186 [label="Assert.AreEqual(jsonReader.Value, ''500 gigabyte hard drive'')", span="425-425", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_187 [label="Assert.AreEqual(jsonReader.QuoteChar, '''')", span="426-426", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_188 [label="Assert.AreEqual(5, jsonReader.LineNumber)", span="427-427", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_189 [label="Assert.AreEqual(30, jsonReader.LinePosition)", span="428-428", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_190 [label="jsonReader.Read()", span="430-430", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_191 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="431-431", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_192 [label="Assert.AreEqual(6, jsonReader.LineNumber)", span="432-432", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_193 [label="Assert.AreEqual(4, jsonReader.LinePosition)", span="433-433", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_194 [label="jsonReader.Read()", span="435-435", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_195 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndObject)", span="436-436", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_196 [label="Assert.AreEqual(7, jsonReader.LineNumber)", span="437-437", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_197 [label="Assert.AreEqual(2, jsonReader.LinePosition)", span="438-438", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_198 [label="Assert.IsFalse(jsonReader.Read())", span="440-440", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_199 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", span="368-368", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="DataTableConverterTests.cs"];
m2_105 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", span="278-278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="DataTableConverterTests.cs"];
m2_106 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n],''", span="280-284", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="DataTableConverterTests.cs"];
m2_107 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="286-286", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="DataTableConverterTests.cs"];
m2_108 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Additional text encountered after finished reading JSON content: ,. Path '', line 5, position 2.'',\r\n        () =>\r\n          {\r\n            while (reader.Read())\r\n            {\r\n            }\r\n          })", span="288-295", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="DataTableConverterTests.cs"];
m2_109 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", span="278-278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="DataTableConverterTests.cs"];
m2_850 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset()", span="362-362", cluster="Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_1088 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", span="1859-1859", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="DataTableConverterTests.cs"];
m2_1089 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''/* sdf''))", span="1861-1861", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="DataTableConverterTests.cs"];
m2_1090 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected end while parsing comment. Path '', line 1, position 6.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="1863-1868", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="DataTableConverterTests.cs"];
m2_1091 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", span="1859-1859", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="DataTableConverterTests.cs"];
m2_1116 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", span="1907-1907", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1117 [label="string json = @''{''''decimal'''':''''9,99''''}''", span="1909-1909", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1118 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1911-1911", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1119 [label="reader.Culture = new CultureInfo(''fr-FR'')", span="1912-1912", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1120 [label="Assert.IsTrue(reader.Read())", span="1914-1914", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1121 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1915-1915", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1122 [label="Assert.IsTrue(reader.Read())", span="1917-1917", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1123 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1918-1918", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1124 [label="decimal? d = reader.ReadAsDecimal()", span="1920-1920", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1125 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1921-1921", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1126 [label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="1922-1922", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1128 [label="Assert.IsTrue(reader.Read())", span="1925-1925", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1129 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1926-1926", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1127 [label="Assert.AreEqual(9.99m, d)", span="1923-1923", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_1130 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", span="1907-1907", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="DataTableConverterTests.cs"];
m2_77 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="DataTableConverterTests.cs"];
m2_832 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDecimal()", span="325-325", cluster="Newtonsoft.Json.JsonTextReader.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1131 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", span="1930-1930", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1132 [label="string json = @''[\r\n  {\r\n    ''''Name'''': ''''Jim'''',\r\n    ''''BirthDate'''': ''''\/Date(978048000000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978048000000)\/''''\r\n  },\r\n  {\r\n    ''''Name'''': ''''Jim'''',\r\n    ''''BirthDate'''': ''''\/Date(978048000000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978048000000)\/''''\r\n  }\r\n]''", span="1932-1943", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1133 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1945-1945", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1134 [label="reader.SetCharBuffer(new char[5])", span="1946-1946", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1137 [label="reader.Read()", span="1949-1949", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1139 [label="Assert.IsTrue(reader.Read())", span="1952-1952", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1140 [label="Assert.AreEqual(new DateTime(631136448000000000), reader.Value)", span="1953-1953", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1135 [label="int i = 0", span="1947-1947", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1136 [label="i < 13", span="1947-1947", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1138 [label="i++", span="1947-1947", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1141 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", span="1930-1930", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="DataTableConverterTests.cs"];
m2_1420 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", span="2413-2413", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1421 [label="string json = ''[[[[]]],[[]]]''", span="2415-2415", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1422 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))\r\n      {\r\n        MaxDepth = 1\r\n      }", span="2417-2420", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1423 [label="Assert.IsTrue(reader.Read())", span="2422-2422", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1424 [label="Assert.AreEqual(0, reader.Depth)", span="2423-2423", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1425 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''The reader's MaxDepth of 1 has been exceeded. Path '[0]', line 1, position 2.'',\r\n        () =>\r\n        {\r\n          Assert.IsTrue(reader.Read());\r\n        })", span="2425-2430", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1426 [label="Assert.AreEqual(1, reader.Depth)", span="2431-2431", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1427 [label="Assert.IsTrue(reader.Read())", span="2433-2433", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1428 [label="Assert.AreEqual(2, reader.Depth)", span="2434-2434", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1429 [label="Assert.IsTrue(reader.Read())", span="2436-2436", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1430 [label="Assert.AreEqual(3, reader.Depth)", span="2437-2437", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1431 [label="Assert.IsTrue(reader.Read())", span="2439-2439", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1432 [label="Assert.AreEqual(3, reader.Depth)", span="2440-2440", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1433 [label="Assert.IsTrue(reader.Read())", span="2442-2442", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1434 [label="Assert.AreEqual(2, reader.Depth)", span="2443-2443", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1435 [label="Assert.IsTrue(reader.Read())", span="2445-2445", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1436 [label="Assert.AreEqual(1, reader.Depth)", span="2446-2446", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1437 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''The reader's MaxDepth of 1 has been exceeded. Path '[1]', line 1, position 9.'',\r\n        () =>\r\n        {\r\n          Assert.IsTrue(reader.Read());\r\n        })", span="2448-2453", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1438 [label="Assert.AreEqual(1, reader.Depth)", span="2454-2454", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1439 [label="Assert.IsTrue(reader.Read())", span="2456-2456", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1440 [label="Assert.AreEqual(2, reader.Depth)", span="2457-2457", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1441 [label="Assert.IsTrue(reader.Read())", span="2459-2459", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1442 [label="Assert.AreEqual(2, reader.Depth)", span="2460-2460", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1443 [label="Assert.IsTrue(reader.Read())", span="2462-2462", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1444 [label="Assert.AreEqual(1, reader.Depth)", span="2463-2463", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1445 [label="Assert.IsTrue(reader.Read())", span="2465-2465", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1446 [label="Assert.AreEqual(0, reader.Depth)", span="2466-2466", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1447 [label="Assert.IsFalse(reader.Read())", span="2468-2468", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_1448 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", span="2413-2413", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="DataTableConverterTests.cs"];
m2_865 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", span="1500-1500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="DataTableConverterTests.cs"];
m2_866 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1502-1502", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="DataTableConverterTests.cs"];
m2_867 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error reading date. Unexpected token: StartConstructor. Path '', line 1, position 9.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsDateTimeOffset();\r\n        })", span="1504-1509", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="DataTableConverterTests.cs"];
m2_868 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", span="1500-1500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="DataTableConverterTests.cs"];
m2_53 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", span="188-188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_54 [label="MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(@'''''''' + input + @''''''''))", span="190-190", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_55 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(ms))", span="192-192", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_56 [label="reader.Read()", span="193-193", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_57 [label="string s = (string)reader.Value", span="195-195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_58 [label="return s;", span="197-197", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_59 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", span="188-188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="DataTableConverterTests.cs"];
m2_1102 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", span="1885-1885", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1103 [label="string json = @''{''''decimal'''':-7.92281625142643E+28}''", span="1887-1887", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1104 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1889-1889", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1105 [label="Assert.IsTrue(reader.Read())", span="1891-1891", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1106 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1892-1892", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1107 [label="Assert.IsTrue(reader.Read())", span="1894-1894", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1108 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1895-1895", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1109 [label="decimal? d = reader.ReadAsDecimal()", span="1897-1897", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1110 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1898-1898", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1111 [label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="1899-1899", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1113 [label="Assert.IsTrue(reader.Read())", span="1902-1902", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1114 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1903-1903", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1112 [label="Assert.AreEqual(-79228162514264300000000000000m, d)", span="1900-1900", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_1115 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", span="1885-1885", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="DataTableConverterTests.cs"];
m2_571 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", span="1062-1062", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_572 [label="StringBuilder sb = new StringBuilder()", span="1064-1064", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_573 [label="StringWriter sw = new StringWriter(sb)", span="1065-1065", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_599 [label="string json = sb.ToString()", span="1104-1104", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_574 [label="JsonWriter jsonWriter = new JsonTextWriter(sw)\r\n        {\r\n          Formatting = Formatting.Indented\r\n        }", span="1067-1070", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_575 [label="jsonWriter.WriteStartArray()", span="1072-1072", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_576 [label="jsonWriter.WriteValue(true)", span="1073-1073", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_577 [label="jsonWriter.WriteStartObject()", span="1075-1075", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_578 [label="jsonWriter.WritePropertyName(''integer'')", span="1076-1076", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_579 [label="jsonWriter.WriteValue(99)", span="1077-1077", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_580 [label="jsonWriter.WritePropertyName(''string'')", span="1078-1078", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_581 [label="jsonWriter.WriteValue(''how now brown cow?'')", span="1079-1079", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_582 [label="jsonWriter.WritePropertyName(''array'')", span="1080-1080", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_583 [label="jsonWriter.WriteStartArray()", span="1082-1082", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_586 [label="jsonWriter.WriteValue(i)", span="1085-1085", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_588 [label="jsonWriter.WriteStartObject()", span="1088-1088", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_589 [label="jsonWriter.WritePropertyName(''decimal'')", span="1089-1089", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_590 [label="jsonWriter.WriteValue(990.00990099m)", span="1090-1090", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_591 [label="jsonWriter.WriteEndObject()", span="1091-1091", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_592 [label="jsonWriter.WriteValue(5)", span="1093-1093", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_593 [label="jsonWriter.WriteEndArray()", span="1094-1094", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_594 [label="jsonWriter.WriteEndObject()", span="1096-1096", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_595 [label="jsonWriter.WriteValue(''This is a string.'')", span="1098-1098", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_596 [label="jsonWriter.WriteNull()", span="1099-1099", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_597 [label="jsonWriter.WriteNull()", span="1100-1100", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_598 [label="jsonWriter.WriteEndArray()", span="1101-1101", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_584 [label="int i = 0", span="1083-1083", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_585 [label="i < 5", span="1083-1083", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_587 [label="i++", span="1083-1083", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_600 [label="JsonSerializer serializer = new JsonSerializer()", span="1106-1106", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_601 [label="object jsonObject = serializer.Deserialize(new JsonTextReader(new StringReader(json)))", span="1108-1108", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_606 [label="Assert.AreEqual(json, sb.ToString())", span="1121-1121", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_605 [label="serializer.Serialize(jsonWriter, jsonObject)", span="1118-1118", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_602 [label="sb = new StringBuilder()", span="1110-1110", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_603 [label="sw = new StringWriter(sb)", span="1111-1111", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_604 [label="JsonWriter jsonWriter = new JsonTextWriter(sw)\r\n        {\r\n          Formatting = Formatting.Indented\r\n        }", span="1113-1116", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_607 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", span="1062-1062", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="DataTableConverterTests.cs"];
m2_1239 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", span="2119-2119", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="DataTableConverterTests.cs"];
m2_1240 [label="JsonTextReader reader = new JsonTextReader(new StringReader(''true/''))", span="2121-2121", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="DataTableConverterTests.cs"];
m2_1241 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error parsing boolean value. Path '', line 1, position 4.'',\r\n        () =>\r\n        {\r\n          reader.Read();\r\n        })", span="2123-2128", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="DataTableConverterTests.cs"];
m2_1242 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", span="2119-2119", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="DataTableConverterTests.cs"];
m2_75 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="DataTableConverterTests.cs"];
m2_1618 [label="Entry System.IO.TextReader.Read(char[], int, int)", span="0-0", cluster="System.IO.TextReader.Read(char[], int, int)", file="DataTableConverterTests.cs"];
m2_1455 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", span="2472-2472", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1456 [label="string json = ''[false, true, true, false, 'test!', 1.11, 0e-10, 0E-10, 0.25e-5, 0.3e10, 6.0221418e23, 'Purple\\r \\n monkey\\'s:\\tdishwasher']''", span="2474-2474", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1457 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="2476-2476", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1458 [label="Assert.IsTrue(reader.Read())", span="2478-2478", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1459 [label="Assert.IsTrue(reader.Read())", span="2480-2480", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1460 [label="Assert.AreEqual(false, reader.Value)", span="2481-2481", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1461 [label="Assert.IsTrue(reader.Read())", span="2483-2483", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1462 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2484-2484", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1463 [label="Assert.AreEqual(true, reader.Value)", span="2485-2485", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1464 [label="Assert.IsTrue(reader.Read())", span="2487-2487", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1465 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2488-2488", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1466 [label="Assert.AreEqual(true, reader.Value)", span="2489-2489", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1467 [label="Assert.IsTrue(reader.Read())", span="2491-2491", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1468 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2492-2492", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1469 [label="Assert.AreEqual(false, reader.Value)", span="2493-2493", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1470 [label="Assert.IsTrue(reader.Read())", span="2495-2495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1471 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="2496-2496", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1472 [label="Assert.AreEqual(''test!'', reader.Value)", span="2497-2497", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1473 [label="Assert.IsTrue(reader.Read())", span="2499-2499", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1474 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2500-2500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1475 [label="Assert.AreEqual(1.11d, reader.Value)", span="2501-2501", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1476 [label="Assert.IsTrue(reader.Read())", span="2503-2503", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1477 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2504-2504", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1478 [label="Assert.AreEqual(0d, reader.Value)", span="2505-2505", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1479 [label="Assert.IsTrue(reader.Read())", span="2507-2507", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1480 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2508-2508", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1481 [label="Assert.AreEqual(0d, reader.Value)", span="2509-2509", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1482 [label="Assert.IsTrue(reader.Read())", span="2511-2511", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1483 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2512-2512", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1484 [label="Assert.AreEqual(0.0000025d, reader.Value)", span="2513-2513", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1485 [label="Assert.IsTrue(reader.Read())", span="2515-2515", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1486 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2516-2516", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1487 [label="Assert.AreEqual(3000000000d, reader.Value)", span="2517-2517", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1488 [label="Assert.IsTrue(reader.Read())", span="2519-2519", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1489 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2520-2520", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1490 [label="Assert.AreEqual(602214180000000000000000d, reader.Value)", span="2521-2521", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1491 [label="Assert.IsTrue(reader.Read())", span="2523-2523", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1492 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="2524-2524", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1493 [label="Assert.AreEqual(reader.Value, ''Purple\r \n monkey's:\tdishwasher'')", span="2525-2525", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1494 [label="Assert.IsTrue(reader.Read())", span="2527-2527", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1495 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", span="2472-2472", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="DataTableConverterTests.cs"];
m2_1155 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", span="1985-1985", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1156 [label="string json = ''new Date\0()''", span="1987-1987", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1157 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1988-1988", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1158 [label="reader.SetCharBuffer(new char[7])", span="1989-1989", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1159 [label="Assert.IsTrue(reader.Read())", span="1991-1991", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1160 [label="Assert.AreEqual(''Date'', reader.Value)", span="1992-1992", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1161 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1993-1993", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1162 [label="Assert.IsTrue(reader.Read())", span="1995-1995", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1163 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="1996-1996", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1164 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", span="1985-1985", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="DataTableConverterTests.cs"];
m2_1074 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", span="1833-1833", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="DataTableConverterTests.cs"];
m2_1075 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nulz''))", span="1835-1835", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="DataTableConverterTests.cs"];
m2_1076 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error parsing null value. Path '', line 0, position 0.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="1837-1842", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="DataTableConverterTests.cs"];
m2_1077 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", span="1833-1833", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="DataTableConverterTests.cs"];
m2_398 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", span="747-747", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="DataTableConverterTests.cs"];
m2_399 [label="JsonReader reader = new JsonTextReader(new StringReader('''h\0i'''))", span="749-749", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="DataTableConverterTests.cs"];
m2_400 [label="Assert.IsTrue(reader.Read())", span="750-750", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="DataTableConverterTests.cs"];
m2_401 [label="Assert.AreEqual(''h\0i'', reader.Value)", span="752-752", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="DataTableConverterTests.cs"];
m2_402 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", span="747-747", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="DataTableConverterTests.cs"];
m2_114 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", span="299-299", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_115 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]content''", span="301-305", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_116 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="307-307", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_117 [label="reader.SetCharBuffer(new char[2])", span="308-308", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_118 [label="reader.Read()", span="310-310", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_119 [label="Assert.AreEqual(1, reader.LineNumber)", span="311-311", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_120 [label="reader.Read()", span="313-313", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_121 [label="Assert.AreEqual(2, reader.LineNumber)", span="314-314", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_122 [label="reader.Read()", span="316-316", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_123 [label="Assert.AreEqual(3, reader.LineNumber)", span="317-317", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_124 [label="reader.Read()", span="319-319", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_125 [label="Assert.AreEqual(4, reader.LineNumber)", span="320-320", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_126 [label="reader.Read()", span="322-322", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_127 [label="Assert.AreEqual(5, reader.LineNumber)", span="323-323", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_128 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Additional text encountered after finished reading JSON content: c. Path '', line 5, position 2.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="325-330", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_129 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", span="299-299", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="DataTableConverterTests.cs"];
m2_618 [label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="769-769", cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="DataTableConverterTests.cs"];
m2_656 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", span="1181-1181", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_657 [label="string json = @''[''''\u003c'''',''''\u5f20'''']''", span="1183-1183", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_658 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1185-1185", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_659 [label="reader.SetCharBuffer(new char[2])", span="1186-1186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_660 [label="reader.Read()", span="1188-1188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_661 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1189-1189", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_662 [label="reader.Read()", span="1191-1191", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_663 [label="Assert.AreEqual(''<'', reader.Value)", span="1192-1192", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_664 [label="reader.Read()", span="1194-1194", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_665 [label="Assert.AreEqual(24352, Convert.ToInt32(Convert.ToChar((string)reader.Value)))", span="1195-1195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_666 [label="reader.Read()", span="1197-1197", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_667 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1198-1198", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_668 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", span="1181-1181", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="DataTableConverterTests.cs"];
m2_200 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", span="445-445", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_201 [label="string input = @''{\r\n  value:'Purple',\r\n  array:[1,2,new Date(1)],\r\n  subobject:{prop:1,proparray:[1]}\r\n}''", span="447-451", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_202 [label="StringReader sr = new StringReader(input)", span="453-453", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_203 [label="JsonReader reader = new JsonTextReader(sr)", span="455-455", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_204 [label="Assert.AreEqual(0, reader.Depth)", span="457-457", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_205 [label="reader.Read()", span="459-459", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_206 [label="Assert.AreEqual(reader.TokenType, JsonToken.StartObject)", span="460-460", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_207 [label="Assert.AreEqual(0, reader.Depth)", span="461-461", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_208 [label="Assert.AreEqual('''', reader.Path)", span="462-462", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_209 [label="reader.Read()", span="464-464", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_210 [label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="465-465", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_211 [label="Assert.AreEqual(1, reader.Depth)", span="466-466", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_212 [label="Assert.AreEqual(''value'', reader.Path)", span="467-467", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_213 [label="reader.Read()", span="469-469", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_214 [label="Assert.AreEqual(reader.TokenType, JsonToken.String)", span="470-470", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_215 [label="Assert.AreEqual(reader.Value, @''Purple'')", span="471-471", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_216 [label="Assert.AreEqual(reader.QuoteChar, '\'')", span="472-472", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_217 [label="Assert.AreEqual(1, reader.Depth)", span="473-473", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_218 [label="Assert.AreEqual(''value'', reader.Path)", span="474-474", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_219 [label="reader.Read()", span="476-476", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_220 [label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="477-477", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_221 [label="Assert.AreEqual(1, reader.Depth)", span="478-478", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_222 [label="Assert.AreEqual(''array'', reader.Path)", span="479-479", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_223 [label="reader.Read()", span="481-481", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_224 [label="Assert.AreEqual(reader.TokenType, JsonToken.StartArray)", span="482-482", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_225 [label="Assert.AreEqual(1, reader.Depth)", span="483-483", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_226 [label="Assert.AreEqual(''array'', reader.Path)", span="484-484", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_227 [label="reader.Read()", span="486-486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_228 [label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="487-487", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_229 [label="Assert.AreEqual(1L, reader.Value)", span="488-488", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_230 [label="Assert.AreEqual(2, reader.Depth)", span="489-489", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_231 [label="Assert.AreEqual(''array[0]'', reader.Path)", span="490-490", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_232 [label="reader.Read()", span="492-492", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_233 [label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="493-493", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_234 [label="Assert.AreEqual(2L, reader.Value)", span="494-494", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_235 [label="Assert.AreEqual(2, reader.Depth)", span="495-495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_236 [label="Assert.AreEqual(''array[1]'', reader.Path)", span="496-496", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_237 [label="reader.Read()", span="498-498", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_238 [label="Assert.AreEqual(reader.TokenType, JsonToken.StartConstructor)", span="499-499", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_239 [label="Assert.AreEqual(''Date'', reader.Value)", span="500-500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_240 [label="Assert.AreEqual(2, reader.Depth)", span="501-501", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_241 [label="Assert.AreEqual(''array[2]'', reader.Path)", span="502-502", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_242 [label="reader.Read()", span="504-504", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_243 [label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="505-505", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_244 [label="Assert.AreEqual(1L, reader.Value)", span="506-506", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_245 [label="Assert.AreEqual(3, reader.Depth)", span="507-507", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_246 [label="Assert.AreEqual(''array[2][0]'', reader.Path)", span="508-508", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_247 [label="reader.Read()", span="510-510", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_248 [label="Assert.AreEqual(reader.TokenType, JsonToken.EndConstructor)", span="511-511", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_249 [label="Assert.AreEqual(null, reader.Value)", span="512-512", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_250 [label="Assert.AreEqual(2, reader.Depth)", span="513-513", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_251 [label="Assert.AreEqual(''array[2]'', reader.Path)", span="514-514", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_252 [label="reader.Read()", span="516-516", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_253 [label="Assert.AreEqual(reader.TokenType, JsonToken.EndArray)", span="517-517", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_254 [label="Assert.AreEqual(1, reader.Depth)", span="518-518", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_255 [label="Assert.AreEqual(''array'', reader.Path)", span="519-519", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_256 [label="reader.Read()", span="521-521", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_257 [label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="522-522", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_258 [label="Assert.AreEqual(1, reader.Depth)", span="523-523", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_259 [label="Assert.AreEqual(''subobject'', reader.Path)", span="524-524", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_260 [label="reader.Read()", span="526-526", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_261 [label="Assert.AreEqual(reader.TokenType, JsonToken.StartObject)", span="527-527", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_262 [label="Assert.AreEqual(1, reader.Depth)", span="528-528", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_263 [label="Assert.AreEqual(''subobject'', reader.Path)", span="529-529", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_264 [label="reader.Read()", span="531-531", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_265 [label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="532-532", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_266 [label="Assert.AreEqual(2, reader.Depth)", span="533-533", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_267 [label="Assert.AreEqual(''subobject.prop'', reader.Path)", span="534-534", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_268 [label="reader.Read()", span="536-536", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_269 [label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="537-537", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_270 [label="Assert.AreEqual(2, reader.Depth)", span="538-538", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_271 [label="Assert.AreEqual(''subobject.prop'', reader.Path)", span="539-539", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_272 [label="reader.Read()", span="541-541", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_273 [label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="542-542", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_274 [label="Assert.AreEqual(2, reader.Depth)", span="543-543", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_275 [label="Assert.AreEqual(''subobject.proparray'', reader.Path)", span="544-544", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_276 [label="reader.Read()", span="546-546", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_277 [label="Assert.AreEqual(reader.TokenType, JsonToken.StartArray)", span="547-547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_278 [label="Assert.AreEqual(2, reader.Depth)", span="548-548", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_279 [label="Assert.AreEqual(''subobject.proparray'', reader.Path)", span="549-549", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_280 [label="reader.Read()", span="551-551", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_281 [label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="552-552", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_282 [label="Assert.AreEqual(3, reader.Depth)", span="553-553", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_283 [label="Assert.AreEqual(''subobject.proparray[0]'', reader.Path)", span="554-554", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_284 [label="reader.Read()", span="556-556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_285 [label="Assert.AreEqual(reader.TokenType, JsonToken.EndArray)", span="557-557", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_286 [label="Assert.AreEqual(2, reader.Depth)", span="558-558", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_287 [label="Assert.AreEqual(''subobject.proparray'', reader.Path)", span="559-559", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_288 [label="reader.Read()", span="561-561", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_289 [label="Assert.AreEqual(reader.TokenType, JsonToken.EndObject)", span="562-562", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_290 [label="Assert.AreEqual(1, reader.Depth)", span="563-563", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_291 [label="Assert.AreEqual(''subobject'', reader.Path)", span="564-564", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_292 [label="reader.Read()", span="566-566", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_293 [label="Assert.AreEqual(reader.TokenType, JsonToken.EndObject)", span="567-567", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_294 [label="Assert.AreEqual(0, reader.Depth)", span="568-568", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_295 [label="Assert.AreEqual('''', reader.Path)", span="569-569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_296 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", span="445-445", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="DataTableConverterTests.cs"];
m2_20 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="73-73", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="DataTableConverterTests.cs"];
m2_425 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", span="795-795", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_426 [label="string helloWorld = ''Hello world!''", span="797-797", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_427 [label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="798-798", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_428 [label="JsonReader reader = new JsonTextReader(new StringReader(@''''' + Convert.ToBase64String(helloWorldData)))", span="800-800", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_429 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unterminated string. Expected delimiter: '. Path '', line 1, position 17.'',\r\n        () =>\r\n          {\r\n            reader.ReadAsBytes();\r\n          })", span="802-807", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_430 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", span="795-795", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_1246 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", span="2132-2132", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1247 [label="string json = ''new Date()''", span="2134-2134", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1248 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2135-2135", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1249 [label="Assert.IsTrue(reader.Read())", span="2137-2137", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1250 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2138-2138", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1251 [label="Assert.IsTrue(reader.Read())", span="2140-2140", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1252 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2141-2141", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_1253 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", span="2132-2132", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="DataTableConverterTests.cs"];
m2_922 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", span="1598-1598", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_923 [label="string json = ''{\''Offset\'':\''\\/Date(946663200000+0600)\\/\''}''", span="1600-1600", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_924 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1602-1602", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_925 [label="Assert.IsTrue(reader.Read())", span="1604-1604", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_926 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1605-1605", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_927 [label="Assert.IsTrue(reader.Read())", span="1607-1607", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_928 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1608-1608", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_929 [label="reader.ReadAsDateTimeOffset()", span="1610-1610", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_930 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1611-1611", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_931 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1612-1612", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_932 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(6)), reader.Value)", span="1613-1613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_933 [label="Assert.IsTrue(reader.Read())", span="1615-1615", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_934 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1616-1616", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_935 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", span="1598-1598", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="DataTableConverterTests.cs"];
m2_541 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", span="985-985", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_542 [label="string input = ''{value:'Purple\\r \\n monkey\\'s:\\tdishwasher'}''", span="987-987", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_543 [label="StringReader sr = new StringReader(input)", span="989-989", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_544 [label="JsonReader jsonReader = new JsonTextReader(sr)", span="991-991", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_545 [label="Assert.AreEqual(0, jsonReader.Depth)", span="993-993", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_546 [label="jsonReader.Read()", span="995-995", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_547 [label="Assert.AreEqual(JsonToken.StartObject, jsonReader.TokenType)", span="996-996", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_548 [label="Assert.AreEqual(0, jsonReader.Depth)", span="997-997", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_549 [label="jsonReader.Read()", span="999-999", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_550 [label="Assert.AreEqual(JsonToken.PropertyName, jsonReader.TokenType)", span="1000-1000", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_551 [label="Assert.AreEqual(1, jsonReader.Depth)", span="1001-1001", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_552 [label="jsonReader.Read()", span="1003-1003", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_553 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="1004-1004", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_554 [label="Assert.AreEqual(''Purple\r \n monkey's:\tdishwasher'', jsonReader.Value)", span="1005-1005", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_555 [label="Assert.AreEqual('\'', jsonReader.QuoteChar)", span="1006-1006", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_556 [label="Assert.AreEqual(1, jsonReader.Depth)", span="1007-1007", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_557 [label="jsonReader.Read()", span="1009-1009", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_558 [label="Assert.AreEqual(JsonToken.EndObject, jsonReader.TokenType)", span="1010-1010", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_559 [label="Assert.AreEqual(0, jsonReader.Depth)", span="1011-1011", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_560 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", span="985-985", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="DataTableConverterTests.cs"];
m2_1332 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", span="2272-2272", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1333 [label="string json = @''0x20''", span="2274-2274", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1334 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2276-2276", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1335 [label="reader.ReadAsDecimal()", span="2278-2278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1336 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2279-2279", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1337 [label="Assert.AreEqual(32m, reader.Value)", span="2280-2280", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1338 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", span="2272-2272", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="DataTableConverterTests.cs"];
m2_1612 [label="Entry Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", span="2691-2691", cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="DataTableConverterTests.cs"];
m2_1613 [label=Error, span="2693-2693", cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="DataTableConverterTests.cs"];
m2_1615 [label="return _inner.Read(buffer, index, 1);", span="2696-2696", cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="DataTableConverterTests.cs"];
m2_1614 [label="throw new Exception(''Read error'');", span="2694-2694", cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="DataTableConverterTests.cs"];
m2_1616 [label="Exit Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", span="2691-2691", cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="DataTableConverterTests.cs"];
m2_611 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(bool)", span="894-894", cluster="Newtonsoft.Json.JsonWriter.WriteValue(bool)", file="DataTableConverterTests.cs"];
m2_1259 [label="Entry Unk.>", span="", cluster="Unk.>", file="DataTableConverterTests.cs"];
m2_495 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", span="926-926", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_496 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{'hi\r\nbye':1}''))", span="928-928", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_497 [label="Assert.IsTrue(reader.Read())", span="929-929", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_498 [label="Assert.IsTrue(reader.Read())", span="930-930", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_499 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="931-931", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_500 [label="Assert.AreEqual(@''hi\r\nbye'', reader.Value)", span="932-933", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_501 [label="Assert.IsTrue(reader.Read())", span="934-934", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_502 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="935-935", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_503 [label="Assert.AreEqual(1L, reader.Value)", span="936-936", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_504 [label="Assert.IsTrue(reader.Read())", span="937-937", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_505 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="938-938", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_506 [label="Assert.IsFalse(reader.Read())", span="939-939", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_507 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", span="926-926", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="DataTableConverterTests.cs"];
m2_1081 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", span="1846-1846", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="DataTableConverterTests.cs"];
m2_1082 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nullz''))", span="1848-1848", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="DataTableConverterTests.cs"];
m2_1083 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error parsing null value. Path '', line 1, position 4.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="1850-1855", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="DataTableConverterTests.cs"];
m2_1084 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", span="1846-1846", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="DataTableConverterTests.cs"];
m2_1223 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", span="2093-2093", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1224 [label="string json = ''[]''", span="2095-2095", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1225 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2096-2096", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1226 [label="Assert.IsTrue(reader.Read())", span="2098-2098", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1227 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2099-2099", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1228 [label="Assert.IsTrue(reader.Read())", span="2101-2101", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1229 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2102-2102", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1230 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", span="2093-2093", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="DataTableConverterTests.cs"];
m2_1207 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", span="2067-2067", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="DataTableConverterTests.cs"];
m2_1208 [label="string json = ''new Date !''", span="2069-2069", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="DataTableConverterTests.cs"];
m2_1209 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2070-2070", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="DataTableConverterTests.cs"];
m2_1210 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected character while parsing constructor: !. Path '', line 1, position 9.'',\r\n        () =>\r\n        {\r\n          reader.Read();\r\n        })", span="2072-2077", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="DataTableConverterTests.cs"];
m2_1211 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", span="2067-2067", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="DataTableConverterTests.cs"];
m2_103 [label="Entry Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", span="2713-2713", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", file="DataTableConverterTests.cs"];
m2_1624 [label="Exit Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", span="2713-2713", cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", file="DataTableConverterTests.cs"];
m2_375 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", span="682-682", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_376 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]''", span="684-701", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_377 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="703-703", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_378 [label="reader.SetCharBuffer(new char[129])", span="704-704", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_381 [label="reader.Read()", span="708-708", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_383 [label="reader.Read()", span="711-711", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_384 [label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="712-712", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_379 [label="int i = 0", span="706-706", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_380 [label="i < 15", span="706-706", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_382 [label="i++", span="706-706", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_385 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", span="682-682", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="DataTableConverterTests.cs"];
m2_84 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="321-321", cluster="Newtonsoft.Json.JsonReader.Read()", file="DataTableConverterTests.cs"];
m2_561 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", span="1016-1016", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="DataTableConverterTests.cs"];
m2_562 [label="string input = @''{\r\n  CPU: 'Intel',\r\n  Drives: [ /* Com*ment */\r\n    'DVD read/writer',\r\n    ''''500 gigabyte hard drive''''\r\n  ]\r\n}'' + '\n'", span="1018-1024", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="DataTableConverterTests.cs"];
m2_563 [label="object o = JsonConvert.DeserializeObject(input)", span="1026-1026", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="DataTableConverterTests.cs"];
m2_564 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", span="1016-1016", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="DataTableConverterTests.cs"];
m2_341 [label="Entry Newtonsoft.Json.JsonTextWriter.WriteValue(int)", span="344-344", cluster="Newtonsoft.Json.JsonTextWriter.WriteValue(int)", file="DataTableConverterTests.cs"];
m2_1055 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", span="1799-1799", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1056 [label="string json = @''{''''Name'''': 1.1}''", span="1801-1801", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1057 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1803-1803", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1058 [label="Assert.IsTrue(reader.Read())", span="1805-1805", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1059 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1806-1806", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1060 [label="Assert.IsTrue(reader.Read())", span="1808-1808", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1061 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1809-1809", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1062 [label="ExceptionAssert.Throws<FormatException>(\r\n        ''Input string was not in a correct format.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsInt32();\r\n        })", span="1811-1816", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_1063 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", span="1799-1799", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="DataTableConverterTests.cs"];
m2_622 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="672-672", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="DataTableConverterTests.cs"];
m2_620 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="428-428", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="DataTableConverterTests.cs"];
m2_1637 [label="Entry Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", span="2761-2761", cluster="Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", file="DataTableConverterTests.cs"];
m2_1638 [label="throw new NotSupportedException();", span="2763-2763", cluster="Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", file="DataTableConverterTests.cs"];
m2_1639 [label="Exit Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", span="2761-2761", cluster="Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", file="DataTableConverterTests.cs"];
m2_1325 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", span="2260-2260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1326 [label="string json = @''010''", span="2262-2262", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1327 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2264-2264", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1328 [label="reader.ReadAsDecimal()", span="2266-2266", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1329 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2267-2267", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1330 [label="Assert.AreEqual(8m, reader.Value)", span="2268-2268", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1331 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", span="2260-2260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="DataTableConverterTests.cs"];
m2_1640 [label="Entry System.NotSupportedException.NotSupportedException()", span="0-0", cluster="System.NotSupportedException.NotSupportedException()", file="DataTableConverterTests.cs"];
m2_1407 [label="Entry System.Convert.ToDouble(string, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDouble(string, System.IFormatProvider)", file="DataTableConverterTests.cs"];
m2_1409 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="DataTableConverterTests.cs"];
m2_615 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="823-823", cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="DataTableConverterTests.cs"];
m2_733 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", span="1290-1290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_734 [label="string json = @''{\r\n    ''''A'''' : true,\r\n    ''''B'''' ''''''", span="1292-1294", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_735 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1296-1296", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_736 [label="reader.Read()", span="1298-1298", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_737 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1299-1299", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_738 [label="reader.Read()", span="1301-1301", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_739 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1302-1302", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_740 [label="reader.Read()", span="1304-1304", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_741 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="1305-1305", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_742 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        @''Invalid character after parsing property name. Expected ':' but got: ''''. Path 'A', line 3, position 9.'',\r\n        () =>\r\n        {\r\n          reader.Read();\r\n        })", span="1307-1312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_743 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", span="1290-1290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="DataTableConverterTests.cs"];
m2_1231 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", span="2106-2106", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1232 [label="string json = ''{}''", span="2108-2108", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1233 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2109-2109", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1234 [label="Assert.IsTrue(reader.Read())", span="2111-2111", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1235 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2112-2112", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1236 [label="Assert.IsTrue(reader.Read())", span="2114-2114", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1237 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2115-2115", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_1238 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", span="2106-2106", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="DataTableConverterTests.cs"];
m2_24 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="DataTableConverterTests.cs"];
m2_747 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", span="1316-1316", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_748 [label="StringReader s = new StringReader(@''''''SGVsbG8gd29ybGQu'''''')", span="1318-1318", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_749 [label="JsonTextReader reader = new JsonTextReader(s)", span="1319-1319", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_750 [label="byte[] data = reader.ReadAsBytes()", span="1321-1321", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_751 [label="Assert.IsNotNull(data)", span="1322-1322", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_752 [label="string text = Encoding.UTF8.GetString(data, 0, data.Length)", span="1324-1324", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_753 [label="Assert.AreEqual(''Hello world.'', text)", span="1325-1325", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_754 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", span="1316-1316", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="DataTableConverterTests.cs"];
m2_1609 [label="Entry Newtonsoft.Json.JsonTextWriter.WriteValue(decimal)", span="502-502", cluster="Newtonsoft.Json.JsonTextWriter.WriteValue(decimal)", file="DataTableConverterTests.cs"];
m2_613 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="411-411", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="DataTableConverterTests.cs"];
m2_523 [label="Entry Unk.AreEquivalent", span="", cluster="Unk.AreEquivalent", file="DataTableConverterTests.cs"];
m2_310 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", span="599-599", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="DataTableConverterTests.cs"];
m2_311 [label="string s = new string('a', 10000)", span="601-601", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="DataTableConverterTests.cs"];
m2_312 [label="JsonReader reader = new JsonTextReader(new StringReader(''''' + s + '''''))", span="602-602", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="DataTableConverterTests.cs"];
m2_314 [label="Assert.AreEqual(s, reader.Value)", span="605-605", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="DataTableConverterTests.cs"];
m2_313 [label="reader.Read()", span="603-603", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="DataTableConverterTests.cs"];
m2_315 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", span="599-599", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="DataTableConverterTests.cs"];
m2_937 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="DataTableConverterTests.cs"];
m2_1641 [label="Entry Newtonsoft.Json.Tests.SlowStream.SetLength(long)", span="2766-2766", cluster="Newtonsoft.Json.Tests.SlowStream.SetLength(long)", file="DataTableConverterTests.cs"];
m2_1642 [label="throw new NotSupportedException();", span="2768-2768", cluster="Newtonsoft.Json.Tests.SlowStream.SetLength(long)", file="DataTableConverterTests.cs"];
m2_1643 [label="Exit Newtonsoft.Json.Tests.SlowStream.SetLength(long)", span="2766-2766", cluster="Newtonsoft.Json.Tests.SlowStream.SetLength(long)", file="DataTableConverterTests.cs"];
m2_756 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="DataTableConverterTests.cs"];
m2_838 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", span="1449-1449", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="DataTableConverterTests.cs"];
m2_839 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''{''))", span="1451-1451", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="DataTableConverterTests.cs"];
m2_840 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected end when reading bytes. Path '', line 1, position 1.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsBytes();\r\n        })", span="1453-1458", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="DataTableConverterTests.cs"];
m2_841 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", span="1449-1449", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="DataTableConverterTests.cs"];
m2_342 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="380-380", cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="DataTableConverterTests.cs"];
m2_508 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", span="943-943", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_509 [label="string helloWorld = ''Hello world!''", span="945-945", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_510 [label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="946-946", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_511 [label="JsonReader reader = new JsonTextReader(new StringReader(@''[1,''' + Convert.ToBase64String(helloWorldData) + @''']''))", span="948-948", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_517 [label="CollectionAssert.AreEquivalent(helloWorldData, data)", span="954-954", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_512 [label="Assert.IsTrue(reader.Read())", span="949-949", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_513 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="950-950", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_514 [label="Assert.IsTrue(reader.Read())", span="951-951", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_515 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="952-952", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_516 [label="byte[] data = reader.ReadAsBytes()", span="953-953", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_518 [label="Assert.AreEqual(JsonToken.Bytes, reader.TokenType)", span="955-955", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_519 [label="Assert.IsTrue(reader.Read())", span="956-956", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_520 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="957-957", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_521 [label="Assert.IsFalse(reader.Read())", span="959-959", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_522 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", span="943-943", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="DataTableConverterTests.cs"];
m2_0 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", span="47-47", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_1 [label="string json = @''{''''recipe_id'''':''''12'''',''''recipe_name'''':''''Apocalypse Leather Armors'''',''''recipe_text'''':''''#C16------------------------------\r\n#C12Ingredients #C20\r\n#C16------------------------------\r\n\r\na piece of Leather Armor\r\n( ie #L \''''Enhanced Leather Armor Boots\'''' \''''85644\'''' )\r\n<img src=rdb:\/\/13264>\r\n\r\n#L \''''Hacker Tool\'''' \''''87814\''''\r\n<img src=rdb:\/\/99282>\r\n\r\n#L \''''Clanalizer\'''' \''''208313\''''\r\n<img src=rdb:\/\/156479>\r\n\r\n#C16------------------------------\r\n#C12Recipe #C16\r\n#C16------------------------------#C20\r\n\r\nHacker Tool\r\n#C15+#C20\r\na piece of Leather Armor\r\n#C15=#C20\r\n<img src=rdb:\/\/13264>\r\na piece of Hacked Leather Armor\r\n( ie : #L \''''Hacked Leather Armor Boots\'''' \''''245979\'''' )\r\n#C16Skills: |  BE  |#C20\r\n\r\n#C14------------------------------#C20\r\n\r\nClanalizer\r\n#C15+#C20\r\na piece of Hacked Leather Armor\r\n#C15=#C20\r\n<img src=rdb:\/\/13264>\r\na piece of Apocalypse Leather Armor\r\n( ie : #L \''''Apocalypse Leather Armor Boots\'''' \''''245966\'''' )\r\n#C16Skills: |  ??  |#C20\r\n\r\n#C16------------------------------\r\n#C12Details#C16\r\n#C16------------------------------#C20\r\n\r\n#L \''''Apocalypse Leather Armor Boots\'''' \''''245967\''''\r\n#L \''''Apocalypse Leather Armor Gloves\'''' \''''245969\''''\r\n#L \''''Apocalypse Leather Armor Helmet\'''' \''''245975\''''\r\n#L \''''Apocalypse Leather Armor Pants\'''' \''''245971\''''\r\n#L \''''Apocalypse Leather Armor Sleeves\'''' \''''245973\''''\r\n#L \''''Apocalypse Leather Body Armor\'''' \''''245965\''''\r\n\r\n#C16------------------------------\r\n#C12Comments#C16\r\n#C16------------------------------#C20\r\n\r\nNice froob armor.. but ugleh!\r\n\r\n'''',''''recipe_author'''':null}''", span="49-49", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_2 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="51-51", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_3 [label="Assert.IsTrue(reader.Read())", span="53-53", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_4 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="54-54", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_5 [label="Assert.IsTrue(reader.Read())", span="56-56", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_6 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="57-57", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_7 [label="Assert.IsTrue(reader.Read())", span="59-59", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_8 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="60-60", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_9 [label="Assert.IsTrue(reader.Read())", span="62-62", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_10 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="63-63", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_11 [label="Assert.IsTrue(reader.Read())", span="65-65", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_12 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="66-66", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_13 [label="Assert.IsTrue(reader.Read())", span="68-68", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_14 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="69-69", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_15 [label="Assert.AreEqual(''recipe_text'', reader.Value)", span="70-70", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_16 [label="Assert.IsTrue(reader.Read())", span="72-72", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_17 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="73-73", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_18 [label="Assert.AreEqual(@''#C16------------------------------\r\n#C12Ingredients #C20\r\n#C16------------------------------\r\n\r\na piece of Leather Armor\r\n( ie #L ''''Enhanced Leather Armor Boots'''' ''''85644'''' )\r\n<img src=rdb://13264>\r\n\r\n#L ''''Hacker Tool'''' ''''87814''''\r\n<img src=rdb://99282>\r\n\r\n#L ''''Clanalizer'''' ''''208313''''\r\n<img src=rdb://156479>\r\n\r\n#C16------------------------------\r\n#C12Recipe #C16\r\n#C16------------------------------#C20\r\n\r\nHacker Tool\r\n#C15+#C20\r\na piece of Leather Armor\r\n#C15=#C20\r\n<img src=rdb://13264>\r\na piece of Hacked Leather Armor\r\n( ie : #L ''''Hacked Leather Armor Boots'''' ''''245979'''' )\r\n#C16Skills: |  BE  |#C20\r\n\r\n#C14------------------------------#C20\r\n\r\nClanalizer\r\n#C15+#C20\r\na piece of Hacked Leather Armor\r\n#C15=#C20\r\n<img src=rdb://13264>\r\na piece of Apocalypse Leather Armor\r\n( ie : #L ''''Apocalypse Leather Armor Boots'''' ''''245966'''' )\r\n#C16Skills: |  ??  |#C20\r\n\r\n#C16------------------------------\r\n#C12Details#C16\r\n#C16------------------------------#C20\r\n\r\n#L ''''Apocalypse Leather Armor Boots'''' ''''245967''''\r\n#L ''''Apocalypse Leather Armor Gloves'''' ''''245969''''\r\n#L ''''Apocalypse Leather Armor Helmet'''' ''''245975''''\r\n#L ''''Apocalypse Leather Armor Pants'''' ''''245971''''\r\n#L ''''Apocalypse Leather Armor Sleeves'''' ''''245973''''\r\n#L ''''Apocalypse Leather Body Armor'''' ''''245965''''\r\n\r\n#C16------------------------------\r\n#C12Comments#C16\r\n#C16------------------------------#C20\r\n\r\nNice froob armor.. but ugleh!\r\n\r\n'', reader.Value)", span="75-130", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_19 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", span="47-47", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="DataTableConverterTests.cs"];
m2_1592 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", span="2653-2653", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1593 [label="StringWriter sw = new StringWriter()", span="2655-2655", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1594 [label="JsonTextWriter writer = new JsonTextWriter(sw)", span="2656-2656", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1599 [label="string json = sw.ToString()", span="2663-2663", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1595 [label="writer.WriteStartArray()", span="2658-2658", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1596 [label="writer.WriteValue(decimal.MaxValue)", span="2659-2659", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1597 [label="writer.WriteValue(decimal.MinValue)", span="2660-2660", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1598 [label="writer.WriteEndArray()", span="2661-2661", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1600 [label="StringReader sr = new StringReader(json)", span="2665-2665", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1601 [label="JsonTextReader reader = new JsonTextReader(sr)", span="2666-2666", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1602 [label="Assert.IsTrue(reader.Read())", span="2668-2668", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1603 [label="decimal? max = reader.ReadAsDecimal()", span="2670-2670", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1605 [label="decimal? min = reader.ReadAsDecimal()", span="2673-2673", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1607 [label="Assert.IsTrue(reader.Read())", span="2676-2676", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1604 [label="Assert.AreEqual(decimal.MaxValue, max)", span="2671-2671", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1606 [label="Assert.AreEqual(decimal.MinValue, min)", span="2674-2674", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_1608 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", span="2653-2653", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="DataTableConverterTests.cs"];
m2_339 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="113-113", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="DataTableConverterTests.cs"];
m2_669 [label="Entry System.Convert.ToChar(string)", span="0-0", cluster="System.Convert.ToChar(string)", file="DataTableConverterTests.cs"];
m2_1589 [label="Entry lambda expression", span="2644-2644", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_112 [label="reader.Read()", span="292-292", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_111 [label="Entry lambda expression", span="290-295", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_113 [label="Exit lambda expression", span="290-295", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_132 [label="reader.Read()", span="329-329", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_131 [label="Entry lambda expression", span="327-330", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_133 [label="Exit lambda expression", span="327-330", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_145 [label="reader.Read()", span="361-361", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_144 [label="Entry lambda expression", span="359-364", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_146 [label="Exit lambda expression", span="359-364", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_300 [label="Entry lambda expression", span="579-582", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_301 [label="new JsonTextReader(null)", span="581-581", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_302 [label="Exit lambda expression", span="579-582", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_308 [label="reader.Read()", span="594-594", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_307 [label="Entry lambda expression", span="592-595", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_309 [label="Exit lambda expression", span="592-595", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_408 [label="reader.Read()", span="764-764", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_407 [label="Entry lambda expression", span="762-765", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_409 [label="Exit lambda expression", span="762-765", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_415 [label="reader.Read()", span="777-777", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_414 [label="Entry lambda expression", span="775-778", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_416 [label="Exit lambda expression", span="775-778", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_422 [label="reader.ReadAsBytes()", span="790-790", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_421 [label="Entry lambda expression", span="788-791", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_423 [label="Exit lambda expression", span="788-791", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_433 [label="reader.ReadAsBytes()", span="806-806", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_432 [label="Entry lambda expression", span="804-807", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_434 [label="Exit lambda expression", span="804-807", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_448 [label="reader.Read()", span="830-830", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_447 [label="Entry lambda expression", span="828-831", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_449 [label="Exit lambda expression", span="828-831", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_745 [label="reader.Read()", span="1311-1311", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_744 [label="Entry lambda expression", span="1309-1312", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_746 [label="Exit lambda expression", span="1309-1312", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_825 [label="reader.Read()", span="1426-1426", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_824 [label="Entry lambda expression", span="1424-1427", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_826 [label="Exit lambda expression", span="1424-1427", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_843 [label="reader.ReadAsBytes()", span="1457-1457", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_842 [label="Entry lambda expression", span="1455-1458", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_844 [label="Exit lambda expression", span="1455-1458", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_856 [label="reader.ReadAsDecimal()", span="1481-1481", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_855 [label="Entry lambda expression", span="1479-1482", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_857 [label="Exit lambda expression", span="1479-1482", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_863 [label="reader.ReadAsBytes()", span="1494-1494", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_862 [label="Entry lambda expression", span="1492-1495", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_864 [label="Exit lambda expression", span="1492-1495", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_870 [label="reader.ReadAsDateTimeOffset()", span="1508-1508", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_869 [label="Entry lambda expression", span="1506-1509", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_871 [label="Exit lambda expression", span="1506-1509", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_884 [label="reader.ReadAsBytes()", span="1533-1533", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_883 [label="Entry lambda expression", span="1531-1534", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_885 [label="Exit lambda expression", span="1531-1534", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_891 [label="reader.ReadAsBytes()", span="1546-1546", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_890 [label="Entry lambda expression", span="1544-1547", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_892 [label="Exit lambda expression", span="1544-1547", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_963 [label="reader.ReadAsDateTimeOffset()", span="1658-1658", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_962 [label="Entry lambda expression", span="1656-1659", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_964 [label="Exit lambda expression", span="1656-1659", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1065 [label="reader.ReadAsInt32()", span="1815-1815", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1064 [label="Entry lambda expression", span="1813-1816", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1066 [label="Exit lambda expression", span="1813-1816", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1072 [label="reader.Read()", span="1828-1828", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1071 [label="Entry lambda expression", span="1826-1829", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1073 [label="Exit lambda expression", span="1826-1829", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1079 [label="reader.Read()", span="1841-1841", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1078 [label="Entry lambda expression", span="1839-1842", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1080 [label="Exit lambda expression", span="1839-1842", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1086 [label="reader.Read()", span="1854-1854", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1085 [label="Entry lambda expression", span="1852-1855", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1087 [label="Exit lambda expression", span="1852-1855", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1093 [label="reader.Read()", span="1867-1867", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1092 [label="Entry lambda expression", span="1865-1868", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1094 [label="Exit lambda expression", span="1865-1868", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1100 [label="reader.Read()", span="1880-1880", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1099 [label="Entry lambda expression", span="1878-1881", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1101 [label="Exit lambda expression", span="1878-1881", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1205 [label="reader.Read()", span="2062-2062", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1204 [label="Entry lambda expression", span="2060-2063", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1206 [label="Exit lambda expression", span="2060-2063", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1213 [label="reader.Read()", span="2076-2076", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1212 [label="Entry lambda expression", span="2074-2077", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1214 [label="Exit lambda expression", span="2074-2077", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1244 [label="reader.Read()", span="2127-2127", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1243 [label="Entry lambda expression", span="2125-2128", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1245 [label="Exit lambda expression", span="2125-2128", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1261 [label="Assert.IsTrue(reader.Read())", span="2154-2154", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1260 [label="Entry lambda expression", span="2152-2155", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1262 [label="Exit lambda expression", span="2152-2155", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1362 [label="reader.Read()", span="2320-2320", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1361 [label="Entry lambda expression", span="2318-2321", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1363 [label="Exit lambda expression", span="2318-2321", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1418 [label="Assert.IsTrue(reader.Read())", span="2408-2408", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1417 [label="Entry lambda expression", span="2406-2409", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1419 [label="Exit lambda expression", span="2406-2409", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1450 [label="Assert.IsTrue(reader.Read())", span="2429-2429", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1453 [label="Assert.IsTrue(reader.Read())", span="2452-2452", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1449 [label="Entry lambda expression", span="2427-2430", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1452 [label="Entry lambda expression", span="2450-2453", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1451 [label="Exit lambda expression", span="2427-2430", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1454 [label="Exit lambda expression", span="2450-2453", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1575 [label="jsonTextReader.Read()", span="2613-2613", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1578 [label="jsonTextReader.Read()", span="2616-2616", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1581 [label="jsonTextReader.Read()", span="2627-2627", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1584 [label="jsonTextReader.Read()", span="2638-2638", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1587 [label="jsonTextReader.Read()", span="2641-2641", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1590 [label="jsonTextReader.Read()", span="2644-2644", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1574 [label="Entry lambda expression", span="2613-2613", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1577 [label="Entry lambda expression", span="2616-2616", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1580 [label="Entry lambda expression", span="2627-2627", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1583 [label="Entry lambda expression", span="2638-2638", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1586 [label="Entry lambda expression", span="2641-2641", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1576 [label="Exit lambda expression", span="2613-2613", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1579 [label="Exit lambda expression", span="2616-2616", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1582 [label="Exit lambda expression", span="2627-2627", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1585 [label="Exit lambda expression", span="2638-2638", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1588 [label="Exit lambda expression", span="2641-2641", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1591 [label="Exit lambda expression", span="2644-2644", cluster="lambda expression", file="DataTableConverterTests.cs"];
m2_1550 [label="Entry System.DateTimeOffset.DateTimeOffset(long, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(long, System.TimeSpan)", file="DataTableConverterTests.cs"];
m2_1143 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", span="1957-1957", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1144 [label="string json = @''/*comment*/ { /*comment*/\r\n        ''''Name'''': /*comment*/ ''''Apple'''' /*comment*/, /*comment*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment*/ [ /*comment*/\r\n          ''''Small'''', /*comment*/\r\n          ''''Medium'''' /*comment*/,\r\n          /*comment*/ ''''Large''''\r\n        /*comment*/ ] /*comment*/\r\n      } /*comment*/''", span="1959-1968", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1145 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1970-1970", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1146 [label="reader.SetCharBuffer(new char[5])", span="1971-1971", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1149 [label="Assert.IsTrue(reader.Read())", span="1975-1975", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1151 [label="Assert.IsTrue(reader.Read())", span="1978-1978", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1152 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1979-1979", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1153 [label="Assert.IsFalse(reader.Read())", span="1981-1981", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1147 [label="int i = 0", span="1973-1973", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1148 [label="i < 26", span="1973-1973", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1150 [label="i++", span="1973-1973", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1154 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", span="1957-1957", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="DataTableConverterTests.cs"];
m2_1286 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", span="2195-2195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1287 [label="string json = @''/*comment*/{/*comment*/Name:/*comment*/true/*comment*/,/*comment*/\r\n        ''''ExpiryDate'''':/*comment*/new\r\n'' + StringUtils.LineFeed +\r\n@''Date\r\n(/*comment*/null/*comment*/),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''':/*comment*/[/*comment*/\r\n          ''''Small''''/*comment*/]/*comment*/}/*comment*/''", span="2197-2204", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1288 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="2206-2206", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1289 [label="Assert.IsTrue(reader.Read())", span="2208-2208", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1290 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2209-2209", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1291 [label="Assert.IsTrue(reader.Read())", span="2211-2211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1292 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2212-2212", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1293 [label="Assert.IsTrue(reader.Read())", span="2214-2214", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1294 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2215-2215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1295 [label="Assert.IsTrue(reader.Read())", span="2217-2217", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1296 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2218-2218", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1297 [label="Assert.AreEqual(''Name'', reader.Value)", span="2219-2219", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1298 [label="Assert.IsTrue(reader.Read())", span="2221-2221", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1299 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2222-2222", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1300 [label="Assert.IsTrue(reader.Read())", span="2224-2224", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1301 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2225-2225", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1302 [label="Assert.AreEqual(true, reader.Value)", span="2226-2226", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1303 [label="Assert.IsTrue(reader.Read())", span="2228-2228", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1304 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2229-2229", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1305 [label="Assert.IsTrue(reader.Read())", span="2231-2231", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1306 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2232-2232", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1307 [label="Assert.IsTrue(reader.Read())", span="2234-2234", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1308 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2235-2235", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1309 [label="Assert.AreEqual(''ExpiryDate'', reader.Value)", span="2236-2236", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1310 [label="Assert.IsTrue(reader.Read())", span="2238-2238", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1311 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2239-2239", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1312 [label="Assert.IsTrue(reader.Read())", span="2241-2241", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1313 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2242-2242", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1314 [label="Assert.AreEqual(5, reader.LineNumber)", span="2243-2243", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1315 [label="Assert.AreEqual(''Date'', reader.Value)", span="2244-2244", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1316 [label="Assert.IsTrue(reader.Read())", span="2246-2246", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1317 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2247-2247", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1318 [label="Assert.IsTrue(reader.Read())", span="2249-2249", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1319 [label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="2250-2250", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1320 [label="Assert.IsTrue(reader.Read())", span="2252-2252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1321 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2253-2253", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1322 [label="Assert.IsTrue(reader.Read())", span="2255-2255", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1323 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2256-2256", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_1324 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", span="2195-2195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="DataTableConverterTests.cs"];
m2_879 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", span="1525-1525", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="DataTableConverterTests.cs"];
m2_880 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1''))", span="1527-1527", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="DataTableConverterTests.cs"];
m2_881 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected end when reading bytes. Path '[0]', line 1, position 2.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsBytes();\r\n        })", span="1529-1534", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="DataTableConverterTests.cs"];
m2_882 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", span="1525-1525", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="DataTableConverterTests.cs"];
m2_1364 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", span="2325-2325", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1365 [label="double d", span="2327-2327", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1366 [label="d = Convert.ToDouble(''6.0221418e23'', CultureInfo.InvariantCulture)", span="2329-2329", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1367 [label="Console.WriteLine(d.ToString(new CultureInfo(''fr-FR'')))", span="2330-2330", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1368 [label="Console.WriteLine(d.ToString(''0.#############################################################################''))", span="2331-2331", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1369 [label="string json = @''[0e-10,0E-10,0.25e-5,0.3e10,6.0221418e23]''", span="2336-2336", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1370 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2338-2338", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1388 [label="reader = new JsonTextReader(new StringReader(json))", span="2365-2365", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1371 [label="reader.Read()", span="2340-2340", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1372 [label="reader.Read()", span="2342-2342", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1373 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2343-2343", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1374 [label="Assert.AreEqual(0d, reader.Value)", span="2344-2344", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1375 [label="reader.Read()", span="2346-2346", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1376 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2347-2347", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1377 [label="Assert.AreEqual(0d, reader.Value)", span="2348-2348", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1378 [label="reader.Read()", span="2350-2350", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1379 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2351-2351", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1380 [label="Assert.AreEqual(0.0000025d, reader.Value)", span="2352-2352", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1381 [label="reader.Read()", span="2354-2354", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1382 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2355-2355", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1383 [label="Assert.AreEqual(3000000000d, reader.Value)", span="2356-2356", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1384 [label="reader.Read()", span="2358-2358", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1385 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2359-2359", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1386 [label="Assert.AreEqual(602214180000000000000000d, reader.Value)", span="2360-2360", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1387 [label="reader.Read()", span="2362-2362", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1389 [label="reader.Read()", span="2367-2367", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1390 [label="reader.ReadAsDecimal()", span="2369-2369", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1391 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2370-2370", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1392 [label="Assert.AreEqual(0m, reader.Value)", span="2371-2371", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1393 [label="reader.ReadAsDecimal()", span="2373-2373", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1394 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2374-2374", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1395 [label="Assert.AreEqual(0m, reader.Value)", span="2375-2375", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1396 [label="reader.ReadAsDecimal()", span="2377-2377", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1397 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2378-2378", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1398 [label="Assert.AreEqual(0.0000025m, reader.Value)", span="2379-2379", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1399 [label="reader.ReadAsDecimal()", span="2381-2381", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1400 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2382-2382", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1401 [label="Assert.AreEqual(3000000000m, reader.Value)", span="2383-2383", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1402 [label="reader.ReadAsDecimal()", span="2385-2385", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1403 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2386-2386", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1404 [label="Assert.AreEqual(602214180000000000000000m, reader.Value)", span="2387-2387", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1405 [label="reader.Read()", span="2389-2389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1406 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", span="2325-2325", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="DataTableConverterTests.cs"];
m2_1644 [label="Entry Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", span="2771-2771", cluster="Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1645 [label="throw new NotSupportedException();", span="2773-2773", cluster="Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1646 [label="Exit Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", span="2771-2771", cluster="Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_612 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="349-349", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="DataTableConverterTests.cs"];
m2_819 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", span="1416-1416", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="DataTableConverterTests.cs"];
m2_820 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[}''))", span="1418-1418", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="DataTableConverterTests.cs"];
m2_821 [label="reader.Read()", span="1420-1420", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="DataTableConverterTests.cs"];
m2_822 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected character encountered while parsing value: }. Path '', line 1, position 1.'',\r\n        () =>\r\n        {\r\n          reader.Read();\r\n        })", span="1422-1427", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="DataTableConverterTests.cs"];
m2_823 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", span="1416-1416", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="DataTableConverterTests.cs"];
m2_38 [label="Entry System.Globalization.StringInfo.StringInfo(string)", span="0-0", cluster="System.Globalization.StringInfo.StringInfo(string)", file="DataTableConverterTests.cs"];
m2_21 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="DataTableConverterTests.cs"];
m2_85 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="DataTableConverterTests.cs"];
m2_979 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", span="1685-1685", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_980 [label="string json = @''{''''Offset'''':''''\/Date(946708260000-0631)\/''''}''", span="1687-1687", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_981 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1689-1689", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_982 [label="Assert.IsTrue(reader.Read())", span="1691-1691", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_983 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1692-1692", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_984 [label="Assert.IsTrue(reader.Read())", span="1694-1694", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_985 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1695-1695", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_986 [label="reader.ReadAsDateTimeOffset()", span="1697-1697", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_987 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1698-1698", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_988 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1699-1699", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_989 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(-6).Add(TimeSpan.FromMinutes(-31))), reader.Value)", span="1700-1700", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_990 [label="Assert.IsTrue(reader.Read())", span="1702-1702", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_991 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1703-1703", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_992 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", span="1685-1685", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="DataTableConverterTests.cs"];
m2_139 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", span="351-351", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="DataTableConverterTests.cs"];
m2_140 [label="string json = @'''hi' a''", span="353-353", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="DataTableConverterTests.cs"];
m2_141 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="355-355", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="DataTableConverterTests.cs"];
m2_142 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Additional text encountered after finished reading JSON content: a. Path '', line 1, position 5.'',\r\n        () =>\r\n          {\r\n            while (reader.Read())\r\n            {\r\n            }\r\n          })", span="357-364", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="DataTableConverterTests.cs"];
m2_143 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", span="351-351", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="DataTableConverterTests.cs"];
m2_317 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", span="609-609", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_318 [label="int valueCount = 10000", span="611-611", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_319 [label="StringWriter sw = new StringWriter()", span="612-612", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_323 [label="i < valueCount", span="615-615", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_331 [label="i < valueCount", span="625-625", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_320 [label="JsonTextWriter writer = new JsonTextWriter(sw)", span="613-613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_327 [label="string json = sw.ToString()", span="621-621", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_321 [label="writer.WriteStartArray()", span="614-614", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_324 [label="writer.WriteValue(i)", span="617-617", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_326 [label="writer.WriteEndArray()", span="619-619", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_322 [label="int i = 0", span="615-615", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_325 [label="i++", span="615-615", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_328 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="623-623", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_329 [label="Assert.IsTrue(reader.Read())", span="624-624", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_332 [label="Assert.IsTrue(reader.Read())", span="627-627", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_333 [label="Assert.AreEqual((long)i, reader.Value)", span="628-628", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_335 [label="Assert.IsTrue(reader.Read())", span="630-630", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_336 [label="Assert.IsFalse(reader.Read())", span="631-631", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_330 [label="int i = 0", span="625-625", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_334 [label="i++", span="625-625", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_337 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", span="609-609", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="DataTableConverterTests.cs"];
m2_936 [label="Entry System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", file="DataTableConverterTests.cs"];
m2_110 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="DataTableConverterTests.cs"];
m2_953 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", span="1642-1642", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_954 [label="string json = @''{''''Offset'''':''''blablahbla''''}''", span="1644-1644", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_955 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1646-1646", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_956 [label="Assert.IsTrue(reader.Read())", span="1648-1648", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_957 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1649-1649", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_958 [label="Assert.IsTrue(reader.Read())", span="1651-1651", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_959 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1652-1652", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_960 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Could not convert string to DateTimeOffset: blablahbla. Path 'Offset', line 1, position 22.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsDateTimeOffset();\r\n        })", span="1654-1659", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_961 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", span="1642-1642", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="DataTableConverterTests.cs"];
m2_851 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", span="1473-1473", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="DataTableConverterTests.cs"];
m2_852 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1475-1475", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="DataTableConverterTests.cs"];
m2_853 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error reading decimal. Unexpected token: StartConstructor. Path '', line 1, position 9.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsDecimal();\r\n        })", span="1477-1482", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="DataTableConverterTests.cs"];
m2_854 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", span="1473-1473", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="DataTableConverterTests.cs"];
m2_63 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", span="201-201", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_64 [label="MemoryStream ms = new MemoryStream()", span="203-203", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_65 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(ms))", span="204-204", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_66 [label="Assert.IsTrue(ms.CanRead)", span="206-206", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_68 [label="Assert.IsFalse(ms.CanRead)", span="208-208", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_67 [label="reader.Close()", span="207-207", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_69 [label="ms = new MemoryStream()", span="210-210", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_70 [label="reader = new JsonTextReader(new StreamReader(ms)) { CloseInput = false }", span="211-211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_71 [label="Assert.IsTrue(ms.CanRead)", span="213-213", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_73 [label="Assert.IsTrue(ms.CanRead)", span="215-215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_72 [label="reader.Close()", span="214-214", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_74 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", span="201-201", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="DataTableConverterTests.cs"];
m2_909 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", span="1576-1576", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_910 [label="string json = @''{''''text'''':0xabcdef12345}''", span="1578-1578", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_911 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1580-1580", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_912 [label="Assert.IsTrue(reader.Read())", span="1582-1582", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_913 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1583-1583", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_914 [label="Assert.IsTrue(reader.Read())", span="1585-1585", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_915 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1586-1586", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_916 [label="Assert.IsTrue(reader.Read())", span="1588-1588", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_917 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1589-1589", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_918 [label="Assert.AreEqual(11806310474565, reader.Value)", span="1590-1590", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_919 [label="Assert.IsTrue(reader.Read())", span="1592-1592", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_920 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1593-1593", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_921 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", span="1576-1576", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="DataTableConverterTests.cs"];
m2_938 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="DataTableConverterTests.cs"];
m2_965 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", span="1663-1663", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_966 [label="string json = ''{\''Offset\'':\''\\/Date(946663200000+06)\\/\''}''", span="1665-1665", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_967 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1667-1667", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_968 [label="Assert.IsTrue(reader.Read())", span="1669-1669", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_969 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1670-1670", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_970 [label="Assert.IsTrue(reader.Read())", span="1672-1672", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_971 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1673-1673", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_972 [label="reader.ReadAsDateTimeOffset()", span="1675-1675", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_973 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1676-1676", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_974 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1677-1677", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_975 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(6)), reader.Value)", span="1678-1678", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_976 [label="Assert.IsTrue(reader.Read())", span="1680-1680", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_977 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1681-1681", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_978 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", span="1663-1663", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="DataTableConverterTests.cs"];
m2_303 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", span="586-586", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="DataTableConverterTests.cs"];
m2_304 [label="JsonReader reader = new JsonTextReader(new StringReader('''hi''))", span="588-588", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="DataTableConverterTests.cs"];
m2_305 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unterminated string. Expected delimiter: '. Path '', line 1, position 3.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="590-595", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="DataTableConverterTests.cs"];
m2_306 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", span="586-586", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="DataTableConverterTests.cs"];
m2_1199 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", span="2053-2053", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_1200 [label="string json = ''new Dat''", span="2055-2055", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_1201 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2056-2056", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_1202 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Unexpected end while parsing constructor. Path '', line 1, position 7.'',\r\n        () =>\r\n        {\r\n          reader.Read();\r\n        })", span="2058-2063", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_1203 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", span="2053-2053", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="DataTableConverterTests.cs"];
m2_610 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="372-372", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="DataTableConverterTests.cs"];
m2_1496 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", span="2531-2531", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1497 [label="string json = @''[''''1970-01-01T00:00:00Z'''',''''\/Date(0)\/'''']''", span="2533-2533", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1498 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2535-2535", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1508 [label="reader = new JsonTextReader(new StringReader(json))", span="2548-2548", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1518 [label="reader = new JsonTextReader(new StringReader(json))", span="2561-2561", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1528 [label="reader = new JsonTextReader(new StringReader(json))", span="2574-2574", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1538 [label="reader = new JsonTextReader(new StringReader(json))", span="2587-2587", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1499 [label="reader.DateParseHandling = Json.DateParseHandling.DateTime", span="2536-2536", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1500 [label="Assert.IsTrue(reader.Read())", span="2538-2538", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1501 [label="Assert.IsTrue(reader.Read())", span="2539-2539", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1502 [label="Assert.AreEqual(new DateTime(JsonConvert.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2540-2540", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1503 [label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2541-2541", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1504 [label="Assert.IsTrue(reader.Read())", span="2542-2542", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1505 [label="Assert.AreEqual(new DateTime(JsonConvert.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2543-2543", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1506 [label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2544-2544", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1507 [label="Assert.IsTrue(reader.Read())", span="2545-2545", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1509 [label="reader.DateParseHandling = Json.DateParseHandling.DateTimeOffset", span="2549-2549", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1510 [label="Assert.IsTrue(reader.Read())", span="2551-2551", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1511 [label="Assert.IsTrue(reader.Read())", span="2552-2552", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1512 [label="Assert.AreEqual(new DateTimeOffset(JsonConvert.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2553-2553", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1513 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2554-2554", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1514 [label="Assert.IsTrue(reader.Read())", span="2555-2555", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1515 [label="Assert.AreEqual(new DateTimeOffset(JsonConvert.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2556-2556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1516 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2557-2557", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1517 [label="Assert.IsTrue(reader.Read())", span="2558-2558", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1519 [label="reader.DateParseHandling = Json.DateParseHandling.None", span="2562-2562", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1520 [label="Assert.IsTrue(reader.Read())", span="2564-2564", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1521 [label="Assert.IsTrue(reader.Read())", span="2565-2565", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1522 [label="Assert.AreEqual(@''1970-01-01T00:00:00Z'', reader.Value)", span="2566-2566", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1523 [label="Assert.AreEqual(typeof(string), reader.ValueType)", span="2567-2567", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1524 [label="Assert.IsTrue(reader.Read())", span="2568-2568", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1525 [label="Assert.AreEqual(@''/Date(0)/'', reader.Value)", span="2569-2569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1526 [label="Assert.AreEqual(typeof(string), reader.ValueType)", span="2570-2570", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1527 [label="Assert.IsTrue(reader.Read())", span="2571-2571", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1529 [label="reader.DateParseHandling = Json.DateParseHandling.DateTime", span="2575-2575", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1530 [label="Assert.IsTrue(reader.Read())", span="2577-2577", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1531 [label="reader.ReadAsDateTimeOffset()", span="2578-2578", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1532 [label="Assert.AreEqual(new DateTimeOffset(JsonConvert.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2579-2579", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1533 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2580-2580", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1534 [label="reader.ReadAsDateTimeOffset()", span="2581-2581", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1535 [label="Assert.AreEqual(new DateTimeOffset(JsonConvert.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2582-2582", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1536 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2583-2583", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1537 [label="Assert.IsTrue(reader.Read())", span="2584-2584", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1539 [label="reader.DateParseHandling = Json.DateParseHandling.DateTimeOffset", span="2588-2588", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1540 [label="Assert.IsTrue(reader.Read())", span="2590-2590", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1541 [label="reader.ReadAsDateTime()", span="2591-2591", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1542 [label="Assert.AreEqual(new DateTime(JsonConvert.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2592-2592", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1543 [label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2593-2593", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1544 [label="reader.ReadAsDateTime()", span="2594-2594", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1545 [label="Assert.AreEqual(new DateTime(JsonConvert.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2595-2595", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1546 [label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2596-2596", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1547 [label="Assert.IsTrue(reader.Read())", span="2597-2597", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_1548 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", span="2531-2531", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="DataTableConverterTests.cs"];
m2_39 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", span="154-154", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_40 [label="Assert.AreEqual(''ABC \ud800\udc00 DEF'', ReadString(''ABC \\ud800\\udc00 DEF''))", span="157-157", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_41 [label="Assert.AreEqual(''ABC \ufffd\ufffd DEF'', ReadString(''ABC \\ud800\\ud800 DEF''))", span="160-160", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_42 [label="Assert.AreEqual(''ABC \ufffd\ufffd\u1234 DEF'', ReadString(''ABC \\ud800\\ud800\\u1234 DEF''))", span="163-163", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_43 [label="Assert.AreEqual(''ABC \ufffd\ufffd\ufffd DEF'', ReadString(''ABC \\ud800\\ud800\\ud800 DEF''))", span="166-166", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_44 [label="Assert.AreEqual(''ABC \ufffd\ud800\udc00 DEF'', ReadString(''ABC \\ud800\\ud800\\udc00 DEF''))", span="169-169", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_45 [label="Assert.AreEqual(''ABC \ufffd'', ReadString(''ABC \\ud800''))", span="172-172", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_46 [label="Assert.AreEqual(''ABC \ufffd DEF'', ReadString(''ABC \\ud800 DEF''))", span="175-175", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_47 [label="Assert.AreEqual(''ABC \ufffd\ufffd DEF'', ReadString(''ABC \\udc00\\ud800 DEF''))", span="178-178", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_48 [label="Assert.AreEqual(''\ufffd\ufffd\ufffd'', ReadString(''\udc00\ud800\ud800''))", span="181-181", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_49 [label="Assert.AreEqual(''ABC \ufffd\b'', ReadString(''ABC \\ud800\\b''))", span="183-183", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_50 [label="Assert.AreEqual(''ABC \ufffd '', ReadString(''ABC \\ud800 ''))", span="184-184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_51 [label="Assert.AreEqual(''ABC \b\ufffd'', ReadString(''ABC \\b\\ud800''))", span="185-185", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_52 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", span="154-154", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="DataTableConverterTests.cs"];
m2_845 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", span="1463-1463", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="DataTableConverterTests.cs"];
m2_846 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1465-1465", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="DataTableConverterTests.cs"];
m2_847 [label="Assert.IsNull(reader.ReadAsDateTimeOffset())", span="1467-1467", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="DataTableConverterTests.cs"];
m2_848 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1468-1468", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="DataTableConverterTests.cs"];
m2_849 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", span="1463-1463", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="DataTableConverterTests.cs"];
m2_1627 [label="Entry Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", span="2748-2748", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1628 [label="int toReturn = Math.Min(count, this.bytesPerRead)", span="2750-2750", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1631 [label="Array.Copy(this.bytes, this.totalBytesRead, buffer, offset, toReturn)", span="2754-2754", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1629 [label="toReturn = Math.Min(toReturn, this.bytes.Length - this.totalBytesRead)", span="2751-2751", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1630 [label="toReturn > 0", span="2752-2752", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1632 [label="this.totalBytesRead += toReturn", span="2757-2757", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1633 [label="return toReturn;", span="2758-2758", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1634 [label="Exit Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", span="2748-2748", cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="DataTableConverterTests.cs"];
m2_1339 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", span="2284-2284", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1340 [label="string json = @''[0,1,2 , 3]''", span="2286-2286", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1341 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2288-2288", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1342 [label="reader.Read()", span="2290-2290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1343 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2291-2291", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1344 [label="reader.Read()", span="2293-2293", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1345 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2294-2294", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1346 [label="reader.Read()", span="2296-2296", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1347 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2297-2297", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1348 [label="reader.Read()", span="2299-2299", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1349 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2300-2300", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1350 [label="reader.Read()", span="2302-2302", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1351 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2303-2303", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1352 [label="reader.Read()", span="2305-2305", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1353 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2306-2306", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_1354 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", span="2284-2284", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="DataTableConverterTests.cs"];
m2_872 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", span="1514-1514", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_873 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[/*hi*/1/*hi*/,2/*hi*/]''))", span="1516-1516", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_874 [label="byte[] data = reader.ReadAsBytes()", span="1518-1518", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_875 [label="Assert.AreEqual(2, data.Length)", span="1519-1519", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_876 [label="Assert.AreEqual(1, data[0])", span="1520-1520", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_877 [label="Assert.AreEqual(2, data[1])", span="1521-1521", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_878 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", span="1514-1514", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="DataTableConverterTests.cs"];
m2_62 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="DataTableConverterTests.cs"];
m2_758 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", span="1329-1329", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_759 [label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1331-1331", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_760 [label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1332-1332", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_761 [label="Assert.IsTrue(jsonReader.Read())", span="1334-1334", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_762 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1335-1335", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_763 [label="Assert.IsTrue(jsonReader.Read())", span="1337-1337", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_764 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1338-1338", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_765 [label="Assert.AreEqual(250L, jsonReader.Value)", span="1339-1339", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_766 [label="Assert.IsTrue(jsonReader.Read())", span="1341-1341", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_767 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1342-1342", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_768 [label="Assert.AreEqual(250L, jsonReader.Value)", span="1343-1343", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_769 [label="Assert.IsTrue(jsonReader.Read())", span="1345-1345", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_770 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1346-1346", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_771 [label="Assert.AreEqual(250L, jsonReader.Value)", span="1347-1347", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_772 [label="Assert.IsTrue(jsonReader.Read())", span="1349-1349", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_773 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1350-1350", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_774 [label="Assert.IsFalse(jsonReader.Read())", span="1352-1352", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_775 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", span="1329-1329", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="DataTableConverterTests.cs"];
m2_1165 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", span="2000-2000", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1166 [label="string json = ''new Date\n()''", span="2002-2002", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1167 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2003-2003", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1168 [label="Assert.IsTrue(reader.Read())", span="2005-2005", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1169 [label="Assert.AreEqual(''Date'', reader.Value)", span="2006-2006", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1170 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2007-2007", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1171 [label="Assert.IsTrue(reader.Read())", span="2009-2009", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1172 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2010-2010", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_1173 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", span="2000-2000", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="DataTableConverterTests.cs"];
m2_524 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", span="963-963", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_525 [label="string helloWorld = ''Hello world!''", span="965-965", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_526 [label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="966-966", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_527 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{num:1,data:''' + Convert.ToBase64String(helloWorldData) + @'''}''))", span="968-968", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_535 [label="CollectionAssert.AreEquivalent(helloWorldData, data)", span="976-976", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_528 [label="Assert.IsTrue(reader.Read())", span="969-969", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_529 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="970-970", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_530 [label="Assert.IsTrue(reader.Read())", span="971-971", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_531 [label="Assert.IsTrue(reader.Read())", span="972-972", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_532 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="973-973", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_533 [label="Assert.IsTrue(reader.Read())", span="974-974", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_534 [label="byte[] data = reader.ReadAsBytes()", span="975-975", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_536 [label="Assert.AreEqual(JsonToken.Bytes, reader.TokenType)", span="977-977", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_537 [label="Assert.IsTrue(reader.Read())", span="978-978", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_538 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="979-979", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_539 [label="Assert.IsFalse(reader.Read())", span="981-981", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_540 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", span="963-963", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="DataTableConverterTests.cs"];
m2_338 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="DataTableConverterTests.cs"];
m2_621 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)", span="533-533", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)", file="DataTableConverterTests.cs"];
m2_833 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", span="1440-1440", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="DataTableConverterTests.cs"];
m2_834 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1442-1442", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="DataTableConverterTests.cs"];
m2_835 [label="Assert.IsNull(reader.ReadAsBytes())", span="1444-1444", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="DataTableConverterTests.cs"];
m2_836 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1445-1445", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="DataTableConverterTests.cs"];
m2_837 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", span="1440-1440", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="DataTableConverterTests.cs"];
m2_617 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="364-364", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="DataTableConverterTests.cs"];
m2_424 [label="Entry Newtonsoft.Json.JsonReader.ReadAsBytes()", span="339-339", cluster="Newtonsoft.Json.JsonReader.ReadAsBytes()", file="DataTableConverterTests.cs"];
m2_1551 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDateTime()", span="352-352", cluster="Newtonsoft.Json.JsonTextReader.ReadAsDateTime()", file="DataTableConverterTests.cs"];
m2_316 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="DataTableConverterTests.cs"];
m2_1174 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", span="2014-2014", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1175 [label="string json = ''[,,, \n\r\n \0   \r  , ,    ]''", span="2016-2016", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1176 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2017-2017", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1177 [label="Assert.IsTrue(reader.Read())", span="2019-2019", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1178 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2020-2020", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1179 [label="Assert.IsTrue(reader.Read())", span="2022-2022", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1180 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2023-2023", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1181 [label="Assert.IsTrue(reader.Read())", span="2025-2025", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1182 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2026-2026", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1183 [label="Assert.IsTrue(reader.Read())", span="2028-2028", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1184 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2029-2029", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1185 [label="Assert.IsTrue(reader.Read())", span="2031-2031", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1186 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2032-2032", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1187 [label="Assert.IsTrue(reader.Read())", span="2034-2034", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1188 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2035-2035", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1189 [label="Assert.IsTrue(reader.Read())", span="2037-2037", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1190 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2038-2038", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1191 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", span="2014-2014", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="DataTableConverterTests.cs"];
m2_1010 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", span="1729-1729", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1011 [label="string json = @''{''''Offset'''':''''1/30/2011''''}''", span="1731-1731", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1012 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1733-1733", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1013 [label="reader.Culture = new CultureInfo(''en-US'')", span="1734-1734", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1014 [label="Assert.IsTrue(reader.Read())", span="1736-1736", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1015 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1737-1737", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1016 [label="Assert.IsTrue(reader.Read())", span="1739-1739", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1017 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1740-1740", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1018 [label="reader.ReadAsDateTimeOffset()", span="1742-1742", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1019 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1743-1743", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1020 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1744-1744", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1021 [label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="1746-1746", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1023 [label="Assert.IsTrue(reader.Read())", span="1749-1749", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1024 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1750-1750", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1022 [label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="1747-1747", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_1025 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", span="1729-1729", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="DataTableConverterTests.cs"];
m2_340 [label="Entry Newtonsoft.Json.JsonTextWriter.WriteStartArray()", span="161-161", cluster="Newtonsoft.Json.JsonTextWriter.WriteStartArray()", file="DataTableConverterTests.cs"];
m2_1009 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="DataTableConverterTests.cs"];
m2_1625 [label="Entry Newtonsoft.Json.Tests.SlowStream.Flush()", span="2733-2733", cluster="Newtonsoft.Json.Tests.SlowStream.Flush()", file="DataTableConverterTests.cs"];
m2_1626 [label="Exit Newtonsoft.Json.Tests.SlowStream.Flush()", span="2733-2733", cluster="Newtonsoft.Json.Tests.SlowStream.Flush()", file="DataTableConverterTests.cs"];
m2_619 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="DataTableConverterTests.cs"];
m2_818 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsInt32()", span="334-334", cluster="Newtonsoft.Json.JsonTextReader.ReadAsInt32()", file="DataTableConverterTests.cs"];
m2_60 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="DataTableConverterTests.cs"];
m2_858 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", span="1486-1486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="DataTableConverterTests.cs"];
m2_859 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1488-1488", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="DataTableConverterTests.cs"];
m2_860 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error reading bytes. Unexpected token: StartConstructor. Path '', line 1, position 9.'',\r\n        () =>\r\n        {\r\n          reader.ReadAsBytes();\r\n        })", span="1490-1495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="DataTableConverterTests.cs"];
m2_861 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", span="1486-1486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="DataTableConverterTests.cs"];
m2_61 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="DataTableConverterTests.cs"];
m2_614 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(int)", span="838-838", cluster="Newtonsoft.Json.JsonWriter.WriteValue(int)", file="DataTableConverterTests.cs"];
m2_130 [label="Entry Newtonsoft.Json.JsonTextReader.SetCharBuffer(char[])", span="83-83", cluster="Newtonsoft.Json.JsonTextReader.SetCharBuffer(char[])", file="DataTableConverterTests.cs"];
m2_939 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", span="1620-1620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_940 [label="string json = @''{''''Offset'''':''''\/Date(946706400000-0600)\/''''}''", span="1622-1622", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_941 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1624-1624", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_942 [label="Assert.IsTrue(reader.Read())", span="1626-1626", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_943 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1627-1627", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_944 [label="Assert.IsTrue(reader.Read())", span="1629-1629", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_945 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1630-1630", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_946 [label="reader.ReadAsDateTimeOffset()", span="1632-1632", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_947 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1633-1633", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_948 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1634-1634", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_949 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(-6)), reader.Value)", span="1635-1635", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_950 [label="Assert.IsTrue(reader.Read())", span="1637-1637", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_951 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1638-1638", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_952 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", span="1620-1620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="DataTableConverterTests.cs"];
m2_1067 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", span="1820-1820", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="DataTableConverterTests.cs"];
m2_1068 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nul''))", span="1822-1822", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="DataTableConverterTests.cs"];
m2_1069 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n        ''Error parsing null value. Path '', line 0, position 0.'',\r\n        () =>\r\n          {\r\n            reader.Read();\r\n          })", span="1824-1829", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="DataTableConverterTests.cs"];
m2_1070 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", span="1820-1820", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="DataTableConverterTests.cs"];
m2_1410 [label="Entry double.ToString(string)", span="0-0", cluster="double.ToString(string)", file="DataTableConverterTests.cs"];
m2_893 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", span="1551-1551", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_894 [label="string json = @''{''''Message'''':''''Hi,I\u0092ve send you smth''''}''", span="1553-1553", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_895 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1555-1555", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_896 [label="reader.SetCharBuffer(new char[5])", span="1556-1556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_897 [label="Assert.IsTrue(reader.Read())", span="1558-1558", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_898 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1559-1559", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_899 [label="Assert.IsTrue(reader.Read())", span="1561-1561", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_900 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1562-1562", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_901 [label="Assert.AreEqual(''Message'', reader.Value)", span="1563-1563", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_902 [label="Assert.IsTrue(reader.Read())", span="1565-1565", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_903 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1566-1566", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_904 [label="Assert.AreEqual(@''Hi,I'' + '\u0092' + ''ve send you smth'', reader.Value)", span="1567-1567", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_905 [label="Assert.IsTrue(reader.Read())", span="1569-1569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_906 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1570-1570", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_907 [label="Assert.IsFalse(reader.Read())", span="1572-1572", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_908 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", span="1551-1551", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="DataTableConverterTests.cs"];
m2_1647 [label="Newtonsoft.Json.Tests.JsonTextReaderTest", span="", file="DataTableConverterTests.cs"];
m2_1648 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1649 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1650 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1651 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1652 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1653 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1654 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1655 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1656 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1657 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1658 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1659 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1660 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1661 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1662 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1663 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1664 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1665 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1666 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1667 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1668 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1669 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1670 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1671 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1672 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1673 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1674 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1675 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1676 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1677 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1678 [label=reader, span="", file="DataTableConverterTests.cs"];
m2_1679 [label=jsonTextReader, span="", file="DataTableConverterTests.cs"];
m2_1680 [label="Newtonsoft.Json.Tests.ToggleReaderError", span="", file="DataTableConverterTests.cs"];
m2_1681 [label="Newtonsoft.Json.Tests.SlowStream", span="", file="DataTableConverterTests.cs"];
m3_308 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ObjectWithDateTimeOffset.ObjectWithDateTimeOffset()", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ObjectWithDateTimeOffset.ObjectWithDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_226 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.SetValue()", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetValue()", file="DefaultContractResolver.cs"];
m3_227 [label="ExceptionAssert.Throws<InvalidOperationException>(() =>\r\n            {\r\n                JToken t = new JValue(5L);\r\n                t[0] = new JValue(3);\r\n            }, ''Cannot set child value on Newtonsoft.Json.Linq.JValue.'')", span="363-367", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetValue()", file="DefaultContractResolver.cs"];
m3_228 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.SetValue()", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetValue()", file="DefaultContractResolver.cs"];
m3_263 [label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.Cast<TResult>()", file="DefaultContractResolver.cs"];
m3_144 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)", file="DefaultContractResolver.cs"];
m3_96 [label="JsonToken.Float", span="211-211", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_476 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="76-76", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="DefaultContractResolver.cs"];
m3_204 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Previous()", span="332-332", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Previous()", file="DefaultContractResolver.cs"];
m3_205 [label="JValue v = new JValue(true)", span="334-334", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Previous()", file="DefaultContractResolver.cs"];
m3_206 [label="Assert.IsNull(v.Previous)", span="335-335", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Previous()", file="DefaultContractResolver.cs"];
m3_207 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Previous()", span="332-332", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Previous()", file="DefaultContractResolver.cs"];
m3_493 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="DefaultContractResolver.cs"];
m3_208 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="DefaultContractResolver.cs"];
m3_112 [label="Entry System.Type.MakeArrayType()", span="0-0", cluster="System.Type.MakeArrayType()", file="DefaultContractResolver.cs"];
m3_366 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt16()", span="557-557", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt16()", file="DefaultContractResolver.cs"];
m3_367 [label="Assert.AreEqual(UInt16.MaxValue, Convert.ToUInt16(new JValue(UInt16.MaxValue)))", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt16()", file="DefaultContractResolver.cs"];
m3_368 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt16()", span="557-557", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt16()", file="DefaultContractResolver.cs"];
m3_11 [label="writer.WriteEndObject()", span="68-68", cluster="Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_13 [label="Exit Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="46-46", cluster="Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_15 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="405-405", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="DefaultContractResolver.cs"];
m3_17 [label="Entry Unk.WritePropertyName", span="", cluster="Unk.WritePropertyName", file="DefaultContractResolver.cs"];
m3_19 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="413-413", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="DefaultContractResolver.cs"];
m3_21 [label="Entry Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="82-82", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_23 [label="return null;", span="86-86", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_25 [label="dt == null", span="91-91", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_12 [label="writer.WriteEndArray()", span="71-71", cluster="Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_14 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="421-421", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="DefaultContractResolver.cs"];
m3_16 [label="Entry Unk.GetResolvedPropertyName", span="", cluster="Unk.GetResolvedPropertyName", file="DefaultContractResolver.cs"];
m3_18 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1043-1043", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="DefaultContractResolver.cs"];
m3_20 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="429-429", cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="DefaultContractResolver.cs"];
m3_22 [label="reader.TokenType == JsonToken.Null", span="84-84", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_24 [label="DataTable dt = existingValue as DataTable", span="89-89", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_26 [label="dt = (objectType == typeof(DataTable))\r\n                    ? new DataTable()\r\n                    : (DataTable)Activator.CreateInstance(objectType)", span="94-96", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_80 [label="Assert.AreEqual(JTokenType.Uri, v.Type)", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ChangeValue()", file="DefaultContractResolver.cs"];
m3_266 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="DefaultContractResolver.cs"];
m3_425 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, int, System.TimeSpan)", file="DefaultContractResolver.cs"];
m3_445 [label="Entry System.Text.Encoding.GetString(byte[])", span="0-0", cluster="System.Text.Encoding.GetString(byte[])", file="DefaultContractResolver.cs"];
m3_494 [label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0", cluster="System.TimeSpan.Add(System.TimeSpan)", file="DefaultContractResolver.cs"];
m3_155 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="DefaultContractResolver.cs"];
m3_159 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="370-370", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="DefaultContractResolver.cs"];
m3_310 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="392-392", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="DefaultContractResolver.cs"];
m3_346 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32_BigInteger()", span="526-526", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32_BigInteger()", file="DefaultContractResolver.cs"];
m3_347 [label="Assert.AreEqual(123, Convert.ToInt32(new JValue(BigInteger.Parse(''123''))))", span="528-528", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32_BigInteger()", file="DefaultContractResolver.cs"];
m3_348 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32_BigInteger()", span="526-526", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32_BigInteger()", file="DefaultContractResolver.cs"];
m3_335 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean()", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean()", file="DefaultContractResolver.cs"];
m3_336 [label="Assert.AreEqual(true, Convert.ToBoolean(new JValue(true)))", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean()", file="DefaultContractResolver.cs"];
m3_337 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean()", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean()", file="DefaultContractResolver.cs"];
m3_199 [label="Entry Newtonsoft.Json.Linq.JToken.Remove()", span="382-382", cluster="Newtonsoft.Json.Linq.JToken.Remove()", file="DefaultContractResolver.cs"];
m3_170 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.First()", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.First()", file="DefaultContractResolver.cs"];
m3_171 [label="ExceptionAssert.Throws<InvalidOperationException>(() =>\r\n            {\r\n                JValue v = new JValue(true);\r\n                JToken first = v.First;\r\n            }, ''Cannot access child value on Newtonsoft.Json.Linq.JValue.'')", span="287-291", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.First()", file="DefaultContractResolver.cs"];
m3_172 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.First()", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.First()", file="DefaultContractResolver.cs"];
m3_97 [label="JsonToken.String", span="212-212", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_88 [label="BigInteger i = BigInteger.Parse(''123456789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999990'')", span="182-182", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ChangeValue()", file="DefaultContractResolver.cs"];
m3_327 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_332 [label="CustomAssert.IsInstanceOfType(typeof(DateTimeOffset), startDateTime)", span="501-501", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_331 [label="object startDateTime = obj[''startDateTime'']", span="499-499", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_330 [label="JObject obj = (JObject)JsonConvert.DeserializeObject(content, jsonSerializerSettings)", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_328 [label="var content = @''{''''startDateTime'''':''''2012-07-19T14:30:00+09:30''''}''", span="494-494", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_329 [label="var jsonSerializerSettings = new JsonSerializerSettings() { DateFormatHandling = DateFormatHandling.IsoDateFormat, DateParseHandling = DateParseHandling.DateTimeOffset, DateTimeZoneHandling = DateTimeZoneHandling.RoundtripKind }", span="496-496", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_333 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadDatesAsDateTimeOffsetViaJsonConvert()", file="DefaultContractResolver.cs"];
m3_0 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", span="56-56", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_1 [label="JValue v = JValue.CreateUndefined()", span="58-58", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_2 [label="Assert.AreEqual(JTokenType.Undefined, v.Type)", span="60-60", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_3 [label="Assert.AreEqual(null, v.Value)", span="61-61", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_5 [label="Assert.AreEqual(''undefined'', v.ToString(Formatting.None))", span="64-64", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_8 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="DefaultContractResolver.cs"];
m3_9 [label="Entry Newtonsoft.Json.Linq.JValue.ToString()", span="885-885", cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="DefaultContractResolver.cs"];
m3_10 [label="Entry Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="430-430", cluster="Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="DefaultContractResolver.cs"];
m3_4 [label="Assert.AreEqual('''', v.ToString())", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_6 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", span="56-56", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.UndefinedTests()", file="DefaultContractResolver.cs"];
m3_7 [label="Entry Newtonsoft.Json.Linq.JValue.CreateUndefined()", span="594-594", cluster="Newtonsoft.Json.Linq.JValue.CreateUndefined()", file="DefaultContractResolver.cs"];
m3_145 [label="Entry JValue.cstr", span="", cluster="JValue.cstr", file="DefaultContractResolver.cs"];
m3_419 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", span="125-125", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", file="DefaultContractResolver.cs"];
m3_394 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal_Int64()", span="599-599", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal_Int64()", file="DefaultContractResolver.cs"];
m3_395 [label="Assert.AreEqual(123, Convert.ToDecimal(new JValue(123)))", span="601-601", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal_Int64()", file="DefaultContractResolver.cs"];
m3_396 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal_Int64()", span="599-599", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal_Int64()", file="DefaultContractResolver.cs"];
m3_143 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.Guid)", span="163-163", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.Guid)", file="DefaultContractResolver.cs"];
m3_259 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="101-101", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="DefaultContractResolver.cs"];
m3_142 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.TimeSpan)", span="181-181", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.TimeSpan)", file="DefaultContractResolver.cs"];
m3_94 [label="JsonToken.Integer", span="209-209", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_273 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", span="413-413", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", file="DefaultContractResolver.cs"];
m3_274 [label="float f = 5.2f", span="415-415", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", color=green, community=0, file="DefaultContractResolver.cs"];
m3_275 [label="JValue value = new JValue(f)", span="416-416", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", color=green, community=0, file="DefaultContractResolver.cs"];
m3_276 [label="string json = value.ToString(Formatting.None)", span="418-418", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", color=green, community=0, file="DefaultContractResolver.cs"];
m3_277 [label="Assert.AreEqual(''5.2'', json)", span="420-420", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", color=green, community=0, file="DefaultContractResolver.cs"];
m3_278 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", span="413-413", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteSingle()", file="DefaultContractResolver.cs"];
m3_547 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", span="862-862", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_550 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="867-867", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_551 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="868-868", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_552 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="869-869", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_553 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="870-870", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_556 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="875-875", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_557 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="876-876", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_558 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="877-877", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_559 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="878-878", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_562 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="883-883", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_563 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="884-884", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_564 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="885-885", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_565 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="886-886", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_568 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="891-891", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_569 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="892-892", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_570 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="893-893", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_571 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="894-894", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_574 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="899-899", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_575 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="900-900", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_576 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="901-901", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_577 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="902-902", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_580 [label="Assert.AreEqual(0, v1.CompareTo(v2))", span="907-907", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_581 [label="Assert.AreEqual(0, ((IComparable)v1).CompareTo(v2))", span="908-908", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_582 [label="Assert.AreEqual(0, v2.CompareTo(v1))", span="909-909", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_583 [label="Assert.AreEqual(0, ((IComparable)v2).CompareTo(v1))", span="910-910", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_586 [label="Assert.AreEqual(0, v1.CompareTo(v2))", span="915-915", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_587 [label="Assert.AreEqual(0, ((IComparable)v1).CompareTo(v2))", span="916-916", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_588 [label="Assert.AreEqual(0, v2.CompareTo(v1))", span="917-917", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_589 [label="Assert.AreEqual(0, ((IComparable)v2).CompareTo(v1))", span="918-918", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_592 [label="Assert.AreEqual(0, v1.CompareTo(v2))", span="923-923", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_593 [label="Assert.AreEqual(0, ((IComparable)v1).CompareTo(v2))", span="924-924", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_594 [label="Assert.AreEqual(0, v2.CompareTo(v1))", span="925-925", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_595 [label="Assert.AreEqual(0, ((IComparable)v2).CompareTo(v1))", span="926-926", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_598 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="931-931", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_599 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="932-932", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_600 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="933-933", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_601 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="934-934", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_604 [label="Assert.AreEqual(1, v1.CompareTo(v2))", span="939-939", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_605 [label="Assert.AreEqual(1, ((IComparable)v1).CompareTo(v2))", span="940-940", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_606 [label="Assert.AreEqual(-1, v2.CompareTo(v1))", span="941-941", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_607 [label="Assert.AreEqual(-1, ((IComparable)v2).CompareTo(v1))", span="942-942", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_610 [label="Assert.AreEqual(1, v1.CompareTo(v2))", span="947-947", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_611 [label="Assert.AreEqual(1, ((IComparable)v1).CompareTo(v2))", span="948-948", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_612 [label="Assert.AreEqual(-1, v2.CompareTo(v1))", span="949-949", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_613 [label="Assert.AreEqual(-1, ((IComparable)v2).CompareTo(v1))", span="950-950", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_616 [label="Assert.AreEqual(-1, v1.CompareTo(v2))", span="955-955", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_617 [label="Assert.AreEqual(-1, ((IComparable)v1).CompareTo(v2))", span="956-956", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_618 [label="Assert.AreEqual(1, v2.CompareTo(v1))", span="957-957", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_619 [label="Assert.AreEqual(1, ((IComparable)v2).CompareTo(v1))", span="958-958", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_622 [label="Assert.AreEqual(1, v1.CompareTo(v2))", span="963-963", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_623 [label="Assert.AreEqual(1, ((IComparable)v1).CompareTo(v2))", span="964-964", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_626 [label="Assert.AreEqual(1, v1.CompareTo(v2))", span="969-969", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_627 [label="Assert.AreEqual(1, ((IComparable)v1).CompareTo(v2))", span="970-970", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_590 [label="v1 = new JValue(2f)", span="920-920", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_548 [label="JValue v1 = new JValue(1)", span="864-864", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_549 [label="JValue v2 = new JValue(''2'')", span="865-865", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_554 [label="v1 = new JValue(1.5)", span="872-872", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_555 [label="v2 = new JValue(''2'')", span="873-873", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_560 [label="v1 = new JValue(1.5m)", span="880-880", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_561 [label="v2 = new JValue(''2'')", span="881-881", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_566 [label="v1 = new JValue(1.5m)", span="888-888", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_567 [label="v2 = new JValue(2)", span="889-889", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_572 [label="v1 = new JValue(1.5m)", span="896-896", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_573 [label="v2 = new JValue(2.1)", span="897-897", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_578 [label="v1 = new JValue(2)", span="904-904", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_579 [label="v2 = new JValue(''2'')", span="905-905", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_584 [label="v1 = new JValue(2)", span="912-912", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_585 [label="v2 = new JValue(2m)", span="913-913", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_591 [label="v2 = new JValue(2m)", span="921-921", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_596 [label="v1 = new JValue(2)", span="928-928", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_597 [label="v2 = new JValue(''10'')", span="929-929", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_602 [label="v1 = new JValue(2)", span="936-936", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_603 [label="v2 = new JValue((object)null)", span="937-937", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_608 [label="v1 = new JValue(''2'')", span="944-944", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_609 [label="v2 = new JValue((object)null)", span="945-945", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_614 [label="v1 = new JValue((object)null)", span="952-952", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_615 [label="v2 = new JValue(''2'')", span="953-953", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_620 [label="v1 = new JValue(''2'')", span="960-960", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_621 [label="v2 = null", span="961-961", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_624 [label="v1 = new JValue((object)null)", span="966-966", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_625 [label="v2 = null", span="967-967", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_628 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", span="862-862", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CompareTo_MismatchedTypes()", file="DefaultContractResolver.cs"];
m3_169 [label="Entry Newtonsoft.Json.Linq.JToken.Children()", span="354-354", cluster="Newtonsoft.Json.Linq.JToken.Children()", file="DefaultContractResolver.cs"];
m3_510 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="110-110", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="DefaultContractResolver.cs"];
m3_42 [label="JsonConvert.DefaultSettings = () =>\r\n                {\r\n                    return new JsonSerializerSettings\r\n                    {\r\n                        Converters = { new MetroStringConverter() }\r\n                    };\r\n                }", span="110-116", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToObjectWithDefaultSettings()", file="DefaultContractResolver.cs"];
m3_234 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.CastNullValueToNonNullable()", span="371-371", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CastNullValueToNonNullable()", file="DefaultContractResolver.cs"];
m3_235 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JValue v = JValue.CreateNull();\r\n                int i = (int)v;\r\n            }, ''Can not convert Null to Int32.'')", span="373-377", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CastNullValueToNonNullable()", file="DefaultContractResolver.cs"];
m3_236 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.CastNullValueToNonNullable()", span="371-371", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CastNullValueToNonNullable()", file="DefaultContractResolver.cs"];
m3_505 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", file="DefaultContractResolver.cs"];
m3_507 [label="string json = o.ToString(Formatting.Indented, new ReadOnlyStringConverter())", span="798-798", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", file="DefaultContractResolver.cs"];
m3_506 [label="JObject o = new JObject(new JProperty(''name'', ''Hello World''))", span="796-796", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", file="DefaultContractResolver.cs"];
m3_508 [label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''Hello World''''\r\n}'', json)", span="800-802", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", file="DefaultContractResolver.cs"];
m3_509 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyConverterTest()", file="DefaultContractResolver.cs"];
m3_83 [label="Assert.AreEqual(JTokenType.TimeSpan, v.Type)", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ChangeValue()", file="DefaultContractResolver.cs"];
m3_511 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyStringConverter.ReadOnlyStringConverter()", span="770-770", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ReadOnlyStringConverter.ReadOnlyStringConverter()", file="DefaultContractResolver.cs"];
m3_467 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ToStringFormat()", span="713-713", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringFormat()", file="DefaultContractResolver.cs"];
m3_469 [label="Assert.AreEqual(''2013'', v.ToString(''yyyy''))", span="717-717", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringFormat()", file="DefaultContractResolver.cs"];
m3_468 [label="JValue v = new JValue(new DateTime(2013, 02, 01, 01, 02, 03, 04))", span="715-715", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringFormat()", file="DefaultContractResolver.cs"];
m3_470 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ToStringFormat()", span="713-713", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringFormat()", file="DefaultContractResolver.cs"];
m3_251 [label="Entry System.IFormattable.ToString(string, System.IFormatProvider)", span="0-0", cluster="System.IFormattable.ToString(string, System.IFormatProvider)", file="DefaultContractResolver.cs"];
m3_385 [label="Entry System.Convert.ToSingle(object)", span="0-0", cluster="System.Convert.ToSingle(object)", file="DefaultContractResolver.cs"];
m3_472 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ToStringNewTypes()", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringNewTypes()", file="DefaultContractResolver.cs"];
m3_473 [label="JArray a = new JArray(\r\n                new JValue(new DateTimeOffset(2013, 02, 01, 01, 02, 03, 04, TimeSpan.FromHours(1))),\r\n                new JValue(new BigInteger(5)),\r\n                new JValue(1.1f)\r\n                )", span="724-728", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringNewTypes()", file="DefaultContractResolver.cs"];
m3_474 [label="StringAssert.AreEqual(@''[\r\n  ''''2013-02-01T01:02:03.004+01:00'''',\r\n  5,\r\n  1.1\r\n]'', a.ToString())", span="730-734", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringNewTypes()", file="DefaultContractResolver.cs"];
m3_475 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ToStringNewTypes()", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringNewTypes()", file="DefaultContractResolver.cs"];
m3_50 [label="reader.ReadAndAssert()", span="139-139", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_91 [label="Assert.AreEqual(JTokenType.Integer, v.Type)", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ChangeValue()", file="DefaultContractResolver.cs"];
m3_325 [label="Entry Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)", span="339-339", cluster="Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_443 [label="Entry System.IO.TextWriter.Flush()", span="0-0", cluster="System.IO.TextWriter.Flush()", file="DefaultContractResolver.cs"];
m3_512 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", span="807-807", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_514 [label="Assert.AreEqual(JTokenType.Integer, v.Type)", span="810-810", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_516 [label="Assert.AreEqual(''Ordinal'', s)", span="813-813", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_518 [label="Assert.AreEqual(StringComparison.Ordinal, e)", span="816-816", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_521 [label="Assert.AreEqual(StringComparison.CurrentCultureIgnoreCase, e2)", span="820-820", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_523 [label="Assert.AreEqual(''CurrentCultureIgnoreCase'', s1)", span="823-823", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_525 [label="Assert.AreEqual(''CurrentCultureIgnoreCase'', s2)", span="826-826", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_528 [label="Assert.AreEqual(StringComparison.OrdinalIgnoreCase, e3)", span="830-830", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_532 [label="Assert.AreEqual(StringComparison.Ordinal, e4)", span="835-835", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_534 [label="Assert.AreEqual(StringComparison.Ordinal, e5)", span="838-838", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_536 [label="Assert.AreEqual(JTokenType.Integer, v.Type)", span="841-841", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_538 [label="Assert.AreEqual(StringComparison.OrdinalIgnoreCase, e6)", span="843-843", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_513 [label="JValue v = new JValue(StringComparison.Ordinal)", span="809-809", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_515 [label="string s = v.ToString()", span="812-812", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_517 [label="StringComparison e = v.ToObject<StringComparison>()", span="815-815", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_519 [label="dynamic d = new JValue(StringComparison.CurrentCultureIgnoreCase)", span="818-818", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_520 [label="StringComparison e2 = (StringComparison)d", span="819-819", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_522 [label="string s1 = d.ToString()", span="822-822", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_524 [label="string s2 = (string)d", span="825-825", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_526 [label="d = new JValue(''OrdinalIgnoreCase'')", span="828-828", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_527 [label="StringComparison e3 = (StringComparison)d", span="829-829", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_529 [label="v = new JValue(''ORDINAL'')", span="832-832", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_531 [label="StringComparison e4 = (StringComparison)d", span="834-834", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_533 [label="StringComparison e5 = v.ToObject<StringComparison>()", span="837-837", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_535 [label="v = new JValue((int)StringComparison.OrdinalIgnoreCase)", span="840-840", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_537 [label="StringComparison e6 = v.ToObject<StringComparison>()", span="842-842", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_539 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                d = new JValue(''value_a'');\r\n                EnumA e7 = (EnumA)d;\r\n                Assert.AreEqual(EnumA.ValueA, e7);\r\n            }, ''Requested value 'value_a' was not found.'')", span="846-851", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_530 [label="d = v", span="833-833", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_540 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", span="807-807", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.EnumTests()", file="DefaultContractResolver.cs"];
m3_353 [label="Entry System.Convert.ToChar(object)", span="0-0", cluster="System.Convert.ToChar(object)", file="DefaultContractResolver.cs"];
m3_138 [label="Entry Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", span="927-927", cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="DefaultContractResolver.cs"];
m3_200 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Root()", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Root()", file="DefaultContractResolver.cs"];
m3_202 [label="Assert.AreEqual(v, v.Root)", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Root()", file="DefaultContractResolver.cs"];
m3_201 [label="JValue v = new JValue(true)", span="327-327", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Root()", file="DefaultContractResolver.cs"];
m3_203 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Root()", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Root()", file="DefaultContractResolver.cs"];
m3_246 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", span="388-388", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", file="DefaultContractResolver.cs"];
m3_248 [label="Assert.AreEqual(1L, f)", span="391-391", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", file="DefaultContractResolver.cs"];
m3_249 [label="Assert.AreEqual(''01'', f.ToString(''00'', CultureInfo.InvariantCulture))", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", file="DefaultContractResolver.cs"];
m3_247 [label="IFormattable f = (new JValue(1).Value<IFormattable>())", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", file="DefaultContractResolver.cs"];
m3_250 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", span="388-388", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToFormattableType()", file="DefaultContractResolver.cs"];
m3_378 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt64()", span="575-575", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt64()", file="DefaultContractResolver.cs"];
m3_379 [label="Assert.AreEqual(UInt64.MaxValue, Convert.ToUInt64(new JValue(UInt64.MaxValue)))", span="577-577", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt64()", file="DefaultContractResolver.cs"];
m3_380 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt64()", span="575-575", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt64()", file="DefaultContractResolver.cs"];
m3_177 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Item()", span="295-295", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Item()", file="DefaultContractResolver.cs"];
m3_178 [label="ExceptionAssert.Throws<InvalidOperationException>(() =>\r\n            {\r\n                JValue v = new JValue(true);\r\n                JToken first = v[0];\r\n            }, ''Cannot access child value on Newtonsoft.Json.Linq.JValue.'')", span="297-301", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Item()", file="DefaultContractResolver.cs"];
m3_179 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Item()", span="295-295", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Item()", file="DefaultContractResolver.cs"];
m3_222 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(ulong)", span="98-98", cluster="Newtonsoft.Json.Linq.JValue.JValue(ulong)", file="DefaultContractResolver.cs"];
m3_299 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", file="DefaultContractResolver.cs"];
m3_300 [label="var dateTimeOffset = new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(3))", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", file="DefaultContractResolver.cs"];
m3_301 [label="var json = JsonConvert.SerializeObject(\r\n                new ObjectWithDateTimeOffset\r\n                {\r\n                    DateTimeOffset = dateTimeOffset\r\n                })", span="461-465", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", file="DefaultContractResolver.cs"];
m3_303 [label="o.Property(''DateTimeOffset'').Value = dateTimeOffset", span="468-468", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", file="DefaultContractResolver.cs"];
m3_302 [label="var o = JObject.Parse(json)", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", file="DefaultContractResolver.cs"];
m3_304 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.SetDateTimeOffsetProperty()", file="DefaultContractResolver.cs"];
m3_151 [label="Entry Newtonsoft.Json.Linq.JToken.Parse(string)", span="2168-2168", cluster="Newtonsoft.Json.Linq.JToken.Parse(string)", file="DefaultContractResolver.cs"];
m3_312 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", span="471-471", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_321 [label="Assert.AreEqual(TimeSpan.FromHours(1), offset)", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_323 [label="Assert.AreEqual(TimeSpan.FromHours(1), dateTimeOffset.Offset)", span="488-488", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_320 [label="TimeSpan offset = ((DateTimeOffset)d.Value).Offset", span="484-484", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_322 [label="DateTimeOffset dateTimeOffset = (DateTimeOffset)d", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_318 [label="var d = (JValue)obj[''d'']", span="481-481", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_319 [label="CustomAssert.IsInstanceOfType(typeof(DateTimeOffset), d.Value)", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_315 [label="var jsonReader = new JsonTextReader(stringReader)", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_314 [label="var stringReader = new StringReader(json)", span="475-475", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_317 [label="var obj = JObject.Load(jsonReader)", span="480-480", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_313 [label="var json = @''{ d: ''''\/Date(0+0100)\/'''' }''", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_316 [label="jsonReader.DateParseHandling = DateParseHandling.DateTimeOffset", span="478-478", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_324 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", span="471-471", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseAndConvertDateTimeOffset()", file="DefaultContractResolver.cs"];
m3_334 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", span="681-681", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="DefaultContractResolver.cs"];
m3_156 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Last()", span="267-267", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Last()", file="DefaultContractResolver.cs"];
m3_157 [label="ExceptionAssert.Throws<InvalidOperationException>(() =>\r\n            {\r\n                JValue v = new JValue(true);\r\n                JToken last = v.Last;\r\n            }, ''Cannot access child value on Newtonsoft.Json.Linq.JValue.'')", span="269-273", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Last()", file="DefaultContractResolver.cs"];
m3_158 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Last()", span="267-267", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Last()", file="DefaultContractResolver.cs"];
m3_397 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Decimal()", span="605-605", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Decimal()", file="DefaultContractResolver.cs"];
m3_398 [label="Assert.AreEqual(''79228162514264337593543950335'', Convert.ToString(new JValue(Decimal.MaxValue)))", span="607-607", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Decimal()", file="DefaultContractResolver.cs"];
m3_399 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Decimal()", span="605-605", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Decimal()", file="DefaultContractResolver.cs"];
m3_370 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt32()", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt32()", file="DefaultContractResolver.cs"];
m3_371 [label="Assert.AreEqual(UInt32.MaxValue, Convert.ToUInt32(new JValue(UInt32.MaxValue)))", span="565-565", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt32()", file="DefaultContractResolver.cs"];
m3_372 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt32()", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToUInt32()", file="DefaultContractResolver.cs"];
m3_262 [label="Entry System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.Values()", span="123-123", cluster="System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.Values()", file="DefaultContractResolver.cs"];
m3_221 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="DefaultContractResolver.cs"];
m3_441 [label="Entry Newtonsoft.Json.JsonSerializer.Create()", span="585-585", cluster="Newtonsoft.Json.JsonSerializer.Create()", file="DefaultContractResolver.cs"];
m3_52 [label="column == null", span="142-142", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_89 [label="Entry System.Array.Copy(System.Array, System.Array, int)", span="0-0", cluster="System.Array.Copy(System.Array, System.Array, int)", color=green, community=0, file="DefaultContractResolver.cs"];
m3_53 [label="Type columnType = GetColumnDataType(reader)", span="144-144", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_90 [label="Entry Unk.Deserialize", span="", cluster="Unk.Deserialize", file="DefaultContractResolver.cs"];
m3_54 [label="column = new DataColumn(columnName, columnType)", span="145-145", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_55 [label="dt.Columns.Add(column)", span="146-146", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_56 [label="column.DataType == typeof(DataTable)", span="149-149", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_57 [label="reader.TokenType == JsonToken.StartArray", span="151-151", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_58 [label="reader.ReadAndAssert()", span="153-153", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_59 [label="DataTable nestedDt = new DataTable()", span="156-156", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_60 [label="reader.TokenType != JsonToken.EndArray", span="158-158", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_61 [label="CreateRow(reader, nestedDt, serializer)", span="160-160", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_62 [label="reader.ReadAndAssert()", span="162-162", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_63 [label="dr[columnName] = nestedDt", span="165-165", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_64 [label="column.DataType.IsArray && column.DataType != typeof(byte[])", span="167-167", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_65 [label="reader.TokenType == JsonToken.StartArray", span="169-169", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_66 [label="reader.ReadAndAssert()", span="171-171", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_67 [label="List<object> o = new List<object>()", span="174-174", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_68 [label="reader.TokenType != JsonToken.EndArray", span="176-176", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_69 [label="o.Add(reader.Value)", span="178-178", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_70 [label="reader.ReadAndAssert()", span="179-179", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_72 [label="Array.Copy(o.ToArray(), destinationArray, o.Count)", span="183-183", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs", color=red, community=0];
m3_73 [label="dr[columnName] = destinationArray", span="185-185", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs", color=red, community=0];
m3_74 [label="object columnValue = (reader.Value != null)\r\n                        ? serializer.Deserialize(reader, column.DataType) ?? DBNull.Value\r\n                        : DBNull.Value", span="189-191", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs", color=red, community=0];
m3_75 [label="dr[columnName] = columnValue", span="193-193", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_76 [label="reader.ReadAndAssert()", span="196-196", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_77 [label="dr.EndEdit()", span="199-199", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_78 [label="dt.Rows.Add(dr)", span="200-200", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_79 [label="Exit Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", span="130-130", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_81 [label="Entry Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", span="203-203", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_82 [label="Entry DataColumn.cstr", span="", cluster="DataColumn.cstr", file="DefaultContractResolver.cs"];
m3_85 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="DefaultContractResolver.cs"];
m3_86 [label="Entry Unk.GetElementType", span="", cluster="Unk.GetElementType", file="DefaultContractResolver.cs"];
m3_87 [label="Entry Unk.CreateInstance", span="", cluster="Unk.CreateInstance", file="DefaultContractResolver.cs"];
m3_71 [label="Array destinationArray = Array.CreateInstance(column.DataType.GetElementType(), o.Count)", span="182-182", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_84 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DefaultContractResolver.cs"];
m3_92 [label="JsonToken tokenType = reader.TokenType", span="205-205", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_279 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(float)", span="116-116", cluster="Newtonsoft.Json.Linq.JValue.JValue(float)", file="DefaultContractResolver.cs"];
m3_241 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToCompatibleType()", span="381-381", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToCompatibleType()", file="DefaultContractResolver.cs"];
m3_243 [label="Assert.AreEqual(1L, c)", span="384-384", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToCompatibleType()", file="DefaultContractResolver.cs"];
m3_242 [label="IComparable c = (new JValue(1).Value<IComparable>())", span="383-383", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToCompatibleType()", file="DefaultContractResolver.cs"];
m3_244 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToCompatibleType()", span="381-381", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertValueToCompatibleType()", file="DefaultContractResolver.cs"];
m3_107 [label="return typeof(DataTable);", span="223-223", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_109 [label="return arrayType.MakeArrayType();", span="227-227", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", color=green, community=0, file="DefaultContractResolver.cs"];
m3_108 [label="Type arrayType = GetColumnDataType(reader)", span="226-226", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_110 [label="throw JsonSerializationException.Create(reader, ''Unexpected JSON token when reading DataTable: {0}''.FormatWith(CultureInfo.InvariantCulture, tokenType));", span="229-229", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", color=green, community=0, file="DefaultContractResolver.cs"];
m3_111 [label="Exit Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", span="203-203", cluster="Newtonsoft.Json.Converters.DataTableConverter.GetColumnDataType(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_477 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ToStringUri()", span="739-739", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringUri()", file="DefaultContractResolver.cs"];
m3_479 [label="StringAssert.AreEqual(@''[\r\n  ''''http://james.newtonking.com'''',\r\n  ''''http://james.newtonking.com/install?v=7.0.1''''\r\n]'', a.ToString())", span="746-749", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringUri()", file="DefaultContractResolver.cs"];
m3_478 [label="JArray a = new JArray(\r\n                new JValue(new Uri(''http://james.newtonking.com'')),\r\n                new JValue(new Uri(''http://james.newtonking.com/install?v=7.0.1''))\r\n                )", span="741-744", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringUri()", file="DefaultContractResolver.cs"];
m3_480 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ToStringUri()", span="739-739", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToStringUri()", file="DefaultContractResolver.cs"];
m3_439 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="DefaultContractResolver.cs"];
m3_164 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Children()", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Children()", file="DefaultContractResolver.cs"];
m3_167 [label="Assert.AreEqual(JEnumerable<JToken>.Empty, c)", span="281-281", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Children()", file="DefaultContractResolver.cs"];
m3_165 [label="JValue v = new JValue(true)", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Children()", file="DefaultContractResolver.cs"];
m3_166 [label="var c = v.Children()", span="280-280", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Children()", file="DefaultContractResolver.cs"];
m3_168 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Children()", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Children()", file="DefaultContractResolver.cs"];
m3_393 [label="Entry System.Convert.ToDecimal(object)", span="0-0", cluster="System.Convert.ToDecimal(object)", file="DefaultContractResolver.cs"];
m3_298 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="865-865", cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", file="DefaultContractResolver.cs"];
m3_382 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSingle()", span="581-581", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSingle()", file="DefaultContractResolver.cs"];
m3_383 [label="Assert.AreEqual(Single.MaxValue, Convert.ToSingle(new JValue(Single.MaxValue)))", span="583-583", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSingle()", file="DefaultContractResolver.cs"];
m3_384 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSingle()", span="581-581", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSingle()", file="DefaultContractResolver.cs"];
m3_40 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="DefaultContractResolver.cs"];
m3_446 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", span="678-678", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_448 [label="Assert.AreEqual(TypeCode.Object, v.GetTypeCode())", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_450 [label="Assert.AreEqual(TypeCode.Object, v.GetTypeCode())", span="684-684", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_452 [label="Assert.AreEqual(TypeCode.Object, v.GetTypeCode())", span="688-688", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_454 [label="Assert.AreEqual(TypeCode.Object, v.GetTypeCode())", span="693-693", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_447 [label="IConvertible v = new JValue(new Guid(''0B5D4F85-E94C-4143-94C8-35F2AAEBB100''))", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_449 [label="v = new JValue(new Uri(''http://www.google.com''))", span="683-683", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_451 [label="v = new JValue(new BigInteger(3))", span="687-687", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_453 [label="v = new JValue(new DateTimeOffset(2000, 12, 12, 12, 12, 12, TimeSpan.Zero))", span="692-692", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_455 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", span="678-678", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_442 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", span="1023-1023", cluster="Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", file="DefaultContractResolver.cs"];
m3_339 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean_String()", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean_String()", file="DefaultContractResolver.cs"];
m3_340 [label="Assert.AreEqual(true, Convert.ToBoolean(new JValue(''true'')))", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean_String()", file="DefaultContractResolver.cs"];
m3_341 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean_String()", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToBoolean_String()", file="DefaultContractResolver.cs"];
m3_32 [label="reader.TokenType != JsonToken.StartArray", span="113-113", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_34 [label="reader.ReadAndAssert()", span="118-118", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_35 [label="reader.TokenType != JsonToken.EndArray", span="120-120", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_33 [label="throw JsonSerializationException.Create(reader, ''Unexpected JSON token when reading DataTable. Expected StartArray, got {0}.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="115-115", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_36 [label="CreateRow(reader, dt, serializer)", span="122-122", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_37 [label="reader.ReadAndAssert()", span="124-124", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_223 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.HasValues()", span="355-355", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.HasValues()", file="DefaultContractResolver.cs"];
m3_224 [label="Assert.IsFalse((new JValue(5L)).HasValues)", span="357-357", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.HasValues()", file="DefaultContractResolver.cs"];
m3_225 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.HasValues()", span="355-355", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.HasValues()", file="DefaultContractResolver.cs"];
m3_44 [label="string s = v.ToObject<string>()", span="119-119", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToObjectWithDefaultSettings()", file="DefaultContractResolver.cs"];
m3_481 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", span="754-754", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_486 [label="Assert.AreEqual(expectedDate, date.Value)", span="760-760", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_491 [label="Assert.AreEqual(expectedDate2, date2.Value)", span="766-766", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_482 [label="DateTimeOffset expectedDate = new DateTimeOffset(2013, 08, 14, 4, 38, 31, TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(30)))", span="756-756", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_485 [label="JValue date = (JValue)JToken.ReadFrom(reader)", span="759-759", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_487 [label="DateTimeOffset expectedDate2 = new DateTimeOffset(2013, 08, 14, 4, 38, 31, TimeSpan.FromHours(12))", span="762-762", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_490 [label="JValue date2 = (JValue)JToken.ReadFrom(reader2)", span="765-765", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_483 [label="JsonTextReader reader = new JsonTextReader(new StringReader('''2013-08-14T04:38:31.000+1230'''))", span="757-757", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_484 [label="reader.DateParseHandling = DateParseHandling.DateTimeOffset", span="758-758", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_488 [label="JsonTextReader reader2 = new JsonTextReader(new StringReader('''2013-08-14T04:38:31.000+12'''))", span="763-763", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_489 [label="reader2.DateParseHandling = DateParseHandling.DateTimeOffset", span="764-764", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_492 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", span="754-754", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ParseIsoTimeZones()", file="DefaultContractResolver.cs"];
m3_30 [label="reader.TokenType == JsonToken.Null", span="107-107", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_43 [label="JValue v = new JValue('':::STRING:::'')", span="118-118", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToObjectWithDefaultSettings()", file="DefaultContractResolver.cs"];
m3_229 [label="Entry Unk.>", span="", cluster="Unk.>", file="DefaultContractResolver.cs"];
m3_389 [label="Entry System.Convert.ToDouble(object)", span="0-0", cluster="System.Convert.ToDouble(object)", file="DefaultContractResolver.cs"];
m3_374 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt64()", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt64()", file="DefaultContractResolver.cs"];
m3_375 [label="Assert.AreEqual(Int64.MaxValue, Convert.ToInt64(new JValue(Int64.MaxValue)))", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt64()", file="DefaultContractResolver.cs"];
m3_376 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt64()", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt64()", file="DefaultContractResolver.cs"];
m3_100 [label="Assert.AreEqual(null, commentValue.Value)", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_105 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_106 [label="Entry Newtonsoft.Json.Linq.JValue.CreateComment(string)", span="566-566", cluster="Newtonsoft.Json.Linq.JValue.CreateComment(string)", file="DefaultContractResolver.cs"];
m3_93 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(bool)", span="145-145", cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)", file="DefaultContractResolver.cs"];
m3_101 [label="Assert.AreEqual(JTokenType.Comment, commentValue.Type)", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_104 [label="Assert.AreEqual(JTokenType.Comment, commentValue.Type)", span="198-198", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_95 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="DefaultContractResolver.cs"];
m3_98 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_99 [label="JValue commentValue = JValue.CreateComment(null)", span="192-192", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_102 [label="commentValue.Value = ''Comment''", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_103 [label="Assert.AreEqual(''Comment'', commentValue.Value)", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.CreateComment()", file="DefaultContractResolver.cs"];
m3_146 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", span="249-249", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", file="DefaultContractResolver.cs"];
m3_148 [label="Assert.AreEqual(JTokenType.Integer, v.Type)", span="253-253", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", file="DefaultContractResolver.cs"];
m3_149 [label="Assert.AreEqual(BigInteger.Parse(''123456789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999990''), v.Value)", span="254-254", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", file="DefaultContractResolver.cs"];
m3_147 [label="JValue v = (JValue)JToken.Parse(''123456789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999990'')", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", file="DefaultContractResolver.cs"];
m3_150 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", span="249-249", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueParse()", file="DefaultContractResolver.cs"];
m3_265 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="DefaultContractResolver.cs"];
m3_361 [label="Entry System.Convert.ToByte(object)", span="0-0", cluster="System.Convert.ToByte(object)", file="DefaultContractResolver.cs"];
m3_28 [label="dt.TableName = (string)reader.Value", span="103-103", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_41 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)", file="DefaultContractResolver.cs"];
m3_45 [label="Entry Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", span="130-130", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_46 [label="DataRow dr = dt.NewRow()", span="132-132", cluster="Newtonsoft.Json.Converters.DataTableConverter.CreateRow(Newtonsoft.Json.JsonReader, DataTable, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_357 [label="Entry System.Convert.ToSByte(object)", span="0-0", cluster="System.Convert.ToSByte(object)", file="DefaultContractResolver.cs"];
m3_345 [label="Entry System.Convert.ToInt32(object)", span="0-0", cluster="System.Convert.ToInt32(object)", file="DefaultContractResolver.cs"];
m3_136 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="190-190", cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", file="DefaultContractResolver.cs"];
m3_386 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDouble()", span="587-587", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDouble()", file="DefaultContractResolver.cs"];
m3_387 [label="Assert.AreEqual(Double.MaxValue, Convert.ToDouble(new JValue(Double.MaxValue)))", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDouble()", file="DefaultContractResolver.cs"];
m3_388 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDouble()", span="587-587", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDouble()", file="DefaultContractResolver.cs"];
m3_252 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", span="397-397", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", file="DefaultContractResolver.cs"];
m3_257 [label="Assert.AreEqual(1.2d, orderedValues[2])", span="409-409", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", color=green, community=0, file="DefaultContractResolver.cs"];
m3_254 [label="IList<object> orderedValues = o.Values().Cast<JValue>().OrderBy(v => v).Select(v => v.Value).ToList()", span="405-405", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", file="DefaultContractResolver.cs"];
m3_256 [label="Assert.AreEqual(1.1m, orderedValues[1])", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", file="DefaultContractResolver.cs"];
m3_255 [label="Assert.AreEqual(1L, orderedValues[0])", span="407-407", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", file="DefaultContractResolver.cs"];
m3_253 [label="JObject o = new JObject(\r\n                new JProperty(''Integer'', new JValue(1)),\r\n                new JProperty(''Float'', new JValue(1.2d)),\r\n                new JProperty(''Decimal'', new JValue(1.1m))\r\n                )", span="399-403", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", file="DefaultContractResolver.cs"];
m3_258 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", span="397-397", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Ordering()", file="DefaultContractResolver.cs"];
m3_289 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="419-419", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="DefaultContractResolver.cs"];
m3_288 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1066-1066", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="DefaultContractResolver.cs"];
m3_404 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Null()", span="617-617", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Null()", file="DefaultContractResolver.cs"];
m3_405 [label="Assert.AreEqual(string.Empty, Convert.ToString(JValue.CreateNull()))", span="619-619", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Null()", file="DefaultContractResolver.cs"];
m3_406 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Null()", span="617-617", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Null()", file="DefaultContractResolver.cs"];
m3_287 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="557-557", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="DefaultContractResolver.cs"];
m3_401 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Uri()", span="611-611", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Uri()", file="DefaultContractResolver.cs"];
m3_402 [label="Assert.AreEqual(''http://www.google.com/'', Convert.ToString(new JValue(new Uri(''http://www.google.com''))))", span="613-613", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Uri()", file="DefaultContractResolver.cs"];
m3_403 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Uri()", span="611-611", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Uri()", file="DefaultContractResolver.cs"];
m3_27 [label="reader.TokenType == JsonToken.PropertyName", span="101-101", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_459 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", span="698-698", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_462 [label="Assert.AreEqual(9, i)", span="703-703", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_464 [label="Assert.AreEqual(new BigInteger(9), bi)", span="707-707", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_461 [label="int i = (int)v.ToType(typeof(int), CultureInfo.InvariantCulture)", span="702-702", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_463 [label="BigInteger bi = (BigInteger)v.ToType(typeof(BigInteger), CultureInfo.InvariantCulture)", span="706-706", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_460 [label="IConvertible v = new JValue(9.0m)", span="700-700", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_465 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", span="698-698", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ToType()", file="DefaultContractResolver.cs"];
m3_113 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_114 [label="JValue v", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_115 [label="v = new JValue(true)", span="214-214", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_141 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.Uri)", span="172-172", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.Uri)", file="DefaultContractResolver.cs"];
m3_471 [label="Entry Newtonsoft.Json.Linq.JValue.ToString(string)", span="902-902", cluster="Newtonsoft.Json.Linq.JValue.ToString(string)", file="DefaultContractResolver.cs"];
m3_541 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="DefaultContractResolver.cs"];
m3_306 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="DefaultContractResolver.cs"];
m3_362 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt16()", span="551-551", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt16()", file="DefaultContractResolver.cs"];
m3_363 [label="Assert.AreEqual(Int16.MaxValue, Convert.ToInt16(new JValue(Int16.MaxValue)))", span="553-553", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt16()", file="DefaultContractResolver.cs"];
m3_364 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt16()", span="551-551", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt16()", file="DefaultContractResolver.cs"];
m3_390 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal()", span="593-593", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal()", file="DefaultContractResolver.cs"];
m3_391 [label="Assert.AreEqual(Decimal.MaxValue, Convert.ToDecimal(new JValue(Decimal.MaxValue)))", span="595-595", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal()", file="DefaultContractResolver.cs"];
m3_392 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal()", span="593-593", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDecimal()", file="DefaultContractResolver.cs"];
m3_456 [label="Entry System.IConvertible.GetTypeCode()", span="0-0", cluster="System.IConvertible.GetTypeCode()", file="DefaultContractResolver.cs"];
m3_184 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Values()", span="305-305", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Values()", file="DefaultContractResolver.cs"];
m3_185 [label="ExceptionAssert.Throws<InvalidOperationException>(() =>\r\n            {\r\n                JValue v = new JValue(true);\r\n                v.Values<int>();\r\n            }, ''Cannot access child value on Newtonsoft.Json.Linq.JValue.'')", span="307-311", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Values()", file="DefaultContractResolver.cs"];
m3_186 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Values()", span="305-305", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Values()", file="DefaultContractResolver.cs"];
m3_630 [label="Entry System.IComparable.CompareTo(object)", span="0-0", cluster="System.IComparable.CompareTo(object)", file="DefaultContractResolver.cs"];
m3_116 [label="Assert.AreEqual(''True'', v.ToString())", span="215-215", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_365 [label="Entry System.Convert.ToInt16(object)", span="0-0", cluster="System.Convert.ToInt16(object)", file="DefaultContractResolver.cs"];
m3_264 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="DefaultContractResolver.cs"];
m3_458 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="DefaultContractResolver.cs"];
m3_411 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToType()", span="631-631", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToType()", file="DefaultContractResolver.cs"];
m3_412 [label="Assert.AreEqual(Int32.MaxValue, Convert.ChangeType(new JValue(Int32.MaxValue), typeof(Int32), CultureInfo.InvariantCulture))", span="633-633", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToType()", file="DefaultContractResolver.cs"];
m3_413 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToType()", span="631-631", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToType()", file="DefaultContractResolver.cs"];
m3_415 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime()", span="637-637", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime()", file="DefaultContractResolver.cs"];
m3_416 [label="Assert.AreEqual(new DateTime(2013, 02, 01, 01, 02, 03, 04), Convert.ToDateTime(new JValue(new DateTime(2013, 02, 01, 01, 02, 03, 04))))", span="639-639", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime()", file="DefaultContractResolver.cs"];
m3_417 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime()", span="637-637", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime()", file="DefaultContractResolver.cs"];
m3_47 [label="Entry lambda expression", span="110-116", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_48 [label="return new JsonSerializerSettings\r\n                    {\r\n                        Converters = { new MetroStringConverter() }\r\n                    };", span="112-115", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_49 [label="Exit lambda expression", span="110-116", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_51 [label="Entry Newtonsoft.Json.Tests.TestObjects.MetroStringConverter.MetroStringConverter()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.MetroStringConverter.MetroStringConverter()", file="DefaultContractResolver.cs"];
m3_545 [label="Assert.AreEqual(EnumA.ValueA, e7)", span="850-850", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_267 [label="Entry lambda expression", span="405-405", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_270 [label="Entry lambda expression", span="405-405", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_161 [label="JValue v = new JValue(true)", span="271-271", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_174 [label="JValue v = new JValue(true)", span="289-289", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_181 [label="JValue v = new JValue(true)", span="299-299", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_188 [label="JValue v = new JValue(true)", span="309-309", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_196 [label="JValue v = new JValue(true)", span="319-319", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_544 [label="EnumA e7 = (EnumA)d", span="849-849", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_546 [label="Exit lambda expression", span="846-851", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_269 [label="Exit lambda expression", span="405-405", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_268 [label=v, span="405-405", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_272 [label="Exit lambda expression", span="405-405", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_271 [label="v.Value", span="405-405", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_160 [label="Entry lambda expression", span="269-273", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_162 [label="JToken last = v.Last", span="272-272", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_173 [label="Entry lambda expression", span="287-291", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_175 [label="JToken first = v.First", span="290-290", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_180 [label="Entry lambda expression", span="297-301", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_182 [label="JToken first = v[0]", span="300-300", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_187 [label="Entry lambda expression", span="307-311", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_189 [label="v.Values<int>()", span="310-310", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_195 [label="Entry lambda expression", span="317-321", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_197 [label="v.Remove()", span="320-320", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_543 [label="d = new JValue(''value_a'')", span="848-848", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_231 [label="JToken t = new JValue(5L)", span="365-365", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_232 [label="t[0] = new JValue(3)", span="366-366", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_238 [label="JValue v = JValue.CreateNull()", span="375-375", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_542 [label="Entry lambda expression", span="846-851", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_163 [label="Exit lambda expression", span="269-273", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_176 [label="Exit lambda expression", span="287-291", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_183 [label="Exit lambda expression", span="297-301", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_190 [label="Exit lambda expression", span="307-311", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_198 [label="Exit lambda expression", span="317-321", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_230 [label="Entry lambda expression", span="363-367", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_233 [label="Exit lambda expression", span="363-367", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_237 [label="Entry lambda expression", span="373-377", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_239 [label="int i = (int)v", span="376-376", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_240 [label="Exit lambda expression", span="373-377", cluster="lambda expression", file="DefaultContractResolver.cs"];
m3_290 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="341-341", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="DefaultContractResolver.cs"];
m3_39 [label="Exit Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="82-82", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_342 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32()", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32()", file="DefaultContractResolver.cs"];
m3_343 [label="Assert.AreEqual(Int32.MaxValue, Convert.ToInt32(new JValue(Int32.MaxValue)))", span="521-521", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32()", file="DefaultContractResolver.cs"];
m3_344 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32()", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToInt32()", file="DefaultContractResolver.cs"];
m3_280 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", file="DefaultContractResolver.cs"];
m3_281 [label="var jTokenWriter = new JTokenWriter()", span="433-433", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", color=green, community=0, file="DefaultContractResolver.cs"];
m3_282 [label="new JsonSerializer().Serialize(jTokenWriter, rate)", span="434-434", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", file="DefaultContractResolver.cs"];
m3_283 [label="string json = jTokenWriter.Token.ToString()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", file="DefaultContractResolver.cs"];
m3_284 [label="StringAssert.AreEqual(@''{\r\n  ''''Compoundings'''': 12.166666666666666666666666667\r\n}'', json)", span="436-438", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", file="DefaultContractResolver.cs"];
m3_285 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.WriteFullDecimalPrecision()", file="DefaultContractResolver.cs"];
m3_440 [label="Entry System.IO.StreamWriter.StreamWriter(System.IO.Stream)", span="0-0", cluster="System.IO.StreamWriter.StreamWriter(System.IO.Stream)", file="DefaultContractResolver.cs"];
m3_420 [label="Entry System.Convert.ToDateTime(object)", span="0-0", cluster="System.Convert.ToDateTime(object)", file="DefaultContractResolver.cs"];
m3_352 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(char)", span="88-88", cluster="Newtonsoft.Json.Linq.JValue.JValue(char)", file="DefaultContractResolver.cs"];
m3_326 [label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="314-314", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="DefaultContractResolver.cs"];
m3_381 [label="Entry System.Convert.ToUInt64(object)", span="0-0", cluster="System.Convert.ToUInt64(object)", file="DefaultContractResolver.cs"];
m3_38 [label="return dt;", span="127-127", cluster="Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultContractResolver.cs"];
m3_260 [label="Entry JProperty.cstr", span="", cluster="JProperty.cstr", file="DefaultContractResolver.cs"];
m3_245 [label="Entry System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.Value<U>()", span="157-157", cluster="System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.Value<U>()", file="DefaultContractResolver.cs"];
m3_414 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="DefaultContractResolver.cs"];
m3_305 [label="Entry System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", file="DefaultContractResolver.cs"];
m3_213 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", file="DefaultContractResolver.cs"];
m3_214 [label="Assert.IsTrue(JToken.DeepEquals(new JValue(5L), new JValue(5)))", span="348-348", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", file="DefaultContractResolver.cs"];
m3_215 [label="Assert.IsFalse(JToken.DeepEquals(new JValue(5M), new JValue(5)))", span="349-349", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", file="DefaultContractResolver.cs"];
m3_216 [label="Assert.IsTrue(JToken.DeepEquals(new JValue((ulong)long.MaxValue), new JValue(long.MaxValue)))", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", file="DefaultContractResolver.cs"];
m3_217 [label="Assert.IsFalse(JToken.DeepEquals(new JValue(0.102410241024102424m), new JValue(0.102410241024102425m)))", span="351-351", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", file="DefaultContractResolver.cs"];
m3_218 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.DeepEquals()", file="DefaultContractResolver.cs"];
m3_377 [label="Entry System.Convert.ToInt64(object)", span="0-0", cluster="System.Convert.ToInt64(object)", file="DefaultContractResolver.cs"];
m3_307 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="DefaultContractResolver.cs"];
m3_297 [label="Entry Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", span="49-49", cluster="Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", file="DefaultContractResolver.cs"];
m3_311 [label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="249-249", cluster="Newtonsoft.Json.Linq.JObject.Property(string)", file="DefaultContractResolver.cs"];
m3_421 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime_DateTimeOffset()", span="644-644", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime_DateTimeOffset()", file="DefaultContractResolver.cs"];
m3_423 [label="Assert.AreEqual(new DateTime(2013, 02, 01, 01, 02, 03, 04), Convert.ToDateTime(new JValue(offset)))", span="648-648", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime_DateTimeOffset()", file="DefaultContractResolver.cs"];
m3_422 [label="var offset = new DateTimeOffset(2013, 02, 01, 01, 02, 03, 04, TimeSpan.Zero)", span="646-646", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime_DateTimeOffset()", file="DefaultContractResolver.cs"];
m3_424 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime_DateTimeOffset()", span="644-644", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToDateTime_DateTimeOffset()", file="DefaultContractResolver.cs"];
m3_139 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", span="51-51", cluster="Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", file="DefaultContractResolver.cs"];
m3_466 [label="Entry System.IConvertible.ToType(System.Type, System.IFormatProvider)", span="0-0", cluster="System.IConvertible.ToType(System.Type, System.IFormatProvider)", file="DefaultContractResolver.cs"];
m3_338 [label="Entry System.Convert.ToBoolean(object)", span="0-0", cluster="System.Convert.ToBoolean(object)", file="DefaultContractResolver.cs"];
m3_457 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="DefaultContractResolver.cs"];
m3_354 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSByte()", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSByte()", file="DefaultContractResolver.cs"];
m3_355 [label="Assert.AreEqual(SByte.MaxValue, Convert.ToSByte(new JValue(SByte.MaxValue)))", span="541-541", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSByte()", file="DefaultContractResolver.cs"];
m3_356 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSByte()", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToSByte()", file="DefaultContractResolver.cs"];
m3_152 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.JValueIConvertable()", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueIConvertable()", file="DefaultContractResolver.cs"];
m3_153 [label="Assert.IsTrue(new JValue(0) is IConvertible)", span="262-262", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueIConvertable()", file="DefaultContractResolver.cs"];
m3_154 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.JValueIConvertable()", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueIConvertable()", file="DefaultContractResolver.cs"];
m3_29 [label="Entry Newtonsoft.Json.Linq.JValue.CreateNull()", span="585-585", cluster="Newtonsoft.Json.Linq.JValue.CreateNull()", file="DefaultContractResolver.cs"];
m3_31 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="DefaultContractResolver.cs"];
m3_418 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, int)", file="DefaultContractResolver.cs"];
m3_192 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.RemoveParentNull()", span="315-315", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RemoveParentNull()", file="DefaultContractResolver.cs"];
m3_193 [label="ExceptionAssert.Throws<InvalidOperationException>(() =>\r\n            {\r\n                JValue v = new JValue(true);\r\n                v.Remove();\r\n            }, ''The parent is missing.'')", span="317-321", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RemoveParentNull()", file="DefaultContractResolver.cs"];
m3_194 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.RemoveParentNull()", span="315-315", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RemoveParentNull()", file="DefaultContractResolver.cs"];
m3_191 [label="Entry Newtonsoft.Json.Linq.JToken.Values<T>()", span="374-374", cluster="Newtonsoft.Json.Linq.JToken.Values<T>()", file="DefaultContractResolver.cs"];
m3_426 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", span="654-654", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_437 [label="Assert.AreEqual(example, Encoding.UTF8.GetString(dataBytes))", span="673-673", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_427 [label="string example = ''Hello''", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_436 [label="byte[] dataBytes = (byte[])o.data", span="672-672", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_428 [label="dynamic obj = new\r\n            {\r\n                data = Encoding.UTF8.GetBytes(example)\r\n            }", span="657-660", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_435 [label="dynamic o = JObject.Parse(Encoding.UTF8.GetString(bytes))", span="671-671", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_429 [label="byte[] bytes", span="661-661", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_432 [label="JsonSerializer.Create().Serialize(tw, obj)", span="666-666", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_434 [label="bytes = ms.ToArray()", span="668-668", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_430 [label="var ms = new MemoryStream()", span="662-662", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_431 [label="TextWriter tw = new StreamWriter(ms)", span="664-664", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_433 [label="tw.Flush()", span="667-667", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_438 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", span="654-654", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ExpicitConversionTest()", file="DefaultContractResolver.cs"];
m3_309 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="DefaultContractResolver.cs"];
m3_629 [label="Entry Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", span="1069-1069", cluster="Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", file="DefaultContractResolver.cs"];
m3_349 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToChar()", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToChar()", file="DefaultContractResolver.cs"];
m3_350 [label="Assert.AreEqual('c', Convert.ToChar(new JValue('c')))", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToChar()", file="DefaultContractResolver.cs"];
m3_351 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToChar()", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToChar()", file="DefaultContractResolver.cs"];
m3_118 [label="Assert.AreEqual(''System.Byte[]'', v.ToString(null, CultureInfo.InvariantCulture))", span="218-218", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_120 [label="Assert.AreEqual(''I am a string!'', v.ToString())", span="221-221", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_122 [label="Assert.AreEqual('''', v.ToString())", span="224-224", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_124 [label="Assert.AreEqual('''', v.ToString(null, CultureInfo.InvariantCulture))", span="227-227", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_126 [label="Assert.AreEqual(''12/12/2000 20:59:59'', v.ToString(null, CultureInfo.InvariantCulture))", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_128 [label="Assert.AreEqual(''http://json.codeplex.com/'', v.ToString(null, CultureInfo.InvariantCulture))", span="233-233", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_130 [label="Assert.AreEqual(''1.00:00:00'', v.ToString(null, CultureInfo.InvariantCulture))", span="236-236", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_132 [label="Assert.AreEqual(''b282ade7-c520-496c-a448-4084f6803de5'', v.ToString(null, CultureInfo.InvariantCulture))", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_134 [label="Assert.AreEqual(''123456789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999990'', v.ToString(null, CultureInfo.InvariantCulture))", span="243-243", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_133 [label="v = new JValue(BigInteger.Parse(''123456789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999990''))", span="242-242", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_117 [label="v = new JValue(Encoding.UTF8.GetBytes(''Blah''))", span="217-217", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_119 [label="v = new JValue(''I am a string!'')", span="220-220", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_121 [label="v = JValue.CreateNull()", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_123 [label="v = JValue.CreateNull()", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_125 [label="v = new JValue(new DateTime(2000, 12, 12, 20, 59, 59, DateTimeKind.Utc), JTokenType.Date)", span="229-229", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_127 [label="v = new JValue(new Uri(''http://json.codeplex.com/''))", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_129 [label="v = new JValue(TimeSpan.FromDays(1))", span="235-235", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_131 [label="v = new JValue(new Guid(''B282ADE7-C520-496C-A448-4084F6803DE5''))", span="238-238", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_135 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.JValueToString()", file="DefaultContractResolver.cs"];
m3_140 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="DefaultContractResolver.cs"];
m3_286 [label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="82-82", cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="DefaultContractResolver.cs"];
m3_209 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.Next()", span="339-339", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Next()", file="DefaultContractResolver.cs"];
m3_210 [label="JValue v = new JValue(true)", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Next()", file="DefaultContractResolver.cs"];
m3_211 [label="Assert.IsNull(v.Next)", span="342-342", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Next()", file="DefaultContractResolver.cs"];
m3_212 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.Next()", span="339-339", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.Next()", file="DefaultContractResolver.cs"];
m3_369 [label="Entry System.Convert.ToUInt16(object)", span="0-0", cluster="System.Convert.ToUInt16(object)", file="DefaultContractResolver.cs"];
m3_220 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(decimal)", span="79-79", cluster="Newtonsoft.Json.Linq.JValue.JValue(decimal)", file="DefaultContractResolver.cs"];
m3_291 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", file="DefaultContractResolver.cs"];
m3_295 [label="Assert.AreEqual(rate.Compoundings, rate2.Compoundings)", span="448-448", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", file="DefaultContractResolver.cs"];
m3_292 [label="var jTokenWriter = new JTokenWriter()", span="444-444", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", file="DefaultContractResolver.cs"];
m3_294 [label="var rate2 = new JsonSerializer().Deserialize<Rate>(new JTokenReader(jTokenWriter.Token))", span="446-446", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", file="DefaultContractResolver.cs"];
m3_293 [label="new JsonSerializer().Serialize(jTokenWriter, rate)", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", file="DefaultContractResolver.cs"];
m3_296 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.RoundTripDecimal()", file="DefaultContractResolver.cs"];
m3_373 [label="Entry System.Convert.ToUInt32(object)", span="0-0", cluster="System.Convert.ToUInt32(object)", file="DefaultContractResolver.cs"];
m3_137 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="DefaultContractResolver.cs"];
m3_261 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(double)", span="107-107", cluster="Newtonsoft.Json.Linq.JValue.JValue(double)", file="DefaultContractResolver.cs"];
m3_358 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToByte()", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToByte()", file="DefaultContractResolver.cs"];
m3_359 [label="Assert.AreEqual(Byte.MaxValue, Convert.ToByte(new JValue(Byte.MaxValue)))", span="547-547", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToByte()", file="DefaultContractResolver.cs"];
m3_360 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToByte()", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToByte()", file="DefaultContractResolver.cs"];
m3_400 [label="Entry System.Convert.ToString(object)", span="0-0", cluster="System.Convert.ToString(object)", file="DefaultContractResolver.cs"];
m3_407 [label="Entry Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Guid()", span="623-623", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Guid()", file="DefaultContractResolver.cs"];
m3_409 [label="Assert.AreEqual(''0b5d4f85-e94c-4143-94c8-35f2aaebb100'', Convert.ToString(new JValue(g)))", span="627-627", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Guid()", file="DefaultContractResolver.cs"];
m3_408 [label="Guid g = new Guid(''0B5D4F85-E94C-4143-94C8-35F2AAEBB100'')", span="625-625", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Guid()", file="DefaultContractResolver.cs"];
m3_410 [label="Exit Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Guid()", span="623-623", cluster="Newtonsoft.Json.Tests.Linq.JValueTests.ConvertsToString_Guid()", file="DefaultContractResolver.cs"];
m3_219 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="154-154", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="DefaultContractResolver.cs"];
m3_631 [label="Newtonsoft.Json.Tests.Linq.JValueTests", span="", file="DefaultContractResolver.cs"];
m4_15 [label="Entry System.Type.GetType(string)", span="0-0", cluster="System.Type.GetType(string)", file="DefaultSerializationBinder.cs"];
m4_11 [label="Entry System.Reflection.Assembly.Load(string)", span="0-0", cluster="System.Reflection.Assembly.Load(string)", file="DefaultSerializationBinder.cs"];
m4_0 [label="Entry Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", span="23-23", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_1 [label="assemblyName != null", span="25-25", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_2 [label="Assembly assembly = Assembly.Load(assemblyName)", span="27-27", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_4 [label="throw new JsonSerializationException(''Could not load assembly '{0}'.''.FormatWith(CultureInfo.InvariantCulture, assemblyName));", span="29-29", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_5 [label="Type type = assembly.GetType(typeName)", span="31-31", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_7 [label="throw new JsonSerializationException(''Could not find type '{0}'.''.FormatWith(CultureInfo.InvariantCulture, typeName));", span="33-33", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_9 [label="return Type.GetType(typeName);", span="39-39", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_3 [label="assembly == null", span="28-28", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_6 [label="type == null", span="32-32", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_8 [label="return type;", span="35-35", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_10 [label="Exit Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", span="23-23", cluster="Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(string, string)", file="DefaultSerializationBinder.cs"];
m4_14 [label="Entry System.Reflection.Assembly.GetType(string)", span="0-0", cluster="System.Reflection.Assembly.GetType(string)", file="DefaultSerializationBinder.cs"];
m4_12 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="48-48", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="DefaultSerializationBinder.cs"];
m7_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", span="19-19", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", file="JObjectTests.cs"];
m7_1 [label="Account account = new Account\r\n            {\r\n                Email = ''james@example.com'',\r\n                Active = true,\r\n                CreatedDate = new DateTime(2013, 1, 20, 0, 0, 0, DateTimeKind.Utc),\r\n                Roles = new List<string>\r\n                {\r\n                    ''User'',\r\n                    ''Admin''\r\n                }\r\n            }", span="22-32", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", file="JObjectTests.cs"];
m7_2 [label="string json = JsonConvert.SerializeObject(account, Formatting.Indented)", span="34-34", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", file="JObjectTests.cs"];
m7_3 [label="Console.WriteLine(json)", span="45-45", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", file="JObjectTests.cs"];
m7_4 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", span="19-19", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Example()", file="JObjectTests.cs"];
m7_8 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JObjectTests.cs"];
m7_7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JObjectTests.cs"];
m7_9 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="JObjectTests.cs"];
m7_5 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Account.Account()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeObject.Account.Account()", file="JObjectTests.cs"];
m8_18 [label="OnError != null", span="140-140", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", file="JsonContract.cs"];
m8_19 [label="OnError.Invoke(o, new object[] { context, errorContext })", span="141-141", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", color=green, community=0, file="JsonContract.cs"];
m8_20 [label="Exit Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", span="138-138", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", color=red, community=0, file="JsonContract.cs"];
m8_21 [label="Entry Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", span="144-144", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JsonContract.cs"];
m8_22 [label="ValidationUtils.ArgumentNotNull(underlyingType, ''underlyingType'')", span="146-146", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", color=red, community=0, file="JsonContract.cs"];
m8_23 [label="UnderlyingType = underlyingType", span="148-148", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JsonContract.cs"];
m8_24 [label="Exit Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", span="144-144", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", color=red, community=0, file="JsonContract.cs"];
m8_25 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="94-94", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="JsonContract.cs"];
m8_15 [label="OnDeserialized.Invoke(o, new object[] { context })", span="134-134", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserialized(object, System.Runtime.Serialization.StreamingContext)", file="JsonContract.cs", color=green, community=0];
m8_13 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserialized(object, System.Runtime.Serialization.StreamingContext)", span="130-130", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserialized(object, System.Runtime.Serialization.StreamingContext)", file="JsonContract.cs"];
m8_14 [label="Entry Newtonsoft.Json.Schema.JsonSchema.Parse(string, Newtonsoft.Json.Schema.JsonSchemaResolver)", span="305-305", cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string, Newtonsoft.Json.Schema.JsonSchemaResolver)", file="JsonContract.cs"];
m8_16 [label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="54-54", cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonContract.cs"];
m8_26 [label="Newtonsoft.Json.Serialization.JsonContract", span="", cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string)", file="JsonContract.cs"];
m8_9 [label="Assert.AreEqual(2, node.Properties[''firstproperty''].Schemas.Count)", span="98-98", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_11 [label="Assert.AreEqual(3, node.Properties[''secondproperty''].Properties[''secondproperty_firstproperty''].Schemas.Count)", span="100-100", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", color=green, community=0, file="JsonContract.cs"];
m8_10 [label="Assert.AreEqual(3, node.Properties[''secondproperty''].Schemas.Count)", span="99-99", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_12 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", span="45-45", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_5 [label="JsonSchema secondSchema = JsonSchema.Parse(second, resolver)", span="91-91", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_7 [label="JsonSchemaNode node = modelBuilder.AddSchema(null, secondSchema)", span="95-95", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", color=green, community=0, file="JsonContract.cs"];
m8_6 [label="JsonSchemaModelBuilder modelBuilder = new JsonSchemaModelBuilder()", span="93-93", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_8 [label="Assert.AreEqual(2, node.Schemas.Count)", span="97-97", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_4 [label="JsonSchema firstSchema = JsonSchema.Parse(first, resolver)", span="90-90", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_0 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", span="45-45", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_2 [label="string second = @''{\r\n  ''''id'''':''''second'''',\r\n  ''''type'''':''''object'''',\r\n  ''''extends'''':{''''$ref'''':''''first''''},\r\n  ''''properties'''':\r\n  {\r\n    ''''firstproperty'''':{''''type'''':''''string''''},\r\n    ''''secondproperty'''':{\r\n      ''''extends'''':{\r\n        ''''properties'''':\r\n        {\r\n          ''''secondproperty_firstproperty'''':{''''maxLength'''':9,''''minLength'''':6}\r\n        }\r\n      },\r\n      ''''type'''':''''object'''',\r\n      ''''properties'''':\r\n      {\r\n        ''''secondproperty_firstproperty'''':{}\r\n      }\r\n    },\r\n    ''''thirdproperty'''':{''''type'''':''''string''''}\r\n  },\r\n  ''''additionalProperties'''':false\r\n}''", span="64-87", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", color=green, community=0, file="JsonContract.cs"];
m8_1 [label="string first = @''{\r\n  ''''id'''':''''first'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''firstproperty'''':{''''type'''':''''string'''',''''maxLength'''':10},\r\n    ''''secondproperty'''':{\r\n      ''''type'''':''''object'''',\r\n      ''''properties'''':\r\n      {\r\n        ''''secondproperty_firstproperty'''':{''''type'''':''''string'''',''''maxLength'''':10,''''minLength'''':7}\r\n      }\r\n    }\r\n  },\r\n  ''''additionalProperties'''':{}\r\n}''", span="47-62", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs", color=red, community=0];
m8_3 [label="JsonSchemaResolver resolver = new JsonSchemaResolver()", span="89-89", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaNodeTests.AddSchema()", file="JsonContract.cs"];
m8_17 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", span="138-138", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", file="JsonContract.cs"];
m9_10 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="JsonSerializer.cs"];
m9_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", span="43-43", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_1 [label="JArray array = new JArray()", span="46-46", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_2 [label="array.Add(''Manual text'')", span="47-47", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_3 [label="array.Add(new DateTime(2000, 5, 23))", span="48-48", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_5 [label="o[''MyArray''] = array", span="51-51", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_4 [label="JObject o = new JObject()", span="50-50", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_6 [label="string json = o.ToString()", span="53-53", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_7 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", span="43-43", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonManually.Example()", file="JsonSerializer.cs"];
m9_8 [label="Entry Newtonsoft.Json.Linq.JArray.JArray()", span="65-65", cluster="Newtonsoft.Json.Linq.JArray.JArray()", file="JsonSerializer.cs"];
m9_9 [label="Entry Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)", span="334-334", cluster="Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)", file="JsonSerializer.cs"];
m9_12 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="414-414", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSerializer.cs"];
m10_13 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="JsonSerializerInternalBase.cs"];
m10_5 [label="Console.WriteLine(jsonTypeNameAuto)", span="102-102", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", file="JsonSerializerInternalBase.cs"];
m10_6 [label="Stockholder newStockholder = JsonConvert.DeserializeObject<Stockholder>(jsonTypeNameAuto, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="115-118", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", file="JsonSerializerInternalBase.cs"];
m10_7 [label="Console.WriteLine(newStockholder.Businesses[0].GetType().Name)", span="120-120", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", file="JsonSerializerInternalBase.cs"];
m10_8 [label="Assert.AreEqual(''Hotel'', newStockholder.Businesses[0].GetType().Name)", span="124-124", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", file="JsonSerializerInternalBase.cs"];
m10_9 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", span="60-60", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", file="JsonSerializerInternalBase.cs"];
m10_10 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Stockholder.Stockholder()", span="52-52", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Stockholder.Stockholder()", file="JsonSerializerInternalBase.cs"];
m10_11 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSerializerInternalBase.cs"];
m10_18 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", span="55-55", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalBase.cs"];
m10_0 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", span="37-37", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalBase.cs"];
m10_1 [label="ValidationUtils.ArgumentNotNull(serializer, ''serializer'')", span="39-39", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="JsonSerializerInternalBase.cs"];
m10_2 [label="Serializer = serializer", span="41-41", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalBase.cs"];
m10_4 [label="string jsonTypeNameAuto = JsonConvert.SerializeObject(stockholder, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="97-100", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeTypeNameHandling.Example()", file="JsonSerializerInternalBase.cs"];
m10_3 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", span="37-37", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalBase.cs"];
m10_26 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, Newtonsoft.Json.Serialization.ErrorContext)", span="137-137", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, Newtonsoft.Json.Serialization.ErrorContext)", file="JsonSerializerInternalBase.cs"];
m10_14 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="606-606", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerInternalBase.cs"];
m10_15 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="JsonSerializerInternalBase.cs"];
m10_16 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="802-802", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerInternalBase.cs"];
m10_17 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="JsonSerializerInternalBase.cs"];
m10_12 [label="Entry Newtonsoft.Json.Serialization.ErrorContext.ErrorContext(object, object, System.Exception)", span="37-37", cluster="Newtonsoft.Json.Serialization.ErrorContext.ErrorContext(object, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_19 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", span="63-63", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_20 [label="ErrorContext errorContext = GetErrorContext(currentObject, keyValue, ex)", span="65-65", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_21 [label="contract.InvokeOnError(currentObject, errorContext)", span="66-66", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", color=red, community=0, file="JsonSerializerInternalBase.cs"];
m10_23 [label="Serializer.OnError(new ErrorEventArgs(currentObject, errorContext))", span="69-69", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_22 [label="!errorContext.Handled", span="68-68", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_24 [label="return errorContext.Handled;", span="71-71", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_25 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", span="63-63", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalBase.cs"];
m10_27 [label="Entry Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorEventArgs(object, Newtonsoft.Json.Serialization.ErrorContext)", span="28-28", cluster="Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorEventArgs(object, Newtonsoft.Json.Serialization.ErrorContext)", file="JsonSerializerInternalBase.cs"];
m10_28 [label="Entry Newtonsoft.Json.JsonSerializer.OnError(Newtonsoft.Json.Serialization.ErrorEventArgs)", span="451-451", cluster="Newtonsoft.Json.JsonSerializer.OnError(Newtonsoft.Json.Serialization.ErrorEventArgs)", file="JsonSerializerInternalBase.cs"];
m10_29 [label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", span="", file="JsonSerializerInternalBase.cs"];
m11_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", span="45-45", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", file="JsonSerializerInternalReader.cs"];
m11_1 [label="List<Post> posts = new List<Post>\r\n            {\r\n                new Post\r\n                {\r\n                    Title = ''Episode VII'',\r\n                    Description = ''Episode VII production'',\r\n                    Categories = new List<string>\r\n                    {\r\n                        ''episode-vii'',\r\n                        ''movie''\r\n                    },\r\n                    Link = ''episode-vii-production.aspx''\r\n                }\r\n            }", span="48-61", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", file="JsonSerializerInternalReader.cs"];
m11_2 [label="JObject o = JObject.FromObject(new\r\n            {\r\n                channel = new\r\n                {\r\n                    title = ''Star Wars'',\r\n                    link = ''http://www.starwars.com'',\r\n                    description = ''Star Wars blog.'',\r\n                    item =\r\n                        from p in posts\r\n                        orderby p.Title\r\n                        select new\r\n                        {\r\n                            title = p.Title,\r\n                            description = p.Description,\r\n                            link = p.Link,\r\n                            category = p.Categories\r\n                        }\r\n                }\r\n            })", span="63-81", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", file="JsonSerializerInternalReader.cs"];
m11_3 [label="Console.WriteLine(o.ToString())", span="83-83", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", file="JsonSerializerInternalReader.cs"];
m11_4 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", span="45-45", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Example()", file="JsonSerializerInternalReader.cs"];
m11_7 [label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="377-377", cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="JsonSerializerInternalReader.cs"];
m11_9 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="JsonSerializerInternalReader.cs"];
m11_6 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Post.Post()", span="36-36", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Post.Post()", file="JsonSerializerInternalReader.cs"];
m11_8 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="410-410", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSerializerInternalReader.cs"];
m12_164 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object)", span="105-105", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object)", file="JsonSerializerInternalWriter.cs"];
m12_191 [label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.Cast<TResult>()", file="JsonSerializerInternalWriter.cs"];
m12_263 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", span="483-483", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_256 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", span="483-483", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_257 [label="string propertyName", span="485-485", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_258 [label="entry.Key is IConvertible", span="487-487", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_259 [label="return Convert.ToString(entry.Key, CultureInfo.InvariantCulture);", span="488-488", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_260 [label="TryConvertToString(entry.Key, entry.Key.GetType(), out propertyName)", span="489-489", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_261 [label="return propertyName;", span="490-490", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_262 [label="throw new JsonSerializationException(''Could not create string property name from type '{0}'.''.FormatWith(CultureInfo.InvariantCulture, entry.Key.GetType()));", span="492-492", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetPropertyName(System.Collections.DictionaryEntry)", file="JsonSerializerInternalWriter.cs"];
m12_135 [label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", file="JsonSerializerInternalWriter.cs"];
m12_10 [label="Member2 = ''This value was reset after serialization.''", span="46-46", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializedMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_11 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializedMethod(System.Runtime.Serialization.StreamingContext)", span="44-44", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializedMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_12 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnDeserializingMethod(System.Runtime.Serialization.StreamingContext)", span="50-50", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnDeserializingMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_13 [label="Member3 = ''This value was set during deserialization''", span="52-52", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnDeserializingMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_14 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnDeserializingMethod(System.Runtime.Serialization.StreamingContext)", span="50-50", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnDeserializingMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_15 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", span="122-122", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", file="JsonSerializerInternalWriter.cs"];
m12_16 [label="value == null", span="76-76", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetContractSafe(object)", file="JsonSerializerInternalWriter.cs"];
m12_17 [label="return null;", span="77-77", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetContractSafe(object)", file="JsonSerializerInternalWriter.cs"];
m12_112 [label="Entry System.Collections.Generic.List<T>.IndexOf(T)", span="0-0", cluster="System.Collections.Generic.List<T>.IndexOf(T)", file="JsonSerializerInternalWriter.cs"];
m12_270 [label="Entry Newtonsoft.Json.JsonWriter.WriteEnd()", span="288-288", cluster="Newtonsoft.Json.JsonWriter.WriteEnd()", file="JsonSerializerInternalWriter.cs"];
m12_169 [label="Entry Newtonsoft.Json.Serialization.IValueProvider.GetValue(object)", span="44-44", cluster="Newtonsoft.Json.Serialization.IValueProvider.GetValue(object)", file="JsonSerializerInternalWriter.cs"];
m12_0 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.JsonSerializerInternalWriter(Newtonsoft.Json.JsonSerializer)", span="54-54", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.JsonSerializerInternalWriter(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalWriter.cs"];
m12_1 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.JsonSerializerInternalWriter(Newtonsoft.Json.JsonSerializer)", span="54-54", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.JsonSerializerInternalWriter(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalWriter.cs"];
m12_4 [label="throw new ArgumentNullException(''jsonWriter'');", span="61-61", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_2 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", span="58-58", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_3 [label="jsonWriter == null", span="60-60", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_5 [label="SerializeValue(jsonWriter, value, null, GetContractSafe(value))", span="63-63", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_100 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", span="195-195", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_101 [label="SerializeStack.IndexOf(value) != -1", span="197-197", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_102 [label="referenceLoopHandling.GetValueOrDefault(Serializer.ReferenceLoopHandling)", span="199-199", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_110 [label="return true;", span="212-212", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_103 [label="ReferenceLoopHandling.Error", span="201-201", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_105 [label="ReferenceLoopHandling.Ignore", span="203-203", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_107 [label="ReferenceLoopHandling.Serialize", span="205-205", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_109 [label="throw new InvalidOperationException(''Unexpected ReferenceLoopHandling value: '{0}'''.FormatWith(CultureInfo.InvariantCulture, Serializer.ReferenceLoopHandling));", span="208-208", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_104 [label="throw new JsonSerializationException(''Self referencing loop'');", span="202-202", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_106 [label="return false;", span="204-204", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_108 [label="return true;", span="206-206", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_111 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", span="195-195", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(object, Newtonsoft.Json.ReferenceLoopHandling?)", file="JsonSerializerInternalWriter.cs"];
m12_7 [label="Member2 = ''This value went into the data file during serialization.''", span="40-40", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_124 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", span="223-223", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_125 [label="TypeConverter converter = ConvertUtils.GetConverter(type)", span="226-226", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_126 [label="converter != null\r\n#if !SILVERLIGHT\r\n        && !(converter is ComponentConverter)\r\n#endif\r\n        && (converter.GetType() != typeof(TypeConverter) || value is Type)", span="229-233", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_128 [label="s = converter.ConvertToInvariantString(value)", span="238-238", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_127 [label="converter.CanConvertTo(typeof(string))", span="235-235", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_130 [label="s = null", span="255-255", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_129 [label="return true;", span="242-242", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_131 [label="return false;", span="256-256", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_132 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", span="223-223", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.TryConvertToString(object, System.Type, out string)", file="JsonSerializerInternalWriter.cs"];
m12_77 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.PreserveReferencesHandling, Newtonsoft.Json.PreserveReferencesHandling)", span="321-321", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.PreserveReferencesHandling, Newtonsoft.Json.PreserveReferencesHandling)", file="JsonSerializerInternalWriter.cs"];
m12_176 [label="return ((value & flag) == flag);", span="323-323", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.PreserveReferencesHandling, Newtonsoft.Json.PreserveReferencesHandling)", file="JsonSerializerInternalWriter.cs"];
m12_177 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.PreserveReferencesHandling, Newtonsoft.Json.PreserveReferencesHandling)", span="321-321", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.PreserveReferencesHandling, Newtonsoft.Json.PreserveReferencesHandling)", file="JsonSerializerInternalWriter.cs"];
m12_226 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="244-244", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonSerializerInternalWriter.cs"];
m12_172 [label="Entry System.Collections.Generic.List<T>.RemoveAt(int)", span="0-0", cluster="System.Collections.Generic.List<T>.RemoveAt(int)", file="JsonSerializerInternalWriter.cs"];
m12_47 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="JsonSerializerInternalWriter.cs"];
m12_165 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object)", span="113-113", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object)", file="JsonSerializerInternalWriter.cs"];
m12_168 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteTypeProperty(Newtonsoft.Json.JsonWriter, System.Type)", span="315-315", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteTypeProperty(Newtonsoft.Json.JsonWriter, System.Type)", file="JsonSerializerInternalWriter.cs"];
m12_173 [label="writer.WritePropertyName(JsonTypeReflector.TypePropertyName)", span="317-317", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteTypeProperty(Newtonsoft.Json.JsonWriter, System.Type)", file="JsonSerializerInternalWriter.cs"];
m12_174 [label="writer.WriteValue(type.AssemblyQualifiedName)", span="318-318", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteTypeProperty(Newtonsoft.Json.JsonWriter, System.Type)", file="JsonSerializerInternalWriter.cs"];
m12_175 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteTypeProperty(Newtonsoft.Json.JsonWriter, System.Type)", span="315-315", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteTypeProperty(Newtonsoft.Json.JsonWriter, System.Type)", file="JsonSerializerInternalWriter.cs"];
m12_188 [label="Entry Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="43-43", cluster="Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalWriter.cs"];
m12_167 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.TypeNameHandling)", span="326-326", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.TypeNameHandling)", file="JsonSerializerInternalWriter.cs"];
m12_178 [label="return ((value & flag) == flag);", span="328-328", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.TypeNameHandling)", file="JsonSerializerInternalWriter.cs"];
m12_179 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.TypeNameHandling)", span="326-326", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HasFlag(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.TypeNameHandling)", file="JsonSerializerInternalWriter.cs"];
m12_51 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", span="355-355", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_193 [label="contract.InvokeOnSerializing(values)", span="357-357", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_194 [label="SerializeStack.Add(values)", span="359-359", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_195 [label="bool isReference = contract.IsReference ?? HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Arrays)", span="361-361", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_198 [label="writer.WriteStartObject()", span="366-366", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_200 [label="writer.WritePropertyName(JsonTypeReflector.IdPropertyName)", span="370-370", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_201 [label="writer.WriteValue(Serializer.ReferenceResolver.GetReference(values))", span="371-371", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_203 [label="WriteTypeProperty(writer, values.GetType())", span="375-375", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_204 [label="writer.WritePropertyName(JsonTypeReflector.ArrayValuesPropertyName)", span="377-377", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_205 [label="writer.WriteStartArray()", span="380-380", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_206 [label="int initialDepth = writer.Top", span="382-382", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_208 [label="i < values.Count", span="384-384", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_209 [label="object value = values[i]", span="388-388", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_212 [label="WriteReference(writer, value)", span="393-393", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_214 [label="SerializeValue(writer, value, null, valueContract)", span="400-400", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_216 [label="IsErrorHandled(values, contract, i, ex)", span="405-405", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_217 [label="HandleError(writer, initialDepth)", span="406-406", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_220 [label="writer.WriteEndArray()", span="412-412", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_222 [label="writer.WriteEndObject()", span="416-416", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_224 [label="contract.InvokeOnSerialized(values)", span="421-421", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_196 [label="bool includeTypeDetails = HasFlag(Serializer.TypeNameHandling, TypeNameHandling.Arrays)", span="362-362", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_197 [label="isReference || includeTypeDetails", span="364-364", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_199 [label=isReference, span="368-368", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_221 [label="isReference || includeTypeDetails", span="414-414", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_202 [label=includeTypeDetails, span="373-373", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_207 [label="int i = 0", span="384-384", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_219 [label="i++", span="384-384", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_210 [label="JsonContract valueContract = GetContractSafe(value)", span="389-389", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_211 [label="ShouldWriteReference(value, null, valueContract)", span="391-391", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_213 [label="!CheckForCircularReference(value, null)", span="397-397", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_215 [label=Exception, span="403-403", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_218 [label="throw;", span="408-408", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_223 [label="SerializeStack.RemoveAt(SerializeStack.Count - 1)", span="419-419", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_225 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", span="355-355", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(Newtonsoft.Json.JsonWriter, System.Collections.IList, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_120 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="227-227", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="JsonSerializerInternalWriter.cs"];
m12_55 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", span="133-133", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_56 [label="value == null", span="135-135", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_58 [label="contract is JsonPrimitiveContract", span="137-137", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_61 [label="property != null", span="143-143", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_62 [label="isReference = property.IsReference", span="144-144", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_64 [label="isReference = contract.IsReference", span="147-147", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_66 [label="value is IList", span="151-151", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_68 [label="value is IDictionary", span="153-153", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_70 [label="value is IEnumerable", span="155-155", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_75 [label="return Serializer.ReferenceResolver.IsReferenced(value);", span="164-164", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_57 [label="return false;", span="136-136", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_59 [label="return false;", span="138-138", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_60 [label="bool? isReference = null", span="140-140", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_63 [label="isReference == null", span="146-146", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_65 [label="isReference == null", span="149-149", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_73 [label="!isReference.Value", span="161-161", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_67 [label="isReference = HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Arrays)", span="152-152", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_69 [label="isReference = HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Objects)", span="154-154", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_71 [label="isReference = HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Arrays)", span="156-156", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_72 [label="isReference = HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Objects)", span="158-158", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_74 [label="return false;", span="162-162", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_76 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", span="133-133", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.ShouldWriteReference(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_134 [label="Entry System.ComponentModel.TypeConverter.CanConvertTo(System.Type)", span="0-0", cluster="System.ComponentModel.TypeConverter.CanConvertTo(System.Type)", file="JsonSerializerInternalWriter.cs"];
m12_264 [label="Entry System.Convert.ToString(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToString(object, System.IFormatProvider)", file="JsonSerializerInternalWriter.cs"];
m12_166 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSerializerInternalWriter.cs"];
m12_35 [label="SerializeDictionary(writer, (IDictionary) value, (JsonDictionaryContract) contract)", span="112-112", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_49 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", span="259-259", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_136 [label="contract.InvokeOnSerializing(value)", span="261-261", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_138 [label="TryConvertToString(value, contract.UnderlyingType, out s)", span="264-264", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_139 [label="writer.WriteValue(s)", span="266-266", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_140 [label="contract.InvokeOnSerialized(value)", span="267-267", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_142 [label="SerializeStack.Add(value)", span="272-272", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_143 [label="writer.WriteStartObject()", span="273-273", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_144 [label="bool isReference = contract.IsReference ?? HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Objects)", span="275-275", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_146 [label="writer.WritePropertyName(JsonTypeReflector.IdPropertyName)", span="278-278", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_147 [label="writer.WriteValue(Serializer.ReferenceResolver.GetReference(value))", span="279-279", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_149 [label="WriteTypeProperty(writer, contract.UnderlyingType)", span="283-283", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_150 [label="int initialDepth = writer.Top", span="286-286", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_151 [label="contract.Properties", span="288-288", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_153 [label="object memberValue = property.ValueProvider.GetValue(value)", span="294-294", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_155 [label="WriteMemberInfoProperty(writer, memberValue, property, memberContract)", span="297-297", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_157 [label="IsErrorHandled(value, contract, property.PropertyName, ex)", span="302-302", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_158 [label="HandleError(writer, initialDepth)", span="303-303", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_160 [label="writer.WriteEndObject()", span="309-309", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_162 [label="contract.InvokeOnSerialized(value)", span="312-312", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_137 [label="string s", span="263-263", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_141 [label="return;", span="269-269", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_145 [label=isReference, span="276-276", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_148 [label="HasFlag(Serializer.TypeNameHandling, TypeNameHandling.Objects)", span="281-281", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_152 [label="!property.Ignored && property.Readable", span="292-292", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_156 [label=Exception, span="300-300", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_154 [label="JsonContract memberContract = GetContractSafe(memberValue)", span="295-295", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_159 [label="throw;", span="305-305", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_161 [label="SerializeStack.RemoveAt(SerializeStack.Count - 1)", span="310-310", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_163 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", span="259-259", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract)", file="JsonSerializerInternalWriter.cs"];
m12_96 [label="Entry System.Nullable<T>.GetValueOrDefault(T)", span="0-0", cluster="System.Nullable<T>.GetValueOrDefault(T)", file="JsonSerializerInternalWriter.cs"];
m12_44 [label="Entry Newtonsoft.Json.JsonSerializer.HasMatchingConverter(System.Type, out Newtonsoft.Json.JsonConverter)", span="420-420", cluster="Newtonsoft.Json.JsonSerializer.HasMatchingConverter(System.Type, out Newtonsoft.Json.JsonConverter)", file="JsonSerializerInternalWriter.cs"];
m12_114 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="JsonSerializerInternalWriter.cs"];
m12_122 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="655-655", cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="JsonSerializerInternalWriter.cs"];
m12_36 [label="contract is JsonArrayContract", span="114-114", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_113 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="48-48", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="JsonSerializerInternalWriter.cs"];
m12_123 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="236-236", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="JsonSerializerInternalWriter.cs"];
m12_133 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)", span="418-418", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)", file="JsonSerializerInternalWriter.cs"];
m12_98 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="280-280", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="JsonSerializerInternalWriter.cs"];
m12_97 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="JsonSerializerInternalWriter.cs"];
m12_192 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JsonSerializerInternalWriter.cs"];
m12_37 [label="value is IList", span="116-116", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_269 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", span="55-55", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalWriter.cs"];
m12_170 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", span="63-63", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, System.Exception)", file="JsonSerializerInternalWriter.cs"];
m12_8 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)", span="38-38", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_18 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", span="63-63", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_19 [label="SerializationEventTestObject obj = new SerializationEventTestObject()", span="66-66", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_38 [label="SerializeList(writer, (IList) value, (JsonArrayContract) contract)", span="118-118", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_227 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="253-253", cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="JsonSerializerInternalWriter.cs"];
m12_6 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", span="58-58", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_52 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeEnumerable(Newtonsoft.Json.JsonWriter, System.Collections.IEnumerable, Newtonsoft.Json.Serialization.JsonArrayContract)", span="350-350", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeEnumerable(Newtonsoft.Json.JsonWriter, System.Collections.IEnumerable, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_189 [label="SerializeList(writer, values.Cast<object>().ToList(), contract)", span="352-352", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeEnumerable(Newtonsoft.Json.JsonWriter, System.Collections.IEnumerable, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_190 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeEnumerable(Newtonsoft.Json.JsonWriter, System.Collections.IEnumerable, Newtonsoft.Json.Serialization.JsonArrayContract)", span="350-350", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeEnumerable(Newtonsoft.Json.JsonWriter, System.Collections.IEnumerable, Newtonsoft.Json.Serialization.JsonArrayContract)", file="JsonSerializerInternalWriter.cs"];
m12_46 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(object)", span="996-996", cluster="Newtonsoft.Json.JsonWriter.WriteValue(object)", file="JsonSerializerInternalWriter.cs"];
m12_9 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializedMethod(System.Runtime.Serialization.StreamingContext)", span="44-44", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject.OnSerializedMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerInternalWriter.cs"];
m12_22 [label="Console.WriteLine(obj.Member3)", span="72-72", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_23 [label="Console.WriteLine(obj.Member4)", span="74-74", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_24 [label="string json = JsonConvert.SerializeObject(obj, Formatting.Indented)", span="77-77", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_26 [label="Console.WriteLine(obj.Member2)", span="86-86", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_27 [label="Console.WriteLine(obj.Member3)", span="88-88", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_28 [label="Console.WriteLine(obj.Member4)", span="90-90", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_29 [label="obj = JsonConvert.DeserializeObject<SerializationEventTestObject>(json)", span="93-93", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_30 [label="Console.WriteLine(obj.Member1)", span="95-95", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs", color=green, community=0];
m12_31 [label="Console.WriteLine(obj.Member2)", span="97-97", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_32 [label="Console.WriteLine(obj.Member3)", span="99-99", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_33 [label="Console.WriteLine(obj.Member4)", span="101-101", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_34 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", span="63-63", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_39 [label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject", span="", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_40 [label="SerializeEnumerable(writer, (IEnumerable) value, (JsonArrayContract) contract)", span="122-122", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_41 [label="throw new Exception(\r\n            ''Cannot serialize '{0}' into a JSON array. Type does not implement IEnumerable.''.FormatWith(\r\n              CultureInfo.InvariantCulture, value.GetType()));", span="126-128", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_25 [label="Console.WriteLine(obj.Member1)", span="84-84", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_42 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", span="82-82", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_43 [label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="619-619", cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="JsonSerializerInternalWriter.cs"];
m12_121 [label="Entry Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(object)", span="43-43", cluster="Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(object)", file="JsonSerializerInternalWriter.cs"];
m12_48 [label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="327-327", cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="JsonSerializerInternalWriter.cs"];
m12_45 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", span="331-331", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_180 [label="ShouldWriteReference(value, null, contract)", span="333-333", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_181 [label="WriteReference(writer, value)", span="335-335", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_182 [label="!CheckForCircularReference(value, null)", span="339-339", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_184 [label="SerializeStack.Add(value)", span="342-342", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_185 [label="converter.WriteJson(writer, value, GetInternalSerializer())", span="344-344", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_183 [label="return;", span="340-340", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_186 [label="SerializeStack.RemoveAt(SerializeStack.Count - 1)", span="346-346", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_187 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", span="331-331", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeConvertable(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_20 [label="Console.WriteLine(obj.Member1)", span="68-68", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_21 [label="Console.WriteLine(obj.Member2)", span="70-70", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.Example()", file="JsonSerializerInternalWriter.cs"];
m12_50 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", span="424-424", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_228 [label="contract.InvokeOnSerializing(values)", span="426-426", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_229 [label="SerializeStack.Add(values)", span="428-428", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_230 [label="writer.WriteStartObject()", span="429-429", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_231 [label="bool isReference = contract.IsReference ?? HasFlag(Serializer.PreserveReferencesHandling, PreserveReferencesHandling.Objects)", span="431-431", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_233 [label="writer.WritePropertyName(JsonTypeReflector.IdPropertyName)", span="434-434", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_234 [label="writer.WriteValue(Serializer.ReferenceResolver.GetReference(values))", span="435-435", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_236 [label="WriteTypeProperty(writer, values.GetType())", span="439-439", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_237 [label="int initialDepth = writer.Top", span="442-442", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_238 [label=values, span="444-444", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_243 [label="writer.WritePropertyName(propertyName)", span="455-455", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_244 [label="WriteReference(writer, value)", span="456-456", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_246 [label="writer.WritePropertyName(propertyName)", span="463-463", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_247 [label="SerializeValue(writer, value, null, valueContract)", span="465-465", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_249 [label="IsErrorHandled(values, contract, propertyName, ex)", span="470-470", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_250 [label="HandleError(writer, initialDepth)", span="471-471", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_252 [label="writer.WriteEndObject()", span="477-477", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_254 [label="contract.InvokeOnSerialized(values)", span="480-480", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", color=red, community=0, file="JsonSerializerInternalWriter.cs"];
m12_232 [label=isReference, span="432-432", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_235 [label="HasFlag(Serializer.TypeNameHandling, TypeNameHandling.Objects)", span="437-437", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_239 [label="string propertyName = GetPropertyName(entry)", span="446-446", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_240 [label="object value = entry.Value", span="450-450", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_241 [label="JsonContract valueContract = GetContractSafe(value)", span="451-451", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_242 [label="ShouldWriteReference(value, null, valueContract)", span="453-453", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_245 [label="!CheckForCircularReference(value, null)", span="460-460", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_248 [label=Exception, span="468-468", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_251 [label="throw;", span="473-473", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_253 [label="SerializeStack.RemoveAt(SerializeStack.Count - 1)", span="478-478", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_255 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", span="424-424", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDictionary(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract)", file="JsonSerializerInternalWriter.cs"];
m12_78 [label="Entry Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(object)", span="51-51", cluster="Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(object)", file="JsonSerializerInternalWriter.cs"];
m12_171 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", span="495-495", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", file="JsonSerializerInternalWriter.cs"];
m12_265 [label="ClearErrorContext()", span="497-497", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", file="JsonSerializerInternalWriter.cs"];
m12_266 [label="writer.Top > initialDepth", span="499-499", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", file="JsonSerializerInternalWriter.cs"];
m12_267 [label="writer.WriteEnd()", span="501-501", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", file="JsonSerializerInternalWriter.cs"];
m12_268 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", span="495-495", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.HandleError(Newtonsoft.Json.JsonWriter, int)", file="JsonSerializerInternalWriter.cs"];
m12_99 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", span="215-215", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_115 [label="writer.WriteStartObject()", span="217-217", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_116 [label="writer.WritePropertyName(JsonTypeReflector.RefPropertyName)", span="218-218", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_117 [label="writer.WriteValue(Serializer.ReferenceResolver.GetReference(value))", span="219-219", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_118 [label="writer.WriteEndObject()", span="220-220", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_119 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", span="215-215", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteReference(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerInternalWriter.cs"];
m12_53 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="JsonSerializerInternalWriter.cs"];
m12_79 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", span="167-167", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_80 [label="string propertyName = property.PropertyName", span="169-169", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_81 [label="JsonConverter memberConverter = property.MemberConverter", span="170-170", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_82 [label="object defaultValue = property.DefaultValue", span="171-171", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_83 [label="property.NullValueHandling.GetValueOrDefault(Serializer.NullValueHandling) == NullValueHandling.Ignore &&\r\n          memberValue == null", span="173-174", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_85 [label="property.DefaultValueHandling.GetValueOrDefault(Serializer.DefaultValueHandling) ==\r\n          DefaultValueHandling.Ignore && Equals(memberValue, defaultValue)", span="177-178", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_87 [label="ShouldWriteReference(memberValue, property, contract)", span="181-181", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_88 [label="writer.WritePropertyName(propertyName)", span="183-183", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_89 [label="WriteReference(writer, memberValue)", span="184-184", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_91 [label="!CheckForCircularReference(memberValue, property.ReferenceLoopHandling)", span="188-188", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_93 [label="writer.WritePropertyName(propertyName)", span="191-191", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_94 [label="SerializeValue(writer, memberValue, memberConverter, contract)", span="192-192", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_84 [label="return;", span="175-175", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_86 [label="return;", span="179-179", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_90 [label="return;", span="185-185", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_92 [label="return;", span="189-189", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_95 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", span="167-167", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalWriter.cs"];
m12_271 [label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter", span="", file="JsonSerializerInternalWriter.cs"];
m13_11 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", span="130-130", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_12 [label="_serializerReader != null", span="132-132", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_13 [label="return _serializerReader.Deserialize(reader, objectType);", span="133-133", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_14 [label="return _serializer.Deserialize(reader, objectType);", span="135-135", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_15 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", span="130-130", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.DeserializeInternal(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_25 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", span="146-146", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_26 [label="_serializerWriter != null", span="148-148", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_27 [label="_serializerWriter.Serialize(jsonWriter, value)", span="149-149", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_28 [label="_serializer.Serialize(jsonWriter, value)", span="151-151", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_29 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", span="146-146", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.SerializeInternal(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_31 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="407-407", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_18 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", span="138-138", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_19 [label="_serializerReader != null", span="140-140", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_20 [label="_serializerReader.Populate(reader, target)", span="141-141", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_21 [label="_serializer.Populate(reader, target)", span="143-143", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_22 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", span="138-138", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.PopulateInternal(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_24 [label="Entry Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", span="322-322", cluster="Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_17 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="377-377", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_30 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", span="58-58", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerProxy.cs"];
m13_16 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="105-105", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerProxy.cs"];
m13_0 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", span="114-114", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", file="JsonSerializerProxy.cs"];
m13_1 [label="ValidationUtils.ArgumentNotNull(serializerReader, ''serializerReader'')", span="116-116", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", file="JsonSerializerProxy.cs"];
m13_2 [label="_serializerReader = serializerReader", span="118-118", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", file="JsonSerializerProxy.cs"];
m13_3 [label="_serializer = serializerReader.Serializer", span="119-119", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", file="JsonSerializerProxy.cs"];
m13_4 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", span="114-114", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)", file="JsonSerializerProxy.cs"];
m13_6 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", span="122-122", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", file="JsonSerializerProxy.cs"];
m13_7 [label="ValidationUtils.ArgumentNotNull(serializerWriter, ''serializerWriter'')", span="124-124", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", file="JsonSerializerProxy.cs"];
m13_8 [label="_serializerWriter = serializerWriter", span="126-126", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", file="JsonSerializerProxy.cs"];
m13_9 [label="_serializer = serializerWriter.Serializer", span="127-127", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", file="JsonSerializerProxy.cs"];
m13_10 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", span="122-122", cluster="Newtonsoft.Json.Serialization.JsonSerializerProxy.JsonSerializerProxy(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)", file="JsonSerializerProxy.cs"];
m13_23 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Populate(Newtonsoft.Json.JsonReader, object)", span="46-46", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Populate(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerProxy.cs"];
m13_32 [label="Newtonsoft.Json.Serialization.JsonSerializerProxy", span="", file="JsonSerializerProxy.cs"];
m14_275 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", span="859-859", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_277 [label="List<Person> people = new List<Person>()", span="869-869", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_276 [label="Person p = new Person\r\n            {\r\n                BirthDate = new DateTime(1980, 12, 23, 0, 0, 0, DateTimeKind.Utc),\r\n                LastModified = new DateTime(2009, 2, 20, 12, 59, 21, DateTimeKind.Utc),\r\n                Department = ''IT'',\r\n                Name = ''James''\r\n            }", span="861-867", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_278 [label="people.Add(p)", span="870-870", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_279 [label="people.Add(p)", span="871-871", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_280 [label="string json = JsonConvert.SerializeObject(people, Formatting.Indented)", span="873-873", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_281 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", span="859-859", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWithout()", file="JsonSerializerSettings.cs"];
m14_184 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", span="527-527", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_191 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects,\r\n                Converters = new List<JsonConverter> { new CircularReferenceClassConverter() }\r\n            })", span="537-541", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_192 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''CircularReferenceClass'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''$type'''': ''''CircularReferenceClass'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$type'''': ''''CircularReferenceClass'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="543-560", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_185 [label="CircularReferenceClass c1 = new CircularReferenceClass { Name = ''c1'' }", span="529-529", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_190 [label="c3.Child = c1", span="535-535", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_186 [label="CircularReferenceClass c2 = new CircularReferenceClass { Name = ''c2'' }", span="530-530", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_188 [label="c1.Child = c2", span="533-533", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_187 [label="CircularReferenceClass c3 = new CircularReferenceClass { Name = ''c3'' }", span="531-531", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_189 [label="c2.Child = c3", span="534-534", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_193 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", span="527-527", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_282 [label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="36-36", cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", file="JsonSerializerSettings.cs"];
m14_59 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", span="234-234", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_64 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="243-252", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_63 [label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="240-241", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_60 [label="CircularDictionary circularDictionary = new CircularDictionary()", span="236-236", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_62 [label="circularDictionary.Add(''self'', circularDictionary)", span="238-238", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_61 [label="circularDictionary.Add(''other'', new CircularDictionary { { ''blah'', null } })", span="237-237", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_65 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", span="234-234", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_77 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JsonSerializerSettings.cs"];
m14_125 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", span="439-439", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_127 [label="CircularDictionary circularDictionary = new CircularDictionary()", span="443-443", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_128 [label="circularDictionary.Add(''other'', new CircularDictionary { { ''blah'', null } })", span="444-444", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_129 [label="circularDictionary.Add(''self'', circularDictionary)", span="445-445", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_126 [label="string classRef = typeof(CircularDictionary).FullName", span="441-441", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_130 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { JsonConvert.SerializeObject(circularDictionary, Formatting.Indented); }, @''Self referencing loop detected with type ''' + classRef + '''. Path ''.'')", span="447-447", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_131 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", span="439-439", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysError()", file="JsonSerializerSettings.cs"];
m14_349 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)", file="JsonSerializerSettings.cs"];
m14_21 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_32 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests+Container, Newtonsoft.Json.Tests'''',\r\n  ''''ListA'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''$type'''': ''''System.Collections.Generic.List`1[[Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests+ContentA, Newtonsoft.Json.Tests]], mscorlib'''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$id'''': ''''3'''',\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests+ContentB, Newtonsoft.Json.Tests'''',\r\n        ''''SomeValue'''': true\r\n      }\r\n    ]\r\n  },\r\n  ''''ListB'''': {\r\n    ''''$id'''': ''''4'''',\r\n    ''''$type'''': ''''System.Collections.Generic.List`1[[Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests+ContentA, Newtonsoft.Json.Tests]], mscorlib'''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$ref'''': ''''3''''\r\n      }\r\n    ]\r\n  }\r\n}'', s)", span="112-135", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", color=green, community=0, file="JsonSerializerSettings.cs"];
m14_31 [label="string s = JsonConvert.SerializeObject(c1, settings)", span="110-110", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_33 [label="Container c2 = JsonConvert.DeserializeObject<Container>(s, settings)", span="137-137", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_22 [label="JsonSerializerSettings settings = new JsonSerializerSettings()", span="99-99", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_26 [label="Container c1 = new Container()", span="104-104", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_30 [label="c1.ListB.Add(content)", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_34 [label="Assert.AreEqual(c2.ListA[0], c2.ListB[0])", span="139-139", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_35 [label="Assert.AreEqual(true, c2.ListA[0].B.SomeValue)", span="140-140", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_23 [label="settings.PreserveReferencesHandling = PreserveReferencesHandling.All", span="100-100", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_24 [label="settings.TypeNameHandling = TypeNameHandling.All", span="101-101", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_25 [label="settings.Formatting = Formatting.Indented", span="102-102", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_27 [label="ContentA content = new ContentA()", span="105-105", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_29 [label="c1.ListA.Add(content)", span="107-107", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_28 [label="content.B.SomeValue = true", span="106-106", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_36 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInConvert()", file="JsonSerializerSettings.cs"];
m14_180 [label="Entry Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(object, string)", span="38-38", cluster="Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(object, string)", file="JsonSerializerSettings.cs"];
m14_363 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", span="1073-1073", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_370 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n]'', json)", span="1083-1095", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_369 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1082-1082", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_366 [label="l.Add(c1)", span="1078-1078", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_368 [label="l.Add(c1)", span="1080-1080", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_367 [label="l.Add(new TestComponentSimple())", span="1079-1079", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_365 [label="ReferencedList<TestComponentSimple> l = new ReferencedList<TestComponentSimple>()", span="1077-1077", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_364 [label="var c1 = new TestComponentSimple()", span="1075-1075", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_371 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", span="1073-1073", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentList()", file="JsonSerializerSettings.cs"];
m14_373 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", span="1099-1099", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_379 [label="StringAssert.AreEqual(@''{\r\n  ''''First'''': 1,\r\n  ''''Second'''': 2,\r\n  ''''Third'''': 3\r\n}'', json)", span="1107-1111", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_378 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1106-1106", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_374 [label="ReferencedDictionary<int> l = new ReferencedDictionary<int>()", span="1101-1101", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_377 [label="l.Add(''Third'', 3)", span="1104-1104", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_375 [label="l.Add(''First'', 1)", span="1102-1102", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_376 [label="l.Add(''Second'', 2)", span="1103-1103", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_380 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", span="1099-1099", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntDictionary()", file="JsonSerializerSettings.cs"];
m14_142 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", span="468-468", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", file="JsonSerializerSettings.cs"];
m14_143 [label="string json = @''{\r\n  ''''$id'''':''", span="470-471", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", file="JsonSerializerSettings.cs"];
m14_144 [label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings\r\n                    {\r\n                        PreserveReferencesHandling = PreserveReferencesHandling.All,\r\n                        MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n                    });\r\n            }, @''Unexpected end when deserializing object. Path '$id', line 2, position 8.'')", span="473-481", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", file="JsonSerializerSettings.cs"];
m14_145 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", span="468-468", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.UnexpectedEnd()", file="JsonSerializerSettings.cs"];
m14_57 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Child.Child()", span="163-163", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Child.Child()", file="JsonSerializerSettings.cs"];
m14_245 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", span="754-754", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_248 [label="Assert.AreEqual(4, employees.Count)", span="776-776", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_249 [label="Assert.AreEqual(''e1'', employees[0].Name)", span="778-778", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_250 [label="Assert.AreEqual(''e2'', employees[1].Name)", span="779-779", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_251 [label="Assert.AreEqual(''e1'', employees[2].Name)", span="780-780", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_252 [label="Assert.AreEqual(''e2'', employees[3].Name)", span="781-781", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_253 [label="Assert.AreEqual(employees[0], employees[2])", span="783-783", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_254 [label="Assert.AreEqual(employees[1], employees[3])", span="784-784", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_247 [label="List<EmployeeReference> employees = JsonConvert.DeserializeObject<List<EmployeeReference>>(json)", span="775-775", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_246 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]''", span="756-773", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_255 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", span="754-754", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_37 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="390-390", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializerSettings.cs"];
m14_0 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", file="JsonSerializerSettings.cs"];
m14_1 [label="B = new ContentB()", span="61-61", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", file="JsonSerializerSettings.cs"];
m14_2 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA.ContentA()", file="JsonSerializerSettings.cs"];
m14_3 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentB.ContentB()", span="49-49", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentB.ContentB()", file="JsonSerializerSettings.cs"];
m14_4 [label="NullValueHandling = DefaultNullValueHandling", span="101-101", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializerSettings.cs"];
m14_5 [label="DefaultValueHandling = DefaultDefaultValueHandling", span="102-102", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializerSettings.cs"];
m14_6 [label="PreserveReferencesHandling = DefaultPreserveReferencesHandling", span="103-103", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializerSettings.cs"];
m14_7 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="72-72", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_8 [label="return new ContentA() { B = serializer.Deserialize<ContentB>(reader) };", span="74-74", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_9 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="72-72", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_176 [label="Entry Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)", span="323-323", cluster="Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)", file="JsonSerializerSettings.cs"];
m14_179 [label="Entry Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", span="635-635", cluster="Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", file="JsonSerializerSettings.cs"];
m14_353 [label="Entry Unk.AreNotEqual", span="", cluster="Unk.AreNotEqual", file="JsonSerializerSettings.cs"];
m14_381 [label="Entry Newtonsoft.Json.Tests.Serialization.ReferencedDictionary<T>.ReferencedDictionary()", span="1275-1275", cluster="Newtonsoft.Json.Tests.Serialization.ReferencedDictionary<T>.ReferencedDictionary()", file="JsonSerializerSettings.cs"];
m14_264 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", span="824-824", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_267 [label="Assert.AreEqual(4, employees.Count)", span="846-846", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_272 [label="Assert.AreEqual(e1, employees[''Three''])", span="854-854", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_273 [label="Assert.AreEqual(e2, employees[''Four''])", span="855-855", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_270 [label="Assert.AreEqual(''e1'', e1.Name)", span="851-851", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_271 [label="Assert.AreEqual(''e2'', e2.Name)", span="852-852", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_266 [label="Dictionary<string, EmployeeReference> employees = JsonConvert.DeserializeObject<Dictionary<string, EmployeeReference>>(json)", span="845-845", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_268 [label="EmployeeReference e1 = employees[''One'']", span="848-848", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_269 [label="EmployeeReference e2 = employees[''Two'']", span="849-849", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_265 [label="string json = @''{\r\n  ''''One'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Two'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Three'''': {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  ''''Four'''': {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n}''", span="826-843", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_274 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", span="824-824", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_343 [label="Entry Newtonsoft.Json.Tests.TestObjects.MyClass.MyClass()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.MyClass.MyClass()", file="JsonSerializerSettings.cs"];
m14_305 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", span="966-966", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", file="JsonSerializerSettings.cs"];
m14_306 [label="return SecretType.GetHashCode();", span="968-968", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", file="JsonSerializerSettings.cs"];
m14_307 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", span="966-966", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.GetHashCode()", file="JsonSerializerSettings.cs"];
m14_301 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", span="957-957", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", file="JsonSerializerSettings.cs"];
m14_302 [label="Login = login", span="960-960", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", file="JsonSerializerSettings.cs"];
m14_303 [label="SecretType = secretType", span="961-961", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", file="JsonSerializerSettings.cs"];
m14_304 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", span="957-957", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.User(string, System.Type)", file="JsonSerializerSettings.cs"];
m14_203 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", span="598-598", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_206 [label="List<EmployeeReference> employees = new List<EmployeeReference>\r\n            {\r\n                mikeManager,\r\n                joeUser\r\n            }", span="610-614", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_208 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''Mike Manager'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''Joe User'''',\r\n    ''''Manager'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n]'', json)", span="617-630", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_204 [label="EmployeeReference mikeManager = new EmployeeReference\r\n            {\r\n                Name = ''Mike Manager''\r\n            }", span="600-603", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_205 [label="EmployeeReference joeUser = new EmployeeReference\r\n            {\r\n                Name = ''Joe User'',\r\n                Manager = mikeManager\r\n            }", span="604-608", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_207 [label="string json = JsonConvert.SerializeObject(employees, Formatting.Indented)", span="616-616", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_209 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", span="598-598", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_67 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="JsonSerializerSettings.cs"];
m14_423 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="JsonSerializerSettings.cs"];
m14_100 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_106 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    null,\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        null\r\n      ]\r\n    },\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$id'''': ''''4'''',\r\n          ''''$values'''': [\r\n            {\r\n              ''''$ref'''': ''''1''''\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}'', json)", span="331-355", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_105 [label="string json = JsonConvert.SerializeObject(circularList, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="328-329", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_102 [label="circularList.Add(null)", span="324-324", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_103 [label="circularList.Add(new CircularList { null })", span="325-325", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_104 [label="circularList.Add(new CircularList { new CircularList { circularList } })", span="326-326", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_101 [label="CircularList circularList = new CircularList()", span="323-323", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_107 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_76 [label="Entry object.ReferenceEquals(object, object)", span="0-0", cluster="object.ReferenceEquals(object, object)", file="JsonSerializerSettings.cs"];
m14_345 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="JsonSerializerSettings.cs"];
m14_256 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", span="788-788", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_261 [label="StringAssert.AreEqual(@''{\r\n  ''''One'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Two'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  ''''Three'''': {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  ''''Four'''': {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n}'', json)", span="803-820", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_260 [label="string json = JsonConvert.SerializeObject(employees, Formatting.Indented)", span="801-801", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_259 [label="Dictionary<string, EmployeeReference> employees = new Dictionary<string, EmployeeReference>\r\n            {\r\n                { ''One'', e1 },\r\n                { ''Two'', e2 },\r\n                { ''Three'', e1 },\r\n                { ''Four'', e2 }\r\n            }", span="793-799", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_257 [label="EmployeeReference e1 = new EmployeeReference { Name = ''e1'' }", span="790-790", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_258 [label="EmployeeReference e2 = new EmployeeReference { Name = ''e2'' }", span="791-791", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_262 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", span="788-788", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInDictionary()", file="JsonSerializerSettings.cs"];
m14_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSerializerSettings.cs"];
m14_135 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", span="451-451", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_140 [label="StringAssert.AreEqual(@''{\r\n  ''''other'''': {\r\n    ''''blah'''': null\r\n  }\r\n}'', json)", span="460-464", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_139 [label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })", span="457-458", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_136 [label="CircularDictionary circularDictionary = new CircularDictionary()", span="453-453", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_138 [label="circularDictionary.Add(''self'', circularDictionary)", span="455-455", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_137 [label="circularDictionary.Add(''other'', new CircularDictionary { { ''blah'', null } })", span="454-454", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_141 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", span="451-451", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularDictionarysIgnore()", file="JsonSerializerSettings.cs"];
m14_92 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", span="298-298", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_98 [label="StringAssert.AreEqual(@''[\r\n  null,\r\n  [\r\n    null\r\n  ],\r\n  [\r\n    []\r\n  ]\r\n]'', json)", span="309-317", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_97 [label="string json = JsonConvert.SerializeObject(circularList,\r\n                Formatting.Indented,\r\n                new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })", span="305-307", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_94 [label="circularList.Add(null)", span="301-301", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_95 [label="circularList.Add(new CircularList { null })", span="302-302", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_96 [label="circularList.Add(new CircularList { new CircularList { circularList } })", span="303-303", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_93 [label="CircularList circularList = new CircularList()", span="300-300", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_99 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", span="298-298", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsIgnore()", file="JsonSerializerSettings.cs"];
m14_352 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="73-73", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="JsonSerializerSettings.cs"];
m14_41 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="802-802", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerSettings.cs"];
m14_421 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceObject.PropertyItemIsReferenceObject()", span="1257-1257", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceObject.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_362 [label="Entry Newtonsoft.Json.Tests.Serialization.ReferencedList<T>.ReferencedList()", span="1270-1270", cluster="Newtonsoft.Json.Tests.Serialization.ReferencedList<T>.ReferencedList()", file="JsonSerializerSettings.cs"];
m14_354 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", span="1057-1057", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_360 [label="StringAssert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="1065-1069", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_359 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1064-1064", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_356 [label="l.Add(1)", span="1060-1060", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_357 [label="l.Add(2)", span="1061-1061", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_358 [label="l.Add(3)", span="1062-1062", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_355 [label="ReferencedList<int> l = new ReferencedList<int>()", span="1059-1059", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_361 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", span="1057-1057", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedIntList()", file="JsonSerializerSettings.cs"];
m14_39 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="570-570", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerSettings.cs"];
m14_194 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CircularReferenceClassConverter()", span="484-484", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.CircularReferenceClassConverter()", file="JsonSerializerSettings.cs"];
m14_118 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", span="399-399", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_119 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    null,\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        null\r\n      ]\r\n    },\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$id'''': ''''4'''',\r\n          ''''$values'''': [\r\n            {\r\n              ''''$ref'''': ''''1''''\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}''", span="401-425", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_120 [label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All });\r\n            }, @''Cannot preserve reference to array or readonly list, or list created from a non-default constructor: System.String[][]. Path '$values', line 3, position 14.'')", span="427-431", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_121 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", span="399-399", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeArraysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_68 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="606-606", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerSettings.cs"];
m14_313 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", span="979-979", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_319 [label="User deserializedUser = JsonConvert.DeserializeObject<User>(json, serializerSettings)", span="996-996", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_317 [label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,\r\n                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n            }", span="986-992", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_318 [label="string json = JsonConvert.SerializeObject(user1, Formatting.Indented, serializerSettings)", span="994-994", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_320 [label="Assert.IsNotNull(deserializedUser)", span="997-997", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_316 [label="user1.Friend = user2", span="984-984", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_314 [label="User user1 = new User(''Peter'', typeof(Version))", span="981-981", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_315 [label="User user2 = new User(''Michael'', typeof(Version))", span="982-982", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_321 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", span="979-979", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeTypeWithDubiousGetHashcode()", file="JsonSerializerSettings.cs"];
m14_15 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="882-882", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerSettings.cs"];
m14_238 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", span="724-724", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_241 [label="List<EmployeeReference> employees = new List<EmployeeReference> { e1, e2, e1, e2 }", span="729-729", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_243 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]'', json)", span="733-750", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_239 [label="EmployeeReference e1 = new EmployeeReference { Name = ''e1'' }", span="726-726", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_240 [label="EmployeeReference e2 = new EmployeeReference { Name = ''e2'' }", span="727-727", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_242 [label="string json = JsonConvert.SerializeObject(employees, Formatting.Indented)", span="731-731", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_244 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", span="724-724", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReferenceInList()", file="JsonSerializerSettings.cs"];
m14_195 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", span="564-564", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_197 [label="CircularReferenceClass c1 = JsonConvert.DeserializeObject<CircularReferenceClass>(json, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects,\r\n                Converters = new List<JsonConverter> { new CircularReferenceClassConverter() }\r\n            })", span="585-589", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_196 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''CircularReferenceClass'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''$type'''': ''''CircularReferenceClass'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$type'''': ''''CircularReferenceClass'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}''", span="566-583", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_198 [label="Assert.AreEqual(''c1'', c1.Name)", span="591-591", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_199 [label="Assert.AreEqual(''c2'', c1.Child.Name)", span="592-592", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_200 [label="Assert.AreEqual(''c3'', c1.Child.Child.Name)", span="593-593", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_201 [label="Assert.AreEqual(''c1'', c1.Child.Child.Child.Name)", span="594-594", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_202 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", span="564-564", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReferencesWithConverter()", file="JsonSerializerSettings.cs"];
m14_344 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="445-445", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSerializerSettings.cs"];
m14_382 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", span="1115-1115", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_389 [label="StringAssert.AreEqual(@''{\r\n  ''''First'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  ''''Second'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  ''''Third'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="1125-1137", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_388 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1124-1124", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_390 [label="ReferencedDictionary<TestComponentSimple> d = JsonConvert.DeserializeObject<ReferencedDictionary<TestComponentSimple>>(json)", span="1139-1139", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_391 [label="Assert.AreEqual(3, d.Count)", span="1140-1140", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_384 [label="ReferencedDictionary<TestComponentSimple> l = new ReferencedDictionary<TestComponentSimple>()", span="1119-1119", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_387 [label="l.Add(''Third'', c1)", span="1122-1122", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_392 [label="Assert.IsTrue(ReferenceEquals(d[''First''], d[''Third'']))", span="1141-1141", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_383 [label="var c1 = new TestComponentSimple()", span="1117-1117", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_386 [label="l.Add(''Second'', new TestComponentSimple())", span="1121-1121", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_385 [label="l.Add(''First'', c1)", span="1120-1120", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_393 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", span="1115-1115", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedComponentDictionary()", file="JsonSerializerSettings.cs"];
m14_178 [label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1653-1653", cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="JsonSerializerSettings.cs"];
m14_312 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="JsonSerializerSettings.cs"];
m14_38 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSerializerSettings.cs"];
m14_86 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularList.CircularList()", span="280-280", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularList.CircularList()", file="JsonSerializerSettings.cs"];
m14_16 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", span="89-89", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", file="JsonSerializerSettings.cs"];
m14_18 [label="ListB = new List<ContentA>()", span="92-92", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", color=green, community=0, file="JsonSerializerSettings.cs"];
m14_17 [label="ListA = new List<ContentA>()", span="91-91", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", file="JsonSerializerSettings.cs"];
m14_19 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", span="89-89", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container.Container()", file="JsonSerializerSettings.cs"];
m14_263 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSerializerSettings.cs"];
m14_42 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonSerializerSettings.cs"];
m14_322 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JsonSerializerSettings.cs"];
m14_422 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceBody.PropertyItemIsReferenceBody()", span="1250-1250", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemIsReferenceBody.PropertyItemIsReferenceBody()", file="JsonSerializerSettings.cs"];
m14_69 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", span="256-256", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_71 [label="CircularDictionary circularDictionary = JsonConvert.DeserializeObject<CircularDictionary>(json,\r\n                new JsonSerializerSettings\r\n                {\r\n                    PreserveReferencesHandling = PreserveReferencesHandling.All\r\n                })", span="269-273", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_72 [label="Assert.AreEqual(2, circularDictionary.Count)", span="275-275", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_73 [label="Assert.AreEqual(1, circularDictionary[''other''].Count)", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_70 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}''", span="258-267", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_74 [label="Assert.IsTrue(ReferenceEquals(circularDictionary, circularDictionary[''self'']))", span="277-277", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_75 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", span="256-256", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeDictionarysWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_424 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", span="1228-1228", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", file="JsonSerializerSettings.cs"];
m14_425 [label="string json = @''{\r\n  ''''Data'''': {\r\n    ''''Prop1'''': {\r\n      ''''$id'''': ''''1'''',\r\n      ''''MyProperty'''': 0\r\n    },\r\n    ''''Prop2'''': {\r\n      ''''$id'''': ''''1'''',\r\n      ''''MyProperty'''': 0\r\n    }\r\n  }\r\n}''", span="1230-1241", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", file="JsonSerializerSettings.cs"];
m14_426 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<PropertyItemIsReferenceObject>(json, new JsonSerializerSettings\r\n            {\r\n                MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n            }), ''Error reading object reference '1'. Path 'Data.Prop2.MyProperty', line 9, position 19.'')", span="1243-1246", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", file="JsonSerializerSettings.cs"];
m14_427 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", span="1228-1228", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DuplicateId()", file="JsonSerializerSettings.cs"];
m14_409 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", span="1179-1179", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_411 [label="PropertyItemIsReferenceObject o1 = new PropertyItemIsReferenceObject\r\n            {\r\n                Data = new PropertyItemIsReferenceBody\r\n                {\r\n                    Prop1 = c1,\r\n                    Prop2 = c1,\r\n                    Data = new List<TestComponentSimple>\r\n                    {\r\n                        c1\r\n                    }\r\n                }\r\n            }", span="1183-1194", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_413 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''Prop1'''': {\r\n      ''''$id'''': ''''1'''',\r\n      ''''MyProperty'''': 0\r\n    },\r\n    ''''Prop2'''': {\r\n      ''''$ref'''': ''''1''''\r\n    },\r\n    ''''Data'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''MyProperty'''': 0\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="1197-1215", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_410 [label="TestComponentSimple c1 = new TestComponentSimple()", span="1181-1181", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_412 [label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1196-1196", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_414 [label="PropertyItemIsReferenceObject o2 = JsonConvert.DeserializeObject<PropertyItemIsReferenceObject>(json)", span="1217-1217", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_415 [label="TestComponentSimple c2 = o2.Data.Prop1", span="1219-1219", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_416 [label="TestComponentSimple c3 = o2.Data.Prop2", span="1220-1220", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_417 [label="TestComponentSimple c4 = o2.Data.Data[0]", span="1221-1221", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_418 [label="Assert.IsTrue(ReferenceEquals(c2, c3))", span="1223-1223", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_419 [label="Assert.IsFalse(ReferenceEquals(c2, c4))", span="1224-1224", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_420 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", span="1179-1179", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PropertyItemIsReferenceObject()", file="JsonSerializerSettings.cs"];
m14_177 [label="Entry Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", file="JsonSerializerSettings.cs"];
m14_347 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="142-142", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="JsonSerializerSettings.cs"];
m14_40 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="331-331", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="JsonSerializerSettings.cs"];
m14_132 [label="Entry lambda expression", span="447-447", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_123 [label="JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="429-430", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_147 [label="JsonConvert.DeserializeObject<string[][]>(json,\r\n                    new JsonSerializerSettings\r\n                    {\r\n                        PreserveReferencesHandling = PreserveReferencesHandling.All,\r\n                        MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n                    })", span="475-480", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_429 [label="JsonConvert.DeserializeObject<PropertyItemIsReferenceObject>(json, new JsonSerializerSettings\r\n            {\r\n                MetadataPropertyHandling = MetadataPropertyHandling.Default\r\n            })", span="1243-1246", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_122 [label="Entry lambda expression", span="427-431", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_124 [label="Exit lambda expression", span="427-431", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_146 [label="Entry lambda expression", span="473-481", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_148 [label="Exit lambda expression", span="473-481", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_428 [label="Entry lambda expression", span="1243-1246", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_430 [label="Exit lambda expression", span="1243-1246", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_89 [label="JsonConvert.SerializeObject(circularList, Formatting.Indented)", span="294-294", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_133 [label="JsonConvert.SerializeObject(circularDictionary, Formatting.Indented)", span="447-447", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_88 [label="Entry lambda expression", span="294-294", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_90 [label="Exit lambda expression", span="294-294", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_134 [label="Exit lambda expression", span="447-447", cluster="lambda expression", file="JsonSerializerSettings.cs"];
m14_309 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", span="971-971", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", file="JsonSerializerSettings.cs"];
m14_310 [label="return string.Format(''SecretType: {0}, Login: {1}'', secretType, Login);", span="973-973", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", file="JsonSerializerSettings.cs"];
m14_311 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", span="971-971", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User.ToString()", file="JsonSerializerSettings.cs"];
m14_346 [label="Entry System.IO.StreamWriter.StreamWriter(System.IO.Stream)", span="0-0", cluster="System.IO.StreamWriter.StreamWriter(System.IO.Stream)", file="JsonSerializerSettings.cs"];
m14_66 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", span="434-434", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", file="JsonSerializerSettings.cs"];
m14_58 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Parent.Parent()", span="144-144", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Parent.Parent()", file="JsonSerializerSettings.cs"];
m14_394 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", span="1145-1145", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_403 [label="StringAssert.AreEqual(expected, json)", span="1170-1170", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_401 [label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1155-1155", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_402 [label="string expected = @''{\r\n  ''''Component1'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''MyProperty'''': 1\r\n  },\r\n  ''''Component2'''': {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  ''''ComponentNotReference'''': {\r\n    ''''MyProperty'''': 0\r\n  },\r\n  ''''String'''': ''''String!'''',\r\n  ''''Integer'''': 2147483647\r\n}''", span="1156-1169", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_404 [label="ReferenceObject referenceObject = JsonConvert.DeserializeObject<ReferenceObject>(json)", span="1172-1172", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_395 [label="ReferenceObject o1 = new ReferenceObject()", span="1147-1147", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_400 [label="o1.Integer = int.MaxValue", span="1153-1153", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_405 [label="Assert.IsNotNull(referenceObject)", span="1173-1173", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_406 [label="Assert.IsTrue(ReferenceEquals(referenceObject.Component1, referenceObject.Component2))", span="1175-1175", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_396 [label="o1.Component1 = new TestComponentSimple { MyProperty = 1 }", span="1149-1149", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_398 [label="o1.ComponentNotReference = new TestComponentSimple()", span="1151-1151", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_397 [label="o1.Component2 = o1.Component1", span="1150-1150", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_399 [label="o1.String = ''String!''", span="1152-1152", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_407 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", span="1145-1145", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ReferencedObjectItems()", file="JsonSerializerSettings.cs"];
m14_284 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", span="889-889", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_286 [label="List<Person> people = new List<Person>()", span="899-899", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_285 [label="Person p = new Person\r\n            {\r\n                BirthDate = new DateTime(1980, 12, 23, 0, 0, 0, DateTimeKind.Utc),\r\n                LastModified = new DateTime(2009, 2, 20, 12, 59, 21, DateTimeKind.Utc),\r\n                Department = ''IT'',\r\n                Name = ''James''\r\n            }", span="891-897", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_287 [label="people.Add(p)", span="900-900", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_288 [label="people.Add(p)", span="901-901", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_289 [label="string json = JsonConvert.SerializeObject(people, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects })", span="903-904", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_290 [label="List<Person> deserializedPeople = JsonConvert.DeserializeObject<List<Person>>(json,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects })", span="917-918", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_291 [label="Assert.AreEqual(2, deserializedPeople.Count)", span="920-920", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_294 [label="Assert.AreEqual(''James'', p1.Name)", span="925-925", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_295 [label="Assert.AreEqual(''James'', p2.Name)", span="926-926", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_297 [label="Assert.AreEqual(true, equal)", span="929-929", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_292 [label="Person p1 = deserializedPeople[0]", span="922-922", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_293 [label="Person p2 = deserializedPeople[1]", span="923-923", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_296 [label="bool equal = Object.ReferenceEquals(p1, p2)", span="928-928", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_298 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", span="889-889", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ExampleWith()", file="JsonSerializerSettings.cs"];
m14_408 [label="Entry Newtonsoft.Json.Tests.Serialization.ReferenceObject.ReferenceObject()", span="1280-1280", cluster="Newtonsoft.Json.Tests.Serialization.ReferenceObject.ReferenceObject()", file="JsonSerializerSettings.cs"];
m14_20 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSerializerSettings.cs"];
m14_323 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", span="1001-1001", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_325 [label="IList<MyClass> myClasses1 = new List<MyClass>\r\n            {\r\n                c,\r\n                c\r\n            }", span="1005-1009", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_333 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''PreProperty'''': 0,\r\n      ''''PostProperty'''': 0\r\n    },\r\n    {\r\n      ''''$ref'''': ''''2''''\r\n    }\r\n  ]\r\n}'', json)", span="1027-1039", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_324 [label="MyClass c = new MyClass()", span="1003-1003", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_326 [label="var ser = new JsonSerializer()\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            }", span="1011-1014", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_330 [label="ser.Serialize(writer, myClasses1)", span="1021-1021", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_341 [label="Assert.AreNotEqual(myClasses1[0], myClasses2[0])", span="1053-1053", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_332 [label="string json = Encoding.UTF8.GetString(data, 0, data.Length)", span="1025-1025", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_334 [label="ms = new MemoryStream(data)", span="1041-1041", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_327 [label="MemoryStream ms = new MemoryStream()", span="1016-1016", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_338 [label="myClasses2 = ser.Deserialize<IList<MyClass>>(reader)", span="1047-1047", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_329 [label="var writer = new JsonTextWriter(sw) { Formatting = Formatting.Indented }", span="1019-1019", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_331 [label="byte[] data = ms.ToArray()", span="1024-1024", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_340 [label="Assert.AreEqual(myClasses2[0], myClasses2[1])", span="1051-1051", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_339 [label="Assert.AreEqual(2, myClasses2.Count)", span="1050-1050", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_335 [label="IList<MyClass> myClasses2", span="1042-1042", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_336 [label="var sr = new StreamReader(ms)", span="1044-1044", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_328 [label="var sw = new StreamWriter(ms)", span="1018-1018", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_337 [label="var reader = new JsonTextReader(sr)", span="1045-1045", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_342 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", span="1001-1001", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.PreserveReferencesHandlingWithReusedJsonSerializer()", file="JsonSerializerSettings.cs"];
m14_351 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="JsonSerializerSettings.cs"];
m14_108 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", span="359-359", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_110 [label="CircularList circularList = JsonConvert.DeserializeObject<CircularList>(json,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="387-388", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_111 [label="Assert.AreEqual(3, circularList.Count)", span="390-390", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_112 [label="Assert.AreEqual(null, circularList[0])", span="391-391", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_113 [label="Assert.AreEqual(1, circularList[1].Count)", span="392-392", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_114 [label="Assert.AreEqual(1, circularList[2].Count)", span="393-393", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_115 [label="Assert.AreEqual(1, circularList[2][0].Count)", span="394-394", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_109 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    null,\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        null\r\n      ]\r\n    },\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$id'''': ''''4'''',\r\n          ''''$values'''': [\r\n            {\r\n              ''''$ref'''': ''''1''''\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}''", span="361-385", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_116 [label="Assert.IsTrue(ReferenceEquals(circularList, circularList[2][0][0]))", span="395-395", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_117 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", span="359-359", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeListsWithPreserveObjectReferences()", file="JsonSerializerSettings.cs"];
m14_220 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", span="660-660", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_228 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="675-689", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_227 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n            })", span="670-673", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_221 [label="CircularReferenceClass c1 = new CircularReferenceClass { Name = ''c1'' }", span="662-662", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_226 [label="c3.Child = c1", span="668-668", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_222 [label="CircularReferenceClass c2 = new CircularReferenceClass { Name = ''c2'' }", span="663-663", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_223 [label="CircularReferenceClass c3 = new CircularReferenceClass { Name = ''c3'' }", span="664-664", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_224 [label="c1.Child = c2", span="666-666", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_225 [label="c2.Child = c3", span="667-667", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_229 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", span="660-660", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_11 [label="Newtonsoft.Json.JsonSerializerSettings", span="", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_13 [label="serializer.Serialize(writer, b)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_12 [label="ContentB b = ((ContentA)value).B", span="79-79", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_14 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="77-77", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ListConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_91 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSerializerSettings.cs"];
m14_219 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="739-739", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSerializerSettings.cs"];
m14_211 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", span="634-634", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_214 [label="Assert.AreEqual(2, employees.Count)", span="653-653", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_215 [label="Assert.AreEqual(''Mike Manager'', employees[0].Name)", span="654-654", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_216 [label="Assert.AreEqual(''Joe User'', employees[1].Name)", span="655-655", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_217 [label="Assert.AreEqual(employees[0], employees[1].Manager)", span="656-656", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_213 [label="List<EmployeeReference> employees = JsonConvert.DeserializeObject<List<EmployeeReference>>(json)", span="651-651", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_212 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''Mike Manager'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''Joe User'''',\r\n    ''''Manager'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n]''", span="636-649", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_218 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", span="634-634", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeEmployeeReference()", file="JsonSerializerSettings.cs"];
m14_78 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", span="285-285", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_81 [label="circularList.Add(null)", span="290-290", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_82 [label="circularList.Add(new CircularList { null })", span="291-291", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_83 [label="circularList.Add(new CircularList { new CircularList { circularList } })", span="292-292", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_80 [label="CircularList circularList = new CircularList()", span="289-289", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_84 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { JsonConvert.SerializeObject(circularList, Formatting.Indented); }, ''Self referencing loop detected with type ''' + classRef + '''. Path '[2][0]'.'')", span="294-294", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_79 [label="string classRef = typeof(CircularList).FullName", span="287-287", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_85 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", span="285-285", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeCircularListsError()", file="JsonSerializerSettings.cs"];
m14_230 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", span="693-693", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_232 [label="CircularReferenceClass c1 =\r\n                JsonConvert.DeserializeObject<CircularReferenceClass>(json, new JsonSerializerSettings\r\n                {\r\n                    PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n                })", span="711-715", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_233 [label="Assert.AreEqual(''c1'', c1.Name)", span="717-717", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_234 [label="Assert.AreEqual(''c2'', c1.Child.Name)", span="718-718", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_235 [label="Assert.AreEqual(''c3'', c1.Child.Child.Name)", span="719-719", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_236 [label="Assert.AreEqual(''c1'', c1.Child.Child.Child.Name)", span="720-720", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_231 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''Name'''': ''''c1'''',\r\n  ''''Child'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''c2'''',\r\n    ''''Child'''': {\r\n      ''''$id'''': ''''3'''',\r\n      ''''Name'''': ''''c3'''',\r\n      ''''Child'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  }\r\n}''", span="695-709", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_237 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", span="693-693", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.DeserializeCircularReference()", file="JsonSerializerSettings.cs"];
m14_372 [label="Entry Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", span="33-33", cluster="Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", file="JsonSerializerSettings.cs"];
m14_283 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSerializerSettings.cs"];
m14_43 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", span="168-168", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_45 [label="IList<string> l = new List<string>\r\n            {\r\n                ''value!''\r\n            }", span="174-177", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_48 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''ReadOnlyChild'''': {\r\n    ''''PropertyName'''': ''''value?''''\r\n  },\r\n  ''''Child1'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''PropertyName'''': ''''value?''''\r\n  },\r\n  ''''Child2'''': {\r\n    ''''$ref'''': ''''2''''\r\n  },\r\n  ''''ReadOnlyList'''': [\r\n    ''''value!''''\r\n  ],\r\n  ''''List1'''': {\r\n    ''''$id'''': ''''3'''',\r\n    ''''$values'''': [\r\n      ''''value!''''\r\n    ]\r\n  },\r\n  ''''List2'''': {\r\n    ''''$ref'''': ''''3''''\r\n  }\r\n}'', json)", span="192-216", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_44 [label="Child c = new Child\r\n            {\r\n                PropertyName = ''value?''\r\n            }", span="170-173", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_46 [label="Parent p = new Parent\r\n            {\r\n                Child1 = c,\r\n                Child2 = c,\r\n                List1 = l,\r\n                List2 = l\r\n            }", span="178-184", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_47 [label="string json = JsonConvert.SerializeObject(p, new JsonSerializerSettings\r\n            {\r\n                Formatting = Formatting.Indented,\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            })", span="186-190", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_49 [label="Parent newP = JsonConvert.DeserializeObject<Parent>(json, new JsonSerializerSettings\r\n            {\r\n                Formatting = Formatting.Indented,\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            })", span="218-222", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_50 [label="Assert.AreEqual(''value?'', newP.Child1.PropertyName)", span="224-224", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_51 [label="Assert.AreEqual(newP.Child1, newP.Child2)", span="225-225", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_52 [label="Assert.AreEqual(newP.Child1, newP.ReadOnlyChild)", span="226-226", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_53 [label="Assert.AreEqual(''value!'', newP.List1[0])", span="228-228", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_54 [label="Assert.AreEqual(newP.List1, newP.List2)", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_55 [label="Assert.AreEqual(newP.List1, newP.ReadOnlyList)", span="230-230", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_56 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", span="168-168", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.SerializeReadOnlyProperty()", file="JsonSerializerSettings.cs"];
m14_350 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="JsonSerializerSettings.cs"];
m14_308 [label="Entry System.Type.GetHashCode()", span="0-0", cluster="System.Type.GetHashCode()", file="JsonSerializerSettings.cs"];
m14_87 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="358-358", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JsonSerializerSettings.cs"];
m14_166 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="503-503", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_170 [label="CircularReferenceClass circularReferenceClass = new CircularReferenceClass()", span="509-509", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_169 [label="id != null", span="507-507", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_171 [label="serializer.Populate(o.CreateReader(), circularReferenceClass)", span="510-510", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_172 [label="return circularReferenceClass;", span="511-511", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_168 [label="string id = (string)o[''$id'']", span="506-506", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_173 [label="string reference = (string)o[''$ref'']", span="515-515", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_167 [label="JObject o = JObject.Load(reader)", span="505-505", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_174 [label="return serializer.ReferenceResolver.ResolveReference(serializer, reference);", span="516-516", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_175 [label="Exit Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="503-503", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularReferenceClassConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerSettings.cs"];
m14_210 [label="Entry Newtonsoft.Json.Tests.TestObjects.EmployeeReference.EmployeeReference()", span="28-28", cluster="Newtonsoft.Json.Tests.TestObjects.EmployeeReference.EmployeeReference()", file="JsonSerializerSettings.cs"];
m14_432 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container", span="", file="JsonSerializerSettings.cs"];
m14_434 [label=json, span="", file="JsonSerializerSettings.cs"];
m14_436 [label=json, span="", file="JsonSerializerSettings.cs"];
m14_438 [label=json, span="", file="JsonSerializerSettings.cs"];
m14_433 [label=circularList, span="", file="JsonSerializerSettings.cs"];
m14_435 [label=circularDictionary, span="", file="JsonSerializerSettings.cs"];
m14_431 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA", span="", file="JsonSerializerSettings.cs"];
m14_437 [label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User", span="", file="JsonSerializerSettings.cs"];
m15_71 [label="Entry System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)", span="0-0", cluster="System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)", file="JsonTypeReflector.cs"];
m15_54 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", span="160-160", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_55 [label="list.ContainsValue(value, comparer)", span="162-162", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_56 [label="return false;", span="164-164", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_57 [label="list.Add(value)", span="167-167", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_58 [label="return true;", span="168-168", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_59 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", span="160-160", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_34 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", span="121-121", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_36 [label="ConstructorInfo match = null", span="124-124", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_35 [label="Type genericEnumerable = typeof(IEnumerable<>).MakeGenericType(collectionItemType)", span="123-123", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_37 [label="collectionType.GetConstructors(BindingFlags.Public | BindingFlags.Instance)", span="126-126", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_43 [label="match == null", span="142-142", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_46 [label="return match;", span="152-152", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_39 [label="parameters.Count == 1", span="130-130", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_41 [label="genericEnumerable == parameterType", span="134-134", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_44 [label="parameterType.IsAssignableFrom(constructorArgumentType)", span="144-144", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_45 [label="match = constructor", span="146-146", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_38 [label="IList<ParameterInfo> parameters = constructor.GetParameters()", span="128-128", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_42 [label="match = constructor", span="137-137", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_40 [label="Type parameterType = parameters[0].ParameterType", span="132-132", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_47 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", span="121-121", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_33 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])", file="JsonTypeReflector.cs"];
m15_142 [label="Entry System.Array.GetLength(int)", span="0-0", cluster="System.Array.GetLength(int)", file="JsonTypeReflector.cs"];
m15_87 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="JsonTypeReflector.cs"];
m15_13 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JsonTypeReflector.cs"];
m15_162 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="JsonTypeReflector.cs"];
m15_29 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type)", span="114-114", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_30 [label="Type genericConstructorArgument = typeof(IList<>).MakeGenericType(collectionItemType)", span="116-116", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_31 [label="return ResolveEnumerableCollectionConstructor(collectionType, collectionItemType, genericConstructorArgument);", span="118-118", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_32 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type)", span="114-114", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ResolveEnumerableCollectionConstructor(System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_16 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="92-92", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_24 [label="return false;", span="111-111", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_22 [label="ReflectionUtils.ImplementsGenericDefinition(type, typeof(IReadOnlyDictionary<,>))", span="105-105", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_20 [label="ReflectionUtils.ImplementsGenericDefinition(type, typeof(IDictionary<,>))", span="100-100", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_23 [label="return true;", span="107-107", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_19 [label="return true;", span="98-98", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_21 [label="return true;", span="102-102", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_17 [label="ValidationUtils.ArgumentNotNull(type, nameof(type))", span="94-94", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_18 [label="typeof(IDictionary).IsAssignableFrom(type)", span="96-96", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_25 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="92-92", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="JsonTypeReflector.cs"];
m15_119 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", span="283-283", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_137 [label="CopyFromJaggedToMultidimensionalArray(values, multidimensionalArray, newIndices)", span="309-309", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_120 [label="int dimension = indices.Length", span="285-285", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_121 [label="dimension == multidimensionalArray.Rank", span="286-286", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_122 [label="multidimensionalArray.SetValue(JaggedArrayGetValue(values, indices), indices)", span="288-288", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_124 [label="int dimensionLength = multidimensionalArray.GetLength(dimension)", span="292-292", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_125 [label="IList list = (IList)JaggedArrayGetValue(values, indices)", span="293-293", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_132 [label="newIndices[i] = indices[i]", span="303-303", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_135 [label="i < multidimensionalArray.GetLength(dimension)", span="306-306", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_129 [label="int[] newIndices = new int[dimension + 1]", span="300-300", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_136 [label="newIndices[dimension] = i", span="308-308", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_138 [label="i++", span="306-306", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_123 [label="return;", span="289-289", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_128 [label="throw new Exception(''Cannot deserialize non-cubical array as multidimensional array.'');", span="297-297", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_131 [label="i < dimension", span="301-301", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_127 [label="currentValuesLength != dimensionLength", span="295-295", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_126 [label="int currentValuesLength = list.Count", span="294-294", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_130 [label="int i = 0", span="301-301", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_133 [label="i++", span="301-301", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_134 [label="int i = 0", span="306-306", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_139 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", span="283-283", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CopyFromJaggedToMultidimensionalArray(System.Collections.IList, System.Array, int[])", file="JsonTypeReflector.cs"];
m15_60 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="172-172", cluster="System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_49 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="JsonTypeReflector.cs"];
m15_48 [label="Entry System.Type.GetConstructors(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetConstructors(System.Reflection.BindingFlags)", file="JsonTypeReflector.cs"];
m15_14 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="JsonTypeReflector.cs"];
m15_0 [label="Entry Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="18-18", cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonTypeReflector.cs"];
m15_1 [label="Exit Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="18-18", cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonTypeReflector.cs"];
m15_28 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", span="298-298", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", file="JsonTypeReflector.cs"];
m15_154 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", span="331-331", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_157 [label="dimensions.Add(0)", span="337-337", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_155 [label="IList<int> dimensions = GetDimensions(values, rank)", span="333-333", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_156 [label="dimensions.Count < rank", span="335-335", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_158 [label="Array multidimensionalArray = Array.CreateInstance(type, dimensions.ToArray())", span="340-340", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_159 [label="CopyFromJaggedToMultidimensionalArray(values, multidimensionalArray, new int[0])", span="341-341", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_160 [label="return multidimensionalArray;", span="343-343", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_161 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", span="331-331", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonTypeReflector.cs"];
m15_140 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", span="313-313", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_144 [label="IList currentList = values", span="315-315", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_146 [label="i < indices.Length", span="316-316", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_147 [label="int index = indices[i]", span="318-318", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_148 [label="i == indices.Length - 1", span="319-319", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_149 [label="return currentList[index];", span="321-321", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_152 [label="return currentList;", span="328-328", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_145 [label="int i = 0", span="316-316", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_150 [label="currentList = (IList)currentList[index]", span="325-325", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_151 [label="i++", span="316-316", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_153 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", span="313-313", cluster="Newtonsoft.Json.Utilities.CollectionUtils.JaggedArrayGetValue(System.Collections.IList, int[])", file="JsonTypeReflector.cs"];
m15_163 [label="Entry System.Array.CreateInstance(System.Type, params int[])", span="0-0", cluster="System.Array.CreateInstance(System.Type, params int[])", file="JsonTypeReflector.cs"];
m15_15 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonTypeReflector.cs"];
m15_106 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", span="249-249", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_110 [label="dimensions.Add(currentArray.Count)", span="256-256", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_115 [label="currentArray = (IList)v", span="272-272", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_107 [label="IList<int> dimensions = new List<int>()", span="251-251", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_108 [label="IList currentArray = values", span="253-253", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_109 [label=true, span="254-254", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_111 [label="dimensions.Count == dimensionsCount", span="259-259", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_113 [label="object v = currentArray[0]", span="269-269", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_114 [label="v is IList", span="270-270", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_116 [label="return dimensions;", span="280-280", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_112 [label="currentArray.Count == 0", span="264-264", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_117 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", span="249-249", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetDimensions(System.Collections.IList, int)", file="JsonTypeReflector.cs"];
m15_79 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", span="209-209", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", file="JsonTypeReflector.cs"];
m15_84 [label="index++", span="219-219", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", color=green, community=0, file="JsonTypeReflector.cs"];
m15_80 [label="int index = 0", span="211-211", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", file="JsonTypeReflector.cs"];
m15_82 [label="predicate(value)", span="214-214", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", file="JsonTypeReflector.cs"];
m15_81 [label=collection, span="212-212", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", file="JsonTypeReflector.cs"];
m15_85 [label="return -1;", span="222-222", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", color=green, community=0, file="JsonTypeReflector.cs"];
m15_83 [label="return index;", span="216-216", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", file="JsonTypeReflector.cs"];
m15_86 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", span="209-209", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>)", file="JsonTypeReflector.cs"];
m15_72 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="195-195", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_75 [label="!list.AddDistinct(value, comparer)", span="200-200", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", color=green, community=0, file="JsonTypeReflector.cs"];
m15_74 [label=values, span="198-198", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_76 [label="allAdded = false", span="202-202", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", color=green, community=0, file="JsonTypeReflector.cs"];
m15_77 [label="return allAdded;", span="206-206", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_73 [label="bool allAdded = true", span="197-197", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_78 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="195-195", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_50 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", span="155-155", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", file="JsonTypeReflector.cs"];
m15_51 [label="return list.AddDistinct(value, EqualityComparer<T>.Default);", span="157-157", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", file="JsonTypeReflector.cs"];
m15_52 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", span="155-155", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", file="JsonTypeReflector.cs"];
m15_26 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="31-31", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="JsonTypeReflector.cs"];
m15_27 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="JsonTypeReflector.cs"];
m15_5 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="64-64", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_11 [label="initial.Add(value)", span="78-78", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_10 [label=collection, span="76-76", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_7 [label="throw new ArgumentNullException(nameof(initial));", span="68-68", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_6 [label="initial == null", span="66-66", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_8 [label="collection == null", span="71-71", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_9 [label="return;", span="73-73", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_12 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="64-64", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", file="JsonTypeReflector.cs"];
m15_141 [label="Entry System.Array.SetValue(object, params int[])", span="0-0", cluster="System.Array.SetValue(object, params int[])", file="JsonTypeReflector.cs"];
m15_143 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="JsonTypeReflector.cs"];
m15_53 [label="Entry System.Collections.Generic.IList<T>.AddDistinct<T>(T, System.Collections.Generic.IEqualityComparer<T>)", span="160-160", cluster="System.Collections.Generic.IList<T>.AddDistinct<T>(T, System.Collections.Generic.IEqualityComparer<T>)", file="JsonTypeReflector.cs"];
m15_61 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="172-172", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_63 [label="comparer = EqualityComparer<TSource>.Default", span="176-176", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_62 [label="comparer == null", span="174-174", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_64 [label="source == null", span="179-179", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_67 [label="comparer.Equals(local, value)", span="186-186", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_65 [label="throw new ArgumentNullException(nameof(source));", span="181-181", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_66 [label=source, span="184-184", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_68 [label="return true;", span="188-188", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_69 [label="return false;", span="192-192", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m15_70 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="172-172", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonTypeReflector.cs"];
m16_15 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="381-381", cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="LinqToSqlClassesSerializationTests.cs"];
m16_10 [label="string json = JsonConvert.SerializeObject(person, Formatting.Indented, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })", span="39-39", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Serialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_14 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(int)", span="828-828", cluster="Newtonsoft.Json.JsonWriter.WriteValue(int)", file="LinqToSqlClassesSerializationTests.cs"];
m16_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_11 [label="Entry Newtonsoft.Json.Linq.JContainer.CreateWriter()", span="621-621", cluster="Newtonsoft.Json.Linq.JContainer.CreateWriter()", file="LinqToSqlClassesSerializationTests.cs"];
m16_4 [label="writer.WriteStartArray()", span="21-21", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_9 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_3 [label="writer.WritePropertyName(''name3'')", span="20-20", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_8 [label="Console.WriteLine(o.ToString())", span="26-26", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_7 [label="writer.WriteEndArray()", span="24-24", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_5 [label="writer.WriteValue(1)", span="22-22", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_6 [label="writer.WriteValue(2)", span="23-23", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_1 [label="JObject o = new JObject\r\n            {\r\n                { ''name1'', ''value1'' },\r\n                { ''name2'', ''value2'' }\r\n            }", span="13-17", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_2 [label="JsonWriter writer = o.CreateWriter()", span="19-19", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateWriter.Example()", file="LinqToSqlClassesSerializationTests.cs"];
m16_12 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="407-407", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="LinqToSqlClassesSerializationTests.cs"];
m16_20 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="565-565", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="LinqToSqlClassesSerializationTests.cs"];
m16_16 [label="Entry Newtonsoft.Json.Tests.LinqToSql.PersonRole.PersonRole()", span="447-447", cluster="Newtonsoft.Json.Tests.LinqToSql.PersonRole.PersonRole()", file="LinqToSqlClassesSerializationTests.cs"];
m16_13 [label="Entry Newtonsoft.Json.Tests.LinqToSql.Role.Role()", span="327-327", cluster="Newtonsoft.Json.Tests.LinqToSql.Role.Role()", file="LinqToSqlClassesSerializationTests.cs"];
m16_17 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="LinqToSqlClassesSerializationTests.cs"];
m16_21 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="LinqToSqlClassesSerializationTests.cs"];
m16_18 [label="Entry Newtonsoft.Json.Tests.LinqToSql.Department.Department()", span="633-633", cluster="Newtonsoft.Json.Tests.LinqToSql.Department.Department()", file="LinqToSqlClassesSerializationTests.cs"];
m16_40 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="608-608", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="LinqToSqlClassesSerializationTests.cs"];
m16_41 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="LinqToSqlClassesSerializationTests.cs"];
m16_42 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute<T>(System.Reflection.ICustomAttributeProvider)", span="228-228", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute<T>(System.Reflection.ICustomAttributeProvider)", file="LinqToSqlClassesSerializationTests.cs"];
m16_43 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="LinqToSqlClassesSerializationTests.cs"];
m16_22 [label="Entry Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", span="65-65", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_35 [label="TableAttribute tableAttribute = JsonTypeReflector.GetAttribute<TableAttribute>(typeof(Person))", span="102-102", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", color=green, community=0, file="LinqToSqlClassesSerializationTests.cs"];
m16_34 [label="Assert.AreEqual(''Name!'', person.Department.Name)", span="100-100", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_36 [label="Assert.AreEqual('''', tableAttribute.Name)", span="103-103", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", color=green, community=0, file="LinqToSqlClassesSerializationTests.cs"];
m16_37 [label="ColumnAttribute columnAttribute = JsonTypeReflector.GetAttribute<ColumnAttribute>(typeof(Person).GetProperty(''FirstName''))", span="105-105", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", color=green, community=0, file="LinqToSqlClassesSerializationTests.cs"];
m16_38 [label="Assert.AreEqual(''_FirstName'', columnAttribute.Storage)", span="106-106", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", color=green, community=0, file="LinqToSqlClassesSerializationTests.cs"];
m16_24 [label="Person person = JsonConvert.DeserializeObject<Person>(json)", span="88-88", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_33 [label="Assert.AreEqual(1, person.PersonRoles[0].Role.PersonRoles.Count)", span="98-98", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_26 [label="Assert.AreEqual(new Guid(''7AA027AA-C995-4986-908D-999D8063599F''), person.PersonId)", span="91-91", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_27 [label="Assert.AreEqual(''FirstName!'', person.FirstName)", span="92-92", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_28 [label="Assert.AreEqual(''LastName!'', person.LastName)", span="93-93", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_29 [label="Assert.AreEqual(1, person.PersonRoles.Count)", span="94-94", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_30 [label="Assert.AreEqual(person.PersonId, person.PersonRoles[0].PersonId)", span="95-95", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_31 [label="Assert.AreEqual(new Guid(''67EA92B7-4BD3-4718-BD75-3C7EDF800B34''), person.PersonRoles[0].RoleId)", span="96-96", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_23 [label="string json = @''{\r\n  ''''first_name'''': ''''FirstName!'''',\r\n  ''''LastName'''': ''''LastName!'''',\r\n  ''''PersonId'''': ''''7aa027aa-c995-4986-908d-999d8063599f'''',\r\n  ''''PersonRoles'''': [\r\n    {\r\n      ''''PersonId'''': ''''7aa027aa-c995-4986-908d-999d8063599f'''',\r\n      ''''RoleId'''': ''''67ea92b7-4bd3-4718-bd75-3c7edf800b34'''',\r\n      ''''PersonRoleId'''': ''''b012dd41-71df-4839-b8d5-d1333fb886bc'''',\r\n      ''''Role'''': {\r\n        ''''Name'''': ''''Role1'''',\r\n        ''''RoleId'''': ''''t5LqZ9NLGEe9dTx+34ALNA==''''\r\n      }\r\n    }\r\n  ],\r\n  ''''Department'''': {\r\n    ''''DepartmentId'''': ''''08f68bf9-929b-4434-bc47-c9489d22112b'''',\r\n    ''''Name'''': ''''!emaN''''\r\n  }\r\n}''", span="67-86", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_25 [label="Assert.IsNotNull(person)", span="89-89", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_32 [label="Assert.IsNotNull(person.PersonRoles[0].Role)", span="97-97", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m16_39 [label="Exit Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", span="65-65", cluster="Newtonsoft.Json.Tests.LinqToSql.LinqToSqlClassesSerializationTests.Deserialize()", file="LinqToSqlClassesSerializationTests.cs"];
m17_66 [label="Entry Newtonsoft.Json.Tests.TestObjects.SerializationEventTestList.SerializationEventTestList()", span="48-48", cluster="Newtonsoft.Json.Tests.TestObjects.SerializationEventTestList.SerializationEventTestList()", file="SerializationEventAttributeTests.cs"];
m17_23 [label="Entry Newtonsoft.Json.Tests.TestObjects.SerializationEventTestObject.SerializationEventTestObject()", span="62-62", cluster="Newtonsoft.Json.Tests.TestObjects.SerializationEventTestObject.SerializationEventTestObject()", file="SerializationEventAttributeTests.cs"];
m17_25 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="523-523", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="SerializationEventAttributeTests.cs"];
m17_47 [label="Entry Newtonsoft.Json.Tests.TestObjects.SerializationEventTestObjectWithConstructor.SerializationEventTestObjectWithConstructor(int, string, string)", span="49-49", cluster="Newtonsoft.Json.Tests.TestObjects.SerializationEventTestObjectWithConstructor.SerializationEventTestObjectWithConstructor(int, string, string)", file="SerializationEventAttributeTests.cs"];
m17_26 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="271-271", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="SerializationEventAttributeTests.cs"];
m17_67 [label="Entry System.Convert.ToDecimal(double)", span="0-0", cluster="System.Convert.ToDecimal(double)", file="SerializationEventAttributeTests.cs"];
m17_87 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", span="188-188", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_88 [label="SerializationEventTestObject obj = new SerializationEventTestObject()", span="190-190", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_89 [label="Console.WriteLine(obj.Member1)", span="192-192", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_90 [label="Console.WriteLine(obj.Member2)", span="194-194", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_91 [label="Console.WriteLine(obj.Member3)", span="196-196", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_92 [label="Console.WriteLine(obj.Member4)", span="198-198", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_93 [label="Console.WriteLine(obj.Member5)", span="200-200", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_94 [label="string json = JsonConvert.SerializeObject(obj, Formatting.Indented)", span="203-203", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_95 [label="Console.WriteLine(obj.Member1)", span="210-210", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_96 [label="Console.WriteLine(obj.Member2)", span="212-212", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_97 [label="Console.WriteLine(obj.Member3)", span="214-214", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_98 [label="Console.WriteLine(obj.Member4)", span="216-216", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_99 [label="Console.WriteLine(obj.Member5)", span="218-218", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_100 [label="obj = JsonConvert.DeserializeObject<SerializationEventTestObject>(json)", span="221-221", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_101 [label="Console.WriteLine(obj.Member1)", span="223-223", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_102 [label="Console.WriteLine(obj.Member2)", span="225-225", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_103 [label="Console.WriteLine(obj.Member3)", span="227-227", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_104 [label="Console.WriteLine(obj.Member4)", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_105 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", span="188-188", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEventsDocumentationExample()", file="SerializationEventAttributeTests.cs"];
m17_28 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="608-608", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="SerializationEventAttributeTests.cs"];
m17_0 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", span="42-42", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_1 [label="SerializationEventTestObject obj = new SerializationEventTestObject()", span="44-44", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_2 [label="Assert.AreEqual(11, obj.Member1)", span="46-46", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_3 [label="Assert.AreEqual(''Hello World!'', obj.Member2)", span="47-47", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_4 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="48-48", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_5 [label="Assert.AreEqual(null, obj.Member4)", span="49-49", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_6 [label="Assert.AreEqual(null, obj.Member5)", span="50-50", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_7 [label="string json = JsonConvert.SerializeObject(obj, Formatting.Indented)", span="52-52", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_9 [label="Assert.AreEqual(11, obj.Member1)", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_10 [label="Assert.AreEqual(''This value was reset after serialization.'', obj.Member2)", span="60-60", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_11 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="61-61", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_12 [label="Assert.AreEqual(null, obj.Member4)", span="62-62", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_13 [label="Assert.AreEqual(''Error message for member Member6 = Error getting value from 'Member6' on 'Newtonsoft.Json.Tests.TestObjects.SerializationEventTestObject'.'', obj.Member5)", span="63-63", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_8 [label="Assert.AreEqual(@''{\r\n  ''''Member1'''': 11,\r\n  ''''Member2'''': ''''This value went into the data file during serialization.'''',\r\n  ''''Member4'''': null\r\n}'', json)", span="53-57", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_14 [label="JObject o = JObject.Parse(@''{\r\n  ''''Member1'''': 11,\r\n  ''''Member2'''': ''''This value went into the data file during serialization.'''',\r\n  ''''Member4'''': null\r\n}'')", span="65-69", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_15 [label="o[''Member6''] = ''Dummy text for error''", span="70-70", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_16 [label="obj = JsonConvert.DeserializeObject<SerializationEventTestObject>(o.ToString())", span="72-72", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_17 [label="Assert.AreEqual(11, obj.Member1)", span="74-74", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_18 [label="Assert.AreEqual(''This value went into the data file during serialization.'', obj.Member2)", span="75-75", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_19 [label="Assert.AreEqual(''This value was set during deserialization'', obj.Member3)", span="76-76", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_20 [label="Assert.AreEqual(''This value was set after deserialization.'', obj.Member4)", span="77-77", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_21 [label="Assert.AreEqual(''Error message for member Member6 = Error setting value to 'Member6' on 'Newtonsoft.Json.Tests.TestObjects.SerializationEventTestObject'.'', obj.Member5)", span="78-78", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_22 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", span="42-42", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectEvents()", file="SerializationEventAttributeTests.cs"];
m17_68 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", span="150-150", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_69 [label="SerializationEventTestDictionary obj = new SerializationEventTestDictionary\r\n        {\r\n          { 1.1m, ''first'' },\r\n          { 2.222222222m, ''second'' },\r\n          { int.MaxValue, ''third'' },\r\n          { Convert.ToDecimal(Math.PI), ''fourth'' }\r\n        }", span="152-158", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_70 [label="Assert.AreEqual(11, obj.Member1)", span="160-160", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_71 [label="Assert.AreEqual(''Hello World!'', obj.Member2)", span="161-161", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_72 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="162-162", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_73 [label="Assert.AreEqual(null, obj.Member4)", span="163-163", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_74 [label="string json = JsonConvert.SerializeObject(obj, Formatting.Indented)", span="165-165", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_76 [label="Assert.AreEqual(11, obj.Member1)", span="174-174", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_77 [label="Assert.AreEqual(''This value was reset after serialization.'', obj.Member2)", span="175-175", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_78 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="176-176", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_79 [label="Assert.AreEqual(null, obj.Member4)", span="177-177", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_75 [label="Assert.AreEqual(@''{\r\n  ''''1.1'''': ''''first'''',\r\n  ''''2.222222222'''': ''''second'''',\r\n  ''''2147483647'''': ''''third'''',\r\n  ''''3.14159265358979'''': ''''fourth'''',\r\n  ''''79228162514264337593543950335'''': ''''Inserted on serializing''''\r\n}'', json)", span="166-172", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_80 [label="obj = JsonConvert.DeserializeObject<SerializationEventTestDictionary>(json)", span="179-179", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_81 [label="Assert.AreEqual(11, obj.Member1)", span="181-181", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_82 [label="Assert.AreEqual(''Hello World!'', obj.Member2)", span="182-182", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_83 [label="Assert.AreEqual(''This value was set during deserialization'', obj.Member3)", span="183-183", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_84 [label="Assert.AreEqual(''This value was set after deserialization.'', obj.Member4)", span="184-184", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_85 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", span="150-150", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.DictionaryEvents()", file="SerializationEventAttributeTests.cs"];
m17_48 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", span="112-112", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_49 [label="SerializationEventTestList obj = new SerializationEventTestList\r\n        {\r\n          1.1m,\r\n          2.222222222m,\r\n          int.MaxValue,\r\n          Convert.ToDecimal(Math.PI)\r\n        }", span="114-120", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_50 [label="Assert.AreEqual(11, obj.Member1)", span="122-122", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_51 [label="Assert.AreEqual(''Hello World!'', obj.Member2)", span="123-123", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_52 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="124-124", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_53 [label="Assert.AreEqual(null, obj.Member4)", span="125-125", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_54 [label="string json = JsonConvert.SerializeObject(obj, Formatting.Indented)", span="127-127", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_56 [label="Assert.AreEqual(11, obj.Member1)", span="136-136", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_57 [label="Assert.AreEqual(''This value was reset after serialization.'', obj.Member2)", span="137-137", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_58 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="138-138", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_59 [label="Assert.AreEqual(null, obj.Member4)", span="139-139", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_55 [label="Assert.AreEqual(@''[\r\n  -1.0,\r\n  1.1,\r\n  2.222222222,\r\n  2147483647.0,\r\n  3.14159265358979\r\n]'', json)", span="128-134", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_60 [label="obj = JsonConvert.DeserializeObject<SerializationEventTestList>(json)", span="141-141", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_61 [label="Assert.AreEqual(11, obj.Member1)", span="143-143", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_62 [label="Assert.AreEqual(''Hello World!'', obj.Member2)", span="144-144", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_63 [label="Assert.AreEqual(''This value was set during deserialization'', obj.Member3)", span="145-145", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_64 [label="Assert.AreEqual(''This value was set after deserialization.'', obj.Member4)", span="146-146", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_65 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", span="112-112", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ListEvents()", file="SerializationEventAttributeTests.cs"];
m17_106 [label="Entry System.Console.WriteLine(int)", span="0-0", cluster="System.Console.WriteLine(int)", file="SerializationEventAttributeTests.cs"];
m17_86 [label="Entry Newtonsoft.Json.Tests.TestObjects.SerializationEventTestDictionary.SerializationEventTestDictionary()", span="47-47", cluster="Newtonsoft.Json.Tests.TestObjects.SerializationEventTestDictionary.SerializationEventTestDictionary()", file="SerializationEventAttributeTests.cs"];
m17_107 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="SerializationEventAttributeTests.cs"];
m17_27 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="335-335", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="SerializationEventAttributeTests.cs"];
m17_29 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", span="82-82", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_30 [label="SerializationEventTestObjectWithConstructor obj = new SerializationEventTestObjectWithConstructor(11, ''Hello World!'', null)", span="84-84", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_31 [label="Assert.AreEqual(11, obj.Member1)", span="86-86", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_32 [label="Assert.AreEqual(''Hello World!'', obj.Member2)", span="87-87", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_33 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="88-88", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_34 [label="Assert.AreEqual(null, obj.Member4)", span="89-89", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_35 [label="string json = JsonConvert.SerializeObject(obj, Formatting.Indented)", span="91-91", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_37 [label="Assert.AreEqual(11, obj.Member1)", span="98-98", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_38 [label="Assert.AreEqual(''This value was reset after serialization.'', obj.Member2)", span="99-99", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_39 [label="Assert.AreEqual(''This is a nonserialized value'', obj.Member3)", span="100-100", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_40 [label="Assert.AreEqual(null, obj.Member4)", span="101-101", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_36 [label="Assert.AreEqual(@''{\r\n  ''''Member1'''': 11,\r\n  ''''Member2'''': ''''This value went into the data file during serialization.'''',\r\n  ''''Member4'''': null\r\n}'', json)", span="92-96", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_41 [label="obj = JsonConvert.DeserializeObject<SerializationEventTestObjectWithConstructor>(json)", span="103-103", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_42 [label="Assert.AreEqual(11, obj.Member1)", span="105-105", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_43 [label="Assert.AreEqual(''This value went into the data file during serialization.'', obj.Member2)", span="106-106", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_44 [label="Assert.AreEqual(''This value was set during deserialization'', obj.Member3)", span="107-107", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_45 [label="Assert.AreEqual(''This value was set after deserialization.'', obj.Member4)", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
m17_46 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", span="82-82", cluster="Newtonsoft.Json.Tests.Serialization.SerializationEventAttributeTests.ObjectWithConstructorEvents()", file="SerializationEventAttributeTests.cs"];
n452 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA"];
n453 -> n17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container"];
n453 -> n18  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container"];
n454 -> n90  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n455 -> n125  [key=1, style=dashed, color=darkseagreen4, label=json];
n456 -> n135  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n457 -> n149  [key=1, style=dashed, color=darkseagreen4, label=json];
n458 -> n223  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition"];
n459 -> n226  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions"];
n459 -> n227  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ClassWithConditions"];
n460 -> n323  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
n460 -> n324  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
n460 -> n327  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
n460 -> n331  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
n461 -> n450  [key=1, style=dashed, color=darkseagreen4, label=json];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n4  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n0  [key=2, style=dotted];
n8 -> n10  [key=2, style=dotted];
n9 -> n7  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=2, style=dotted];
n14 -> n11  [key=0, style=bold, color=blue];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n20  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=2, style=dotted];
n19 -> n16  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n37  [key=2, style=dotted];
n22 -> n24  [key=1, style=dashed, color=darkseagreen4, label=settings];
n22 -> n25  [key=1, style=dashed, color=darkseagreen4, label=settings];
n22 -> n31  [key=1, style=dashed, color=darkseagreen4, label=settings];
n22 -> n33  [key=1, style=dashed, color=darkseagreen4, label=settings];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n129  [key=3, color=darkorchid, style=bold, label="Local variable string elementName"];
n25 -> n26  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n39  [key=2, style=dotted];
n31 -> n33  [key=1, style=dashed, color=darkseagreen4, label=s];
n33 -> n34  [key=0, style=solid];
n33 -> n42  [key=2, style=dotted];
n33 -> n35  [key=1, style=dashed, color=darkseagreen4, label=c2];
n26 -> n27  [key=0, style=solid];
n26 -> n16  [key=2, style=dotted];
n26 -> n29  [key=1, style=dashed, color=darkseagreen4, label=c1];
n26 -> n30  [key=1, style=dashed, color=darkseagreen4, label=c1];
n26 -> n31  [key=1, style=dashed, color=darkseagreen4, label=c1];
n27 -> n28  [key=0, style=solid];
n27 -> n0  [key=2, style=dotted];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=content];
n27 -> n30  [key=1, style=dashed, color=darkseagreen4, label=content];
n29 -> n30  [key=0, style=solid];
n29 -> n38  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n38  [key=2, style=dotted];
n28 -> n29  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n40  [key=2, style=dotted];
n32 -> n41  [key=2, style=dotted];
n32 -> n49  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Read"];
n32 -> n164  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Read"];
n34 -> n35  [key=0, style=solid];
n34 -> n43  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n43  [key=2, style=dotted];
n36 -> n21  [key=0, style=bold, color=blue];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n58  [key=2, style=dotted];
n45 -> n47  [key=1, style=dashed, color=darkseagreen4, label=c];
n46 -> n47  [key=0, style=solid];
n46 -> n20  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n59  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n37  [key=2, style=dotted];
n48 -> n39  [key=2, style=dotted];
n48 -> n50  [key=1, style=dashed, color=darkseagreen4, label=json];
n49 -> n50  [key=0, style=solid];
n49 -> n41  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n50 -> n37  [key=2, style=dotted];
n50 -> n42  [key=2, style=dotted];
n50 -> n52  [key=1, style=dashed, color=darkseagreen4, label=newP];
n50 -> n53  [key=1, style=dashed, color=darkseagreen4, label=newP];
n50 -> n54  [key=1, style=dashed, color=darkseagreen4, label=newP];
n50 -> n55  [key=1, style=dashed, color=darkseagreen4, label=newP];
n50 -> n56  [key=1, style=dashed, color=darkseagreen4, label=newP];
n51 -> n52  [key=0, style=solid];
n51 -> n43  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n43  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n43  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n43  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n43  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n43  [key=2, style=dotted];
n57 -> n44  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n67  [key=2, style=dotted];
n61 -> n63  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n61 -> n64  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n62 -> n63  [key=0, style=solid];
n62 -> n67  [key=2, style=dotted];
n62 -> n68  [key=2, style=dotted];
n63 -> n64  [key=0, style=solid];
n63 -> n68  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n37  [key=2, style=dotted];
n64 -> n69  [key=2, style=dotted];
n65 -> n66  [key=0, style=solid];
n65 -> n41  [key=2, style=dotted];
n66 -> n60  [key=0, style=bold, color=blue];
n70 -> n71  [key=0, style=solid, color=red];
n71 -> n72  [key=0, style=solid, color=red];
n72 -> n73  [key=0, style=solid];
n72 -> n37  [key=2, style=dotted];
n72 -> n42  [key=2, style=dotted];
n72 -> n74  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n72 -> n75  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n73 -> n74  [key=0, style=solid];
n73 -> n43  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n43  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n77  [key=2, style=dotted];
n75 -> n78  [key=2, style=dotted];
n76 -> n70  [key=0, style=bold, color=blue];
n79 -> n80  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n85  [key=1, style=dashed, color=darkseagreen4, label=classRef];
n81 -> n82  [key=0, style=solid];
n81 -> n87  [key=2, style=dotted];
n81 -> n83  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n81 -> n84  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n81 -> n85  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n81 -> n90  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n85 -> n86  [key=0, style=solid];
n85 -> n88  [key=2, style=dotted];
n85 -> n89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n82 -> n83  [key=0, style=solid];
n82 -> n38  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n83 -> n87  [key=2, style=dotted];
n83 -> n38  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n87  [key=2, style=dotted];
n84 -> n38  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n90 -> n92  [key=2, style=dotted];
n86 -> n79  [key=0, style=bold, color=blue];
n89 -> n90  [key=0, style=solid];
n91 -> n89  [key=0, style=bold, color=blue];
n93 -> n94  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n87  [key=2, style=dotted];
n94 -> n96  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n94 -> n97  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n94 -> n98  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n95 -> n96  [key=0, style=solid];
n95 -> n38  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n87  [key=2, style=dotted];
n96 -> n38  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n97 -> n87  [key=2, style=dotted];
n97 -> n38  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n37  [key=2, style=dotted];
n98 -> n69  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n41  [key=2, style=dotted];
n100 -> n93  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid];
n102 -> n103  [key=0, style=solid];
n102 -> n87  [key=2, style=dotted];
n102 -> n104  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n102 -> n105  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n102 -> n106  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n103 -> n104  [key=0, style=solid];
n103 -> n38  [key=2, style=dotted];
n104 -> n105  [key=0, style=solid];
n104 -> n87  [key=2, style=dotted];
n104 -> n38  [key=2, style=dotted];
n105 -> n106  [key=0, style=solid];
n105 -> n87  [key=2, style=dotted];
n105 -> n38  [key=2, style=dotted];
n106 -> n107  [key=0, style=solid];
n106 -> n37  [key=2, style=dotted];
n106 -> n69  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n41  [key=2, style=dotted];
n107 -> n47  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
n107 -> n71  [key=3, color=red, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
n107 -> n110  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
n107 -> n162  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonType type"];
n108 -> n101  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n111 -> n112  [key=0, style=solid];
n111 -> n37  [key=2, style=dotted];
n111 -> n42  [key=2, style=dotted];
n111 -> n113  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n111 -> n114  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n111 -> n115  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n111 -> n116  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n111 -> n117  [key=1, style=dashed, color=darkseagreen4, label=circularList];
n111 -> n198  [key=3, color=darkorchid, style=bold, label="Local variable byte[] oid"];
n112 -> n113  [key=0, style=solid];
n112 -> n43  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n43  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n43  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n115 -> n43  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n43  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n77  [key=2, style=dotted];
n117 -> n78  [key=2, style=dotted];
n118 -> n109  [key=0, style=bold, color=blue];
n119 -> n120  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n125  [key=1, style=dashed, color=darkseagreen4, label=json];
n120 -> n129  [key=3, color=darkorchid, style=bold, label="Local variable string modifiers"];
n121 -> n122  [key=0, style=solid];
n121 -> n123  [key=2, style=dotted];
n121 -> n124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n125 -> n126  [key=0, style=solid];
n125 -> n37  [key=2, style=dotted];
n125 -> n42  [key=2, style=dotted];
n122 -> n119  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n126 -> n124  [key=0, style=bold, color=blue];
n127 -> n128  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n132  [key=1, style=dashed, color=darkseagreen4, label=classRef];
n129 -> n130  [key=0, style=solid];
n129 -> n67  [key=2, style=dotted];
n129 -> n131  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n129 -> n132  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n129 -> n135  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n132 -> n133  [key=0, style=solid];
n132 -> n88  [key=2, style=dotted];
n132 -> n134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n132 -> n132  [key=3, color=darkorchid, style=bold, label="Local variable System.Text.StringBuilder builder"];
n130 -> n131  [key=0, style=solid];
n130 -> n67  [key=2, style=dotted];
n130 -> n68  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n131 -> n68  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
n135 -> n92  [key=2, style=dotted];
n133 -> n127  [key=0, style=bold, color=blue];
n134 -> n135  [key=0, style=solid];
n136 -> n134  [key=0, style=bold, color=blue];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n67  [key=2, style=dotted];
n138 -> n140  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n138 -> n141  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
n139 -> n140  [key=0, style=solid];
n139 -> n67  [key=2, style=dotted];
n139 -> n68  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n68  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n141 -> n37  [key=2, style=dotted];
n141 -> n69  [key=2, style=dotted];
n142 -> n143  [key=0, style=solid];
n142 -> n41  [key=2, style=dotted];
n143 -> n137  [key=0, style=bold, color=blue];
n144 -> n145  [key=0, style=solid];
n145 -> n146  [key=0, style=solid];
n145 -> n149  [key=1, style=dashed, color=darkseagreen4, label=json];
n146 -> n147  [key=0, style=solid];
n146 -> n123  [key=2, style=dotted];
n146 -> n148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n149 -> n150  [key=0, style=solid];
n149 -> n37  [key=2, style=dotted];
n149 -> n42  [key=2, style=dotted];
n147 -> n144  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n150 -> n148  [key=0, style=bold, color=blue];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
n151 -> n156  [key=1, style=dashed, color=darkseagreen4, label=object];
n151 -> n158  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
n151 -> n160  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
n152 -> n153  [key=0, style=solid];
n152 -> n157  [key=1, style=dashed, color=darkseagreen4, label=circularReferenceClass];
n152 -> n158  [key=1, style=dashed, color=darkseagreen4, label=circularReferenceClass];
n152 -> n156  [key=3, color=darkorchid, style=bold, label="Local variable string s"];
n153 -> n154  [key=0, style=solid];
n153 -> n162  [key=2, style=dotted];
n153 -> n155  [key=1, style=dashed, color=darkseagreen4, label=reference];
n156 -> n157  [key=0, style=solid];
n156 -> n164  [key=2, style=dotted];
n156 -> n165  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n166  [key=2, style=dotted];
n160 -> n161  [key=0, style=solid];
n160 -> n167  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n164  [key=2, style=dotted];
n154 -> n155  [key=0, style=solid];
n154 -> n163  [key=2, style=dotted];
n154 -> n156  [key=1, style=dashed, color=darkseagreen4, label=me];
n154 -> n157  [key=1, style=dashed, color=darkseagreen4, label=me];
n154 -> n159  [key=1, style=dashed, color=darkseagreen4, label=me];
n154 -> n160  [key=1, style=dashed, color=darkseagreen4, label=me];
n162 -> n194  [key=3, color=darkorchid, style=bold, label="Field variable Newtonsoft.Json.Bson.BsonType _currentElementType"];
n155 -> n156  [key=0, style=solid];
n155 -> n164  [key=2, style=dotted];
n159 -> n160  [key=0, style=solid];
n164 -> n48  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ReadCodeWScope"];
n161 -> n151  [key=0, style=bold, color=blue];
n168 -> n169  [key=0, style=solid];
n168 -> n173  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
n168 -> n176  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
n168 -> n171  [key=3, color=darkorchid, style=bold, label="Local variable int totalBytesRead"];
n169 -> n170  [key=0, style=solid];
n169 -> n178  [key=2, style=dotted];
n169 -> n173  [key=1, style=dashed, color=darkseagreen4, label=o];
n169 -> n175  [key=1, style=dashed, color=darkseagreen4, label=o];
n173 -> n174  [key=0, style=solid];
n173 -> n180  [key=2, style=dotted];
n173 -> n181  [key=2, style=dotted];
n176 -> n177  [key=0, style=solid];
n176 -> n182  [key=2, style=dotted];
n170 -> n171  [key=0, style=solid];
n175 -> n176  [key=0, style=solid];
n171 -> n172  [key=0, style=solid];
n171 -> n175  [key=0, style=solid];
n172 -> n173  [key=0, style=solid];
n172 -> n179  [key=2, style=dotted];
n172 -> n174  [key=1, style=dashed, color=darkseagreen4, label=circularReferenceClass];
n174 -> n177  [key=0, style=solid];
n177 -> n168  [key=0, style=bold, color=blue];
n183 -> n184  [key=0, style=solid];
n184 -> n185  [key=0, style=solid];
n185 -> n183  [key=0, style=bold, color=blue];
n186 -> n187  [key=0, style=solid];
n187 -> n188  [key=0, style=solid];
n187 -> n179  [key=2, style=dotted];
n187 -> n190  [key=1, style=dashed, color=darkseagreen4, label=c1];
n187 -> n192  [key=1, style=dashed, color=darkseagreen4, label=c1];
n187 -> n193  [key=1, style=dashed, color=darkseagreen4, label=c1];
n188 -> n189  [key=0, style=solid];
n188 -> n179  [key=2, style=dotted];
n188 -> n190  [key=1, style=dashed, color=darkseagreen4, label=c2];
n188 -> n191  [key=1, style=dashed, color=darkseagreen4, label=c2];
n190 -> n191  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n193 -> n194  [key=0, style=solid];
n193 -> n37  [key=2, style=dotted];
n193 -> n20  [key=2, style=dotted];
n193 -> n196  [key=2, style=dotted];
n193 -> n69  [key=2, style=dotted];
n189 -> n190  [key=0, style=solid];
n189 -> n179  [key=2, style=dotted];
n189 -> n191  [key=1, style=dashed, color=darkseagreen4, label=c3];
n189 -> n192  [key=1, style=dashed, color=darkseagreen4, label=c3];
n191 -> n192  [key=0, style=solid];
n194 -> n195  [key=0, style=solid];
n194 -> n41  [key=2, style=dotted];
n196 -> n194  [key=3, color=darkorchid, style=bold, label="Local variable int length"];
n195 -> n186  [key=0, style=bold, color=blue];
n197 -> n198  [key=0, style=solid];
n198 -> n199  [key=0, style=solid];
n198 -> n110  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
n199 -> n200  [key=0, style=solid];
n199 -> n37  [key=2, style=dotted];
n199 -> n20  [key=2, style=dotted];
n199 -> n196  [key=2, style=dotted];
n199 -> n42  [key=2, style=dotted];
n199 -> n201  [key=1, style=dashed, color=darkseagreen4, label=c1];
n199 -> n202  [key=1, style=dashed, color=darkseagreen4, label=c1];
n199 -> n203  [key=1, style=dashed, color=darkseagreen4, label=c1];
n200 -> n201  [key=0, style=solid];
n200 -> n43  [key=2, style=dotted];
n201 -> n202  [key=0, style=solid];
n201 -> n43  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid];
n202 -> n43  [key=2, style=dotted];
n203 -> n204  [key=0, style=solid];
n203 -> n43  [key=2, style=dotted];
n204 -> n197  [key=0, style=bold, color=blue];
n205 -> n206  [key=0, style=solid];
n206 -> n207  [key=0, style=solid];
n206 -> n212  [key=2, style=dotted];
n206 -> n208  [key=1, style=dashed, color=darkseagreen4, label=mikeManager];
n207 -> n208  [key=0, style=solid];
n207 -> n212  [key=2, style=dotted];
n208 -> n209  [key=0, style=solid];
n208 -> n20  [key=2, style=dotted];
n209 -> n210  [key=0, style=solid];
n209 -> n92  [key=2, style=dotted];
n210 -> n211  [key=0, style=solid];
n210 -> n41  [key=2, style=dotted];
n211 -> n205  [key=0, style=bold, color=blue];
n213 -> n214  [key=0, style=solid];
n214 -> n215  [key=0, style=solid];
n215 -> n216  [key=0, style=solid];
n215 -> n221  [key=2, style=dotted];
n215 -> n217  [key=1, style=dashed, color=darkseagreen4, label=employees];
n215 -> n218  [key=1, style=dashed, color=darkseagreen4, label=employees];
n215 -> n219  [key=1, style=dashed, color=darkseagreen4, label=employees];
n216 -> n217  [key=0, style=solid];
n216 -> n43  [key=2, style=dotted];
n217 -> n218  [key=0, style=solid];
n217 -> n43  [key=2, style=dotted];
n218 -> n219  [key=0, style=solid];
n218 -> n43  [key=2, style=dotted];
n219 -> n220  [key=0, style=solid];
n219 -> n43  [key=2, style=dotted];
n220 -> n213  [key=0, style=bold, color=blue];
n222 -> n223  [key=0, style=solid];
n223 -> n224  [key=0, style=solid];
n224 -> n222  [key=0, style=bold, color=blue];
n225 -> n226  [key=0, style=solid];
n225 -> n227  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Condition"];
n226 -> n227  [key=0, style=solid];
n227 -> n228  [key=0, style=solid];
n228 -> n225  [key=0, style=bold, color=blue];
n229 -> n230  [key=0, style=solid];
n230 -> n231  [key=0, style=solid];
n230 -> n222  [key=2, style=dotted];
n231 -> n232  [key=0, style=solid];
n231 -> n225  [key=2, style=dotted];
n232 -> n233  [key=0, style=solid];
n232 -> n92  [key=2, style=dotted];
n233 -> n234  [key=0, style=solid];
n233 -> n41  [key=2, style=dotted];
n234 -> n229  [key=0, style=bold, color=blue];
n235 -> n236  [key=0, style=solid];
n236 -> n237  [key=0, style=solid];
n237 -> n238  [key=0, style=solid];
n237 -> n221  [key=2, style=dotted];
n237 -> n239  [key=1, style=dashed, color=darkseagreen4, label=value];
n238 -> n239  [key=0, style=solid];
n238 -> n43  [key=2, style=dotted];
n239 -> n240  [key=0, style=solid];
n239 -> n43  [key=2, style=dotted];
n240 -> n235  [key=0, style=bold, color=blue];
n241 -> n242  [key=0, style=solid];
n242 -> n243  [key=0, style=solid];
n242 -> n179  [key=2, style=dotted];
n242 -> n245  [key=1, style=dashed, color=darkseagreen4, label=c1];
n242 -> n247  [key=1, style=dashed, color=darkseagreen4, label=c1];
n242 -> n248  [key=1, style=dashed, color=darkseagreen4, label=c1];
n243 -> n244  [key=0, style=solid];
n243 -> n179  [key=2, style=dotted];
n243 -> n245  [key=1, style=dashed, color=darkseagreen4, label=c2];
n243 -> n246  [key=1, style=dashed, color=darkseagreen4, label=c2];
n245 -> n246  [key=0, style=solid];
n247 -> n248  [key=0, style=solid];
n248 -> n249  [key=0, style=solid];
n248 -> n37  [key=2, style=dotted];
n248 -> n69  [key=2, style=dotted];
n244 -> n245  [key=0, style=solid];
n244 -> n179  [key=2, style=dotted];
n244 -> n246  [key=1, style=dashed, color=darkseagreen4, label=c3];
n244 -> n247  [key=1, style=dashed, color=darkseagreen4, label=c3];
n246 -> n247  [key=0, style=solid];
n249 -> n250  [key=0, style=solid];
n249 -> n41  [key=2, style=dotted];
n250 -> n241  [key=0, style=bold, color=blue];
n251 -> n252  [key=0, style=solid];
n252 -> n253  [key=0, style=solid];
n253 -> n254  [key=0, style=solid];
n253 -> n37  [key=2, style=dotted];
n253 -> n42  [key=2, style=dotted];
n253 -> n255  [key=1, style=dashed, color=darkseagreen4, label=c1];
n253 -> n256  [key=1, style=dashed, color=darkseagreen4, label=c1];
n253 -> n257  [key=1, style=dashed, color=darkseagreen4, label=c1];
n254 -> n255  [key=0, style=solid];
n254 -> n43  [key=2, style=dotted];
n255 -> n256  [key=0, style=solid];
n255 -> n43  [key=2, style=dotted];
n256 -> n257  [key=0, style=solid];
n256 -> n43  [key=2, style=dotted];
n257 -> n258  [key=0, style=solid];
n257 -> n43  [key=2, style=dotted];
n258 -> n251  [key=0, style=bold, color=blue];
n259 -> n260  [key=0, style=solid];
n260 -> n261  [key=0, style=solid];
n260 -> n212  [key=2, style=dotted];
n260 -> n262  [key=1, style=dashed, color=darkseagreen4, label=e1];
n261 -> n262  [key=0, style=solid];
n261 -> n212  [key=2, style=dotted];
n262 -> n263  [key=0, style=solid];
n262 -> n20  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n263 -> n92  [key=2, style=dotted];
n264 -> n265  [key=0, style=solid];
n264 -> n41  [key=2, style=dotted];
n265 -> n259  [key=0, style=bold, color=blue];
n266 -> n267  [key=0, style=solid];
n267 -> n268  [key=0, style=solid];
n268 -> n269  [key=0, style=solid];
n268 -> n221  [key=2, style=dotted];
n268 -> n270  [key=1, style=dashed, color=darkseagreen4, label=employees];
n268 -> n271  [key=1, style=dashed, color=darkseagreen4, label=employees];
n268 -> n272  [key=1, style=dashed, color=darkseagreen4, label=employees];
n268 -> n273  [key=1, style=dashed, color=darkseagreen4, label=employees];
n268 -> n274  [key=1, style=dashed, color=darkseagreen4, label=employees];
n268 -> n275  [key=1, style=dashed, color=darkseagreen4, label=employees];
n269 -> n270  [key=0, style=solid];
n269 -> n43  [key=2, style=dotted];
n270 -> n271  [key=0, style=solid];
n270 -> n43  [key=2, style=dotted];
n271 -> n272  [key=0, style=solid];
n271 -> n43  [key=2, style=dotted];
n272 -> n273  [key=0, style=solid];
n272 -> n43  [key=2, style=dotted];
n273 -> n274  [key=0, style=solid];
n273 -> n43  [key=2, style=dotted];
n274 -> n275  [key=0, style=solid];
n274 -> n43  [key=2, style=dotted];
n275 -> n276  [key=0, style=solid];
n275 -> n43  [key=2, style=dotted];
n276 -> n266  [key=0, style=bold, color=blue];
n277 -> n278  [key=0, style=solid];
n278 -> n279  [key=0, style=solid];
n278 -> n212  [key=2, style=dotted];
n278 -> n280  [key=1, style=dashed, color=darkseagreen4, label=e1];
n279 -> n280  [key=0, style=solid];
n279 -> n212  [key=2, style=dotted];
n280 -> n281  [key=0, style=solid];
n280 -> n284  [key=2, style=dotted];
n281 -> n282  [key=0, style=solid];
n281 -> n92  [key=2, style=dotted];
n282 -> n283  [key=0, style=solid];
n282 -> n41  [key=2, style=dotted];
n283 -> n277  [key=0, style=bold, color=blue];
n285 -> n286  [key=0, style=solid];
n286 -> n287  [key=0, style=solid];
n287 -> n288  [key=0, style=solid];
n287 -> n221  [key=2, style=dotted];
n287 -> n289  [key=1, style=dashed, color=darkseagreen4, label=employees];
n287 -> n290  [key=1, style=dashed, color=darkseagreen4, label=employees];
n287 -> n293  [key=1, style=dashed, color=darkseagreen4, label=employees];
n287 -> n294  [key=1, style=dashed, color=darkseagreen4, label=employees];
n288 -> n289  [key=0, style=solid];
n288 -> n43  [key=2, style=dotted];
n289 -> n290  [key=0, style=solid];
n289 -> n291  [key=1, style=dashed, color=darkseagreen4, label=e1];
n289 -> n293  [key=1, style=dashed, color=darkseagreen4, label=e1];
n290 -> n291  [key=0, style=solid];
n290 -> n292  [key=1, style=dashed, color=darkseagreen4, label=e2];
n290 -> n294  [key=1, style=dashed, color=darkseagreen4, label=e2];
n293 -> n294  [key=0, style=solid];
n293 -> n43  [key=2, style=dotted];
n294 -> n295  [key=0, style=solid];
n294 -> n43  [key=2, style=dotted];
n291 -> n292  [key=0, style=solid];
n291 -> n43  [key=2, style=dotted];
n292 -> n293  [key=0, style=solid];
n292 -> n43  [key=2, style=dotted];
n295 -> n285  [key=0, style=bold, color=blue];
n296 -> n297  [key=0, style=solid];
n297 -> n298  [key=0, style=solid];
n297 -> n303  [key=2, style=dotted];
n297 -> n304  [key=2, style=dotted];
n297 -> n299  [key=1, style=dashed, color=darkseagreen4, label=p];
n297 -> n300  [key=1, style=dashed, color=darkseagreen4, label=p];
n298 -> n299  [key=0, style=solid];
n298 -> n20  [key=2, style=dotted];
n298 -> n300  [key=1, style=dashed, color=darkseagreen4, label=people];
n298 -> n301  [key=1, style=dashed, color=darkseagreen4, label=people];
n299 -> n300  [key=0, style=solid];
n299 -> n38  [key=2, style=dotted];
n300 -> n301  [key=0, style=solid];
n300 -> n38  [key=2, style=dotted];
n301 -> n302  [key=0, style=solid];
n301 -> n92  [key=2, style=dotted];
n302 -> n296  [key=0, style=bold, color=blue];
n305 -> n306  [key=0, style=solid];
n306 -> n307  [key=0, style=solid];
n306 -> n303  [key=2, style=dotted];
n306 -> n304  [key=2, style=dotted];
n306 -> n308  [key=1, style=dashed, color=darkseagreen4, label=p];
n306 -> n309  [key=1, style=dashed, color=darkseagreen4, label=p];
n307 -> n308  [key=0, style=solid];
n307 -> n20  [key=2, style=dotted];
n307 -> n309  [key=1, style=dashed, color=darkseagreen4, label=people];
n307 -> n310  [key=1, style=dashed, color=darkseagreen4, label=people];
n308 -> n309  [key=0, style=solid];
n308 -> n38  [key=2, style=dotted];
n309 -> n310  [key=0, style=solid];
n309 -> n38  [key=2, style=dotted];
n310 -> n311  [key=0, style=solid];
n310 -> n37  [key=2, style=dotted];
n310 -> n69  [key=2, style=dotted];
n311 -> n312  [key=0, style=solid];
n311 -> n37  [key=2, style=dotted];
n311 -> n42  [key=2, style=dotted];
n311 -> n313  [key=1, style=dashed, color=darkseagreen4, label=deserializedPeople];
n311 -> n314  [key=1, style=dashed, color=darkseagreen4, label=deserializedPeople];
n312 -> n313  [key=0, style=solid];
n312 -> n43  [key=2, style=dotted];
n313 -> n314  [key=0, style=solid];
n313 -> n315  [key=1, style=dashed, color=darkseagreen4, label=p1];
n313 -> n317  [key=1, style=dashed, color=darkseagreen4, label=p1];
n314 -> n315  [key=0, style=solid];
n314 -> n316  [key=1, style=dashed, color=darkseagreen4, label=p2];
n314 -> n317  [key=1, style=dashed, color=darkseagreen4, label=p2];
n315 -> n316  [key=0, style=solid];
n315 -> n43  [key=2, style=dotted];
n317 -> n318  [key=0, style=solid];
n317 -> n77  [key=2, style=dotted];
n316 -> n317  [key=0, style=solid];
n316 -> n43  [key=2, style=dotted];
n318 -> n319  [key=0, style=solid];
n318 -> n43  [key=2, style=dotted];
n319 -> n305  [key=0, style=bold, color=blue];
n320 -> n321  [key=0, style=solid];
n321 -> n320  [key=0, style=bold, color=blue];
n322 -> n323  [key=0, style=solid];
n322 -> n324  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n323 -> n324  [key=0, style=solid];
n324 -> n325  [key=0, style=solid];
n325 -> n322  [key=0, style=bold, color=blue];
n326 -> n327  [key=0, style=solid];
n327 -> n328  [key=0, style=solid];
n327 -> n329  [key=2, style=dotted];
n328 -> n326  [key=0, style=bold, color=blue];
n330 -> n331  [key=0, style=solid];
n331 -> n332  [key=0, style=solid];
n331 -> n333  [key=2, style=dotted];
n332 -> n330  [key=0, style=bold, color=blue];
n334 -> n335  [key=0, style=solid];
n335 -> n336  [key=0, style=solid];
n335 -> n322  [key=2, style=dotted];
n335 -> n337  [key=1, style=dashed, color=darkseagreen4, label=user1];
n335 -> n339  [key=1, style=dashed, color=darkseagreen4, label=user1];
n336 -> n337  [key=0, style=solid];
n336 -> n322  [key=2, style=dotted];
n337 -> n338  [key=0, style=solid];
n339 -> n340  [key=0, style=solid];
n339 -> n69  [key=2, style=dotted];
n338 -> n339  [key=0, style=solid];
n338 -> n37  [key=2, style=dotted];
n338 -> n340  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
n340 -> n341  [key=0, style=solid];
n340 -> n42  [key=2, style=dotted];
n341 -> n342  [key=0, style=solid];
n341 -> n343  [key=2, style=dotted];
n342 -> n334  [key=0, style=bold, color=blue];
n344 -> n345  [key=0, style=solid];
n345 -> n346  [key=0, style=solid];
n345 -> n364  [key=2, style=dotted];
n346 -> n347  [key=0, style=solid];
n346 -> n20  [key=2, style=dotted];
n346 -> n351  [key=1, style=dashed, color=darkseagreen4, label=myClasses1];
n346 -> n362  [key=1, style=dashed, color=darkseagreen4, label=myClasses1];
n347 -> n348  [key=0, style=solid];
n347 -> n365  [key=2, style=dotted];
n347 -> n351  [key=1, style=dashed, color=darkseagreen4, label=ser];
n347 -> n359  [key=1, style=dashed, color=darkseagreen4, label=ser];
n351 -> n352  [key=0, style=solid];
n351 -> n15  [key=2, style=dotted];
n362 -> n363  [key=0, style=solid];
n362 -> n374  [key=2, style=dotted];
n348 -> n349  [key=0, style=solid];
n348 -> n366  [key=2, style=dotted];
n348 -> n352  [key=1, style=dashed, color=darkseagreen4, label=ms];
n359 -> n360  [key=0, style=solid];
n359 -> n10  [key=2, style=dotted];
n359 -> n361  [key=1, style=dashed, color=darkseagreen4, label=myClasses2];
n359 -> n362  [key=1, style=dashed, color=darkseagreen4, label=myClasses2];
n349 -> n350  [key=0, style=solid];
n349 -> n367  [key=2, style=dotted];
n352 -> n353  [key=0, style=solid];
n352 -> n369  [key=2, style=dotted];
n352 -> n355  [key=1, style=dashed, color=darkseagreen4, label=data];
n350 -> n351  [key=0, style=solid];
n350 -> n368  [key=2, style=dotted];
n353 -> n354  [key=0, style=solid];
n353 -> n370  [key=2, style=dotted];
n355 -> n356  [key=0, style=solid];
n355 -> n371  [key=2, style=dotted];
n355 -> n357  [key=1, style=dashed, color=darkseagreen4, label=ms];
n354 -> n355  [key=0, style=solid];
n354 -> n41  [key=2, style=dotted];
n356 -> n357  [key=0, style=solid];
n357 -> n358  [key=0, style=solid];
n357 -> n372  [key=2, style=dotted];
n358 -> n359  [key=0, style=solid];
n358 -> n373  [key=2, style=dotted];
n360 -> n361  [key=0, style=solid];
n360 -> n43  [key=2, style=dotted];
n361 -> n362  [key=0, style=solid];
n361 -> n43  [key=2, style=dotted];
n363 -> n344  [key=0, style=bold, color=blue];
n375 -> n376  [key=0, style=solid];
n376 -> n377  [key=0, style=solid];
n376 -> n383  [key=2, style=dotted];
n376 -> n378  [key=1, style=dashed, color=darkseagreen4, label=l];
n376 -> n379  [key=1, style=dashed, color=darkseagreen4, label=l];
n376 -> n380  [key=1, style=dashed, color=darkseagreen4, label=l];
n377 -> n378  [key=0, style=solid];
n377 -> n38  [key=2, style=dotted];
n378 -> n379  [key=0, style=solid];
n378 -> n38  [key=2, style=dotted];
n379 -> n380  [key=0, style=solid];
n379 -> n38  [key=2, style=dotted];
n380 -> n381  [key=0, style=solid];
n380 -> n92  [key=2, style=dotted];
n381 -> n382  [key=0, style=solid];
n381 -> n41  [key=2, style=dotted];
n382 -> n375  [key=0, style=bold, color=blue];
n384 -> n385  [key=0, style=solid];
n385 -> n386  [key=0, style=solid];
n385 -> n393  [key=2, style=dotted];
n385 -> n387  [key=1, style=dashed, color=darkseagreen4, label=c1];
n385 -> n389  [key=1, style=dashed, color=darkseagreen4, label=c1];
n386 -> n387  [key=0, style=solid];
n386 -> n383  [key=2, style=dotted];
n386 -> n388  [key=1, style=dashed, color=darkseagreen4, label=l];
n386 -> n389  [key=1, style=dashed, color=darkseagreen4, label=l];
n386 -> n390  [key=1, style=dashed, color=darkseagreen4, label=l];
n387 -> n388  [key=0, style=solid];
n387 -> n38  [key=2, style=dotted];
n389 -> n390  [key=0, style=solid];
n389 -> n38  [key=2, style=dotted];
n388 -> n389  [key=0, style=solid];
n388 -> n393  [key=2, style=dotted];
n388 -> n38  [key=2, style=dotted];
n390 -> n391  [key=0, style=solid];
n390 -> n92  [key=2, style=dotted];
n391 -> n392  [key=0, style=solid];
n391 -> n41  [key=2, style=dotted];
n392 -> n384  [key=0, style=bold, color=blue];
n394 -> n395  [key=0, style=solid];
n395 -> n396  [key=0, style=solid];
n395 -> n402  [key=2, style=dotted];
n395 -> n397  [key=1, style=dashed, color=darkseagreen4, label=l];
n395 -> n398  [key=1, style=dashed, color=darkseagreen4, label=l];
n395 -> n399  [key=1, style=dashed, color=darkseagreen4, label=l];
n396 -> n397  [key=0, style=solid];
n396 -> n68  [key=2, style=dotted];
n397 -> n398  [key=0, style=solid];
n397 -> n68  [key=2, style=dotted];
n398 -> n399  [key=0, style=solid];
n398 -> n68  [key=2, style=dotted];
n399 -> n400  [key=0, style=solid];
n399 -> n92  [key=2, style=dotted];
n400 -> n401  [key=0, style=solid];
n400 -> n41  [key=2, style=dotted];
n401 -> n394  [key=0, style=bold, color=blue];
n403 -> n404  [key=0, style=solid];
n404 -> n405  [key=0, style=solid];
n404 -> n393  [key=2, style=dotted];
n404 -> n406  [key=1, style=dashed, color=darkseagreen4, label=c1];
n404 -> n408  [key=1, style=dashed, color=darkseagreen4, label=c1];
n405 -> n406  [key=0, style=solid];
n405 -> n402  [key=2, style=dotted];
n405 -> n407  [key=1, style=dashed, color=darkseagreen4, label=l];
n405 -> n408  [key=1, style=dashed, color=darkseagreen4, label=l];
n405 -> n409  [key=1, style=dashed, color=darkseagreen4, label=l];
n406 -> n407  [key=0, style=solid];
n406 -> n68  [key=2, style=dotted];
n408 -> n409  [key=0, style=solid];
n408 -> n68  [key=2, style=dotted];
n407 -> n408  [key=0, style=solid];
n407 -> n393  [key=2, style=dotted];
n407 -> n68  [key=2, style=dotted];
n409 -> n410  [key=0, style=solid];
n409 -> n92  [key=2, style=dotted];
n409 -> n411  [key=1, style=dashed, color=darkseagreen4, label=json];
n410 -> n411  [key=0, style=solid];
n410 -> n41  [key=2, style=dotted];
n411 -> n412  [key=0, style=solid];
n411 -> n221  [key=2, style=dotted];
n411 -> n413  [key=1, style=dashed, color=darkseagreen4, label=d];
n412 -> n413  [key=0, style=solid];
n412 -> n43  [key=2, style=dotted];
n413 -> n414  [key=0, style=solid];
n413 -> n77  [key=2, style=dotted];
n413 -> n78  [key=2, style=dotted];
n414 -> n403  [key=0, style=bold, color=blue];
n415 -> n416  [key=0, style=solid];
n416 -> n417  [key=0, style=solid];
n416 -> n429  [key=2, style=dotted];
n416 -> n418  [key=1, style=dashed, color=darkseagreen4, label=o1];
n416 -> n419  [key=1, style=dashed, color=darkseagreen4, label=o1];
n416 -> n420  [key=1, style=dashed, color=darkseagreen4, label=o1];
n416 -> n421  [key=1, style=dashed, color=darkseagreen4, label=o1];
n416 -> n422  [key=1, style=dashed, color=darkseagreen4, label=o1];
n417 -> n418  [key=0, style=solid];
n417 -> n393  [key=2, style=dotted];
n418 -> n419  [key=0, style=solid];
n419 -> n420  [key=0, style=solid];
n419 -> n393  [key=2, style=dotted];
n420 -> n421  [key=0, style=solid];
n421 -> n422  [key=0, style=solid];
n422 -> n423  [key=0, style=solid];
n422 -> n92  [key=2, style=dotted];
n422 -> n424  [key=1, style=dashed, color=darkseagreen4, label=json];
n422 -> n425  [key=1, style=dashed, color=darkseagreen4, label=json];
n423 -> n424  [key=0, style=solid];
n424 -> n425  [key=0, style=solid];
n424 -> n41  [key=2, style=dotted];
n425 -> n426  [key=0, style=solid];
n425 -> n221  [key=2, style=dotted];
n425 -> n427  [key=1, style=dashed, color=darkseagreen4, label=referenceObject];
n426 -> n427  [key=0, style=solid];
n426 -> n343  [key=2, style=dotted];
n427 -> n428  [key=0, style=solid];
n427 -> n77  [key=2, style=dotted];
n427 -> n78  [key=2, style=dotted];
n428 -> n415  [key=0, style=bold, color=blue];
n430 -> n431  [key=0, style=solid];
n431 -> n432  [key=0, style=solid];
n431 -> n393  [key=2, style=dotted];
n432 -> n433  [key=0, style=solid];
n432 -> n442  [key=2, style=dotted];
n432 -> n443  [key=2, style=dotted];
n432 -> n20  [key=2, style=dotted];
n433 -> n434  [key=0, style=solid];
n433 -> n92  [key=2, style=dotted];
n433 -> n435  [key=1, style=dashed, color=darkseagreen4, label=json];
n434 -> n435  [key=0, style=solid];
n434 -> n41  [key=2, style=dotted];
n435 -> n436  [key=0, style=solid];
n435 -> n221  [key=2, style=dotted];
n435 -> n437  [key=1, style=dashed, color=darkseagreen4, label=o2];
n435 -> n438  [key=1, style=dashed, color=darkseagreen4, label=o2];
n436 -> n437  [key=0, style=solid];
n436 -> n439  [key=1, style=dashed, color=darkseagreen4, label=c2];
n436 -> n440  [key=1, style=dashed, color=darkseagreen4, label=c2];
n437 -> n438  [key=0, style=solid];
n437 -> n439  [key=1, style=dashed, color=darkseagreen4, label=c3];
n438 -> n439  [key=0, style=solid];
n438 -> n440  [key=1, style=dashed, color=darkseagreen4, label=c4];
n439 -> n440  [key=0, style=solid];
n439 -> n77  [key=2, style=dotted];
n439 -> n78  [key=2, style=dotted];
n440 -> n441  [key=0, style=solid];
n440 -> n77  [key=2, style=dotted];
n440 -> n444  [key=2, style=dotted];
n441 -> n430  [key=0, style=bold, color=blue];
n445 -> n446  [key=0, style=solid];
n446 -> n447  [key=0, style=solid];
n446 -> n450  [key=1, style=dashed, color=darkseagreen4, label=json];
n447 -> n448  [key=0, style=solid];
n447 -> n123  [key=2, style=dotted];
n447 -> n449  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n450 -> n451  [key=0, style=solid];
n450 -> n37  [key=2, style=dotted];
n450 -> n42  [key=2, style=dotted];
n448 -> n445  [key=0, style=bold, color=blue];
n449 -> n450  [key=0, style=solid];
n451 -> n449  [key=0, style=bold, color=blue];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d11  [key=2, style=dotted, color=green];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d7  [key=1, style=dashed, color=green, label="System.IO.Stream"];
d5 -> d9  [key=1, style=dashed, color=green, label=bool];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d12  [key=2, style=dotted, color=green];
d323 -> d7  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d9  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d8  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d15  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d23  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d24  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d226  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d235  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d236  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d16  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d22  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d36  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d42  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d43  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d50  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d52  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d53  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d56  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d57  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d58  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d61  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d62  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d64  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d65  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d67  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d68  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d71  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d72  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d73  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d77  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d87  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d89  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d90  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d93  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d94  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d96  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d97  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d99  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d101  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d102  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d103  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d105  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d106  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d107  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d109  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d110  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d113  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d115  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d116  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d117  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d119  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d120  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d126  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d131  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d137  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d138  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d140  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d143  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d145  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d146  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d147  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d149  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d163  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d164  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d165  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d166  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d169  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d170  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d173  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d174  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d179  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d182  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d184  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d186  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d187  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d189  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d191  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d192  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d194  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d196  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d198  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d199  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d201  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d202  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d204  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d206  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d208  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d210  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d211  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d213  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d215  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d216  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d218  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d220  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d221  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d223  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d237  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d239  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d244  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d245  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d247  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d249  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d250  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d253  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d255  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d265  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d266  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d267  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d268  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d274  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d278  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d281  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d283  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d286  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d293  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d294  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d295  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d297  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d300  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d301  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d304  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d305  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d308  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d309  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d312  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d313  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d316  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d318  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d323 -> d319  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader"];
d8 -> d9  [key=0, style=solid, color=green];
d8 -> n20  [key=2, style=dotted, color=green];
d9 -> d10  [key=0, style=solid, color=green];
d10 -> d5  [key=0, style=bold, color=blue];
d15 -> d16  [key=0, style=solid, color=green];
d15 -> d19  [key=2, style=dotted, color=green];
d14 -> d15  [key=0, style=solid, color=green];
d14 -> d16  [key=3, color=darkorchid, style=bold, label="method methodReturn string ReadElement"];
d16 -> d17  [key=0, style=solid];
d16 -> d20  [key=2, style=dotted];
d19 -> d312  [key=0, style=solid];
d23 -> d24  [key=0, style=solid, color=green];
d23 -> d25  [key=0, style=solid, color=green];
d22 -> d23  [key=0, style=solid, color=green];
d22 -> d27  [key=2, style=dotted];
d24 -> d26  [key=0, style=solid, color=green];
d24 -> d28  [key=2, style=dotted, color=green];
d24 -> d29  [key=2, style=dotted, color=green];
d25 -> d26  [key=0, style=solid];
d26 -> d21  [key=0, style=bold, color=blue];
d29 -> d85  [key=3, color=darkorchid, style=bold, label="Field variable Newtonsoft.Json.Bson.BsonReader.ContainerContext _currentContext"];
d136 -> d137  [key=0, style=solid, color=green];
d136 -> d140  [key=0, style=solid, color=green];
d131 -> d136  [key=1, style=dashed, color=green, label=context];
d131 -> d29  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Bson.BsonReader.ContainerContext context"];
d131 -> d132  [key=0, style=solid];
d131 -> d134  [key=1, style=dashed, color=darkseagreen4, label=context];
d131 -> d135  [key=1, style=dashed, color=darkseagreen4, label=context];
d131 -> d142  [key=1, style=dashed, color=darkseagreen4, label=context];
d131 -> d147  [key=1, style=dashed, color=darkseagreen4, label=context];
d131 -> d148  [key=1, style=dashed, color=darkseagreen4, label=context];
d135 -> d136  [key=0, style=solid, color=green];
d135 -> d142  [key=0, style=solid];
d137 -> d14  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d140 -> d14  [key=2, style=dotted];
d140 -> d141  [key=0, style=solid];
d140 -> d81  [key=2, style=dotted];
d227 -> d228  [key=0, style=solid, color=green];
d227 -> d234  [key=2, style=dotted, color=green];
d159 -> d227  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Bson.BsonType"];
d159 -> d177  [key=0, style=solid];
d177 -> d227  [key=0, style=solid, color=green];
d177 -> d224  [key=0, style=solid, color=green];
d177 -> d178  [key=0, style=solid];
d177 -> d180  [key=0, style=solid];
d177 -> d183  [key=0, style=solid];
d177 -> d188  [key=0, style=solid];
d177 -> d193  [key=0, style=solid];
d177 -> d195  [key=0, style=solid];
d177 -> d197  [key=0, style=solid];
d177 -> d200  [key=0, style=solid];
d177 -> d203  [key=0, style=solid];
d177 -> d207  [key=0, style=solid];
d177 -> d209  [key=0, style=solid];
d177 -> d214  [key=0, style=solid];
d177 -> d217  [key=0, style=solid];
d177 -> d219  [key=0, style=solid];
d177 -> d222  [key=0, style=solid];
d228 -> d159  [key=0, style=bold, color=blue];
d224 -> d225  [key=0, style=solid, color=green];
d225 -> d226  [key=0, style=solid, color=green];
d226 -> d228  [key=0, style=solid, color=green];
d226 -> d232  [key=2, style=dotted, color=green];
d226 -> d81  [key=2, style=dotted, color=green];
d232 -> d308  [key=0, style=solid];
d235 -> d236  [key=0, style=solid, color=green];
d235 -> d82  [key=2, style=dotted, color=green];
d235 -> d237  [key=1, style=dashed, color=green, label=dataLength];
d112 -> d235  [key=3, color=green, style=bold, label="Parameter variable int count"];
d112 -> d318  [key=0, style=solid];
d112 -> d319  [key=1, style=dashed, color=darkseagreen4, label=int];
d112 -> d196  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
d230 -> d235  [key=0, style=solid, color=green];
d230 -> d112  [key=3, color=darkorchid, style=bold, label="method methodReturn byte[] ReadBinary"];
d236 -> d237  [key=0, style=solid, color=green];
d236 -> d160  [key=2, style=dotted, color=green];
d82 -> d304  [key=0, style=solid];
d237 -> d112  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d160 -> d173  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d30 -> d33  [key=0, style=solid];
d30 -> d37  [key=0, style=solid];
d30 -> d43  [key=0, style=solid];
d32 -> d46  [key=0, style=solid];
d32 -> d47  [key=2, style=dotted];
d36 -> d46  [key=0, style=solid];
d36 -> d48  [key=2, style=dotted];
d42 -> d46  [key=0, style=solid];
d42 -> d49  [key=2, style=dotted];
d43 -> d28  [key=2, style=dotted];
d43 -> d29  [key=2, style=dotted];
d43 -> d46  [key=0, style=solid];
d50 -> d51  [key=0, style=solid];
d50 -> d55  [key=0, style=solid];
d50 -> d60  [key=0, style=solid];
d50 -> d70  [key=0, style=solid];
d50 -> d75  [key=0, style=solid];
d50 -> d79  [key=0, style=solid];
d52 -> d81  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d53 -> d54  [key=0, style=solid];
d56 -> d82  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d57 -> d81  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d57 -> d83  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d61 -> d62  [key=0, style=solid];
d61 -> d64  [key=0, style=solid];
d62 -> d81  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d64 -> d65  [key=0, style=solid];
d64 -> d84  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d67 -> d68  [key=0, style=solid];
d67 -> d85  [key=2, style=dotted];
d68 -> d82  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d71 -> d72  [key=0, style=solid];
d71 -> d47  [key=2, style=dotted];
d71 -> d74  [key=1, style=dashed, color=darkseagreen4, label=result];
d72 -> d73  [key=0, style=solid];
d72 -> d74  [key=0, style=solid];
d73 -> d74  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d76 -> d84  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d87 -> d88  [key=0, style=solid];
d87 -> d92  [key=0, style=solid];
d87 -> d100  [key=0, style=solid];
d87 -> d110  [key=0, style=solid];
d89 -> d81  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d90 -> d91  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d93 -> d96  [key=0, style=solid];
d94 -> d81  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d83  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d96 -> d99  [key=0, style=solid];
d97 -> d81  [key=2, style=dotted];
d97 -> d112  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d99 -> d28  [key=2, style=dotted];
d99 -> d111  [key=0, style=solid];
d101 -> d102  [key=0, style=solid];
d101 -> d105  [key=0, style=solid];
d102 -> d81  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d105 -> d106  [key=0, style=solid];
d105 -> d109  [key=0, style=solid];
d106 -> d107  [key=0, style=solid];
d106 -> d84  [key=2, style=dotted];
d107 -> d108  [key=0, style=solid];
d109 -> d28  [key=2, style=dotted];
d109 -> d111  [key=0, style=solid];
d110 -> d28  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d113 -> d122  [key=0, style=solid];
d113 -> d125  [key=0, style=solid];
d113 -> d128  [key=0, style=solid];
d113 -> d152  [key=0, style=solid];
d113 -> d153  [key=0, style=solid];
d113 -> d154  [key=0, style=solid];
d113 -> d155  [key=0, style=solid];
d113 -> d156  [key=0, style=solid];
d115 -> d116  [key=0, style=solid];
d115 -> d117  [key=1, style=dashed, color=darkseagreen4, label=token];
d116 -> d117  [key=0, style=solid];
d116 -> d118  [key=1, style=dashed, color=darkseagreen4, label=type];
d117 -> d118  [key=0, style=solid];
d117 -> d84  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d119 -> d85  [key=2, style=dotted];
d120 -> d82  [key=2, style=dotted];
d120 -> d121  [key=0, style=solid];
d126 -> d159  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d138 -> d159  [key=2, style=dotted];
d138 -> d139  [key=0, style=solid];
d143 -> d160  [key=2, style=dotted];
d143 -> d144  [key=0, style=solid];
d143 -> d145  [key=0, style=solid];
d145 -> d146  [key=0, style=solid];
d145 -> d161  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d146 -> d148  [key=0, style=solid];
d147 -> d148  [key=0, style=solid];
d147 -> d162  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d84  [key=2, style=dotted];
d163 -> d164  [key=0, style=solid];
d163 -> d168  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d164 -> d166  [key=0, style=solid];
d165 -> d167  [key=0, style=solid];
d166 -> d167  [key=0, style=solid];
d169 -> d170  [key=0, style=solid];
d169 -> d172  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d173 -> d174  [key=0, style=solid];
d173 -> d162  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d174 -> d176  [key=2, style=dotted];
d179 -> d228  [key=0, style=solid];
d179 -> d81  [key=2, style=dotted];
d179 -> d229  [key=2, style=dotted];
d182 -> d228  [key=0, style=solid];
d182 -> d81  [key=2, style=dotted];
d182 -> d83  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d184 -> d84  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d186 -> d85  [key=2, style=dotted];
d187 -> d228  [key=0, style=solid];
d187 -> d82  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d189 -> d84  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d191 -> d85  [key=2, style=dotted];
d192 -> d228  [key=0, style=solid];
d192 -> d82  [key=2, style=dotted];
d194 -> d228  [key=0, style=solid];
d194 -> d81  [key=2, style=dotted];
d194 -> d230  [key=2, style=dotted];
d196 -> d228  [key=0, style=solid];
d196 -> d84  [key=2, style=dotted];
d198 -> d112  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d199 -> d228  [key=0, style=solid];
d199 -> d81  [key=2, style=dotted];
d201 -> d160  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d231  [key=2, style=dotted];
d202 -> d228  [key=0, style=solid];
d202 -> d81  [key=2, style=dotted];
d204 -> d232  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d206 -> d228  [key=0, style=solid];
d206 -> d81  [key=2, style=dotted];
d208 -> d228  [key=0, style=solid];
d208 -> d84  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d210 -> d20  [key=2, style=dotted];
d210 -> d212  [key=1, style=dashed, color=darkseagreen4, label=expression];
d211 -> d212  [key=0, style=solid];
d211 -> d20  [key=2, style=dotted];
d213 -> d228  [key=0, style=solid];
d213 -> d81  [key=2, style=dotted];
d215 -> d216  [key=0, style=solid];
d215 -> d84  [key=2, style=dotted];
d216 -> d228  [key=0, style=solid];
d218 -> d228  [key=0, style=solid];
d218 -> d81  [key=2, style=dotted];
d218 -> d83  [key=2, style=dotted];
d220 -> d221  [key=0, style=solid];
d220 -> d84  [key=2, style=dotted];
d221 -> d228  [key=0, style=solid];
d223 -> d228  [key=0, style=solid];
d223 -> d81  [key=2, style=dotted];
d223 -> d82  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d239 -> d259  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d244 -> d246  [key=0, style=solid];
d244 -> d176  [key=2, style=dotted];
d245 -> d244  [key=0, style=solid];
d245 -> d245  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d245 -> d246  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d245 -> d247  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d245 -> d248  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d245 -> d254  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d247 -> d248  [key=0, style=solid];
d247 -> d260  [key=2, style=dotted];
d247 -> d250  [key=1, style=dashed, color=darkseagreen4, label=length];
d247 -> d253  [key=1, style=dashed, color=darkseagreen4, label=length];
d249 -> d250  [key=0, style=solid];
d249 -> d162  [key=2, style=dotted];
d250 -> d258  [key=0, style=solid];
d250 -> d261  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d253 -> d263  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d255 -> d162  [key=2, style=dotted];
d265 -> d82  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d265 -> d267  [key=1, style=dashed, color=darkseagreen4, label=length];
d266 -> d267  [key=0, style=solid];
d266 -> d162  [key=2, style=dotted];
d267 -> d268  [key=0, style=solid];
d267 -> d271  [key=2, style=dotted];
d267 -> d269  [key=1, style=dashed, color=darkseagreen4, label=s];
d268 -> d269  [key=0, style=solid];
d268 -> d176  [key=2, style=dotted];
d274 -> d275  [key=0, style=solid];
d274 -> d259  [key=2, style=dotted];
d278 -> d279  [key=0, style=solid];
d278 -> d291  [key=2, style=dotted];
d278 -> d281  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d278 -> d282  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d278 -> d287  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d281 -> d282  [key=0, style=solid];
d281 -> d260  [key=2, style=dotted];
d281 -> d283  [key=1, style=dashed, color=darkseagreen4, label=charCount];
d281 -> d286  [key=1, style=dashed, color=darkseagreen4, label=charCount];
d283 -> d290  [key=0, style=solid];
d283 -> d261  [key=2, style=dotted];
d286 -> d287  [key=0, style=solid];
d286 -> d263  [key=2, style=dotted];
d293 -> d294  [key=0, style=solid];
d293 -> d295  [key=0, style=solid];
d294 -> d295  [key=0, style=solid];
d295 -> d296  [key=0, style=solid];
d295 -> d298  [key=0, style=solid];
d297 -> d298  [key=0, style=solid];
d300 -> d301  [key=0, style=solid];
d300 -> d162  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d301 -> d303  [key=2, style=dotted];
d304 -> d305  [key=0, style=solid];
d304 -> d162  [key=2, style=dotted];
d305 -> d306  [key=0, style=solid];
d305 -> d307  [key=2, style=dotted];
d308 -> d309  [key=0, style=solid];
d308 -> d162  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d309 -> d311  [key=2, style=dotted];
d312 -> d313  [key=0, style=solid];
d312 -> d162  [key=2, style=dotted];
d313 -> d314  [key=0, style=solid];
d313 -> d315  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d318 -> d319  [key=0, style=solid];
d318 -> d162  [key=2, style=dotted];
d319 -> d320  [key=0, style=solid];
d319 -> d321  [key=2, style=dotted];
d18 -> d14  [key=0, style=bold, color=blue];
d17 -> d18  [key=0, style=solid];
d20 -> d239  [key=0, style=solid];
d314 -> d19  [key=0, style=bold, color=blue];
d21 -> d22  [key=0, style=solid];
d27 -> d30  [key=0, style=solid];
d27 -> d47  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Read"];
d27 -> d48  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Read"];
d27 -> d49  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Read"];
d27 -> d45  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Read"];
d151 -> d28  [key=2, style=dotted];
d151 -> d158  [key=0, style=solid];
d144 -> d28  [key=2, style=dotted];
d144 -> d158  [key=0, style=solid];
d85 -> d169  [key=0, style=solid];
d85 -> d170  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader.ContainerContext"];
d85 -> d66  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
d85 -> d118  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
d85 -> d185  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
d85 -> d190  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Bson.BsonReader.ContainerContext newContext"];
d130 -> d131  [key=0, style=solid];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [key=0, style=solid];
d134 -> d135  [key=0, style=solid];
d134 -> d142  [key=1, style=dashed, color=darkseagreen4, label=lengthMinusEnd];
d142 -> d143  [key=0, style=solid];
d142 -> d151  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d141 -> d158  [key=0, style=solid];
d178 -> d179  [key=0, style=solid];
d180 -> d181  [key=0, style=solid];
d183 -> d184  [key=0, style=solid];
d188 -> d189  [key=0, style=solid];
d193 -> d194  [key=0, style=solid];
d195 -> d196  [key=0, style=solid];
d197 -> d198  [key=0, style=solid];
d200 -> d201  [key=0, style=solid];
d203 -> d204  [key=0, style=solid];
d207 -> d208  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d214 -> d215  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d219 -> d220  [key=0, style=solid];
d222 -> d223  [key=0, style=solid];
d310 -> d232  [key=0, style=bold, color=blue];
d162 -> d112  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
d162 -> d52  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
d162 -> d64  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
d162 -> d179  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
d162 -> d265  [key=3, color=darkorchid, style=bold, label="Parameter variable int count"];
d162 -> d316  [key=0, style=solid];
d320 -> d112  [key=0, style=bold, color=blue];
d238 -> d230  [key=0, style=bold, color=blue];
d306 -> d82  [key=0, style=bold, color=blue];
d175 -> d160  [key=0, style=bold, color=blue];
d31 -> d32  [key=0, style=solid];
d33 -> d34  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d46 -> d27  [key=0, style=bold, color=blue];
d47 -> d113  [key=0, style=solid];
d47 -> d54  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ReadNormal"];
d47 -> d45  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ReadNormal"];
d35 -> d36  [key=0, style=solid];
d48 -> d87  [key=0, style=solid];
d48 -> d54  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ReadReference"];
d41 -> d42  [key=0, style=solid];
d49 -> d50  [key=0, style=solid];
d49 -> d71  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ReadCodeWScope"];
d49 -> d54  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ReadCodeWScope"];
d51 -> d52  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
d60 -> d61  [key=0, style=solid];
d70 -> d71  [key=0, style=solid];
d75 -> d76  [key=0, style=solid];
d79 -> d80  [key=0, style=solid];
d79 -> d86  [key=2, style=dotted];
d54 -> d80  [key=0, style=solid];
d83 -> d265  [key=0, style=solid];
d83 -> d267  [key=3, color=darkorchid, style=bold, label="method methodReturn string ReadLengthString"];
d59 -> d80  [key=0, style=solid];
d63 -> d80  [key=0, style=solid];
d66 -> d67  [key=0, style=solid];
d66 -> d68  [key=1, style=dashed, color=darkseagreen4, label=newContext];
d66 -> d0  [key=2, style=dotted];
d69 -> d80  [key=0, style=solid];
d74 -> d80  [key=0, style=solid];
d78 -> d80  [key=0, style=solid];
d88 -> d89  [key=0, style=solid];
d92 -> d93  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d91 -> d111  [key=0, style=solid];
d95 -> d111  [key=0, style=solid];
d98 -> d111  [key=0, style=solid];
d111 -> d48  [key=0, style=bold, color=blue];
d104 -> d111  [key=0, style=solid];
d108 -> d111  [key=0, style=solid];
d114 -> d115  [key=0, style=solid];
d122 -> d123  [key=0, style=solid];
d125 -> d126  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d152 -> d157  [key=0, style=solid];
d153 -> d157  [key=0, style=solid];
d154 -> d157  [key=0, style=solid];
d155 -> d157  [key=0, style=solid];
d156 -> d158  [key=0, style=solid];
d156 -> d86  [key=2, style=dotted];
d118 -> d119  [key=0, style=solid];
d118 -> d120  [key=1, style=dashed, color=darkseagreen4, label=newContext];
d118 -> d0  [key=2, style=dotted];
d121 -> d158  [key=0, style=solid];
d127 -> d158  [key=0, style=solid];
d139 -> d158  [key=0, style=solid];
d161 -> d163  [key=0, style=solid];
d150 -> d158  [key=0, style=solid];
d167 -> d161  [key=0, style=bold, color=blue];
d171 -> d85  [key=0, style=bold, color=blue];
d229 -> d300  [key=0, style=solid];
d181 -> d182  [key=0, style=solid];
d185 -> d186  [key=0, style=solid];
d185 -> d187  [key=1, style=dashed, color=darkseagreen4, label=newContext];
d185 -> d0  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d190 -> d192  [key=1, style=dashed, color=darkseagreen4, label=newContext];
d190 -> d0  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d205 -> d233  [key=2, style=dotted];
d212 -> d213  [key=0, style=solid];
d240 -> d253  [key=1, style=dashed, color=darkseagreen4, label=builder];
d240 -> d240  [key=3, color=darkorchid, style=bold, label="Local variable System.Text.StringBuilder builder"];
d240 -> d241  [key=0, style=solid];
d240 -> d248  [key=1, style=dashed, color=darkseagreen4, label=builder];
d240 -> d251  [key=1, style=dashed, color=darkseagreen4, label=builder];
d240 -> d256  [key=1, style=dashed, color=darkseagreen4, label=builder];
d259 -> d293  [key=0, style=solid];
d242 -> d244  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d242 -> d245  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d242 -> d247  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d242 -> d243  [key=0, style=solid];
d242 -> d246  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d242 -> d248  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d242 -> d254  [key=1, style=dashed, color=darkseagreen4, label=byteCount];
d242 -> d241  [key=3, color=darkorchid, style=bold, label="Local variable int byteCount"];
d243 -> d244  [key=0, style=solid];
d246 -> d247  [key=0, style=solid];
d246 -> d249  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d246 -> d255  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d246 -> d246  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d248 -> d249  [key=0, style=solid];
d248 -> d251  [key=0, style=solid];
d254 -> d255  [key=0, style=solid];
d254 -> d257  [key=0, style=solid];
d258 -> d20  [key=0, style=bold, color=blue];
d251 -> d253  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d252 -> d253  [key=0, style=solid];
d252 -> d262  [key=2, style=dotted];
d252 -> d256  [key=1, style=dashed, color=darkseagreen4, label=builder];
d256 -> d258  [key=0, style=solid];
d256 -> d264  [key=2, style=dotted];
d271 -> d272  [key=0, style=solid];
d271 -> d277  [key=1, style=dashed, color=darkseagreen4, label=int];
d271 -> d282  [key=1, style=dashed, color=darkseagreen4, label=int];
d271 -> d285  [key=1, style=dashed, color=darkseagreen4, label=int];
d271 -> d288  [key=1, style=dashed, color=darkseagreen4, label=int];
d269 -> d270  [key=0, style=solid];
d272 -> d274  [key=0, style=solid];
d272 -> d273  [key=0, style=solid];
d275 -> d286  [key=1, style=dashed, color=darkseagreen4, label=builder];
d275 -> d240  [key=3, color=darkorchid, style=bold, label="Local variable System.Text.StringBuilder builder"];
d275 -> d276  [key=0, style=solid];
d275 -> d284  [key=1, style=dashed, color=darkseagreen4, label=builder];
d275 -> d289  [key=1, style=dashed, color=darkseagreen4, label=builder];
d277 -> d278  [key=0, style=solid];
d276 -> d278  [key=3, color=darkorchid, style=bold, label="Local variable int totalBytesRead"];
d276 -> d277  [key=0, style=solid];
d276 -> d282  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d276 -> d287  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d276 -> d241  [key=3, color=darkorchid, style=bold, label="Local variable int totalBytesRead"];
d279 -> d281  [key=0, style=solid];
d279 -> d280  [key=0, style=solid];
d282 -> d283  [key=0, style=solid];
d282 -> d284  [key=0, style=solid];
d287 -> d287  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d287 -> d288  [key=0, style=solid];
d290 -> d271  [key=0, style=bold, color=blue];
d285 -> d286  [key=0, style=solid];
d285 -> d262  [key=2, style=dotted];
d285 -> d289  [key=1, style=dashed, color=darkseagreen4, label=builder];
d284 -> d286  [key=0, style=solid];
d284 -> d285  [key=0, style=solid];
d296 -> d297  [key=0, style=solid];
d296 -> d299  [key=2, style=dotted];
d298 -> d259  [key=0, style=bold, color=blue];
d302 -> d229  [key=0, style=bold, color=blue];
d317 -> d162  [key=0, style=bold, color=blue];
d45 -> d46  [key=0, style=solid];
d158 -> d47  [key=0, style=bold, color=blue];
d129 -> d130  [key=0, style=solid];
d133 -> d158  [key=0, style=solid];
d34 -> d35  [key=0, style=solid];
d38 -> d39  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d80 -> d49  [key=0, style=bold, color=blue];
d270 -> d83  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d123 -> d124  [key=0, style=solid];
d157 -> d158  [key=0, style=solid];
d241 -> d242  [key=0, style=solid];
d241 -> d246  [key=1, style=dashed, color=darkseagreen4, label=totalBytesRead];
d241 -> d241  [key=3, color=darkorchid, style=bold, label="Local variable int totalBytesRead"];
d257 -> d258  [key=0, style=solid];
d257 -> d241  [key=0, style=solid];
d288 -> d276  [key=0, style=solid];
d288 -> d289  [key=0, style=solid];
d273 -> d290  [key=0, style=solid];
d289 -> d290  [key=0, style=solid];
d289 -> d264  [key=2, style=dotted];
d280 -> d290  [key=0, style=solid];
d280 -> d292  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d124 -> d158  [key=0, style=solid];
d39 -> d40  [key=0, style=solid];
d2 -> d0  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d322 -> d1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonReader.ContainerContext"];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> n92  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_8  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_13  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=role];
m1_1 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label=role];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_14  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_16  [key=2, style=dotted];
m1_8 -> m1_14  [key=2, style=dotted];
m1_8 -> m1_17  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_15  [key=2, style=dotted];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_4 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_4 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_4 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_4 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_14  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_18  [key=2, style=dotted];
m1_9 -> m1_14  [key=2, style=dotted];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> n37  [key=2, style=dotted];
m1_10 -> m1_20  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_21  [key=2, style=dotted];
m1_11 -> m1_11  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m1_12 -> m1_0  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_23  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_40  [key=2, style=dotted];
m1_24 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_24 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label=person];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_41  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_14  [key=2, style=dotted];
m1_26 -> m1_42  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_42  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_42  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_42  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_42  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_14  [key=2, style=dotted];
m1_31 -> m1_42  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_41  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_42  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_42  [key=2, style=dotted];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_43  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_42  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_44  [key=2, style=dotted];
m1_37 -> m1_43  [key=2, style=dotted];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_42  [key=2, style=dotted];
m1_39 -> m1_22  [key=0, style=bold, color=blue];
m2_417 -> m2_418  [key=0, style=solid];
m2_418 -> m2_419  [key=0, style=solid];
m2_418 -> m2_20  [key=2, style=dotted];
m2_418 -> m2_21  [key=2, style=dotted];
m2_418 -> m2_422  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_419 -> m2_420  [key=0, style=solid];
m2_419 -> m2_110  [key=2, style=dotted];
m2_419 -> m2_421  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_420 -> m2_417  [key=0, style=bold, color=blue];
m2_623 -> m2_624  [key=0, style=solid];
m2_624 -> m2_625  [key=0, style=solid];
m2_625 -> m2_626  [key=0, style=solid];
m2_625 -> m2_21  [key=2, style=dotted];
m2_626 -> m2_627  [key=0, style=solid];
m2_626 -> m2_20  [key=2, style=dotted];
m2_626 -> m2_628  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_629  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_630  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_631  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_632  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_633  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_634  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_635  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_636  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_637  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_638  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_626 -> m2_639  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_627 -> m2_628  [key=0, style=solid];
m2_627 -> m2_84  [key=2, style=dotted];
m2_628 -> m2_629  [key=0, style=solid];
m2_628 -> m2_24  [key=2, style=dotted];
m2_629 -> m2_630  [key=0, style=solid];
m2_629 -> m2_84  [key=2, style=dotted];
m2_630 -> m2_631  [key=0, style=solid];
m2_630 -> m2_24  [key=2, style=dotted];
m2_631 -> m2_632  [key=0, style=solid];
m2_631 -> m2_24  [key=2, style=dotted];
m2_632 -> m2_633  [key=0, style=solid];
m2_632 -> m2_84  [key=2, style=dotted];
m2_633 -> m2_634  [key=0, style=solid];
m2_633 -> m2_24  [key=2, style=dotted];
m2_634 -> m2_635  [key=0, style=solid];
m2_634 -> m2_24  [key=2, style=dotted];
m2_635 -> m2_636  [key=0, style=solid];
m2_635 -> m2_84  [key=2, style=dotted];
m2_636 -> m2_637  [key=0, style=solid];
m2_636 -> m2_24  [key=2, style=dotted];
m2_637 -> m2_638  [key=0, style=solid];
m2_637 -> m2_24  [key=2, style=dotted];
m2_638 -> m2_639  [key=0, style=solid];
m2_638 -> m2_84  [key=2, style=dotted];
m2_639 -> m2_640  [key=0, style=solid];
m2_639 -> m2_24  [key=2, style=dotted];
m2_640 -> m2_623  [key=0, style=bold, color=blue];
m2_995 -> m2_996  [key=0, style=solid];
m2_996 -> m2_997  [key=0, style=solid];
m2_997 -> m2_998  [key=0, style=solid];
m2_997 -> m2_20  [key=2, style=dotted];
m2_997 -> m2_21  [key=2, style=dotted];
m2_997 -> m2_999  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1000  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1001  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1002  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1003  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1004  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1005  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1006  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_997 -> m2_1007  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_998 -> m2_999  [key=0, style=solid];
m2_998 -> m2_22  [key=2, style=dotted];
m2_998 -> n78  [key=2, style=dotted];
m2_999 -> m2_1000  [key=0, style=solid];
m2_999 -> m2_24  [key=2, style=dotted];
m2_1000 -> m2_1001  [key=0, style=solid];
m2_1000 -> m2_22  [key=2, style=dotted];
m2_1000 -> n78  [key=2, style=dotted];
m2_1001 -> m2_1002  [key=0, style=solid];
m2_1001 -> m2_24  [key=2, style=dotted];
m2_1002 -> m2_1003  [key=0, style=solid];
m2_1002 -> m2_850  [key=2, style=dotted];
m2_1003 -> m2_1004  [key=0, style=solid];
m2_1003 -> m2_24  [key=2, style=dotted];
m2_1004 -> m2_1005  [key=0, style=solid];
m2_1004 -> m2_24  [key=2, style=dotted];
m2_1005 -> m2_1006  [key=0, style=solid];
m2_1005 -> m2_936  [key=2, style=dotted];
m2_1005 -> m2_1009  [key=2, style=dotted];
m2_1005 -> m2_24  [key=2, style=dotted];
m2_1006 -> m2_1007  [key=0, style=solid];
m2_1006 -> m2_22  [key=2, style=dotted];
m2_1006 -> n78  [key=2, style=dotted];
m2_1007 -> m2_1008  [key=0, style=solid];
m2_1007 -> m2_24  [key=2, style=dotted];
m2_1008 -> m2_995  [key=0, style=bold, color=blue];
m2_450 -> m2_451  [key=0, style=solid];
m2_451 -> m2_452  [key=0, style=solid];
m2_451 -> m2_454  [key=1, style=dashed, color=darkseagreen4, label=newLinesText];
m2_451 -> m2_462  [key=1, style=dashed, color=darkseagreen4, label=newLinesText];
m2_451 -> m2_477  [key=1, style=dashed, color=darkseagreen4, label=newLinesText];
m2_452 -> m2_453  [key=0, style=solid];
m2_452 -> m2_457  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_454 -> m2_455  [key=0, style=solid];
m2_454 -> m2_21  [key=2, style=dotted];
m2_462 -> m2_463  [key=0, style=solid];
m2_462 -> m2_24  [key=2, style=dotted];
m2_477 -> m2_478  [key=0, style=solid];
m2_477 -> m2_24  [key=2, style=dotted];
m2_453 -> m2_454  [key=0, style=solid];
m2_453 -> m2_456  [key=1, style=dashed, color=darkseagreen4, label=count];
m2_457 -> m2_458  [key=0, style=solid];
m2_457 -> m2_20  [key=2, style=dotted];
m2_457 -> m2_62  [key=2, style=dotted];
m2_457 -> m2_103  [key=2, style=dotted];
m2_457 -> m2_104  [key=2, style=dotted];
m2_457 -> m2_459  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_460  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_461  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_462  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_463  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_464  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_465  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_466  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_467  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_468  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_469  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_470  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_471  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_472  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_473  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_474  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_475  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_476  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_477  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_478  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_479  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_480  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_481  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_482  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_483  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_484  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_485  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_486  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_487  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_488  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_489  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_490  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_491  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_457 -> m2_492  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_456 -> m2_455  [key=0, style=solid];
m2_456 -> m2_456  [key=1, style=dashed, color=darkseagreen4, label=count];
m2_455 -> m2_456  [key=0, style=solid];
m2_455 -> m2_457  [key=0, style=solid];
m2_455 -> m2_494  [key=2, style=dotted];
m2_458 -> m2_459  [key=0, style=solid];
m2_458 -> m2_22  [key=2, style=dotted];
m2_458 -> n78  [key=2, style=dotted];
m2_459 -> m2_460  [key=0, style=solid];
m2_459 -> m2_24  [key=2, style=dotted];
m2_460 -> m2_461  [key=0, style=solid];
m2_460 -> m2_22  [key=2, style=dotted];
m2_460 -> n78  [key=2, style=dotted];
m2_461 -> m2_462  [key=0, style=solid];
m2_461 -> m2_24  [key=2, style=dotted];
m2_463 -> m2_464  [key=0, style=solid];
m2_463 -> m2_22  [key=2, style=dotted];
m2_463 -> n78  [key=2, style=dotted];
m2_464 -> m2_465  [key=0, style=solid];
m2_464 -> m2_24  [key=2, style=dotted];
m2_465 -> m2_466  [key=0, style=solid];
m2_465 -> m2_22  [key=2, style=dotted];
m2_465 -> n78  [key=2, style=dotted];
m2_466 -> m2_467  [key=0, style=solid];
m2_466 -> m2_24  [key=2, style=dotted];
m2_467 -> m2_468  [key=0, style=solid];
m2_467 -> m2_24  [key=2, style=dotted];
m2_468 -> m2_469  [key=0, style=solid];
m2_468 -> m2_24  [key=2, style=dotted];
m2_469 -> m2_470  [key=0, style=solid];
m2_469 -> m2_22  [key=2, style=dotted];
m2_469 -> n78  [key=2, style=dotted];
m2_470 -> m2_471  [key=0, style=solid];
m2_470 -> m2_24  [key=2, style=dotted];
m2_471 -> m2_472  [key=0, style=solid];
m2_471 -> m2_24  [key=2, style=dotted];
m2_472 -> m2_473  [key=0, style=solid];
m2_472 -> m2_22  [key=2, style=dotted];
m2_472 -> n78  [key=2, style=dotted];
m2_473 -> m2_474  [key=0, style=solid];
m2_473 -> m2_24  [key=2, style=dotted];
m2_474 -> m2_475  [key=0, style=solid];
m2_474 -> m2_24  [key=2, style=dotted];
m2_475 -> m2_476  [key=0, style=solid];
m2_475 -> m2_22  [key=2, style=dotted];
m2_475 -> n78  [key=2, style=dotted];
m2_476 -> m2_477  [key=0, style=solid];
m2_476 -> m2_24  [key=2, style=dotted];
m2_478 -> m2_479  [key=0, style=solid];
m2_478 -> m2_22  [key=2, style=dotted];
m2_478 -> n78  [key=2, style=dotted];
m2_479 -> m2_480  [key=0, style=solid];
m2_479 -> m2_24  [key=2, style=dotted];
m2_480 -> m2_481  [key=0, style=solid];
m2_480 -> m2_22  [key=2, style=dotted];
m2_480 -> n78  [key=2, style=dotted];
m2_481 -> m2_482  [key=0, style=solid];
m2_481 -> m2_24  [key=2, style=dotted];
m2_482 -> m2_483  [key=0, style=solid];
m2_482 -> m2_22  [key=2, style=dotted];
m2_482 -> n78  [key=2, style=dotted];
m2_483 -> m2_484  [key=0, style=solid];
m2_483 -> m2_24  [key=2, style=dotted];
m2_484 -> m2_485  [key=0, style=solid];
m2_484 -> m2_22  [key=2, style=dotted];
m2_484 -> n78  [key=2, style=dotted];
m2_485 -> m2_486  [key=0, style=solid];
m2_485 -> m2_24  [key=2, style=dotted];
m2_486 -> m2_487  [key=0, style=solid];
m2_486 -> m2_24  [key=2, style=dotted];
m2_487 -> m2_488  [key=0, style=solid];
m2_487 -> m2_22  [key=2, style=dotted];
m2_487 -> n78  [key=2, style=dotted];
m2_488 -> m2_489  [key=0, style=solid];
m2_488 -> m2_24  [key=2, style=dotted];
m2_489 -> m2_490  [key=0, style=solid];
m2_489 -> m2_22  [key=2, style=dotted];
m2_489 -> n78  [key=2, style=dotted];
m2_490 -> m2_491  [key=0, style=solid];
m2_490 -> m2_24  [key=2, style=dotted];
m2_491 -> m2_492  [key=0, style=solid];
m2_491 -> m2_22  [key=2, style=dotted];
m2_491 -> n78  [key=2, style=dotted];
m2_492 -> m2_493  [key=0, style=solid];
m2_492 -> m2_24  [key=2, style=dotted];
m2_493 -> m2_450  [key=0, style=bold, color=blue];
m2_1254 -> m2_1255  [key=0, style=solid];
m2_1255 -> m2_1256  [key=0, style=solid];
m2_1256 -> m2_1257  [key=0, style=solid];
m2_1256 -> m2_20  [key=2, style=dotted];
m2_1256 -> m2_21  [key=2, style=dotted];
m2_1256 -> m2_1261  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1257 -> m2_1258  [key=0, style=solid];
m2_1257 -> m2_1259  [key=2, style=dotted];
m2_1257 -> m2_1260  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1258 -> m2_1254  [key=0, style=bold, color=blue];
m2_1043 -> m2_1044  [key=0, style=solid];
m2_1044 -> m2_1045  [key=0, style=solid];
m2_1045 -> m2_1046  [key=0, style=solid];
m2_1045 -> m2_20  [key=2, style=dotted];
m2_1045 -> m2_21  [key=2, style=dotted];
m2_1045 -> m2_1047  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1045 -> m2_1048  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1045 -> m2_1049  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1045 -> m2_1050  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1045 -> m2_1051  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1045 -> m2_1052  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1045 -> m2_1053  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1046 -> m2_1047  [key=0, style=solid];
m2_1046 -> m2_22  [key=2, style=dotted];
m2_1046 -> n78  [key=2, style=dotted];
m2_1047 -> m2_1048  [key=0, style=solid];
m2_1047 -> m2_24  [key=2, style=dotted];
m2_1048 -> m2_1049  [key=0, style=solid];
m2_1048 -> m2_22  [key=2, style=dotted];
m2_1048 -> n78  [key=2, style=dotted];
m2_1049 -> m2_1050  [key=0, style=solid];
m2_1049 -> m2_24  [key=2, style=dotted];
m2_1050 -> m2_1051  [key=0, style=solid];
m2_1050 -> m2_832  [key=2, style=dotted];
m2_1051 -> m2_1052  [key=0, style=solid];
m2_1051 -> m2_24  [key=2, style=dotted];
m2_1052 -> m2_1053  [key=0, style=solid];
m2_1052 -> m2_24  [key=2, style=dotted];
m2_1053 -> m2_1054  [key=0, style=solid];
m2_1053 -> m2_24  [key=2, style=dotted];
m2_1054 -> m2_1043  [key=0, style=bold, color=blue];
m2_78 -> m2_79  [key=0, style=solid];
m2_79 -> m2_80  [key=0, style=solid];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_20  [key=2, style=dotted];
m2_80 -> m2_21  [key=2, style=dotted];
m2_80 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_83  [key=0, style=solid];
m2_81 -> m2_84  [key=2, style=dotted];
m2_82 -> m2_81  [key=0, style=solid];
m2_82 -> m2_85  [key=2, style=dotted];
m2_83 -> m2_78  [key=0, style=bold, color=blue];
m2_1411 -> m2_1412  [key=0, style=solid];
m2_1412 -> m2_1413  [key=0, style=solid];
m2_1413 -> m2_1414  [key=0, style=solid];
m2_1413 -> m2_20  [key=2, style=dotted];
m2_1413 -> m2_21  [key=2, style=dotted];
m2_1413 -> m2_1415  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1413 -> m2_1418  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1414 -> m2_1415  [key=0, style=solid];
m2_1414 -> m2_22  [key=2, style=dotted];
m2_1414 -> n78  [key=2, style=dotted];
m2_1415 -> m2_1416  [key=0, style=solid];
m2_1415 -> m2_1259  [key=2, style=dotted];
m2_1415 -> m2_1417  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1416 -> m2_1411  [key=0, style=bold, color=blue];
m2_886 -> m2_887  [key=0, style=solid];
m2_887 -> m2_888  [key=0, style=solid];
m2_887 -> m2_20  [key=2, style=dotted];
m2_887 -> m2_21  [key=2, style=dotted];
m2_887 -> m2_891  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_888 -> m2_889  [key=0, style=solid];
m2_888 -> m2_110  [key=2, style=dotted];
m2_888 -> m2_890  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_889 -> m2_886  [key=0, style=bold, color=blue];
m2_1552 -> m2_1553  [key=0, style=solid];
m2_1553 -> m2_1554  [key=0, style=solid];
m2_1553 -> m2_1573  [key=2, style=dotted];
m2_1553 -> m2_21  [key=2, style=dotted];
m2_1553 -> m2_1556  [key=1, style=dashed, color=darkseagreen4, label=toggleReaderError];
m2_1553 -> m2_1559  [key=1, style=dashed, color=darkseagreen4, label=toggleReaderError];
m2_1553 -> m2_1562  [key=1, style=dashed, color=darkseagreen4, label=toggleReaderError];
m2_1553 -> m2_1564  [key=1, style=dashed, color=darkseagreen4, label=toggleReaderError];
m2_1553 -> m2_1567  [key=1, style=dashed, color=darkseagreen4, label=toggleReaderError];
m2_1553 -> m2_1571  [key=1, style=dashed, color=darkseagreen4, label=toggleReaderError];
m2_1554 -> m2_1555  [key=0, style=solid];
m2_1554 -> m2_20  [key=2, style=dotted];
m2_1554 -> m2_1557  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1575  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1558  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1578  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1560  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1561  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1563  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1581  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1565  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1566  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1568  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1584  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1569  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1587  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1570  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1554 -> m2_1590  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1556 -> m2_1557  [key=0, style=solid];
m2_1559 -> m2_1560  [key=0, style=solid];
m2_1562 -> m2_1563  [key=0, style=solid];
m2_1564 -> m2_1565  [key=0, style=solid];
m2_1567 -> m2_1568  [key=0, style=solid];
m2_1571 -> m2_1572  [key=0, style=solid];
m2_1555 -> m2_1556  [key=0, style=solid];
m2_1555 -> m2_22  [key=2, style=dotted];
m2_1555 -> n78  [key=2, style=dotted];
m2_1557 -> m2_1558  [key=0, style=solid];
m2_1557 -> m2_110  [key=2, style=dotted];
m2_1557 -> m2_1574  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1558 -> m2_1559  [key=0, style=solid];
m2_1558 -> m2_110  [key=2, style=dotted];
m2_1558 -> m2_1577  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1560 -> m2_1561  [key=0, style=solid];
m2_1560 -> m2_22  [key=2, style=dotted];
m2_1560 -> n78  [key=2, style=dotted];
m2_1561 -> m2_1562  [key=0, style=solid];
m2_1561 -> m2_24  [key=2, style=dotted];
m2_1563 -> m2_1564  [key=0, style=solid];
m2_1563 -> m2_110  [key=2, style=dotted];
m2_1563 -> m2_1580  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1565 -> m2_1566  [key=0, style=solid];
m2_1565 -> m2_22  [key=2, style=dotted];
m2_1565 -> n78  [key=2, style=dotted];
m2_1566 -> m2_1567  [key=0, style=solid];
m2_1566 -> m2_24  [key=2, style=dotted];
m2_1568 -> m2_1569  [key=0, style=solid];
m2_1568 -> m2_110  [key=2, style=dotted];
m2_1568 -> m2_1583  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1569 -> m2_1570  [key=0, style=solid];
m2_1569 -> m2_110  [key=2, style=dotted];
m2_1569 -> m2_1586  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1570 -> m2_1571  [key=0, style=solid];
m2_1570 -> m2_110  [key=2, style=dotted];
m2_1570 -> m2_1589  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1572 -> m2_1552  [key=0, style=bold, color=blue];
m2_410 -> m2_411  [key=0, style=solid];
m2_411 -> m2_412  [key=0, style=solid];
m2_411 -> m2_20  [key=2, style=dotted];
m2_411 -> m2_21  [key=2, style=dotted];
m2_411 -> m2_415  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_412 -> m2_413  [key=0, style=solid];
m2_412 -> m2_110  [key=2, style=dotted];
m2_412 -> m2_414  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_413 -> m2_410  [key=0, style=bold, color=blue];
m2_797 -> m2_798  [key=0, style=solid];
m2_798 -> m2_799  [key=0, style=solid];
m2_798 -> m2_21  [key=2, style=dotted];
m2_799 -> m2_800  [key=0, style=solid];
m2_799 -> m2_20  [key=2, style=dotted];
m2_799 -> m2_801  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_802  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_803  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_804  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_805  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_806  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_807  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_808  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_809  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_810  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_811  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_812  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_813  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_814  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_815  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_799 -> m2_816  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_800 -> m2_801  [key=0, style=solid];
m2_800 -> m2_22  [key=2, style=dotted];
m2_800 -> n78  [key=2, style=dotted];
m2_801 -> m2_802  [key=0, style=solid];
m2_801 -> m2_24  [key=2, style=dotted];
m2_802 -> m2_803  [key=0, style=solid];
m2_802 -> m2_818  [key=2, style=dotted];
m2_803 -> m2_804  [key=0, style=solid];
m2_803 -> m2_24  [key=2, style=dotted];
m2_804 -> m2_805  [key=0, style=solid];
m2_804 -> m2_24  [key=2, style=dotted];
m2_805 -> m2_806  [key=0, style=solid];
m2_805 -> m2_24  [key=2, style=dotted];
m2_806 -> m2_807  [key=0, style=solid];
m2_806 -> m2_818  [key=2, style=dotted];
m2_807 -> m2_808  [key=0, style=solid];
m2_807 -> m2_24  [key=2, style=dotted];
m2_808 -> m2_809  [key=0, style=solid];
m2_808 -> m2_24  [key=2, style=dotted];
m2_809 -> m2_810  [key=0, style=solid];
m2_809 -> m2_24  [key=2, style=dotted];
m2_810 -> m2_811  [key=0, style=solid];
m2_810 -> m2_818  [key=2, style=dotted];
m2_811 -> m2_812  [key=0, style=solid];
m2_811 -> m2_24  [key=2, style=dotted];
m2_812 -> m2_813  [key=0, style=solid];
m2_812 -> m2_24  [key=2, style=dotted];
m2_813 -> m2_814  [key=0, style=solid];
m2_813 -> m2_24  [key=2, style=dotted];
m2_814 -> m2_815  [key=0, style=solid];
m2_814 -> m2_22  [key=2, style=dotted];
m2_814 -> n78  [key=2, style=dotted];
m2_815 -> m2_816  [key=0, style=solid];
m2_815 -> m2_24  [key=2, style=dotted];
m2_816 -> m2_817  [key=0, style=solid];
m2_816 -> m2_22  [key=2, style=dotted];
m2_816 -> m2_77  [key=2, style=dotted];
m2_817 -> m2_797  [key=0, style=bold, color=blue];
m2_1263 -> m2_1264  [key=0, style=solid];
m2_1264 -> m2_1265  [key=0, style=solid];
m2_1265 -> m2_1266  [key=0, style=solid];
m2_1265 -> m2_20  [key=2, style=dotted];
m2_1265 -> m2_62  [key=2, style=dotted];
m2_1265 -> m2_103  [key=2, style=dotted];
m2_1265 -> m2_104  [key=2, style=dotted];
m2_1265 -> m2_1267  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1268  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1269  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1270  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1271  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1272  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1273  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1274  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1275  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1276  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1277  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1278  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1279  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1280  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1281  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1282  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1283  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1265 -> m2_1284  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1266 -> m2_1267  [key=0, style=solid];
m2_1266 -> m2_22  [key=2, style=dotted];
m2_1266 -> n78  [key=2, style=dotted];
m2_1267 -> m2_1268  [key=0, style=solid];
m2_1267 -> m2_24  [key=2, style=dotted];
m2_1268 -> m2_1269  [key=0, style=solid];
m2_1268 -> m2_22  [key=2, style=dotted];
m2_1268 -> n78  [key=2, style=dotted];
m2_1269 -> m2_1270  [key=0, style=solid];
m2_1269 -> m2_24  [key=2, style=dotted];
m2_1270 -> m2_1271  [key=0, style=solid];
m2_1270 -> m2_22  [key=2, style=dotted];
m2_1270 -> n78  [key=2, style=dotted];
m2_1271 -> m2_1272  [key=0, style=solid];
m2_1271 -> m2_24  [key=2, style=dotted];
m2_1272 -> m2_1273  [key=0, style=solid];
m2_1272 -> m2_22  [key=2, style=dotted];
m2_1272 -> n78  [key=2, style=dotted];
m2_1273 -> m2_1274  [key=0, style=solid];
m2_1273 -> m2_24  [key=2, style=dotted];
m2_1274 -> m2_1275  [key=0, style=solid];
m2_1274 -> m2_22  [key=2, style=dotted];
m2_1274 -> n78  [key=2, style=dotted];
m2_1275 -> m2_1276  [key=0, style=solid];
m2_1275 -> m2_24  [key=2, style=dotted];
m2_1276 -> m2_1277  [key=0, style=solid];
m2_1276 -> m2_22  [key=2, style=dotted];
m2_1276 -> n78  [key=2, style=dotted];
m2_1277 -> m2_1278  [key=0, style=solid];
m2_1277 -> m2_24  [key=2, style=dotted];
m2_1278 -> m2_1279  [key=0, style=solid];
m2_1278 -> m2_22  [key=2, style=dotted];
m2_1278 -> n78  [key=2, style=dotted];
m2_1279 -> m2_1280  [key=0, style=solid];
m2_1279 -> m2_24  [key=2, style=dotted];
m2_1280 -> m2_1281  [key=0, style=solid];
m2_1280 -> m2_22  [key=2, style=dotted];
m2_1280 -> n78  [key=2, style=dotted];
m2_1281 -> m2_1282  [key=0, style=solid];
m2_1281 -> m2_24  [key=2, style=dotted];
m2_1282 -> m2_1283  [key=0, style=solid];
m2_1282 -> m2_22  [key=2, style=dotted];
m2_1282 -> n78  [key=2, style=dotted];
m2_1283 -> m2_1284  [key=0, style=solid];
m2_1283 -> m2_24  [key=2, style=dotted];
m2_1284 -> m2_1285  [key=0, style=solid];
m2_1284 -> m2_22  [key=2, style=dotted];
m2_1284 -> m2_77  [key=2, style=dotted];
m2_1285 -> m2_1263  [key=0, style=bold, color=blue];
m2_1573 -> m2_1610  [key=0, style=solid];
m2_1610 -> m2_1611  [key=0, style=solid];
m2_1611 -> m2_1573  [key=0, style=bold, color=blue];
m2_86 -> m2_87  [key=0, style=solid];
m2_87 -> m2_88  [key=0, style=solid];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_20  [key=2, style=dotted];
m2_88 -> m2_62  [key=2, style=dotted];
m2_88 -> m2_103  [key=2, style=dotted];
m2_88 -> m2_104  [key=2, style=dotted];
m2_88 -> m2_90  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_91  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_93  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_94  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_95  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_96  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_97  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_88 -> m2_101  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_84  [key=2, style=dotted];
m2_89 -> n78  [key=2, style=dotted];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_84  [key=2, style=dotted];
m2_90 -> n78  [key=2, style=dotted];
m2_91 -> m2_92  [key=0, style=solid];
m2_91 -> m2_84  [key=2, style=dotted];
m2_91 -> n78  [key=2, style=dotted];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_24  [key=2, style=dotted];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_24  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_94 -> m2_84  [key=2, style=dotted];
m2_94 -> n78  [key=2, style=dotted];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_24  [key=2, style=dotted];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_84  [key=2, style=dotted];
m2_96 -> n78  [key=2, style=dotted];
m2_97 -> m2_98  [key=0, style=solid];
m2_97 -> m2_24  [key=2, style=dotted];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_84  [key=2, style=dotted];
m2_98 -> n78  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_24  [key=2, style=dotted];
m2_100 -> m2_101  [key=0, style=solid];
m2_100 -> m2_84  [key=2, style=dotted];
m2_100 -> n78  [key=2, style=dotted];
m2_101 -> m2_102  [key=0, style=solid];
m2_101 -> m2_24  [key=2, style=dotted];
m2_102 -> m2_86  [key=0, style=bold, color=blue];
m2_442 -> m2_443  [key=0, style=solid];
m2_443 -> m2_444  [key=0, style=solid];
m2_443 -> m2_20  [key=2, style=dotted];
m2_443 -> m2_21  [key=2, style=dotted];
m2_443 -> m2_445  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_443 -> m2_448  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_444 -> m2_445  [key=0, style=solid];
m2_444 -> m2_84  [key=2, style=dotted];
m2_444 -> n78  [key=2, style=dotted];
m2_445 -> m2_446  [key=0, style=solid];
m2_445 -> m2_110  [key=2, style=dotted];
m2_445 -> m2_447  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_446 -> m2_442  [key=0, style=bold, color=blue];
m2_641 -> m2_642  [key=0, style=solid];
m2_642 -> m2_643  [key=0, style=solid];
m2_643 -> m2_644  [key=0, style=solid];
m2_643 -> m2_316  [key=2, style=dotted];
m2_644 -> m2_645  [key=0, style=solid];
m2_644 -> m2_20  [key=2, style=dotted];
m2_644 -> m2_21  [key=2, style=dotted];
m2_644 -> m2_646  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_647  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_648  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_649  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_650  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_651  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_652  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_653  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_644 -> m2_654  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_645 -> m2_646  [key=0, style=solid];
m2_645 -> m2_22  [key=2, style=dotted];
m2_646 -> m2_647  [key=0, style=solid];
m2_646 -> m2_24  [key=2, style=dotted];
m2_647 -> m2_648  [key=0, style=solid];
m2_647 -> m2_22  [key=2, style=dotted];
m2_648 -> m2_649  [key=0, style=solid];
m2_648 -> m2_24  [key=2, style=dotted];
m2_649 -> m2_650  [key=0, style=solid];
m2_649 -> m2_24  [key=2, style=dotted];
m2_650 -> m2_651  [key=0, style=solid];
m2_650 -> m2_37  [key=2, style=dotted];
m2_650 -> m2_24  [key=2, style=dotted];
m2_651 -> m2_652  [key=0, style=solid];
m2_651 -> m2_22  [key=2, style=dotted];
m2_651 -> n78  [key=2, style=dotted];
m2_652 -> m2_653  [key=0, style=solid];
m2_652 -> m2_24  [key=2, style=dotted];
m2_653 -> m2_654  [key=0, style=solid];
m2_653 -> m2_22  [key=2, style=dotted];
m2_653 -> m2_77  [key=2, style=dotted];
m2_654 -> m2_655  [key=0, style=solid];
m2_654 -> m2_24  [key=2, style=dotted];
m2_655 -> m2_641  [key=0, style=bold, color=blue];
m2_1355 -> m2_1356  [key=0, style=solid];
m2_1356 -> m2_1357  [key=0, style=solid];
m2_1356 -> m2_20  [key=2, style=dotted];
m2_1356 -> m2_21  [key=2, style=dotted];
m2_1356 -> m2_1358  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1356 -> m2_1359  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1356 -> m2_1362  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1357 -> m2_1358  [key=0, style=solid];
m2_1357 -> m2_84  [key=2, style=dotted];
m2_1357 -> n78  [key=2, style=dotted];
m2_1358 -> m2_1359  [key=0, style=solid];
m2_1358 -> m2_84  [key=2, style=dotted];
m2_1358 -> n78  [key=2, style=dotted];
m2_1359 -> m2_1360  [key=0, style=solid];
m2_1359 -> m2_110  [key=2, style=dotted];
m2_1359 -> m2_1361  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1360 -> m2_1355  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_20  [key=2, style=dotted];
m2_27 -> m2_21  [key=2, style=dotted];
m2_27 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_27 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_27 -> m2_31  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_27 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_22  [key=2, style=dotted];
m2_28 -> n78  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_22  [key=2, style=dotted];
m2_29 -> n78  [key=2, style=dotted];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_22  [key=2, style=dotted];
m2_30 -> n78  [key=2, style=dotted];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_24  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_37  [key=2, style=dotted];
m2_32 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label=s];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_24  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_38  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_24  [key=2, style=dotted];
m2_36 -> m2_25  [key=0, style=bold, color=blue];
m2_776 -> m2_777  [key=0, style=solid];
m2_777 -> m2_778  [key=0, style=solid];
m2_777 -> m2_21  [key=2, style=dotted];
m2_778 -> m2_779  [key=0, style=solid];
m2_778 -> m2_20  [key=2, style=dotted];
m2_778 -> m2_780  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_781  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_782  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_783  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_784  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_785  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_786  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_787  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_788  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_789  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_790  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_791  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_792  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_793  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_794  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_778 -> m2_795  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_779 -> m2_780  [key=0, style=solid];
m2_779 -> m2_22  [key=2, style=dotted];
m2_779 -> n78  [key=2, style=dotted];
m2_780 -> m2_781  [key=0, style=solid];
m2_780 -> m2_24  [key=2, style=dotted];
m2_781 -> m2_782  [key=0, style=solid];
m2_781 -> m2_22  [key=2, style=dotted];
m2_782 -> m2_783  [key=0, style=solid];
m2_782 -> m2_24  [key=2, style=dotted];
m2_783 -> m2_784  [key=0, style=solid];
m2_783 -> m2_24  [key=2, style=dotted];
m2_784 -> m2_785  [key=0, style=solid];
m2_784 -> m2_24  [key=2, style=dotted];
m2_785 -> m2_786  [key=0, style=solid];
m2_785 -> m2_22  [key=2, style=dotted];
m2_786 -> m2_787  [key=0, style=solid];
m2_786 -> m2_24  [key=2, style=dotted];
m2_787 -> m2_788  [key=0, style=solid];
m2_787 -> m2_24  [key=2, style=dotted];
m2_788 -> m2_789  [key=0, style=solid];
m2_788 -> m2_24  [key=2, style=dotted];
m2_789 -> m2_790  [key=0, style=solid];
m2_789 -> m2_22  [key=2, style=dotted];
m2_790 -> m2_791  [key=0, style=solid];
m2_790 -> m2_24  [key=2, style=dotted];
m2_791 -> m2_792  [key=0, style=solid];
m2_791 -> m2_24  [key=2, style=dotted];
m2_792 -> m2_793  [key=0, style=solid];
m2_792 -> m2_24  [key=2, style=dotted];
m2_793 -> m2_794  [key=0, style=solid];
m2_793 -> m2_22  [key=2, style=dotted];
m2_793 -> n78  [key=2, style=dotted];
m2_794 -> m2_795  [key=0, style=solid];
m2_794 -> m2_24  [key=2, style=dotted];
m2_795 -> m2_796  [key=0, style=solid];
m2_795 -> m2_22  [key=2, style=dotted];
m2_795 -> m2_77  [key=2, style=dotted];
m2_796 -> m2_776  [key=0, style=bold, color=blue];
m2_827 -> m2_828  [key=0, style=solid];
m2_828 -> m2_829  [key=0, style=solid];
m2_828 -> m2_20  [key=2, style=dotted];
m2_828 -> m2_21  [key=2, style=dotted];
m2_828 -> m2_830  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_829 -> m2_830  [key=0, style=solid];
m2_829 -> m2_832  [key=2, style=dotted];
m2_829 -> m2_441  [key=2, style=dotted];
m2_830 -> m2_831  [key=0, style=solid];
m2_830 -> m2_24  [key=2, style=dotted];
m2_831 -> m2_827  [key=0, style=bold, color=blue];
m2_386 -> m2_387  [key=0, style=solid];
m2_387 -> m2_388  [key=0, style=solid];
m2_388 -> m2_389  [key=0, style=solid];
m2_388 -> m2_20  [key=2, style=dotted];
m2_388 -> m2_21  [key=2, style=dotted];
m2_388 -> m2_392  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_388 -> m2_394  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_388 -> m2_395  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_388 -> m2_396  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_389 -> m2_390  [key=0, style=solid];
m2_389 -> m2_130  [key=2, style=dotted];
m2_392 -> m2_393  [key=0, style=solid];
m2_392 -> m2_22  [key=2, style=dotted];
m2_392 -> n78  [key=2, style=dotted];
m2_394 -> m2_395  [key=0, style=solid];
m2_394 -> m2_22  [key=2, style=dotted];
m2_394 -> n78  [key=2, style=dotted];
m2_395 -> m2_396  [key=0, style=solid];
m2_395 -> m2_24  [key=2, style=dotted];
m2_396 -> m2_397  [key=0, style=solid];
m2_396 -> m2_24  [key=2, style=dotted];
m2_390 -> m2_391  [key=0, style=solid];
m2_390 -> m2_393  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_391 -> m2_392  [key=0, style=solid];
m2_391 -> m2_394  [key=0, style=solid];
m2_393 -> m2_391  [key=0, style=solid];
m2_393 -> m2_393  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_397 -> m2_386  [key=0, style=bold, color=blue];
m2_671 -> m2_672  [key=0, style=solid];
m2_672 -> m2_673  [key=0, style=solid];
m2_673 -> m2_674  [key=0, style=solid];
m2_673 -> m2_20  [key=2, style=dotted];
m2_673 -> m2_21  [key=2, style=dotted];
m2_673 -> m2_675  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_676  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_677  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_678  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_679  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_680  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_681  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_682  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_683  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_684  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_685  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_686  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_687  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_688  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_689  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_690  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_691  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_692  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_693  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_694  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_695  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_696  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_697  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_698  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_699  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_700  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_701  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_702  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_703  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_704  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_705  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_706  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_707  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_708  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_709  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_710  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_711  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_712  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_713  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_714  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_715  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_716  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_717  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_718  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_719  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_720  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_721  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_722  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_723  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_724  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_725  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_726  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_727  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_728  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_729  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_730  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_673 -> m2_731  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_674 -> m2_675  [key=0, style=solid];
m2_674 -> m2_84  [key=2, style=dotted];
m2_675 -> m2_676  [key=0, style=solid];
m2_675 -> m2_24  [key=2, style=dotted];
m2_676 -> m2_677  [key=0, style=solid];
m2_676 -> m2_84  [key=2, style=dotted];
m2_677 -> m2_678  [key=0, style=solid];
m2_677 -> m2_24  [key=2, style=dotted];
m2_678 -> m2_679  [key=0, style=solid];
m2_678 -> m2_24  [key=2, style=dotted];
m2_679 -> m2_680  [key=0, style=solid];
m2_679 -> m2_84  [key=2, style=dotted];
m2_680 -> m2_681  [key=0, style=solid];
m2_680 -> m2_24  [key=2, style=dotted];
m2_681 -> m2_682  [key=0, style=solid];
m2_681 -> m2_24  [key=2, style=dotted];
m2_682 -> m2_683  [key=0, style=solid];
m2_682 -> m2_84  [key=2, style=dotted];
m2_683 -> m2_684  [key=0, style=solid];
m2_683 -> m2_24  [key=2, style=dotted];
m2_684 -> m2_685  [key=0, style=solid];
m2_684 -> m2_24  [key=2, style=dotted];
m2_685 -> m2_686  [key=0, style=solid];
m2_685 -> m2_84  [key=2, style=dotted];
m2_686 -> m2_687  [key=0, style=solid];
m2_686 -> m2_24  [key=2, style=dotted];
m2_687 -> m2_688  [key=0, style=solid];
m2_687 -> m2_24  [key=2, style=dotted];
m2_688 -> m2_689  [key=0, style=solid];
m2_688 -> m2_84  [key=2, style=dotted];
m2_689 -> m2_690  [key=0, style=solid];
m2_689 -> m2_24  [key=2, style=dotted];
m2_690 -> m2_691  [key=0, style=solid];
m2_690 -> m2_24  [key=2, style=dotted];
m2_691 -> m2_692  [key=0, style=solid];
m2_691 -> m2_84  [key=2, style=dotted];
m2_692 -> m2_693  [key=0, style=solid];
m2_692 -> m2_24  [key=2, style=dotted];
m2_693 -> m2_694  [key=0, style=solid];
m2_693 -> m2_24  [key=2, style=dotted];
m2_694 -> m2_695  [key=0, style=solid];
m2_694 -> m2_84  [key=2, style=dotted];
m2_695 -> m2_696  [key=0, style=solid];
m2_695 -> m2_24  [key=2, style=dotted];
m2_696 -> m2_697  [key=0, style=solid];
m2_696 -> m2_24  [key=2, style=dotted];
m2_697 -> m2_698  [key=0, style=solid];
m2_697 -> m2_84  [key=2, style=dotted];
m2_698 -> m2_699  [key=0, style=solid];
m2_698 -> m2_24  [key=2, style=dotted];
m2_699 -> m2_700  [key=0, style=solid];
m2_699 -> m2_24  [key=2, style=dotted];
m2_700 -> m2_701  [key=0, style=solid];
m2_700 -> m2_84  [key=2, style=dotted];
m2_701 -> m2_702  [key=0, style=solid];
m2_701 -> m2_24  [key=2, style=dotted];
m2_702 -> m2_703  [key=0, style=solid];
m2_702 -> m2_24  [key=2, style=dotted];
m2_703 -> m2_704  [key=0, style=solid];
m2_703 -> m2_84  [key=2, style=dotted];
m2_704 -> m2_705  [key=0, style=solid];
m2_704 -> m2_24  [key=2, style=dotted];
m2_705 -> m2_706  [key=0, style=solid];
m2_705 -> m2_24  [key=2, style=dotted];
m2_706 -> m2_707  [key=0, style=solid];
m2_706 -> m2_84  [key=2, style=dotted];
m2_707 -> m2_708  [key=0, style=solid];
m2_707 -> m2_24  [key=2, style=dotted];
m2_708 -> m2_709  [key=0, style=solid];
m2_708 -> m2_24  [key=2, style=dotted];
m2_709 -> m2_710  [key=0, style=solid];
m2_709 -> m2_84  [key=2, style=dotted];
m2_710 -> m2_711  [key=0, style=solid];
m2_710 -> m2_24  [key=2, style=dotted];
m2_711 -> m2_712  [key=0, style=solid];
m2_711 -> m2_24  [key=2, style=dotted];
m2_712 -> m2_713  [key=0, style=solid];
m2_712 -> m2_84  [key=2, style=dotted];
m2_713 -> m2_714  [key=0, style=solid];
m2_713 -> m2_24  [key=2, style=dotted];
m2_714 -> m2_715  [key=0, style=solid];
m2_714 -> m2_24  [key=2, style=dotted];
m2_715 -> m2_716  [key=0, style=solid];
m2_715 -> m2_84  [key=2, style=dotted];
m2_716 -> m2_717  [key=0, style=solid];
m2_716 -> m2_24  [key=2, style=dotted];
m2_717 -> m2_718  [key=0, style=solid];
m2_717 -> m2_24  [key=2, style=dotted];
m2_718 -> m2_719  [key=0, style=solid];
m2_718 -> m2_84  [key=2, style=dotted];
m2_719 -> m2_720  [key=0, style=solid];
m2_719 -> m2_24  [key=2, style=dotted];
m2_720 -> m2_721  [key=0, style=solid];
m2_720 -> m2_24  [key=2, style=dotted];
m2_721 -> m2_722  [key=0, style=solid];
m2_721 -> m2_84  [key=2, style=dotted];
m2_722 -> m2_723  [key=0, style=solid];
m2_722 -> m2_24  [key=2, style=dotted];
m2_723 -> m2_724  [key=0, style=solid];
m2_723 -> m2_24  [key=2, style=dotted];
m2_724 -> m2_725  [key=0, style=solid];
m2_724 -> m2_84  [key=2, style=dotted];
m2_725 -> m2_726  [key=0, style=solid];
m2_725 -> m2_24  [key=2, style=dotted];
m2_726 -> m2_727  [key=0, style=solid];
m2_726 -> m2_24  [key=2, style=dotted];
m2_727 -> m2_728  [key=0, style=solid];
m2_727 -> m2_84  [key=2, style=dotted];
m2_728 -> m2_729  [key=0, style=solid];
m2_728 -> m2_24  [key=2, style=dotted];
m2_729 -> m2_730  [key=0, style=solid];
m2_729 -> m2_24  [key=2, style=dotted];
m2_730 -> m2_731  [key=0, style=solid];
m2_730 -> m2_84  [key=2, style=dotted];
m2_731 -> m2_732  [key=0, style=solid];
m2_731 -> m2_24  [key=2, style=dotted];
m2_732 -> m2_671  [key=0, style=bold, color=blue];
m2_1027 -> m2_1028  [key=0, style=solid];
m2_1028 -> m2_1029  [key=0, style=solid];
m2_1029 -> m2_1030  [key=0, style=solid];
m2_1029 -> m2_20  [key=2, style=dotted];
m2_1029 -> m2_21  [key=2, style=dotted];
m2_1029 -> m2_1031  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1032  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1033  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1034  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1035  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1036  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1037  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1038  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1040  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1029 -> m2_1041  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1030 -> m2_1031  [key=0, style=solid];
m2_1030 -> m2_1026  [key=2, style=dotted];
m2_1031 -> m2_1032  [key=0, style=solid];
m2_1031 -> m2_22  [key=2, style=dotted];
m2_1031 -> n78  [key=2, style=dotted];
m2_1032 -> m2_1033  [key=0, style=solid];
m2_1032 -> m2_24  [key=2, style=dotted];
m2_1033 -> m2_1034  [key=0, style=solid];
m2_1033 -> m2_22  [key=2, style=dotted];
m2_1033 -> n78  [key=2, style=dotted];
m2_1034 -> m2_1035  [key=0, style=solid];
m2_1034 -> m2_24  [key=2, style=dotted];
m2_1035 -> m2_1036  [key=0, style=solid];
m2_1035 -> m2_850  [key=2, style=dotted];
m2_1036 -> m2_1037  [key=0, style=solid];
m2_1036 -> m2_24  [key=2, style=dotted];
m2_1037 -> m2_1038  [key=0, style=solid];
m2_1037 -> m2_24  [key=2, style=dotted];
m2_1038 -> m2_1039  [key=0, style=solid];
m2_1040 -> m2_1041  [key=0, style=solid];
m2_1040 -> m2_22  [key=2, style=dotted];
m2_1040 -> n78  [key=2, style=dotted];
m2_1041 -> m2_1042  [key=0, style=solid];
m2_1041 -> m2_24  [key=2, style=dotted];
m2_1039 -> m2_1040  [key=0, style=solid];
m2_1039 -> m2_1009  [key=2, style=dotted];
m2_1039 -> m2_24  [key=2, style=dotted];
m2_1039 -> m2_1039  [key=1, style=dashed, color=darkseagreen4, label=dt];
m2_1042 -> m2_1027  [key=0, style=bold, color=blue];
m2_1192 -> m2_1193  [key=0, style=solid];
m2_1193 -> m2_1194  [key=0, style=solid];
m2_1194 -> m2_1195  [key=0, style=solid];
m2_1194 -> m2_20  [key=2, style=dotted];
m2_1194 -> m2_21  [key=2, style=dotted];
m2_1194 -> m2_1196  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1194 -> m2_1197  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1195 -> m2_1196  [key=0, style=solid];
m2_1195 -> m2_22  [key=2, style=dotted];
m2_1195 -> n78  [key=2, style=dotted];
m2_1196 -> m2_1197  [key=0, style=solid];
m2_1196 -> m2_22  [key=2, style=dotted];
m2_1196 -> n78  [key=2, style=dotted];
m2_1197 -> m2_1198  [key=0, style=solid];
m2_1197 -> m2_22  [key=2, style=dotted];
m2_1197 -> m2_77  [key=2, style=dotted];
m2_1198 -> m2_1192  [key=0, style=bold, color=blue];
m2_403 -> m2_404  [key=0, style=solid];
m2_404 -> m2_405  [key=0, style=solid];
m2_404 -> m2_20  [key=2, style=dotted];
m2_404 -> m2_21  [key=2, style=dotted];
m2_404 -> m2_408  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_405 -> m2_406  [key=0, style=solid];
m2_405 -> m2_110  [key=2, style=dotted];
m2_405 -> m2_407  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_406 -> m2_403  [key=0, style=bold, color=blue];
m2_1619 -> m2_1620  [key=0, style=solid];
m2_1619 -> m2_1622  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_1620 -> m2_1621  [key=0, style=solid];
m2_1622 -> m2_1623  [key=0, style=solid];
m2_1621 -> m2_1622  [key=0, style=solid];
m2_1623 -> m2_1619  [key=0, style=bold, color=blue];
m2_344 -> m2_345  [key=0, style=solid];
m2_345 -> m2_346  [key=0, style=solid];
m2_346 -> m2_347  [key=0, style=solid];
m2_346 -> m2_20  [key=2, style=dotted];
m2_346 -> m2_62  [key=2, style=dotted];
m2_346 -> m2_103  [key=2, style=dotted];
m2_346 -> m2_104  [key=2, style=dotted];
m2_346 -> m2_348  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_349  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_350  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_351  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_352  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_353  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_354  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_355  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_356  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_357  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_358  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_359  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_360  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_361  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_362  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_363  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_364  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_365  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_366  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_367  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_368  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_369  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_370  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_371  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_372  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_346 -> m2_373  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_347 -> m2_348  [key=0, style=solid];
m2_347 -> m2_22  [key=2, style=dotted];
m2_347 -> n78  [key=2, style=dotted];
m2_348 -> m2_349  [key=0, style=solid];
m2_348 -> m2_24  [key=2, style=dotted];
m2_349 -> m2_350  [key=0, style=solid];
m2_349 -> m2_22  [key=2, style=dotted];
m2_349 -> n78  [key=2, style=dotted];
m2_350 -> m2_351  [key=0, style=solid];
m2_350 -> m2_24  [key=2, style=dotted];
m2_351 -> m2_352  [key=0, style=solid];
m2_351 -> m2_22  [key=2, style=dotted];
m2_351 -> n78  [key=2, style=dotted];
m2_352 -> m2_353  [key=0, style=solid];
m2_352 -> m2_24  [key=2, style=dotted];
m2_353 -> m2_354  [key=0, style=solid];
m2_353 -> m2_22  [key=2, style=dotted];
m2_353 -> n78  [key=2, style=dotted];
m2_354 -> m2_355  [key=0, style=solid];
m2_354 -> m2_24  [key=2, style=dotted];
m2_355 -> m2_356  [key=0, style=solid];
m2_355 -> m2_22  [key=2, style=dotted];
m2_355 -> n78  [key=2, style=dotted];
m2_356 -> m2_357  [key=0, style=solid];
m2_356 -> m2_24  [key=2, style=dotted];
m2_357 -> m2_358  [key=0, style=solid];
m2_357 -> m2_22  [key=2, style=dotted];
m2_357 -> n78  [key=2, style=dotted];
m2_358 -> m2_359  [key=0, style=solid];
m2_358 -> m2_24  [key=2, style=dotted];
m2_359 -> m2_360  [key=0, style=solid];
m2_359 -> m2_22  [key=2, style=dotted];
m2_359 -> n78  [key=2, style=dotted];
m2_360 -> m2_361  [key=0, style=solid];
m2_360 -> m2_24  [key=2, style=dotted];
m2_361 -> m2_362  [key=0, style=solid];
m2_361 -> m2_22  [key=2, style=dotted];
m2_361 -> n78  [key=2, style=dotted];
m2_362 -> m2_363  [key=0, style=solid];
m2_362 -> m2_24  [key=2, style=dotted];
m2_363 -> m2_364  [key=0, style=solid];
m2_363 -> m2_22  [key=2, style=dotted];
m2_363 -> n78  [key=2, style=dotted];
m2_364 -> m2_365  [key=0, style=solid];
m2_364 -> m2_24  [key=2, style=dotted];
m2_365 -> m2_366  [key=0, style=solid];
m2_365 -> m2_22  [key=2, style=dotted];
m2_365 -> n78  [key=2, style=dotted];
m2_366 -> m2_367  [key=0, style=solid];
m2_366 -> m2_24  [key=2, style=dotted];
m2_367 -> m2_368  [key=0, style=solid];
m2_367 -> m2_22  [key=2, style=dotted];
m2_367 -> n78  [key=2, style=dotted];
m2_368 -> m2_369  [key=0, style=solid];
m2_368 -> m2_24  [key=2, style=dotted];
m2_369 -> m2_370  [key=0, style=solid];
m2_369 -> m2_24  [key=2, style=dotted];
m2_370 -> m2_371  [key=0, style=solid];
m2_370 -> m2_22  [key=2, style=dotted];
m2_370 -> n78  [key=2, style=dotted];
m2_371 -> m2_372  [key=0, style=solid];
m2_371 -> m2_24  [key=2, style=dotted];
m2_372 -> m2_373  [key=0, style=solid];
m2_372 -> m2_24  [key=2, style=dotted];
m2_373 -> m2_374  [key=0, style=solid];
m2_373 -> m2_22  [key=2, style=dotted];
m2_373 -> m2_77  [key=2, style=dotted];
m2_374 -> m2_344  [key=0, style=bold, color=blue];
m2_566 -> m2_567  [key=0, style=solid];
m2_567 -> m2_568  [key=0, style=solid];
m2_568 -> m2_569  [key=0, style=solid];
m2_568 -> m2_20  [key=2, style=dotted];
m2_568 -> m2_21  [key=2, style=dotted];
m2_569 -> m2_569  [key=0, style=solid];
m2_569 -> m2_570  [key=0, style=solid];
m2_569 -> m2_22  [key=2, style=dotted];
m2_570 -> m2_566  [key=0, style=bold, color=blue];
m2_1215 -> m2_1216  [key=0, style=solid];
m2_1216 -> m2_1217  [key=0, style=solid];
m2_1217 -> m2_1218  [key=0, style=solid];
m2_1217 -> m2_20  [key=2, style=dotted];
m2_1217 -> m2_21  [key=2, style=dotted];
m2_1217 -> m2_1219  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1217 -> m2_1220  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1217 -> m2_1221  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1218 -> m2_1219  [key=0, style=solid];
m2_1218 -> m2_22  [key=2, style=dotted];
m2_1218 -> n78  [key=2, style=dotted];
m2_1219 -> m2_1220  [key=0, style=solid];
m2_1219 -> m2_22  [key=2, style=dotted];
m2_1219 -> n78  [key=2, style=dotted];
m2_1220 -> m2_1221  [key=0, style=solid];
m2_1220 -> m2_22  [key=2, style=dotted];
m2_1220 -> n78  [key=2, style=dotted];
m2_1221 -> m2_1222  [key=0, style=solid];
m2_1221 -> m2_22  [key=2, style=dotted];
m2_1221 -> m2_77  [key=2, style=dotted];
m2_1222 -> m2_1215  [key=0, style=bold, color=blue];
m2_297 -> m2_298  [key=0, style=solid];
m2_298 -> m2_299  [key=0, style=solid];
m2_298 -> m2_110  [key=2, style=dotted];
m2_298 -> m2_300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_299 -> m2_297  [key=0, style=bold, color=blue];
m2_435 -> m2_436  [key=0, style=solid];
m2_436 -> m2_437  [key=0, style=solid];
m2_436 -> m2_20  [key=2, style=dotted];
m2_436 -> m2_21  [key=2, style=dotted];
m2_436 -> m2_438  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_436 -> m2_439  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_437 -> m2_438  [key=0, style=solid];
m2_437 -> m2_84  [key=2, style=dotted];
m2_437 -> n78  [key=2, style=dotted];
m2_438 -> m2_439  [key=0, style=solid];
m2_438 -> m2_424  [key=2, style=dotted];
m2_438 -> m2_441  [key=2, style=dotted];
m2_439 -> m2_440  [key=0, style=solid];
m2_439 -> m2_24  [key=2, style=dotted];
m2_440 -> m2_435  [key=0, style=bold, color=blue];
m2_134 -> m2_135  [key=0, style=solid];
m2_135 -> m2_136  [key=0, style=solid];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_20  [key=2, style=dotted];
m2_136 -> m2_21  [key=2, style=dotted];
m2_137 -> m2_137  [key=0, style=solid];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_22  [key=2, style=dotted];
m2_138 -> m2_134  [key=0, style=bold, color=blue];
m2_1095 -> m2_1096  [key=0, style=solid];
m2_1096 -> m2_1097  [key=0, style=solid];
m2_1096 -> m2_20  [key=2, style=dotted];
m2_1096 -> m2_21  [key=2, style=dotted];
m2_1096 -> m2_1100  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1097 -> m2_1098  [key=0, style=solid];
m2_1097 -> m2_110  [key=2, style=dotted];
m2_1097 -> m2_1099  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1098 -> m2_1095  [key=0, style=bold, color=blue];
m2_147 -> m2_148  [key=0, style=solid];
m2_148 -> m2_149  [key=0, style=solid];
m2_149 -> m2_150  [key=0, style=solid];
m2_149 -> m2_21  [key=2, style=dotted];
m2_150 -> m2_151  [key=0, style=solid];
m2_150 -> m2_20  [key=2, style=dotted];
m2_150 -> m2_152  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_153  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_154  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_155  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_156  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_157  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_158  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_159  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_160  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_161  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_162  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_163  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_164  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_165  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_166  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_167  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_168  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_169  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_170  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_171  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_172  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_173  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_174  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_175  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_176  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_177  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_178  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_179  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_180  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_181  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_182  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_183  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_184  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_185  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_186  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_187  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_188  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_189  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_190  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_191  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_192  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_193  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_194  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_195  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_196  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_197  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_150 -> m2_198  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_130  [key=2, style=dotted];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_24  [key=2, style=dotted];
m2_153 -> m2_154  [key=0, style=solid];
m2_153 -> m2_24  [key=2, style=dotted];
m2_154 -> m2_155  [key=0, style=solid];
m2_154 -> m2_24  [key=2, style=dotted];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_22  [key=2, style=dotted];
m2_156 -> m2_157  [key=0, style=solid];
m2_156 -> m2_24  [key=2, style=dotted];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_24  [key=2, style=dotted];
m2_158 -> m2_159  [key=0, style=solid];
m2_158 -> m2_24  [key=2, style=dotted];
m2_159 -> m2_160  [key=0, style=solid];
m2_159 -> m2_22  [key=2, style=dotted];
m2_160 -> m2_161  [key=0, style=solid];
m2_160 -> m2_24  [key=2, style=dotted];
m2_161 -> m2_162  [key=0, style=solid];
m2_161 -> m2_24  [key=2, style=dotted];
m2_162 -> m2_163  [key=0, style=solid];
m2_162 -> m2_24  [key=2, style=dotted];
m2_163 -> m2_164  [key=0, style=solid];
m2_163 -> m2_24  [key=2, style=dotted];
m2_164 -> m2_165  [key=0, style=solid];
m2_164 -> m2_22  [key=2, style=dotted];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_24  [key=2, style=dotted];
m2_166 -> m2_167  [key=0, style=solid];
m2_166 -> m2_24  [key=2, style=dotted];
m2_167 -> m2_168  [key=0, style=solid];
m2_167 -> m2_24  [key=2, style=dotted];
m2_168 -> m2_169  [key=0, style=solid];
m2_168 -> m2_24  [key=2, style=dotted];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_22  [key=2, style=dotted];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_24  [key=2, style=dotted];
m2_171 -> m2_172  [key=0, style=solid];
m2_171 -> m2_24  [key=2, style=dotted];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_24  [key=2, style=dotted];
m2_173 -> m2_174  [key=0, style=solid];
m2_173 -> m2_24  [key=2, style=dotted];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_22  [key=2, style=dotted];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_24  [key=2, style=dotted];
m2_176 -> m2_177  [key=0, style=solid];
m2_176 -> m2_24  [key=2, style=dotted];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_24  [key=2, style=dotted];
m2_178 -> m2_179  [key=0, style=solid];
m2_178 -> m2_22  [key=2, style=dotted];
m2_179 -> m2_180  [key=0, style=solid];
m2_179 -> m2_24  [key=2, style=dotted];
m2_180 -> m2_181  [key=0, style=solid];
m2_180 -> m2_24  [key=2, style=dotted];
m2_181 -> m2_182  [key=0, style=solid];
m2_181 -> m2_24  [key=2, style=dotted];
m2_182 -> m2_183  [key=0, style=solid];
m2_182 -> m2_24  [key=2, style=dotted];
m2_183 -> m2_184  [key=0, style=solid];
m2_183 -> m2_24  [key=2, style=dotted];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_22  [key=2, style=dotted];
m2_185 -> m2_186  [key=0, style=solid];
m2_185 -> m2_24  [key=2, style=dotted];
m2_186 -> m2_187  [key=0, style=solid];
m2_186 -> m2_24  [key=2, style=dotted];
m2_187 -> m2_188  [key=0, style=solid];
m2_187 -> m2_24  [key=2, style=dotted];
m2_188 -> m2_189  [key=0, style=solid];
m2_188 -> m2_24  [key=2, style=dotted];
m2_189 -> m2_190  [key=0, style=solid];
m2_189 -> m2_24  [key=2, style=dotted];
m2_190 -> m2_191  [key=0, style=solid];
m2_190 -> m2_22  [key=2, style=dotted];
m2_191 -> m2_192  [key=0, style=solid];
m2_191 -> m2_24  [key=2, style=dotted];
m2_192 -> m2_193  [key=0, style=solid];
m2_192 -> m2_24  [key=2, style=dotted];
m2_193 -> m2_194  [key=0, style=solid];
m2_193 -> m2_24  [key=2, style=dotted];
m2_194 -> m2_195  [key=0, style=solid];
m2_194 -> m2_22  [key=2, style=dotted];
m2_195 -> m2_196  [key=0, style=solid];
m2_195 -> m2_24  [key=2, style=dotted];
m2_196 -> m2_197  [key=0, style=solid];
m2_196 -> m2_24  [key=2, style=dotted];
m2_197 -> m2_198  [key=0, style=solid];
m2_197 -> m2_24  [key=2, style=dotted];
m2_198 -> m2_199  [key=0, style=solid];
m2_198 -> m2_22  [key=2, style=dotted];
m2_198 -> m2_77  [key=2, style=dotted];
m2_199 -> m2_147  [key=0, style=bold, color=blue];
m2_105 -> m2_106  [key=0, style=solid];
m2_106 -> m2_107  [key=0, style=solid];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_20  [key=2, style=dotted];
m2_107 -> m2_21  [key=2, style=dotted];
m2_107 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_110  [key=2, style=dotted];
m2_108 -> m2_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_109 -> m2_105  [key=0, style=bold, color=blue];
m2_1088 -> m2_1089  [key=0, style=solid];
m2_1089 -> m2_1090  [key=0, style=solid];
m2_1089 -> m2_20  [key=2, style=dotted];
m2_1089 -> m2_21  [key=2, style=dotted];
m2_1089 -> m2_1093  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1090 -> m2_1091  [key=0, style=solid];
m2_1090 -> m2_110  [key=2, style=dotted];
m2_1090 -> m2_1092  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1091 -> m2_1088  [key=0, style=bold, color=blue];
m2_1116 -> m2_1117  [key=0, style=solid];
m2_1117 -> m2_1118  [key=0, style=solid];
m2_1118 -> m2_1119  [key=0, style=solid];
m2_1118 -> m2_20  [key=2, style=dotted];
m2_1118 -> m2_21  [key=2, style=dotted];
m2_1118 -> m2_1120  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1121  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1122  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1123  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1124  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1125  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1126  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1128  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1118 -> m2_1129  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1119 -> m2_1120  [key=0, style=solid];
m2_1119 -> m2_1026  [key=2, style=dotted];
m2_1120 -> m2_1121  [key=0, style=solid];
m2_1120 -> m2_22  [key=2, style=dotted];
m2_1120 -> n78  [key=2, style=dotted];
m2_1121 -> m2_1122  [key=0, style=solid];
m2_1121 -> m2_24  [key=2, style=dotted];
m2_1122 -> m2_1123  [key=0, style=solid];
m2_1122 -> m2_22  [key=2, style=dotted];
m2_1122 -> n78  [key=2, style=dotted];
m2_1123 -> m2_1124  [key=0, style=solid];
m2_1123 -> m2_24  [key=2, style=dotted];
m2_1124 -> m2_1125  [key=0, style=solid];
m2_1124 -> m2_832  [key=2, style=dotted];
m2_1124 -> m2_1127  [key=1, style=dashed, color=darkseagreen4, label=d];
m2_1125 -> m2_1126  [key=0, style=solid];
m2_1125 -> m2_24  [key=2, style=dotted];
m2_1126 -> m2_1127  [key=0, style=solid];
m2_1126 -> m2_24  [key=2, style=dotted];
m2_1128 -> m2_1129  [key=0, style=solid];
m2_1128 -> m2_22  [key=2, style=dotted];
m2_1128 -> n78  [key=2, style=dotted];
m2_1129 -> m2_1130  [key=0, style=solid];
m2_1129 -> m2_24  [key=2, style=dotted];
m2_1127 -> m2_1128  [key=0, style=solid];
m2_1127 -> m2_24  [key=2, style=dotted];
m2_1130 -> m2_1116  [key=0, style=bold, color=blue];
m2_1131 -> m2_1132  [key=0, style=solid];
m2_1132 -> m2_1133  [key=0, style=solid];
m2_1133 -> m2_1134  [key=0, style=solid];
m2_1133 -> m2_20  [key=2, style=dotted];
m2_1133 -> m2_21  [key=2, style=dotted];
m2_1133 -> m2_1137  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1133 -> m2_1139  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1133 -> m2_1140  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1134 -> m2_1135  [key=0, style=solid];
m2_1134 -> m2_130  [key=2, style=dotted];
m2_1137 -> m2_1138  [key=0, style=solid];
m2_1137 -> m2_22  [key=2, style=dotted];
m2_1139 -> m2_1140  [key=0, style=solid];
m2_1139 -> m2_22  [key=2, style=dotted];
m2_1139 -> n78  [key=2, style=dotted];
m2_1140 -> m2_1141  [key=0, style=solid];
m2_1140 -> m2_1142  [key=2, style=dotted];
m2_1140 -> m2_24  [key=2, style=dotted];
m2_1135 -> m2_1136  [key=0, style=solid];
m2_1135 -> m2_1138  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_1136 -> m2_1137  [key=0, style=solid];
m2_1136 -> m2_1139  [key=0, style=solid];
m2_1138 -> m2_1136  [key=0, style=solid];
m2_1138 -> m2_1138  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_1141 -> m2_1131  [key=0, style=bold, color=blue];
m2_1420 -> m2_1421  [key=0, style=solid];
m2_1421 -> m2_1422  [key=0, style=solid];
m2_1422 -> m2_1423  [key=0, style=solid];
m2_1422 -> m2_20  [key=2, style=dotted];
m2_1422 -> m2_21  [key=2, style=dotted];
m2_1422 -> m2_1424  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1425  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1450  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1426  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1427  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1428  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1429  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1430  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1431  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1432  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1433  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1434  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1435  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1436  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1437  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1453  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1438  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1439  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1440  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1441  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1442  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1443  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1444  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1445  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1446  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1422 -> m2_1447  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1423 -> m2_1424  [key=0, style=solid];
m2_1423 -> m2_22  [key=2, style=dotted];
m2_1423 -> n78  [key=2, style=dotted];
m2_1424 -> m2_1425  [key=0, style=solid];
m2_1424 -> m2_24  [key=2, style=dotted];
m2_1425 -> m2_1426  [key=0, style=solid];
m2_1425 -> m2_1259  [key=2, style=dotted];
m2_1425 -> m2_1449  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1426 -> m2_1427  [key=0, style=solid];
m2_1426 -> m2_24  [key=2, style=dotted];
m2_1427 -> m2_1428  [key=0, style=solid];
m2_1427 -> m2_22  [key=2, style=dotted];
m2_1427 -> n78  [key=2, style=dotted];
m2_1428 -> m2_1429  [key=0, style=solid];
m2_1428 -> m2_24  [key=2, style=dotted];
m2_1429 -> m2_1430  [key=0, style=solid];
m2_1429 -> m2_22  [key=2, style=dotted];
m2_1429 -> n78  [key=2, style=dotted];
m2_1430 -> m2_1431  [key=0, style=solid];
m2_1430 -> m2_24  [key=2, style=dotted];
m2_1431 -> m2_1432  [key=0, style=solid];
m2_1431 -> m2_22  [key=2, style=dotted];
m2_1431 -> n78  [key=2, style=dotted];
m2_1432 -> m2_1433  [key=0, style=solid];
m2_1432 -> m2_24  [key=2, style=dotted];
m2_1433 -> m2_1434  [key=0, style=solid];
m2_1433 -> m2_22  [key=2, style=dotted];
m2_1433 -> n78  [key=2, style=dotted];
m2_1434 -> m2_1435  [key=0, style=solid];
m2_1434 -> m2_24  [key=2, style=dotted];
m2_1435 -> m2_1436  [key=0, style=solid];
m2_1435 -> m2_22  [key=2, style=dotted];
m2_1435 -> n78  [key=2, style=dotted];
m2_1436 -> m2_1437  [key=0, style=solid];
m2_1436 -> m2_24  [key=2, style=dotted];
m2_1437 -> m2_1438  [key=0, style=solid];
m2_1437 -> m2_1259  [key=2, style=dotted];
m2_1437 -> m2_1452  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1438 -> m2_1439  [key=0, style=solid];
m2_1438 -> m2_24  [key=2, style=dotted];
m2_1439 -> m2_1440  [key=0, style=solid];
m2_1439 -> m2_22  [key=2, style=dotted];
m2_1439 -> n78  [key=2, style=dotted];
m2_1440 -> m2_1441  [key=0, style=solid];
m2_1440 -> m2_24  [key=2, style=dotted];
m2_1441 -> m2_1442  [key=0, style=solid];
m2_1441 -> m2_22  [key=2, style=dotted];
m2_1441 -> n78  [key=2, style=dotted];
m2_1442 -> m2_1443  [key=0, style=solid];
m2_1442 -> m2_24  [key=2, style=dotted];
m2_1443 -> m2_1444  [key=0, style=solid];
m2_1443 -> m2_22  [key=2, style=dotted];
m2_1443 -> n78  [key=2, style=dotted];
m2_1444 -> m2_1445  [key=0, style=solid];
m2_1444 -> m2_24  [key=2, style=dotted];
m2_1445 -> m2_1446  [key=0, style=solid];
m2_1445 -> m2_22  [key=2, style=dotted];
m2_1445 -> n78  [key=2, style=dotted];
m2_1446 -> m2_1447  [key=0, style=solid];
m2_1446 -> m2_24  [key=2, style=dotted];
m2_1447 -> m2_1448  [key=0, style=solid];
m2_1447 -> m2_22  [key=2, style=dotted];
m2_1447 -> m2_77  [key=2, style=dotted];
m2_1448 -> m2_1420  [key=0, style=bold, color=blue];
m2_865 -> m2_866  [key=0, style=solid];
m2_866 -> m2_867  [key=0, style=solid];
m2_866 -> m2_20  [key=2, style=dotted];
m2_866 -> m2_21  [key=2, style=dotted];
m2_866 -> m2_870  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_867 -> m2_868  [key=0, style=solid];
m2_867 -> m2_110  [key=2, style=dotted];
m2_867 -> m2_869  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_868 -> m2_865  [key=0, style=bold, color=blue];
m2_53 -> m2_54  [key=0, style=solid];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_60  [key=2, style=dotted];
m2_54 -> m2_61  [key=2, style=dotted];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_20  [key=2, style=dotted];
m2_55 -> m2_62  [key=2, style=dotted];
m2_55 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_22  [key=2, style=dotted];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_59 -> m2_53  [key=0, style=bold, color=blue];
m2_1102 -> m2_1103  [key=0, style=solid];
m2_1103 -> m2_1104  [key=0, style=solid];
m2_1104 -> m2_1105  [key=0, style=solid];
m2_1104 -> m2_20  [key=2, style=dotted];
m2_1104 -> m2_21  [key=2, style=dotted];
m2_1104 -> m2_1106  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1107  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1108  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1109  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1110  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1111  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1113  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1104 -> m2_1114  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1105 -> m2_1106  [key=0, style=solid];
m2_1105 -> m2_22  [key=2, style=dotted];
m2_1105 -> n78  [key=2, style=dotted];
m2_1106 -> m2_1107  [key=0, style=solid];
m2_1106 -> m2_24  [key=2, style=dotted];
m2_1107 -> m2_1108  [key=0, style=solid];
m2_1107 -> m2_22  [key=2, style=dotted];
m2_1107 -> n78  [key=2, style=dotted];
m2_1108 -> m2_1109  [key=0, style=solid];
m2_1108 -> m2_24  [key=2, style=dotted];
m2_1109 -> m2_1110  [key=0, style=solid];
m2_1109 -> m2_832  [key=2, style=dotted];
m2_1109 -> m2_1112  [key=1, style=dashed, color=darkseagreen4, label=d];
m2_1110 -> m2_1111  [key=0, style=solid];
m2_1110 -> m2_24  [key=2, style=dotted];
m2_1111 -> m2_1112  [key=0, style=solid];
m2_1111 -> m2_24  [key=2, style=dotted];
m2_1113 -> m2_1114  [key=0, style=solid];
m2_1113 -> m2_22  [key=2, style=dotted];
m2_1113 -> n78  [key=2, style=dotted];
m2_1114 -> m2_1115  [key=0, style=solid];
m2_1114 -> m2_24  [key=2, style=dotted];
m2_1112 -> m2_1113  [key=0, style=solid];
m2_1112 -> m2_24  [key=2, style=dotted];
m2_1115 -> m2_1102  [key=0, style=bold, color=blue];
m2_571 -> m2_572  [key=0, style=solid];
m2_572 -> m2_573  [key=0, style=solid];
m2_572 -> m2_608  [key=2, style=dotted];
m2_572 -> m2_599  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_573 -> m2_574  [key=0, style=solid];
m2_573 -> m2_609  [key=2, style=dotted];
m2_599 -> m2_600  [key=0, style=solid];
m2_599 -> m2_619  [key=2, style=dotted];
m2_599 -> m2_601  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_599 -> m2_606  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_574 -> m2_575  [key=0, style=solid];
m2_574 -> m2_339  [key=2, style=dotted];
m2_574 -> m2_576  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_577  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_578  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_579  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_580  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_581  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_582  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_583  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_586  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_588  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_589  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_590  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_591  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_592  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_593  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_594  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_595  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_596  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_597  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_574 -> m2_598  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m2_575 -> m2_576  [key=0, style=solid];
m2_575 -> m2_610  [key=2, style=dotted];
m2_576 -> m2_577  [key=0, style=solid];
m2_576 -> m2_611  [key=2, style=dotted];
m2_577 -> m2_578  [key=0, style=solid];
m2_577 -> m2_612  [key=2, style=dotted];
m2_578 -> m2_579  [key=0, style=solid];
m2_578 -> m2_613  [key=2, style=dotted];
m2_579 -> m2_580  [key=0, style=solid];
m2_579 -> m2_614  [key=2, style=dotted];
m2_580 -> m2_581  [key=0, style=solid];
m2_580 -> m2_613  [key=2, style=dotted];
m2_581 -> m2_582  [key=0, style=solid];
m2_581 -> m2_615  [key=2, style=dotted];
m2_582 -> m2_583  [key=0, style=solid];
m2_582 -> m2_613  [key=2, style=dotted];
m2_583 -> m2_584  [key=0, style=solid];
m2_583 -> m2_610  [key=2, style=dotted];
m2_586 -> m2_587  [key=0, style=solid];
m2_586 -> m2_614  [key=2, style=dotted];
m2_588 -> m2_589  [key=0, style=solid];
m2_588 -> m2_612  [key=2, style=dotted];
m2_589 -> m2_590  [key=0, style=solid];
m2_589 -> m2_613  [key=2, style=dotted];
m2_590 -> m2_591  [key=0, style=solid];
m2_590 -> m2_616  [key=2, style=dotted];
m2_591 -> m2_592  [key=0, style=solid];
m2_591 -> m2_617  [key=2, style=dotted];
m2_592 -> m2_593  [key=0, style=solid];
m2_592 -> m2_614  [key=2, style=dotted];
m2_593 -> m2_594  [key=0, style=solid];
m2_593 -> m2_342  [key=2, style=dotted];
m2_594 -> m2_595  [key=0, style=solid];
m2_594 -> m2_617  [key=2, style=dotted];
m2_595 -> m2_596  [key=0, style=solid];
m2_595 -> m2_615  [key=2, style=dotted];
m2_596 -> m2_597  [key=0, style=solid];
m2_596 -> m2_618  [key=2, style=dotted];
m2_597 -> m2_598  [key=0, style=solid];
m2_597 -> m2_618  [key=2, style=dotted];
m2_598 -> m2_599  [key=0, style=solid];
m2_598 -> m2_342  [key=2, style=dotted];
m2_584 -> m2_585  [key=0, style=solid];
m2_584 -> m2_586  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_584 -> m2_587  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_585 -> m2_586  [key=0, style=solid];
m2_585 -> m2_588  [key=0, style=solid];
m2_587 -> m2_585  [key=0, style=solid];
m2_587 -> m2_587  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_600 -> m2_601  [key=0, style=solid];
m2_600 -> m2_620  [key=2, style=dotted];
m2_600 -> m2_605  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m2_601 -> m2_602  [key=0, style=solid];
m2_601 -> m2_20  [key=2, style=dotted];
m2_601 -> m2_21  [key=2, style=dotted];
m2_601 -> m2_621  [key=2, style=dotted];
m2_601 -> m2_605  [key=1, style=dashed, color=darkseagreen4, label=jsonObject];
m2_606 -> m2_607  [key=0, style=solid];
m2_606 -> m2_619  [key=2, style=dotted];
m2_606 -> m2_24  [key=2, style=dotted];
m2_605 -> m2_606  [key=0, style=solid];
m2_605 -> m2_622  [key=2, style=dotted];
m2_602 -> m2_603  [key=0, style=solid];
m2_602 -> m2_608  [key=2, style=dotted];
m2_602 -> m2_606  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_603 -> m2_604  [key=0, style=solid];
m2_603 -> m2_609  [key=2, style=dotted];
m2_604 -> m2_605  [key=0, style=solid];
m2_604 -> m2_339  [key=2, style=dotted];
m2_607 -> m2_571  [key=0, style=bold, color=blue];
m2_1239 -> m2_1240  [key=0, style=solid];
m2_1240 -> m2_1241  [key=0, style=solid];
m2_1240 -> m2_20  [key=2, style=dotted];
m2_1240 -> m2_21  [key=2, style=dotted];
m2_1240 -> m2_1244  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1241 -> m2_1242  [key=0, style=solid];
m2_1241 -> m2_110  [key=2, style=dotted];
m2_1241 -> m2_1243  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1242 -> m2_1239  [key=0, style=bold, color=blue];
m2_1455 -> m2_1456  [key=0, style=solid];
m2_1456 -> m2_1457  [key=0, style=solid];
m2_1457 -> m2_1458  [key=0, style=solid];
m2_1457 -> m2_20  [key=2, style=dotted];
m2_1457 -> m2_62  [key=2, style=dotted];
m2_1457 -> m2_103  [key=2, style=dotted];
m2_1457 -> m2_104  [key=2, style=dotted];
m2_1457 -> m2_1459  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1460  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1461  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1462  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1463  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1464  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1465  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1466  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1467  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1468  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1469  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1470  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1471  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1472  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1473  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1474  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1475  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1476  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1477  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1478  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1479  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1480  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1481  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1482  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1483  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1484  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1485  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1486  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1487  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1488  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1489  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1490  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1491  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1492  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1493  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1457 -> m2_1494  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1458 -> m2_1459  [key=0, style=solid];
m2_1458 -> m2_22  [key=2, style=dotted];
m2_1458 -> n78  [key=2, style=dotted];
m2_1459 -> m2_1460  [key=0, style=solid];
m2_1459 -> m2_22  [key=2, style=dotted];
m2_1459 -> n78  [key=2, style=dotted];
m2_1460 -> m2_1461  [key=0, style=solid];
m2_1460 -> m2_24  [key=2, style=dotted];
m2_1461 -> m2_1462  [key=0, style=solid];
m2_1461 -> m2_22  [key=2, style=dotted];
m2_1461 -> n78  [key=2, style=dotted];
m2_1462 -> m2_1463  [key=0, style=solid];
m2_1462 -> m2_24  [key=2, style=dotted];
m2_1463 -> m2_1464  [key=0, style=solid];
m2_1463 -> m2_24  [key=2, style=dotted];
m2_1464 -> m2_1465  [key=0, style=solid];
m2_1464 -> m2_22  [key=2, style=dotted];
m2_1464 -> n78  [key=2, style=dotted];
m2_1465 -> m2_1466  [key=0, style=solid];
m2_1465 -> m2_24  [key=2, style=dotted];
m2_1466 -> m2_1467  [key=0, style=solid];
m2_1466 -> m2_24  [key=2, style=dotted];
m2_1467 -> m2_1468  [key=0, style=solid];
m2_1467 -> m2_22  [key=2, style=dotted];
m2_1467 -> n78  [key=2, style=dotted];
m2_1468 -> m2_1469  [key=0, style=solid];
m2_1468 -> m2_24  [key=2, style=dotted];
m2_1469 -> m2_1470  [key=0, style=solid];
m2_1469 -> m2_24  [key=2, style=dotted];
m2_1470 -> m2_1471  [key=0, style=solid];
m2_1470 -> m2_22  [key=2, style=dotted];
m2_1470 -> n78  [key=2, style=dotted];
m2_1471 -> m2_1472  [key=0, style=solid];
m2_1471 -> m2_24  [key=2, style=dotted];
m2_1472 -> m2_1473  [key=0, style=solid];
m2_1472 -> m2_24  [key=2, style=dotted];
m2_1473 -> m2_1474  [key=0, style=solid];
m2_1473 -> m2_22  [key=2, style=dotted];
m2_1473 -> n78  [key=2, style=dotted];
m2_1474 -> m2_1475  [key=0, style=solid];
m2_1474 -> m2_24  [key=2, style=dotted];
m2_1475 -> m2_1476  [key=0, style=solid];
m2_1475 -> m2_24  [key=2, style=dotted];
m2_1476 -> m2_1477  [key=0, style=solid];
m2_1476 -> m2_22  [key=2, style=dotted];
m2_1476 -> n78  [key=2, style=dotted];
m2_1477 -> m2_1478  [key=0, style=solid];
m2_1477 -> m2_24  [key=2, style=dotted];
m2_1478 -> m2_1479  [key=0, style=solid];
m2_1478 -> m2_24  [key=2, style=dotted];
m2_1479 -> m2_1480  [key=0, style=solid];
m2_1479 -> m2_22  [key=2, style=dotted];
m2_1479 -> n78  [key=2, style=dotted];
m2_1480 -> m2_1481  [key=0, style=solid];
m2_1480 -> m2_24  [key=2, style=dotted];
m2_1481 -> m2_1482  [key=0, style=solid];
m2_1481 -> m2_24  [key=2, style=dotted];
m2_1482 -> m2_1483  [key=0, style=solid];
m2_1482 -> m2_22  [key=2, style=dotted];
m2_1482 -> n78  [key=2, style=dotted];
m2_1483 -> m2_1484  [key=0, style=solid];
m2_1483 -> m2_24  [key=2, style=dotted];
m2_1484 -> m2_1485  [key=0, style=solid];
m2_1484 -> m2_24  [key=2, style=dotted];
m2_1485 -> m2_1486  [key=0, style=solid];
m2_1485 -> m2_22  [key=2, style=dotted];
m2_1485 -> n78  [key=2, style=dotted];
m2_1486 -> m2_1487  [key=0, style=solid];
m2_1486 -> m2_24  [key=2, style=dotted];
m2_1487 -> m2_1488  [key=0, style=solid];
m2_1487 -> m2_24  [key=2, style=dotted];
m2_1488 -> m2_1489  [key=0, style=solid];
m2_1488 -> m2_22  [key=2, style=dotted];
m2_1488 -> n78  [key=2, style=dotted];
m2_1489 -> m2_1490  [key=0, style=solid];
m2_1489 -> m2_24  [key=2, style=dotted];
m2_1490 -> m2_1491  [key=0, style=solid];
m2_1490 -> m2_24  [key=2, style=dotted];
m2_1491 -> m2_1492  [key=0, style=solid];
m2_1491 -> m2_22  [key=2, style=dotted];
m2_1491 -> n78  [key=2, style=dotted];
m2_1492 -> m2_1493  [key=0, style=solid];
m2_1492 -> m2_24  [key=2, style=dotted];
m2_1493 -> m2_1494  [key=0, style=solid];
m2_1493 -> m2_24  [key=2, style=dotted];
m2_1494 -> m2_1495  [key=0, style=solid];
m2_1494 -> m2_22  [key=2, style=dotted];
m2_1494 -> n78  [key=2, style=dotted];
m2_1495 -> m2_1455  [key=0, style=bold, color=blue];
m2_1155 -> m2_1156  [key=0, style=solid];
m2_1156 -> m2_1157  [key=0, style=solid];
m2_1157 -> m2_1158  [key=0, style=solid];
m2_1157 -> m2_20  [key=2, style=dotted];
m2_1157 -> m2_21  [key=2, style=dotted];
m2_1157 -> m2_1159  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1157 -> m2_1160  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1157 -> m2_1161  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1157 -> m2_1162  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1157 -> m2_1163  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1158 -> m2_1159  [key=0, style=solid];
m2_1158 -> m2_130  [key=2, style=dotted];
m2_1159 -> m2_1160  [key=0, style=solid];
m2_1159 -> m2_22  [key=2, style=dotted];
m2_1159 -> n78  [key=2, style=dotted];
m2_1160 -> m2_1161  [key=0, style=solid];
m2_1160 -> m2_24  [key=2, style=dotted];
m2_1161 -> m2_1162  [key=0, style=solid];
m2_1161 -> m2_24  [key=2, style=dotted];
m2_1162 -> m2_1163  [key=0, style=solid];
m2_1162 -> m2_22  [key=2, style=dotted];
m2_1162 -> n78  [key=2, style=dotted];
m2_1163 -> m2_1164  [key=0, style=solid];
m2_1163 -> m2_24  [key=2, style=dotted];
m2_1164 -> m2_1155  [key=0, style=bold, color=blue];
m2_1074 -> m2_1075  [key=0, style=solid];
m2_1075 -> m2_1076  [key=0, style=solid];
m2_1075 -> m2_20  [key=2, style=dotted];
m2_1075 -> m2_21  [key=2, style=dotted];
m2_1075 -> m2_1079  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1076 -> m2_1077  [key=0, style=solid];
m2_1076 -> m2_110  [key=2, style=dotted];
m2_1076 -> m2_1078  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1077 -> m2_1074  [key=0, style=bold, color=blue];
m2_398 -> m2_399  [key=0, style=solid];
m2_399 -> m2_400  [key=0, style=solid];
m2_399 -> m2_20  [key=2, style=dotted];
m2_399 -> m2_21  [key=2, style=dotted];
m2_399 -> m2_401  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_400 -> m2_401  [key=0, style=solid];
m2_400 -> m2_84  [key=2, style=dotted];
m2_400 -> n78  [key=2, style=dotted];
m2_401 -> m2_402  [key=0, style=solid];
m2_401 -> m2_24  [key=2, style=dotted];
m2_402 -> m2_398  [key=0, style=bold, color=blue];
m2_114 -> m2_115  [key=0, style=solid];
m2_115 -> m2_116  [key=0, style=solid];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_20  [key=2, style=dotted];
m2_116 -> m2_21  [key=2, style=dotted];
m2_116 -> m2_118  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_119  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_120  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_123  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_124  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_125  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_126  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_127  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_128  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_116 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_130  [key=2, style=dotted];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_22  [key=2, style=dotted];
m2_119 -> m2_120  [key=0, style=solid];
m2_119 -> m2_24  [key=2, style=dotted];
m2_120 -> m2_121  [key=0, style=solid];
m2_120 -> m2_22  [key=2, style=dotted];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_24  [key=2, style=dotted];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_22  [key=2, style=dotted];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_24  [key=2, style=dotted];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_22  [key=2, style=dotted];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_24  [key=2, style=dotted];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_22  [key=2, style=dotted];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> m2_24  [key=2, style=dotted];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_110  [key=2, style=dotted];
m2_128 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_129 -> m2_114  [key=0, style=bold, color=blue];
m2_656 -> m2_657  [key=0, style=solid];
m2_657 -> m2_658  [key=0, style=solid];
m2_658 -> m2_659  [key=0, style=solid];
m2_658 -> m2_20  [key=2, style=dotted];
m2_658 -> m2_21  [key=2, style=dotted];
m2_658 -> m2_660  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_661  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_662  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_663  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_664  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_665  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_666  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_658 -> m2_667  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_659 -> m2_660  [key=0, style=solid];
m2_659 -> m2_130  [key=2, style=dotted];
m2_660 -> m2_661  [key=0, style=solid];
m2_660 -> m2_22  [key=2, style=dotted];
m2_661 -> m2_662  [key=0, style=solid];
m2_661 -> m2_24  [key=2, style=dotted];
m2_662 -> m2_663  [key=0, style=solid];
m2_662 -> m2_22  [key=2, style=dotted];
m2_663 -> m2_664  [key=0, style=solid];
m2_663 -> m2_24  [key=2, style=dotted];
m2_664 -> m2_665  [key=0, style=solid];
m2_664 -> m2_22  [key=2, style=dotted];
m2_665 -> m2_666  [key=0, style=solid];
m2_665 -> m2_669  [key=2, style=dotted];
m2_665 -> m2_670  [key=2, style=dotted];
m2_665 -> m2_24  [key=2, style=dotted];
m2_666 -> m2_667  [key=0, style=solid];
m2_666 -> m2_22  [key=2, style=dotted];
m2_667 -> m2_668  [key=0, style=solid];
m2_667 -> m2_24  [key=2, style=dotted];
m2_668 -> m2_656  [key=0, style=bold, color=blue];
m2_200 -> m2_201  [key=0, style=solid];
m2_201 -> m2_202  [key=0, style=solid];
m2_202 -> m2_203  [key=0, style=solid];
m2_202 -> m2_21  [key=2, style=dotted];
m2_203 -> m2_204  [key=0, style=solid];
m2_203 -> m2_20  [key=2, style=dotted];
m2_203 -> m2_205  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_206  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_207  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_208  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_209  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_210  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_211  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_212  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_213  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_214  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_215  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_216  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_217  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_218  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_219  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_221  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_222  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_223  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_224  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_225  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_226  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_227  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_228  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_229  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_230  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_231  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_232  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_233  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_234  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_235  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_236  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_237  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_238  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_239  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_240  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_241  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_242  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_243  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_244  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_245  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_246  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_247  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_248  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_249  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_250  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_251  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_252  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_253  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_254  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_255  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_256  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_257  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_258  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_259  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_260  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_261  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_262  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_263  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_264  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_265  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_266  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_267  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_268  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_269  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_270  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_271  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_272  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_273  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_274  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_275  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_276  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_277  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_278  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_279  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_280  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_281  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_282  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_283  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_284  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_285  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_286  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_287  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_288  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_289  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_290  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_291  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_292  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_293  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_294  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_203 -> m2_295  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_204 -> m2_205  [key=0, style=solid];
m2_204 -> m2_24  [key=2, style=dotted];
m2_205 -> m2_206  [key=0, style=solid];
m2_205 -> m2_84  [key=2, style=dotted];
m2_206 -> m2_207  [key=0, style=solid];
m2_206 -> m2_24  [key=2, style=dotted];
m2_207 -> m2_208  [key=0, style=solid];
m2_207 -> m2_24  [key=2, style=dotted];
m2_208 -> m2_209  [key=0, style=solid];
m2_208 -> m2_24  [key=2, style=dotted];
m2_209 -> m2_210  [key=0, style=solid];
m2_209 -> m2_84  [key=2, style=dotted];
m2_210 -> m2_211  [key=0, style=solid];
m2_210 -> m2_24  [key=2, style=dotted];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> m2_24  [key=2, style=dotted];
m2_212 -> m2_213  [key=0, style=solid];
m2_212 -> m2_24  [key=2, style=dotted];
m2_213 -> m2_214  [key=0, style=solid];
m2_213 -> m2_84  [key=2, style=dotted];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_24  [key=2, style=dotted];
m2_215 -> m2_216  [key=0, style=solid];
m2_215 -> m2_24  [key=2, style=dotted];
m2_216 -> m2_217  [key=0, style=solid];
m2_216 -> m2_24  [key=2, style=dotted];
m2_217 -> m2_218  [key=0, style=solid];
m2_217 -> m2_24  [key=2, style=dotted];
m2_218 -> m2_219  [key=0, style=solid];
m2_218 -> m2_24  [key=2, style=dotted];
m2_219 -> m2_220  [key=0, style=solid];
m2_219 -> m2_84  [key=2, style=dotted];
m2_220 -> m2_221  [key=0, style=solid];
m2_220 -> m2_24  [key=2, style=dotted];
m2_221 -> m2_222  [key=0, style=solid];
m2_221 -> m2_24  [key=2, style=dotted];
m2_222 -> m2_223  [key=0, style=solid];
m2_222 -> m2_24  [key=2, style=dotted];
m2_223 -> m2_224  [key=0, style=solid];
m2_223 -> m2_84  [key=2, style=dotted];
m2_224 -> m2_225  [key=0, style=solid];
m2_224 -> m2_24  [key=2, style=dotted];
m2_225 -> m2_226  [key=0, style=solid];
m2_225 -> m2_24  [key=2, style=dotted];
m2_226 -> m2_227  [key=0, style=solid];
m2_226 -> m2_24  [key=2, style=dotted];
m2_227 -> m2_228  [key=0, style=solid];
m2_227 -> m2_84  [key=2, style=dotted];
m2_228 -> m2_229  [key=0, style=solid];
m2_228 -> m2_24  [key=2, style=dotted];
m2_229 -> m2_230  [key=0, style=solid];
m2_229 -> m2_24  [key=2, style=dotted];
m2_230 -> m2_231  [key=0, style=solid];
m2_230 -> m2_24  [key=2, style=dotted];
m2_231 -> m2_232  [key=0, style=solid];
m2_231 -> m2_24  [key=2, style=dotted];
m2_232 -> m2_233  [key=0, style=solid];
m2_232 -> m2_84  [key=2, style=dotted];
m2_233 -> m2_234  [key=0, style=solid];
m2_233 -> m2_24  [key=2, style=dotted];
m2_234 -> m2_235  [key=0, style=solid];
m2_234 -> m2_24  [key=2, style=dotted];
m2_235 -> m2_236  [key=0, style=solid];
m2_235 -> m2_24  [key=2, style=dotted];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_24  [key=2, style=dotted];
m2_237 -> m2_238  [key=0, style=solid];
m2_237 -> m2_84  [key=2, style=dotted];
m2_238 -> m2_239  [key=0, style=solid];
m2_238 -> m2_24  [key=2, style=dotted];
m2_239 -> m2_240  [key=0, style=solid];
m2_239 -> m2_24  [key=2, style=dotted];
m2_240 -> m2_241  [key=0, style=solid];
m2_240 -> m2_24  [key=2, style=dotted];
m2_241 -> m2_242  [key=0, style=solid];
m2_241 -> m2_24  [key=2, style=dotted];
m2_242 -> m2_243  [key=0, style=solid];
m2_242 -> m2_84  [key=2, style=dotted];
m2_243 -> m2_244  [key=0, style=solid];
m2_243 -> m2_24  [key=2, style=dotted];
m2_244 -> m2_245  [key=0, style=solid];
m2_244 -> m2_24  [key=2, style=dotted];
m2_245 -> m2_246  [key=0, style=solid];
m2_245 -> m2_24  [key=2, style=dotted];
m2_246 -> m2_247  [key=0, style=solid];
m2_246 -> m2_24  [key=2, style=dotted];
m2_247 -> m2_248  [key=0, style=solid];
m2_247 -> m2_84  [key=2, style=dotted];
m2_248 -> m2_249  [key=0, style=solid];
m2_248 -> m2_24  [key=2, style=dotted];
m2_249 -> m2_250  [key=0, style=solid];
m2_249 -> m2_24  [key=2, style=dotted];
m2_250 -> m2_251  [key=0, style=solid];
m2_250 -> m2_24  [key=2, style=dotted];
m2_251 -> m2_252  [key=0, style=solid];
m2_251 -> m2_24  [key=2, style=dotted];
m2_252 -> m2_253  [key=0, style=solid];
m2_252 -> m2_84  [key=2, style=dotted];
m2_253 -> m2_254  [key=0, style=solid];
m2_253 -> m2_24  [key=2, style=dotted];
m2_254 -> m2_255  [key=0, style=solid];
m2_254 -> m2_24  [key=2, style=dotted];
m2_255 -> m2_256  [key=0, style=solid];
m2_255 -> m2_24  [key=2, style=dotted];
m2_256 -> m2_257  [key=0, style=solid];
m2_256 -> m2_84  [key=2, style=dotted];
m2_257 -> m2_258  [key=0, style=solid];
m2_257 -> m2_24  [key=2, style=dotted];
m2_258 -> m2_259  [key=0, style=solid];
m2_258 -> m2_24  [key=2, style=dotted];
m2_259 -> m2_260  [key=0, style=solid];
m2_259 -> m2_24  [key=2, style=dotted];
m2_260 -> m2_261  [key=0, style=solid];
m2_260 -> m2_84  [key=2, style=dotted];
m2_261 -> m2_262  [key=0, style=solid];
m2_261 -> m2_24  [key=2, style=dotted];
m2_262 -> m2_263  [key=0, style=solid];
m2_262 -> m2_24  [key=2, style=dotted];
m2_263 -> m2_264  [key=0, style=solid];
m2_263 -> m2_24  [key=2, style=dotted];
m2_264 -> m2_265  [key=0, style=solid];
m2_264 -> m2_84  [key=2, style=dotted];
m2_265 -> m2_266  [key=0, style=solid];
m2_265 -> m2_24  [key=2, style=dotted];
m2_266 -> m2_267  [key=0, style=solid];
m2_266 -> m2_24  [key=2, style=dotted];
m2_267 -> m2_268  [key=0, style=solid];
m2_267 -> m2_24  [key=2, style=dotted];
m2_268 -> m2_269  [key=0, style=solid];
m2_268 -> m2_84  [key=2, style=dotted];
m2_269 -> m2_270  [key=0, style=solid];
m2_269 -> m2_24  [key=2, style=dotted];
m2_270 -> m2_271  [key=0, style=solid];
m2_270 -> m2_24  [key=2, style=dotted];
m2_271 -> m2_272  [key=0, style=solid];
m2_271 -> m2_24  [key=2, style=dotted];
m2_272 -> m2_273  [key=0, style=solid];
m2_272 -> m2_84  [key=2, style=dotted];
m2_273 -> m2_274  [key=0, style=solid];
m2_273 -> m2_24  [key=2, style=dotted];
m2_274 -> m2_275  [key=0, style=solid];
m2_274 -> m2_24  [key=2, style=dotted];
m2_275 -> m2_276  [key=0, style=solid];
m2_275 -> m2_24  [key=2, style=dotted];
m2_276 -> m2_277  [key=0, style=solid];
m2_276 -> m2_84  [key=2, style=dotted];
m2_277 -> m2_278  [key=0, style=solid];
m2_277 -> m2_24  [key=2, style=dotted];
m2_278 -> m2_279  [key=0, style=solid];
m2_278 -> m2_24  [key=2, style=dotted];
m2_279 -> m2_280  [key=0, style=solid];
m2_279 -> m2_24  [key=2, style=dotted];
m2_280 -> m2_281  [key=0, style=solid];
m2_280 -> m2_84  [key=2, style=dotted];
m2_281 -> m2_282  [key=0, style=solid];
m2_281 -> m2_24  [key=2, style=dotted];
m2_282 -> m2_283  [key=0, style=solid];
m2_282 -> m2_24  [key=2, style=dotted];
m2_283 -> m2_284  [key=0, style=solid];
m2_283 -> m2_24  [key=2, style=dotted];
m2_284 -> m2_285  [key=0, style=solid];
m2_284 -> m2_84  [key=2, style=dotted];
m2_285 -> m2_286  [key=0, style=solid];
m2_285 -> m2_24  [key=2, style=dotted];
m2_286 -> m2_287  [key=0, style=solid];
m2_286 -> m2_24  [key=2, style=dotted];
m2_287 -> m2_288  [key=0, style=solid];
m2_287 -> m2_24  [key=2, style=dotted];
m2_288 -> m2_289  [key=0, style=solid];
m2_288 -> m2_84  [key=2, style=dotted];
m2_289 -> m2_290  [key=0, style=solid];
m2_289 -> m2_24  [key=2, style=dotted];
m2_290 -> m2_291  [key=0, style=solid];
m2_290 -> m2_24  [key=2, style=dotted];
m2_291 -> m2_292  [key=0, style=solid];
m2_291 -> m2_24  [key=2, style=dotted];
m2_292 -> m2_293  [key=0, style=solid];
m2_292 -> m2_84  [key=2, style=dotted];
m2_293 -> m2_294  [key=0, style=solid];
m2_293 -> m2_24  [key=2, style=dotted];
m2_294 -> m2_295  [key=0, style=solid];
m2_294 -> m2_24  [key=2, style=dotted];
m2_295 -> m2_296  [key=0, style=solid];
m2_295 -> m2_24  [key=2, style=dotted];
m2_296 -> m2_200  [key=0, style=bold, color=blue];
m2_425 -> m2_426  [key=0, style=solid];
m2_426 -> m2_427  [key=0, style=solid];
m2_427 -> m2_428  [key=0, style=solid];
m2_427 -> m2_61  [key=2, style=dotted];
m2_428 -> m2_429  [key=0, style=solid];
m2_428 -> m2_20  [key=2, style=dotted];
m2_428 -> m2_21  [key=2, style=dotted];
m2_428 -> m2_431  [key=2, style=dotted];
m2_428 -> m2_433  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_429 -> m2_430  [key=0, style=solid];
m2_429 -> m2_110  [key=2, style=dotted];
m2_429 -> m2_432  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_430 -> m2_425  [key=0, style=bold, color=blue];
m2_1246 -> m2_1247  [key=0, style=solid];
m2_1247 -> m2_1248  [key=0, style=solid];
m2_1248 -> m2_1249  [key=0, style=solid];
m2_1248 -> m2_20  [key=2, style=dotted];
m2_1248 -> m2_21  [key=2, style=dotted];
m2_1248 -> m2_1250  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1248 -> m2_1251  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1248 -> m2_1252  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1249 -> m2_1250  [key=0, style=solid];
m2_1249 -> m2_22  [key=2, style=dotted];
m2_1249 -> n78  [key=2, style=dotted];
m2_1250 -> m2_1251  [key=0, style=solid];
m2_1250 -> m2_24  [key=2, style=dotted];
m2_1251 -> m2_1252  [key=0, style=solid];
m2_1251 -> m2_22  [key=2, style=dotted];
m2_1251 -> n78  [key=2, style=dotted];
m2_1252 -> m2_1253  [key=0, style=solid];
m2_1252 -> m2_24  [key=2, style=dotted];
m2_1253 -> m2_1246  [key=0, style=bold, color=blue];
m2_922 -> m2_923  [key=0, style=solid];
m2_923 -> m2_924  [key=0, style=solid];
m2_924 -> m2_925  [key=0, style=solid];
m2_924 -> m2_20  [key=2, style=dotted];
m2_924 -> m2_21  [key=2, style=dotted];
m2_924 -> m2_926  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_927  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_928  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_929  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_930  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_931  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_932  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_933  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_924 -> m2_934  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_925 -> m2_926  [key=0, style=solid];
m2_925 -> m2_22  [key=2, style=dotted];
m2_925 -> n78  [key=2, style=dotted];
m2_926 -> m2_927  [key=0, style=solid];
m2_926 -> m2_24  [key=2, style=dotted];
m2_927 -> m2_928  [key=0, style=solid];
m2_927 -> m2_22  [key=2, style=dotted];
m2_927 -> n78  [key=2, style=dotted];
m2_928 -> m2_929  [key=0, style=solid];
m2_928 -> m2_24  [key=2, style=dotted];
m2_929 -> m2_930  [key=0, style=solid];
m2_929 -> m2_850  [key=2, style=dotted];
m2_930 -> m2_931  [key=0, style=solid];
m2_930 -> m2_24  [key=2, style=dotted];
m2_931 -> m2_932  [key=0, style=solid];
m2_931 -> m2_24  [key=2, style=dotted];
m2_932 -> m2_933  [key=0, style=solid];
m2_932 -> m2_936  [key=2, style=dotted];
m2_932 -> m2_937  [key=2, style=dotted];
m2_932 -> m2_938  [key=2, style=dotted];
m2_932 -> m2_24  [key=2, style=dotted];
m2_933 -> m2_934  [key=0, style=solid];
m2_933 -> m2_22  [key=2, style=dotted];
m2_933 -> n78  [key=2, style=dotted];
m2_934 -> m2_935  [key=0, style=solid];
m2_934 -> m2_24  [key=2, style=dotted];
m2_935 -> m2_922  [key=0, style=bold, color=blue];
m2_541 -> m2_542  [key=0, style=solid];
m2_542 -> m2_543  [key=0, style=solid];
m2_543 -> m2_544  [key=0, style=solid];
m2_543 -> m2_21  [key=2, style=dotted];
m2_544 -> m2_545  [key=0, style=solid];
m2_544 -> m2_20  [key=2, style=dotted];
m2_544 -> m2_546  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_547  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_548  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_549  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_550  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_551  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_552  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_553  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_554  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_555  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_556  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_557  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_558  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_544 -> m2_559  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_545 -> m2_546  [key=0, style=solid];
m2_545 -> m2_24  [key=2, style=dotted];
m2_546 -> m2_547  [key=0, style=solid];
m2_546 -> m2_84  [key=2, style=dotted];
m2_547 -> m2_548  [key=0, style=solid];
m2_547 -> m2_24  [key=2, style=dotted];
m2_548 -> m2_549  [key=0, style=solid];
m2_548 -> m2_24  [key=2, style=dotted];
m2_549 -> m2_550  [key=0, style=solid];
m2_549 -> m2_84  [key=2, style=dotted];
m2_550 -> m2_551  [key=0, style=solid];
m2_550 -> m2_24  [key=2, style=dotted];
m2_551 -> m2_552  [key=0, style=solid];
m2_551 -> m2_24  [key=2, style=dotted];
m2_552 -> m2_553  [key=0, style=solid];
m2_552 -> m2_84  [key=2, style=dotted];
m2_553 -> m2_554  [key=0, style=solid];
m2_553 -> m2_24  [key=2, style=dotted];
m2_554 -> m2_555  [key=0, style=solid];
m2_554 -> m2_24  [key=2, style=dotted];
m2_555 -> m2_556  [key=0, style=solid];
m2_555 -> m2_24  [key=2, style=dotted];
m2_556 -> m2_557  [key=0, style=solid];
m2_556 -> m2_24  [key=2, style=dotted];
m2_557 -> m2_558  [key=0, style=solid];
m2_557 -> m2_84  [key=2, style=dotted];
m2_558 -> m2_559  [key=0, style=solid];
m2_558 -> m2_24  [key=2, style=dotted];
m2_559 -> m2_560  [key=0, style=solid];
m2_559 -> m2_24  [key=2, style=dotted];
m2_560 -> m2_541  [key=0, style=bold, color=blue];
m2_1332 -> m2_1333  [key=0, style=solid];
m2_1333 -> m2_1334  [key=0, style=solid];
m2_1334 -> m2_1335  [key=0, style=solid];
m2_1334 -> m2_20  [key=2, style=dotted];
m2_1334 -> m2_21  [key=2, style=dotted];
m2_1334 -> m2_1336  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1334 -> m2_1337  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1335 -> m2_1336  [key=0, style=solid];
m2_1335 -> m2_832  [key=2, style=dotted];
m2_1336 -> m2_1337  [key=0, style=solid];
m2_1336 -> m2_24  [key=2, style=dotted];
m2_1337 -> m2_1338  [key=0, style=solid];
m2_1337 -> m2_24  [key=2, style=dotted];
m2_1338 -> m2_1332  [key=0, style=bold, color=blue];
m2_1612 -> m2_1613  [key=0, style=solid];
m2_1612 -> m2_1615  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
m2_1613 -> m2_1614  [key=0, style=solid];
m2_1613 -> m2_1615  [key=0, style=solid];
m2_1615 -> m2_1616  [key=0, style=solid];
m2_1615 -> m2_1618  [key=2, style=dotted];
m2_1614 -> m2_1616  [key=0, style=solid];
m2_1614 -> m2_1617  [key=2, style=dotted];
m2_1616 -> m2_1612  [key=0, style=bold, color=blue];
m2_495 -> m2_496  [key=0, style=solid];
m2_496 -> m2_497  [key=0, style=solid];
m2_496 -> m2_20  [key=2, style=dotted];
m2_496 -> m2_21  [key=2, style=dotted];
m2_496 -> m2_498  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_499  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_500  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_501  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_502  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_503  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_504  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_505  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_496 -> m2_506  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_497 -> m2_498  [key=0, style=solid];
m2_497 -> m2_84  [key=2, style=dotted];
m2_497 -> n78  [key=2, style=dotted];
m2_498 -> m2_499  [key=0, style=solid];
m2_498 -> m2_84  [key=2, style=dotted];
m2_498 -> n78  [key=2, style=dotted];
m2_499 -> m2_500  [key=0, style=solid];
m2_499 -> m2_24  [key=2, style=dotted];
m2_500 -> m2_501  [key=0, style=solid];
m2_500 -> m2_24  [key=2, style=dotted];
m2_501 -> m2_502  [key=0, style=solid];
m2_501 -> m2_84  [key=2, style=dotted];
m2_501 -> n78  [key=2, style=dotted];
m2_502 -> m2_503  [key=0, style=solid];
m2_502 -> m2_24  [key=2, style=dotted];
m2_503 -> m2_504  [key=0, style=solid];
m2_503 -> m2_24  [key=2, style=dotted];
m2_504 -> m2_505  [key=0, style=solid];
m2_504 -> m2_84  [key=2, style=dotted];
m2_504 -> n78  [key=2, style=dotted];
m2_505 -> m2_506  [key=0, style=solid];
m2_505 -> m2_24  [key=2, style=dotted];
m2_506 -> m2_507  [key=0, style=solid];
m2_506 -> m2_84  [key=2, style=dotted];
m2_506 -> m2_77  [key=2, style=dotted];
m2_507 -> m2_495  [key=0, style=bold, color=blue];
m2_1081 -> m2_1082  [key=0, style=solid];
m2_1082 -> m2_1083  [key=0, style=solid];
m2_1082 -> m2_20  [key=2, style=dotted];
m2_1082 -> m2_21  [key=2, style=dotted];
m2_1082 -> m2_1086  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1083 -> m2_1084  [key=0, style=solid];
m2_1083 -> m2_110  [key=2, style=dotted];
m2_1083 -> m2_1085  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1084 -> m2_1081  [key=0, style=bold, color=blue];
m2_1223 -> m2_1224  [key=0, style=solid];
m2_1224 -> m2_1225  [key=0, style=solid];
m2_1225 -> m2_1226  [key=0, style=solid];
m2_1225 -> m2_20  [key=2, style=dotted];
m2_1225 -> m2_21  [key=2, style=dotted];
m2_1225 -> m2_1227  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1225 -> m2_1228  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1225 -> m2_1229  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1226 -> m2_1227  [key=0, style=solid];
m2_1226 -> m2_22  [key=2, style=dotted];
m2_1226 -> n78  [key=2, style=dotted];
m2_1227 -> m2_1228  [key=0, style=solid];
m2_1227 -> m2_24  [key=2, style=dotted];
m2_1228 -> m2_1229  [key=0, style=solid];
m2_1228 -> m2_22  [key=2, style=dotted];
m2_1228 -> n78  [key=2, style=dotted];
m2_1229 -> m2_1230  [key=0, style=solid];
m2_1229 -> m2_24  [key=2, style=dotted];
m2_1230 -> m2_1223  [key=0, style=bold, color=blue];
m2_1207 -> m2_1208  [key=0, style=solid];
m2_1208 -> m2_1209  [key=0, style=solid];
m2_1209 -> m2_1210  [key=0, style=solid];
m2_1209 -> m2_20  [key=2, style=dotted];
m2_1209 -> m2_21  [key=2, style=dotted];
m2_1209 -> m2_1213  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1210 -> m2_1211  [key=0, style=solid];
m2_1210 -> m2_110  [key=2, style=dotted];
m2_1210 -> m2_1212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1211 -> m2_1207  [key=0, style=bold, color=blue];
m2_103 -> m2_1624  [key=0, style=solid];
m2_1624 -> m2_103  [key=0, style=bold, color=blue];
m2_375 -> m2_376  [key=0, style=solid];
m2_376 -> m2_377  [key=0, style=solid];
m2_377 -> m2_378  [key=0, style=solid];
m2_377 -> m2_20  [key=2, style=dotted];
m2_377 -> m2_21  [key=2, style=dotted];
m2_377 -> m2_381  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_377 -> m2_383  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_377 -> m2_384  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_378 -> m2_379  [key=0, style=solid];
m2_378 -> m2_130  [key=2, style=dotted];
m2_381 -> m2_382  [key=0, style=solid];
m2_381 -> m2_22  [key=2, style=dotted];
m2_383 -> m2_384  [key=0, style=solid];
m2_383 -> m2_22  [key=2, style=dotted];
m2_384 -> m2_385  [key=0, style=solid];
m2_384 -> m2_24  [key=2, style=dotted];
m2_379 -> m2_380  [key=0, style=solid];
m2_379 -> m2_382  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_380 -> m2_381  [key=0, style=solid];
m2_380 -> m2_383  [key=0, style=solid];
m2_382 -> m2_380  [key=0, style=solid];
m2_382 -> m2_382  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_385 -> m2_375  [key=0, style=bold, color=blue];
m2_561 -> m2_562  [key=0, style=solid];
m2_562 -> m2_563  [key=0, style=solid];
m2_563 -> m2_564  [key=0, style=solid];
m2_563 -> m2_565  [key=2, style=dotted];
m2_564 -> m2_561  [key=0, style=bold, color=blue];
m2_1055 -> m2_1056  [key=0, style=solid];
m2_1056 -> m2_1057  [key=0, style=solid];
m2_1057 -> m2_1058  [key=0, style=solid];
m2_1057 -> m2_20  [key=2, style=dotted];
m2_1057 -> m2_21  [key=2, style=dotted];
m2_1057 -> m2_1059  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1057 -> m2_1060  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1057 -> m2_1061  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1057 -> m2_1062  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1057 -> m2_1065  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1058 -> m2_1059  [key=0, style=solid];
m2_1058 -> m2_22  [key=2, style=dotted];
m2_1058 -> n78  [key=2, style=dotted];
m2_1059 -> m2_1060  [key=0, style=solid];
m2_1059 -> m2_24  [key=2, style=dotted];
m2_1060 -> m2_1061  [key=0, style=solid];
m2_1060 -> m2_22  [key=2, style=dotted];
m2_1060 -> n78  [key=2, style=dotted];
m2_1061 -> m2_1062  [key=0, style=solid];
m2_1061 -> m2_24  [key=2, style=dotted];
m2_1062 -> m2_1063  [key=0, style=solid];
m2_1062 -> m2_110  [key=2, style=dotted];
m2_1062 -> m2_1064  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1063 -> m2_1055  [key=0, style=bold, color=blue];
m2_1637 -> m2_1638  [key=0, style=solid];
m2_1638 -> m2_1639  [key=0, style=solid];
m2_1638 -> m2_1640  [key=2, style=dotted];
m2_1639 -> m2_1637  [key=0, style=bold, color=blue];
m2_1325 -> m2_1326  [key=0, style=solid];
m2_1326 -> m2_1327  [key=0, style=solid];
m2_1327 -> m2_1328  [key=0, style=solid];
m2_1327 -> m2_20  [key=2, style=dotted];
m2_1327 -> m2_21  [key=2, style=dotted];
m2_1327 -> m2_1329  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1327 -> m2_1330  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1328 -> m2_1329  [key=0, style=solid];
m2_1328 -> m2_832  [key=2, style=dotted];
m2_1329 -> m2_1330  [key=0, style=solid];
m2_1329 -> m2_24  [key=2, style=dotted];
m2_1330 -> m2_1331  [key=0, style=solid];
m2_1330 -> m2_24  [key=2, style=dotted];
m2_1331 -> m2_1325  [key=0, style=bold, color=blue];
m2_733 -> m2_734  [key=0, style=solid];
m2_734 -> m2_735  [key=0, style=solid];
m2_735 -> m2_736  [key=0, style=solid];
m2_735 -> m2_20  [key=2, style=dotted];
m2_735 -> m2_21  [key=2, style=dotted];
m2_735 -> m2_737  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_735 -> m2_738  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_735 -> m2_739  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_735 -> m2_740  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_735 -> m2_741  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_735 -> m2_742  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_735 -> m2_745  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_736 -> m2_737  [key=0, style=solid];
m2_736 -> m2_22  [key=2, style=dotted];
m2_737 -> m2_738  [key=0, style=solid];
m2_737 -> m2_24  [key=2, style=dotted];
m2_738 -> m2_739  [key=0, style=solid];
m2_738 -> m2_22  [key=2, style=dotted];
m2_739 -> m2_740  [key=0, style=solid];
m2_739 -> m2_24  [key=2, style=dotted];
m2_740 -> m2_741  [key=0, style=solid];
m2_740 -> m2_22  [key=2, style=dotted];
m2_741 -> m2_742  [key=0, style=solid];
m2_741 -> m2_24  [key=2, style=dotted];
m2_742 -> m2_743  [key=0, style=solid];
m2_742 -> m2_110  [key=2, style=dotted];
m2_742 -> m2_744  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_743 -> m2_733  [key=0, style=bold, color=blue];
m2_1231 -> m2_1232  [key=0, style=solid];
m2_1232 -> m2_1233  [key=0, style=solid];
m2_1233 -> m2_1234  [key=0, style=solid];
m2_1233 -> m2_20  [key=2, style=dotted];
m2_1233 -> m2_21  [key=2, style=dotted];
m2_1233 -> m2_1235  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1233 -> m2_1236  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1233 -> m2_1237  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1234 -> m2_1235  [key=0, style=solid];
m2_1234 -> m2_22  [key=2, style=dotted];
m2_1234 -> n78  [key=2, style=dotted];
m2_1235 -> m2_1236  [key=0, style=solid];
m2_1235 -> m2_24  [key=2, style=dotted];
m2_1236 -> m2_1237  [key=0, style=solid];
m2_1236 -> m2_22  [key=2, style=dotted];
m2_1236 -> n78  [key=2, style=dotted];
m2_1237 -> m2_1238  [key=0, style=solid];
m2_1237 -> m2_24  [key=2, style=dotted];
m2_1238 -> m2_1231  [key=0, style=bold, color=blue];
m2_747 -> m2_748  [key=0, style=solid];
m2_748 -> m2_749  [key=0, style=solid];
m2_748 -> m2_21  [key=2, style=dotted];
m2_749 -> m2_750  [key=0, style=solid];
m2_749 -> m2_20  [key=2, style=dotted];
m2_750 -> m2_751  [key=0, style=solid];
m2_750 -> m2_755  [key=2, style=dotted];
m2_750 -> m2_752  [key=1, style=dashed, color=darkseagreen4, label=data];
m2_751 -> m2_752  [key=0, style=solid];
m2_751 -> m2_756  [key=2, style=dotted];
m2_752 -> m2_753  [key=0, style=solid];
m2_752 -> m2_757  [key=2, style=dotted];
m2_753 -> m2_754  [key=0, style=solid];
m2_753 -> m2_24  [key=2, style=dotted];
m2_754 -> m2_747  [key=0, style=bold, color=blue];
m2_310 -> m2_311  [key=0, style=solid];
m2_311 -> m2_312  [key=0, style=solid];
m2_311 -> m2_316  [key=2, style=dotted];
m2_311 -> m2_314  [key=1, style=dashed, color=darkseagreen4, label=s];
m2_312 -> m2_313  [key=0, style=solid];
m2_312 -> m2_20  [key=2, style=dotted];
m2_312 -> m2_21  [key=2, style=dotted];
m2_312 -> m2_314  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_314 -> m2_315  [key=0, style=solid];
m2_314 -> m2_24  [key=2, style=dotted];
m2_313 -> m2_314  [key=0, style=solid];
m2_313 -> m2_84  [key=2, style=dotted];
m2_315 -> m2_310  [key=0, style=bold, color=blue];
m2_1641 -> m2_1642  [key=0, style=solid];
m2_1642 -> m2_1643  [key=0, style=solid];
m2_1642 -> m2_1640  [key=2, style=dotted];
m2_1643 -> m2_1641  [key=0, style=bold, color=blue];
m2_838 -> m2_839  [key=0, style=solid];
m2_839 -> m2_840  [key=0, style=solid];
m2_839 -> m2_20  [key=2, style=dotted];
m2_839 -> m2_21  [key=2, style=dotted];
m2_839 -> m2_843  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_840 -> m2_841  [key=0, style=solid];
m2_840 -> m2_110  [key=2, style=dotted];
m2_840 -> m2_842  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_841 -> m2_838  [key=0, style=bold, color=blue];
m2_508 -> m2_509  [key=0, style=solid];
m2_509 -> m2_510  [key=0, style=solid];
m2_510 -> m2_511  [key=0, style=solid];
m2_510 -> m2_61  [key=2, style=dotted];
m2_510 -> m2_517  [key=1, style=dashed, color=darkseagreen4, label=helloWorldData];
m2_511 -> m2_512  [key=0, style=solid];
m2_511 -> m2_20  [key=2, style=dotted];
m2_511 -> m2_21  [key=2, style=dotted];
m2_511 -> m2_431  [key=2, style=dotted];
m2_511 -> m2_513  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_514  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_515  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_516  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_518  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_519  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_520  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_511 -> m2_521  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_517 -> m2_518  [key=0, style=solid];
m2_517 -> m2_523  [key=2, style=dotted];
m2_512 -> m2_513  [key=0, style=solid];
m2_512 -> m2_84  [key=2, style=dotted];
m2_512 -> n78  [key=2, style=dotted];
m2_513 -> m2_514  [key=0, style=solid];
m2_513 -> m2_24  [key=2, style=dotted];
m2_514 -> m2_515  [key=0, style=solid];
m2_514 -> m2_84  [key=2, style=dotted];
m2_514 -> n78  [key=2, style=dotted];
m2_515 -> m2_516  [key=0, style=solid];
m2_515 -> m2_24  [key=2, style=dotted];
m2_516 -> m2_517  [key=0, style=solid];
m2_516 -> m2_424  [key=2, style=dotted];
m2_518 -> m2_519  [key=0, style=solid];
m2_518 -> m2_24  [key=2, style=dotted];
m2_519 -> m2_520  [key=0, style=solid];
m2_519 -> m2_84  [key=2, style=dotted];
m2_519 -> n78  [key=2, style=dotted];
m2_520 -> m2_521  [key=0, style=solid];
m2_520 -> m2_24  [key=2, style=dotted];
m2_521 -> m2_522  [key=0, style=solid];
m2_521 -> m2_84  [key=2, style=dotted];
m2_521 -> m2_77  [key=2, style=dotted];
m2_522 -> m2_508  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_20  [key=2, style=dotted];
m2_2 -> m2_21  [key=2, style=dotted];
m2_2 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_2 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_22  [key=2, style=dotted];
m2_3 -> n78  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_24  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_22  [key=2, style=dotted];
m2_5 -> n78  [key=2, style=dotted];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_24  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_22  [key=2, style=dotted];
m2_7 -> n78  [key=2, style=dotted];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_24  [key=2, style=dotted];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_22  [key=2, style=dotted];
m2_9 -> n78  [key=2, style=dotted];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_24  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_22  [key=2, style=dotted];
m2_11 -> n78  [key=2, style=dotted];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_24  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_22  [key=2, style=dotted];
m2_13 -> n78  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_24  [key=2, style=dotted];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_24  [key=2, style=dotted];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_22  [key=2, style=dotted];
m2_16 -> n78  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_24  [key=2, style=dotted];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_24  [key=2, style=dotted];
m2_19 -> m2_0  [key=0, style=bold, color=blue];
m2_1592 -> m2_1593  [key=0, style=solid];
m2_1593 -> m2_1594  [key=0, style=solid];
m2_1593 -> m2_338  [key=2, style=dotted];
m2_1593 -> m2_1599  [key=1, style=dashed, color=darkseagreen4, label=sw];
m2_1594 -> m2_1595  [key=0, style=solid];
m2_1594 -> m2_339  [key=2, style=dotted];
m2_1594 -> m2_1596  [key=1, style=dashed, color=darkseagreen4, label=writer];
m2_1594 -> m2_1597  [key=1, style=dashed, color=darkseagreen4, label=writer];
m2_1594 -> m2_1598  [key=1, style=dashed, color=darkseagreen4, label=writer];
m2_1599 -> m2_1600  [key=0, style=solid];
m2_1599 -> m2_343  [key=2, style=dotted];
m2_1595 -> m2_1596  [key=0, style=solid];
m2_1595 -> m2_340  [key=2, style=dotted];
m2_1596 -> m2_1597  [key=0, style=solid];
m2_1596 -> m2_1609  [key=2, style=dotted];
m2_1597 -> m2_1598  [key=0, style=solid];
m2_1597 -> m2_1609  [key=2, style=dotted];
m2_1598 -> m2_1599  [key=0, style=solid];
m2_1598 -> m2_342  [key=2, style=dotted];
m2_1600 -> m2_1601  [key=0, style=solid];
m2_1600 -> m2_21  [key=2, style=dotted];
m2_1601 -> m2_1602  [key=0, style=solid];
m2_1601 -> m2_20  [key=2, style=dotted];
m2_1601 -> m2_1603  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1601 -> m2_1605  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1601 -> m2_1607  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1602 -> m2_1603  [key=0, style=solid];
m2_1602 -> m2_22  [key=2, style=dotted];
m2_1602 -> n78  [key=2, style=dotted];
m2_1603 -> m2_1604  [key=0, style=solid];
m2_1603 -> m2_832  [key=2, style=dotted];
m2_1605 -> m2_1606  [key=0, style=solid];
m2_1605 -> m2_832  [key=2, style=dotted];
m2_1607 -> m2_1608  [key=0, style=solid];
m2_1607 -> m2_22  [key=2, style=dotted];
m2_1607 -> n78  [key=2, style=dotted];
m2_1604 -> m2_1605  [key=0, style=solid];
m2_1604 -> m2_24  [key=2, style=dotted];
m2_1606 -> m2_1607  [key=0, style=solid];
m2_1606 -> m2_24  [key=2, style=dotted];
m2_1608 -> m2_1592  [key=0, style=bold, color=blue];
m2_1589 -> m2_1590  [key=0, style=solid];
m2_112 -> m2_112  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_22  [key=2, style=dotted];
m2_111 -> m2_112  [key=0, style=solid];
m2_113 -> m2_111  [key=0, style=bold, color=blue];
m2_132 -> m2_133  [key=0, style=solid];
m2_132 -> m2_22  [key=2, style=dotted];
m2_131 -> m2_132  [key=0, style=solid];
m2_133 -> m2_131  [key=0, style=bold, color=blue];
m2_145 -> m2_145  [key=0, style=solid];
m2_145 -> m2_146  [key=0, style=solid];
m2_145 -> m2_22  [key=2, style=dotted];
m2_144 -> m2_145  [key=0, style=solid];
m2_146 -> m2_144  [key=0, style=bold, color=blue];
m2_300 -> m2_301  [key=0, style=solid];
m2_301 -> m2_302  [key=0, style=solid];
m2_301 -> m2_20  [key=2, style=dotted];
m2_302 -> m2_300  [key=0, style=bold, color=blue];
m2_308 -> m2_309  [key=0, style=solid];
m2_308 -> m2_84  [key=2, style=dotted];
m2_307 -> m2_308  [key=0, style=solid];
m2_309 -> m2_307  [key=0, style=bold, color=blue];
m2_408 -> m2_409  [key=0, style=solid];
m2_408 -> m2_84  [key=2, style=dotted];
m2_407 -> m2_408  [key=0, style=solid];
m2_409 -> m2_407  [key=0, style=bold, color=blue];
m2_415 -> m2_416  [key=0, style=solid];
m2_415 -> m2_84  [key=2, style=dotted];
m2_414 -> m2_415  [key=0, style=solid];
m2_416 -> m2_414  [key=0, style=bold, color=blue];
m2_422 -> m2_423  [key=0, style=solid];
m2_422 -> m2_424  [key=2, style=dotted];
m2_421 -> m2_422  [key=0, style=solid];
m2_423 -> m2_421  [key=0, style=bold, color=blue];
m2_433 -> m2_434  [key=0, style=solid];
m2_433 -> m2_424  [key=2, style=dotted];
m2_432 -> m2_433  [key=0, style=solid];
m2_434 -> m2_432  [key=0, style=bold, color=blue];
m2_448 -> m2_449  [key=0, style=solid];
m2_448 -> m2_84  [key=2, style=dotted];
m2_447 -> m2_448  [key=0, style=solid];
m2_449 -> m2_447  [key=0, style=bold, color=blue];
m2_745 -> m2_746  [key=0, style=solid];
m2_745 -> m2_22  [key=2, style=dotted];
m2_744 -> m2_745  [key=0, style=solid];
m2_746 -> m2_744  [key=0, style=bold, color=blue];
m2_825 -> m2_826  [key=0, style=solid];
m2_825 -> m2_22  [key=2, style=dotted];
m2_824 -> m2_825  [key=0, style=solid];
m2_826 -> m2_824  [key=0, style=bold, color=blue];
m2_843 -> m2_844  [key=0, style=solid];
m2_843 -> m2_755  [key=2, style=dotted];
m2_842 -> m2_843  [key=0, style=solid];
m2_844 -> m2_842  [key=0, style=bold, color=blue];
m2_856 -> m2_857  [key=0, style=solid];
m2_856 -> m2_832  [key=2, style=dotted];
m2_855 -> m2_856  [key=0, style=solid];
m2_857 -> m2_855  [key=0, style=bold, color=blue];
m2_863 -> m2_864  [key=0, style=solid];
m2_863 -> m2_755  [key=2, style=dotted];
m2_862 -> m2_863  [key=0, style=solid];
m2_864 -> m2_862  [key=0, style=bold, color=blue];
m2_870 -> m2_871  [key=0, style=solid];
m2_870 -> m2_850  [key=2, style=dotted];
m2_869 -> m2_870  [key=0, style=solid];
m2_871 -> m2_869  [key=0, style=bold, color=blue];
m2_884 -> m2_885  [key=0, style=solid];
m2_884 -> m2_755  [key=2, style=dotted];
m2_883 -> m2_884  [key=0, style=solid];
m2_885 -> m2_883  [key=0, style=bold, color=blue];
m2_891 -> m2_892  [key=0, style=solid];
m2_891 -> m2_755  [key=2, style=dotted];
m2_890 -> m2_891  [key=0, style=solid];
m2_892 -> m2_890  [key=0, style=bold, color=blue];
m2_963 -> m2_964  [key=0, style=solid];
m2_963 -> m2_850  [key=2, style=dotted];
m2_962 -> m2_963  [key=0, style=solid];
m2_964 -> m2_962  [key=0, style=bold, color=blue];
m2_1065 -> m2_1066  [key=0, style=solid];
m2_1065 -> m2_818  [key=2, style=dotted];
m2_1064 -> m2_1065  [key=0, style=solid];
m2_1066 -> m2_1064  [key=0, style=bold, color=blue];
m2_1072 -> m2_1073  [key=0, style=solid];
m2_1072 -> m2_22  [key=2, style=dotted];
m2_1071 -> m2_1072  [key=0, style=solid];
m2_1073 -> m2_1071  [key=0, style=bold, color=blue];
m2_1079 -> m2_1080  [key=0, style=solid];
m2_1079 -> m2_22  [key=2, style=dotted];
m2_1078 -> m2_1079  [key=0, style=solid];
m2_1080 -> m2_1078  [key=0, style=bold, color=blue];
m2_1086 -> m2_1087  [key=0, style=solid];
m2_1086 -> m2_22  [key=2, style=dotted];
m2_1085 -> m2_1086  [key=0, style=solid];
m2_1087 -> m2_1085  [key=0, style=bold, color=blue];
m2_1093 -> m2_1094  [key=0, style=solid];
m2_1093 -> m2_22  [key=2, style=dotted];
m2_1092 -> m2_1093  [key=0, style=solid];
m2_1094 -> m2_1092  [key=0, style=bold, color=blue];
m2_1100 -> m2_1101  [key=0, style=solid];
m2_1100 -> m2_22  [key=2, style=dotted];
m2_1099 -> m2_1100  [key=0, style=solid];
m2_1101 -> m2_1099  [key=0, style=bold, color=blue];
m2_1205 -> m2_1206  [key=0, style=solid];
m2_1205 -> m2_22  [key=2, style=dotted];
m2_1204 -> m2_1205  [key=0, style=solid];
m2_1206 -> m2_1204  [key=0, style=bold, color=blue];
m2_1213 -> m2_1214  [key=0, style=solid];
m2_1213 -> m2_22  [key=2, style=dotted];
m2_1212 -> m2_1213  [key=0, style=solid];
m2_1214 -> m2_1212  [key=0, style=bold, color=blue];
m2_1244 -> m2_1245  [key=0, style=solid];
m2_1244 -> m2_22  [key=2, style=dotted];
m2_1243 -> m2_1244  [key=0, style=solid];
m2_1245 -> m2_1243  [key=0, style=bold, color=blue];
m2_1261 -> m2_1262  [key=0, style=solid];
m2_1261 -> m2_22  [key=2, style=dotted];
m2_1261 -> n78  [key=2, style=dotted];
m2_1260 -> m2_1261  [key=0, style=solid];
m2_1262 -> m2_1260  [key=0, style=bold, color=blue];
m2_1362 -> m2_1363  [key=0, style=solid];
m2_1362 -> m2_84  [key=2, style=dotted];
m2_1361 -> m2_1362  [key=0, style=solid];
m2_1363 -> m2_1361  [key=0, style=bold, color=blue];
m2_1418 -> m2_1419  [key=0, style=solid];
m2_1418 -> m2_22  [key=2, style=dotted];
m2_1418 -> n78  [key=2, style=dotted];
m2_1417 -> m2_1418  [key=0, style=solid];
m2_1419 -> m2_1417  [key=0, style=bold, color=blue];
m2_1450 -> m2_1451  [key=0, style=solid];
m2_1450 -> m2_22  [key=2, style=dotted];
m2_1450 -> n78  [key=2, style=dotted];
m2_1453 -> m2_1454  [key=0, style=solid];
m2_1453 -> m2_22  [key=2, style=dotted];
m2_1453 -> n78  [key=2, style=dotted];
m2_1449 -> m2_1450  [key=0, style=solid];
m2_1452 -> m2_1453  [key=0, style=solid];
m2_1451 -> m2_1449  [key=0, style=bold, color=blue];
m2_1454 -> m2_1452  [key=0, style=bold, color=blue];
m2_1575 -> m2_1576  [key=0, style=solid];
m2_1575 -> m2_22  [key=2, style=dotted];
m2_1578 -> m2_1579  [key=0, style=solid];
m2_1578 -> m2_22  [key=2, style=dotted];
m2_1581 -> m2_1582  [key=0, style=solid];
m2_1581 -> m2_22  [key=2, style=dotted];
m2_1584 -> m2_1585  [key=0, style=solid];
m2_1584 -> m2_22  [key=2, style=dotted];
m2_1587 -> m2_1588  [key=0, style=solid];
m2_1587 -> m2_22  [key=2, style=dotted];
m2_1590 -> m2_1591  [key=0, style=solid];
m2_1590 -> m2_22  [key=2, style=dotted];
m2_1574 -> m2_1575  [key=0, style=solid];
m2_1577 -> m2_1578  [key=0, style=solid];
m2_1580 -> m2_1581  [key=0, style=solid];
m2_1583 -> m2_1584  [key=0, style=solid];
m2_1586 -> m2_1587  [key=0, style=solid];
m2_1576 -> m2_1574  [key=0, style=bold, color=blue];
m2_1579 -> m2_1577  [key=0, style=bold, color=blue];
m2_1582 -> m2_1580  [key=0, style=bold, color=blue];
m2_1585 -> m2_1583  [key=0, style=bold, color=blue];
m2_1588 -> m2_1586  [key=0, style=bold, color=blue];
m2_1591 -> m2_1589  [key=0, style=bold, color=blue];
m2_1143 -> m2_1144  [key=0, style=solid];
m2_1144 -> m2_1145  [key=0, style=solid];
m2_1145 -> m2_1146  [key=0, style=solid];
m2_1145 -> m2_20  [key=2, style=dotted];
m2_1145 -> m2_21  [key=2, style=dotted];
m2_1145 -> m2_1149  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1145 -> m2_1151  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1145 -> m2_1152  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1145 -> m2_1153  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1146 -> m2_1147  [key=0, style=solid];
m2_1146 -> m2_130  [key=2, style=dotted];
m2_1149 -> m2_1150  [key=0, style=solid];
m2_1149 -> m2_22  [key=2, style=dotted];
m2_1149 -> n78  [key=2, style=dotted];
m2_1151 -> m2_1152  [key=0, style=solid];
m2_1151 -> m2_22  [key=2, style=dotted];
m2_1151 -> n78  [key=2, style=dotted];
m2_1152 -> m2_1153  [key=0, style=solid];
m2_1152 -> m2_24  [key=2, style=dotted];
m2_1153 -> m2_1154  [key=0, style=solid];
m2_1153 -> m2_22  [key=2, style=dotted];
m2_1153 -> m2_77  [key=2, style=dotted];
m2_1147 -> m2_1148  [key=0, style=solid];
m2_1147 -> m2_1150  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_1148 -> m2_1149  [key=0, style=solid];
m2_1148 -> m2_1151  [key=0, style=solid];
m2_1150 -> m2_1148  [key=0, style=solid];
m2_1150 -> m2_1150  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_1154 -> m2_1143  [key=0, style=bold, color=blue];
m2_1286 -> m2_1287  [key=0, style=solid];
m2_1287 -> m2_1288  [key=0, style=solid];
m2_1288 -> m2_1289  [key=0, style=solid];
m2_1288 -> m2_20  [key=2, style=dotted];
m2_1288 -> m2_62  [key=2, style=dotted];
m2_1288 -> m2_103  [key=2, style=dotted];
m2_1288 -> m2_104  [key=2, style=dotted];
m2_1288 -> m2_1290  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1291  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1292  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1293  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1294  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1295  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1296  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1297  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1298  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1299  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1300  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1301  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1302  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1303  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1304  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1305  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1306  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1307  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1308  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1309  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1310  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1311  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1312  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1313  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1314  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1315  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1316  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1317  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1318  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1319  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1320  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1321  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1322  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1288 -> m2_1323  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1289 -> m2_1290  [key=0, style=solid];
m2_1289 -> m2_22  [key=2, style=dotted];
m2_1289 -> n78  [key=2, style=dotted];
m2_1290 -> m2_1291  [key=0, style=solid];
m2_1290 -> m2_24  [key=2, style=dotted];
m2_1291 -> m2_1292  [key=0, style=solid];
m2_1291 -> m2_22  [key=2, style=dotted];
m2_1291 -> n78  [key=2, style=dotted];
m2_1292 -> m2_1293  [key=0, style=solid];
m2_1292 -> m2_24  [key=2, style=dotted];
m2_1293 -> m2_1294  [key=0, style=solid];
m2_1293 -> m2_22  [key=2, style=dotted];
m2_1293 -> n78  [key=2, style=dotted];
m2_1294 -> m2_1295  [key=0, style=solid];
m2_1294 -> m2_24  [key=2, style=dotted];
m2_1295 -> m2_1296  [key=0, style=solid];
m2_1295 -> m2_22  [key=2, style=dotted];
m2_1295 -> n78  [key=2, style=dotted];
m2_1296 -> m2_1297  [key=0, style=solid];
m2_1296 -> m2_24  [key=2, style=dotted];
m2_1297 -> m2_1298  [key=0, style=solid];
m2_1297 -> m2_24  [key=2, style=dotted];
m2_1298 -> m2_1299  [key=0, style=solid];
m2_1298 -> m2_22  [key=2, style=dotted];
m2_1298 -> n78  [key=2, style=dotted];
m2_1299 -> m2_1300  [key=0, style=solid];
m2_1299 -> m2_24  [key=2, style=dotted];
m2_1300 -> m2_1301  [key=0, style=solid];
m2_1300 -> m2_22  [key=2, style=dotted];
m2_1300 -> n78  [key=2, style=dotted];
m2_1301 -> m2_1302  [key=0, style=solid];
m2_1301 -> m2_24  [key=2, style=dotted];
m2_1302 -> m2_1303  [key=0, style=solid];
m2_1302 -> m2_24  [key=2, style=dotted];
m2_1303 -> m2_1304  [key=0, style=solid];
m2_1303 -> m2_22  [key=2, style=dotted];
m2_1303 -> n78  [key=2, style=dotted];
m2_1304 -> m2_1305  [key=0, style=solid];
m2_1304 -> m2_24  [key=2, style=dotted];
m2_1305 -> m2_1306  [key=0, style=solid];
m2_1305 -> m2_22  [key=2, style=dotted];
m2_1305 -> n78  [key=2, style=dotted];
m2_1306 -> m2_1307  [key=0, style=solid];
m2_1306 -> m2_24  [key=2, style=dotted];
m2_1307 -> m2_1308  [key=0, style=solid];
m2_1307 -> m2_22  [key=2, style=dotted];
m2_1307 -> n78  [key=2, style=dotted];
m2_1308 -> m2_1309  [key=0, style=solid];
m2_1308 -> m2_24  [key=2, style=dotted];
m2_1309 -> m2_1310  [key=0, style=solid];
m2_1309 -> m2_24  [key=2, style=dotted];
m2_1310 -> m2_1311  [key=0, style=solid];
m2_1310 -> m2_22  [key=2, style=dotted];
m2_1310 -> n78  [key=2, style=dotted];
m2_1311 -> m2_1312  [key=0, style=solid];
m2_1311 -> m2_24  [key=2, style=dotted];
m2_1312 -> m2_1313  [key=0, style=solid];
m2_1312 -> m2_22  [key=2, style=dotted];
m2_1312 -> n78  [key=2, style=dotted];
m2_1313 -> m2_1314  [key=0, style=solid];
m2_1313 -> m2_24  [key=2, style=dotted];
m2_1314 -> m2_1315  [key=0, style=solid];
m2_1314 -> m2_24  [key=2, style=dotted];
m2_1315 -> m2_1316  [key=0, style=solid];
m2_1315 -> m2_24  [key=2, style=dotted];
m2_1316 -> m2_1317  [key=0, style=solid];
m2_1316 -> m2_22  [key=2, style=dotted];
m2_1316 -> n78  [key=2, style=dotted];
m2_1317 -> m2_1318  [key=0, style=solid];
m2_1317 -> m2_24  [key=2, style=dotted];
m2_1318 -> m2_1319  [key=0, style=solid];
m2_1318 -> m2_22  [key=2, style=dotted];
m2_1318 -> n78  [key=2, style=dotted];
m2_1319 -> m2_1320  [key=0, style=solid];
m2_1319 -> m2_24  [key=2, style=dotted];
m2_1320 -> m2_1321  [key=0, style=solid];
m2_1320 -> m2_22  [key=2, style=dotted];
m2_1320 -> n78  [key=2, style=dotted];
m2_1321 -> m2_1322  [key=0, style=solid];
m2_1321 -> m2_24  [key=2, style=dotted];
m2_1322 -> m2_1323  [key=0, style=solid];
m2_1322 -> m2_22  [key=2, style=dotted];
m2_1322 -> n78  [key=2, style=dotted];
m2_1323 -> m2_1324  [key=0, style=solid];
m2_1323 -> m2_24  [key=2, style=dotted];
m2_1324 -> m2_1286  [key=0, style=bold, color=blue];
m2_879 -> m2_880  [key=0, style=solid];
m2_880 -> m2_881  [key=0, style=solid];
m2_880 -> m2_20  [key=2, style=dotted];
m2_880 -> m2_21  [key=2, style=dotted];
m2_880 -> m2_884  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_881 -> m2_882  [key=0, style=solid];
m2_881 -> m2_110  [key=2, style=dotted];
m2_881 -> m2_883  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_882 -> m2_879  [key=0, style=bold, color=blue];
m2_1364 -> m2_1365  [key=0, style=solid];
m2_1365 -> m2_1366  [key=0, style=solid];
m2_1366 -> m2_1367  [key=0, style=solid];
m2_1366 -> m2_1407  [key=2, style=dotted];
m2_1366 -> m2_1368  [key=1, style=dashed, color=darkseagreen4, label=d];
m2_1367 -> m2_1368  [key=0, style=solid];
m2_1367 -> m2_1026  [key=2, style=dotted];
m2_1367 -> m2_1408  [key=2, style=dotted];
m2_1367 -> m2_1409  [key=2, style=dotted];
m2_1368 -> m2_1369  [key=0, style=solid];
m2_1368 -> m2_1410  [key=2, style=dotted];
m2_1368 -> m2_1409  [key=2, style=dotted];
m2_1369 -> m2_1370  [key=0, style=solid];
m2_1369 -> m2_1388  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_1370 -> m2_1371  [key=0, style=solid];
m2_1370 -> m2_20  [key=2, style=dotted];
m2_1370 -> m2_21  [key=2, style=dotted];
m2_1370 -> m2_1372  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1373  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1374  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1375  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1376  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1377  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1378  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1379  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1380  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1381  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1382  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1383  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1384  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1385  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1386  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1370 -> m2_1387  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1389  [key=0, style=solid];
m2_1388 -> m2_20  [key=2, style=dotted];
m2_1388 -> m2_21  [key=2, style=dotted];
m2_1388 -> m2_1390  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1391  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1392  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1393  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1394  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1395  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1396  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1397  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1398  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1399  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1400  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1401  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1402  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1403  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1404  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1388 -> m2_1405  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1371 -> m2_1372  [key=0, style=solid];
m2_1371 -> m2_22  [key=2, style=dotted];
m2_1372 -> m2_1373  [key=0, style=solid];
m2_1372 -> m2_22  [key=2, style=dotted];
m2_1373 -> m2_1374  [key=0, style=solid];
m2_1373 -> m2_24  [key=2, style=dotted];
m2_1374 -> m2_1375  [key=0, style=solid];
m2_1374 -> m2_24  [key=2, style=dotted];
m2_1375 -> m2_1376  [key=0, style=solid];
m2_1375 -> m2_22  [key=2, style=dotted];
m2_1376 -> m2_1377  [key=0, style=solid];
m2_1376 -> m2_24  [key=2, style=dotted];
m2_1377 -> m2_1378  [key=0, style=solid];
m2_1377 -> m2_24  [key=2, style=dotted];
m2_1378 -> m2_1379  [key=0, style=solid];
m2_1378 -> m2_22  [key=2, style=dotted];
m2_1379 -> m2_1380  [key=0, style=solid];
m2_1379 -> m2_24  [key=2, style=dotted];
m2_1380 -> m2_1381  [key=0, style=solid];
m2_1380 -> m2_24  [key=2, style=dotted];
m2_1381 -> m2_1382  [key=0, style=solid];
m2_1381 -> m2_22  [key=2, style=dotted];
m2_1382 -> m2_1383  [key=0, style=solid];
m2_1382 -> m2_24  [key=2, style=dotted];
m2_1383 -> m2_1384  [key=0, style=solid];
m2_1383 -> m2_24  [key=2, style=dotted];
m2_1384 -> m2_1385  [key=0, style=solid];
m2_1384 -> m2_22  [key=2, style=dotted];
m2_1385 -> m2_1386  [key=0, style=solid];
m2_1385 -> m2_24  [key=2, style=dotted];
m2_1386 -> m2_1387  [key=0, style=solid];
m2_1386 -> m2_24  [key=2, style=dotted];
m2_1387 -> m2_1388  [key=0, style=solid];
m2_1387 -> m2_22  [key=2, style=dotted];
m2_1389 -> m2_1390  [key=0, style=solid];
m2_1389 -> m2_22  [key=2, style=dotted];
m2_1390 -> m2_1391  [key=0, style=solid];
m2_1390 -> m2_832  [key=2, style=dotted];
m2_1391 -> m2_1392  [key=0, style=solid];
m2_1391 -> m2_24  [key=2, style=dotted];
m2_1392 -> m2_1393  [key=0, style=solid];
m2_1392 -> m2_24  [key=2, style=dotted];
m2_1393 -> m2_1394  [key=0, style=solid];
m2_1393 -> m2_832  [key=2, style=dotted];
m2_1394 -> m2_1395  [key=0, style=solid];
m2_1394 -> m2_24  [key=2, style=dotted];
m2_1395 -> m2_1396  [key=0, style=solid];
m2_1395 -> m2_24  [key=2, style=dotted];
m2_1396 -> m2_1397  [key=0, style=solid];
m2_1396 -> m2_832  [key=2, style=dotted];
m2_1397 -> m2_1398  [key=0, style=solid];
m2_1397 -> m2_24  [key=2, style=dotted];
m2_1398 -> m2_1399  [key=0, style=solid];
m2_1398 -> m2_24  [key=2, style=dotted];
m2_1399 -> m2_1400  [key=0, style=solid];
m2_1399 -> m2_832  [key=2, style=dotted];
m2_1400 -> m2_1401  [key=0, style=solid];
m2_1400 -> m2_24  [key=2, style=dotted];
m2_1401 -> m2_1402  [key=0, style=solid];
m2_1401 -> m2_24  [key=2, style=dotted];
m2_1402 -> m2_1403  [key=0, style=solid];
m2_1402 -> m2_832  [key=2, style=dotted];
m2_1403 -> m2_1404  [key=0, style=solid];
m2_1403 -> m2_24  [key=2, style=dotted];
m2_1404 -> m2_1405  [key=0, style=solid];
m2_1404 -> m2_24  [key=2, style=dotted];
m2_1405 -> m2_1406  [key=0, style=solid];
m2_1405 -> m2_22  [key=2, style=dotted];
m2_1406 -> m2_1364  [key=0, style=bold, color=blue];
m2_1644 -> m2_1645  [key=0, style=solid];
m2_1645 -> m2_1646  [key=0, style=solid];
m2_1645 -> m2_1640  [key=2, style=dotted];
m2_1646 -> m2_1644  [key=0, style=bold, color=blue];
m2_819 -> m2_820  [key=0, style=solid];
m2_820 -> m2_821  [key=0, style=solid];
m2_820 -> m2_20  [key=2, style=dotted];
m2_820 -> m2_21  [key=2, style=dotted];
m2_820 -> m2_822  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_820 -> m2_825  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_821 -> m2_822  [key=0, style=solid];
m2_821 -> m2_22  [key=2, style=dotted];
m2_822 -> m2_823  [key=0, style=solid];
m2_822 -> m2_110  [key=2, style=dotted];
m2_822 -> m2_824  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_823 -> m2_819  [key=0, style=bold, color=blue];
m2_979 -> m2_980  [key=0, style=solid];
m2_980 -> m2_981  [key=0, style=solid];
m2_981 -> m2_982  [key=0, style=solid];
m2_981 -> m2_20  [key=2, style=dotted];
m2_981 -> m2_21  [key=2, style=dotted];
m2_981 -> m2_983  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_984  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_985  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_986  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_987  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_988  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_989  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_990  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_981 -> m2_991  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_982 -> m2_983  [key=0, style=solid];
m2_982 -> m2_22  [key=2, style=dotted];
m2_982 -> n78  [key=2, style=dotted];
m2_983 -> m2_984  [key=0, style=solid];
m2_983 -> m2_24  [key=2, style=dotted];
m2_984 -> m2_985  [key=0, style=solid];
m2_984 -> m2_22  [key=2, style=dotted];
m2_984 -> n78  [key=2, style=dotted];
m2_985 -> m2_986  [key=0, style=solid];
m2_985 -> m2_24  [key=2, style=dotted];
m2_986 -> m2_987  [key=0, style=solid];
m2_986 -> m2_850  [key=2, style=dotted];
m2_987 -> m2_988  [key=0, style=solid];
m2_987 -> m2_24  [key=2, style=dotted];
m2_988 -> m2_989  [key=0, style=solid];
m2_988 -> m2_24  [key=2, style=dotted];
m2_989 -> m2_990  [key=0, style=solid];
m2_989 -> m2_936  [key=2, style=dotted];
m2_989 -> m2_937  [key=2, style=dotted];
m2_989 -> m2_938  [key=2, style=dotted];
m2_989 -> m2_993  [key=2, style=dotted];
m2_989 -> m2_994  [key=2, style=dotted];
m2_989 -> m2_24  [key=2, style=dotted];
m2_990 -> m2_991  [key=0, style=solid];
m2_990 -> m2_22  [key=2, style=dotted];
m2_990 -> n78  [key=2, style=dotted];
m2_991 -> m2_992  [key=0, style=solid];
m2_991 -> m2_24  [key=2, style=dotted];
m2_992 -> m2_979  [key=0, style=bold, color=blue];
m2_139 -> m2_140  [key=0, style=solid];
m2_140 -> m2_141  [key=0, style=solid];
m2_141 -> m2_142  [key=0, style=solid];
m2_141 -> m2_20  [key=2, style=dotted];
m2_141 -> m2_21  [key=2, style=dotted];
m2_141 -> m2_145  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_142 -> m2_143  [key=0, style=solid];
m2_142 -> m2_110  [key=2, style=dotted];
m2_142 -> m2_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_143 -> m2_139  [key=0, style=bold, color=blue];
m2_317 -> m2_318  [key=0, style=solid];
m2_318 -> m2_319  [key=0, style=solid];
m2_318 -> m2_323  [key=1, style=dashed, color=darkseagreen4, label=valueCount];
m2_318 -> m2_331  [key=1, style=dashed, color=darkseagreen4, label=valueCount];
m2_319 -> m2_320  [key=0, style=solid];
m2_319 -> m2_338  [key=2, style=dotted];
m2_319 -> m2_327  [key=1, style=dashed, color=darkseagreen4, label=sw];
m2_323 -> m2_324  [key=0, style=solid];
m2_323 -> m2_326  [key=0, style=solid];
m2_331 -> m2_332  [key=0, style=solid];
m2_331 -> m2_335  [key=0, style=solid];
m2_320 -> m2_321  [key=0, style=solid];
m2_320 -> m2_339  [key=2, style=dotted];
m2_320 -> m2_324  [key=1, style=dashed, color=darkseagreen4, label=writer];
m2_320 -> m2_326  [key=1, style=dashed, color=darkseagreen4, label=writer];
m2_327 -> m2_328  [key=0, style=solid];
m2_327 -> m2_343  [key=2, style=dotted];
m2_321 -> m2_322  [key=0, style=solid];
m2_321 -> m2_340  [key=2, style=dotted];
m2_324 -> m2_325  [key=0, style=solid];
m2_324 -> m2_341  [key=2, style=dotted];
m2_326 -> m2_327  [key=0, style=solid];
m2_326 -> m2_342  [key=2, style=dotted];
m2_322 -> m2_323  [key=0, style=solid];
m2_322 -> m2_324  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_322 -> m2_325  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_325 -> m2_323  [key=0, style=solid];
m2_325 -> m2_325  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_328 -> m2_329  [key=0, style=solid];
m2_328 -> m2_20  [key=2, style=dotted];
m2_328 -> m2_21  [key=2, style=dotted];
m2_328 -> m2_332  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_328 -> m2_333  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_328 -> m2_335  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_328 -> m2_336  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_329 -> m2_330  [key=0, style=solid];
m2_329 -> m2_22  [key=2, style=dotted];
m2_329 -> n78  [key=2, style=dotted];
m2_332 -> m2_333  [key=0, style=solid];
m2_332 -> m2_22  [key=2, style=dotted];
m2_332 -> n78  [key=2, style=dotted];
m2_333 -> m2_334  [key=0, style=solid];
m2_333 -> m2_24  [key=2, style=dotted];
m2_335 -> m2_336  [key=0, style=solid];
m2_335 -> m2_22  [key=2, style=dotted];
m2_335 -> n78  [key=2, style=dotted];
m2_336 -> m2_337  [key=0, style=solid];
m2_336 -> m2_22  [key=2, style=dotted];
m2_336 -> m2_77  [key=2, style=dotted];
m2_330 -> m2_331  [key=0, style=solid];
m2_330 -> m2_333  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_330 -> m2_334  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_334 -> m2_331  [key=0, style=solid];
m2_334 -> m2_334  [key=1, style=dashed, color=darkseagreen4, label=i];
m2_337 -> m2_317  [key=0, style=bold, color=blue];
m2_953 -> m2_954  [key=0, style=solid];
m2_954 -> m2_955  [key=0, style=solid];
m2_955 -> m2_956  [key=0, style=solid];
m2_955 -> m2_20  [key=2, style=dotted];
m2_955 -> m2_21  [key=2, style=dotted];
m2_955 -> m2_957  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_955 -> m2_958  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_955 -> m2_959  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_955 -> m2_960  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_955 -> m2_963  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_956 -> m2_957  [key=0, style=solid];
m2_956 -> m2_22  [key=2, style=dotted];
m2_956 -> n78  [key=2, style=dotted];
m2_957 -> m2_958  [key=0, style=solid];
m2_957 -> m2_24  [key=2, style=dotted];
m2_958 -> m2_959  [key=0, style=solid];
m2_958 -> m2_22  [key=2, style=dotted];
m2_958 -> n78  [key=2, style=dotted];
m2_959 -> m2_960  [key=0, style=solid];
m2_959 -> m2_24  [key=2, style=dotted];
m2_960 -> m2_961  [key=0, style=solid];
m2_960 -> m2_110  [key=2, style=dotted];
m2_960 -> m2_962  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_961 -> m2_953  [key=0, style=bold, color=blue];
m2_851 -> m2_852  [key=0, style=solid];
m2_852 -> m2_853  [key=0, style=solid];
m2_852 -> m2_20  [key=2, style=dotted];
m2_852 -> m2_21  [key=2, style=dotted];
m2_852 -> m2_856  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_853 -> m2_854  [key=0, style=solid];
m2_853 -> m2_110  [key=2, style=dotted];
m2_853 -> m2_855  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_854 -> m2_851  [key=0, style=bold, color=blue];
m2_63 -> m2_64  [key=0, style=solid];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_75  [key=2, style=dotted];
m2_64 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label=ms];
m2_64 -> m2_68  [key=1, style=dashed, color=darkseagreen4, label=ms];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_20  [key=2, style=dotted];
m2_65 -> m2_62  [key=2, style=dotted];
m2_65 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> n78  [key=2, style=dotted];
m2_68 -> m2_69  [key=0, style=solid];
m2_68 -> m2_77  [key=2, style=dotted];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_76  [key=2, style=dotted];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_75  [key=2, style=dotted];
m2_69 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label=ms];
m2_69 -> m2_73  [key=1, style=dashed, color=darkseagreen4, label=ms];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_20  [key=2, style=dotted];
m2_70 -> m2_62  [key=2, style=dotted];
m2_70 -> m2_72  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> n78  [key=2, style=dotted];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> n78  [key=2, style=dotted];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_76  [key=2, style=dotted];
m2_74 -> m2_63  [key=0, style=bold, color=blue];
m2_909 -> m2_910  [key=0, style=solid];
m2_910 -> m2_911  [key=0, style=solid];
m2_911 -> m2_912  [key=0, style=solid];
m2_911 -> m2_20  [key=2, style=dotted];
m2_911 -> m2_21  [key=2, style=dotted];
m2_911 -> m2_913  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_914  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_915  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_916  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_917  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_918  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_919  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_911 -> m2_920  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_912 -> m2_913  [key=0, style=solid];
m2_912 -> m2_22  [key=2, style=dotted];
m2_912 -> n78  [key=2, style=dotted];
m2_913 -> m2_914  [key=0, style=solid];
m2_913 -> m2_24  [key=2, style=dotted];
m2_914 -> m2_915  [key=0, style=solid];
m2_914 -> m2_22  [key=2, style=dotted];
m2_914 -> n78  [key=2, style=dotted];
m2_915 -> m2_916  [key=0, style=solid];
m2_915 -> m2_24  [key=2, style=dotted];
m2_916 -> m2_917  [key=0, style=solid];
m2_916 -> m2_22  [key=2, style=dotted];
m2_916 -> n78  [key=2, style=dotted];
m2_917 -> m2_918  [key=0, style=solid];
m2_917 -> m2_24  [key=2, style=dotted];
m2_918 -> m2_919  [key=0, style=solid];
m2_918 -> m2_24  [key=2, style=dotted];
m2_919 -> m2_920  [key=0, style=solid];
m2_919 -> m2_22  [key=2, style=dotted];
m2_919 -> n78  [key=2, style=dotted];
m2_920 -> m2_921  [key=0, style=solid];
m2_920 -> m2_24  [key=2, style=dotted];
m2_921 -> m2_909  [key=0, style=bold, color=blue];
m2_965 -> m2_966  [key=0, style=solid];
m2_966 -> m2_967  [key=0, style=solid];
m2_967 -> m2_968  [key=0, style=solid];
m2_967 -> m2_20  [key=2, style=dotted];
m2_967 -> m2_21  [key=2, style=dotted];
m2_967 -> m2_969  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_970  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_971  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_972  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_973  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_974  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_975  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_976  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_967 -> m2_977  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_968 -> m2_969  [key=0, style=solid];
m2_968 -> m2_22  [key=2, style=dotted];
m2_968 -> n78  [key=2, style=dotted];
m2_969 -> m2_970  [key=0, style=solid];
m2_969 -> m2_24  [key=2, style=dotted];
m2_970 -> m2_971  [key=0, style=solid];
m2_970 -> m2_22  [key=2, style=dotted];
m2_970 -> n78  [key=2, style=dotted];
m2_971 -> m2_972  [key=0, style=solid];
m2_971 -> m2_24  [key=2, style=dotted];
m2_972 -> m2_973  [key=0, style=solid];
m2_972 -> m2_850  [key=2, style=dotted];
m2_973 -> m2_974  [key=0, style=solid];
m2_973 -> m2_24  [key=2, style=dotted];
m2_974 -> m2_975  [key=0, style=solid];
m2_974 -> m2_24  [key=2, style=dotted];
m2_975 -> m2_976  [key=0, style=solid];
m2_975 -> m2_936  [key=2, style=dotted];
m2_975 -> m2_937  [key=2, style=dotted];
m2_975 -> m2_938  [key=2, style=dotted];
m2_975 -> m2_24  [key=2, style=dotted];
m2_976 -> m2_977  [key=0, style=solid];
m2_976 -> m2_22  [key=2, style=dotted];
m2_976 -> n78  [key=2, style=dotted];
m2_977 -> m2_978  [key=0, style=solid];
m2_977 -> m2_24  [key=2, style=dotted];
m2_978 -> m2_965  [key=0, style=bold, color=blue];
m2_303 -> m2_304  [key=0, style=solid];
m2_304 -> m2_305  [key=0, style=solid];
m2_304 -> m2_20  [key=2, style=dotted];
m2_304 -> m2_21  [key=2, style=dotted];
m2_304 -> m2_308  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_305 -> m2_306  [key=0, style=solid];
m2_305 -> m2_110  [key=2, style=dotted];
m2_305 -> m2_307  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_306 -> m2_303  [key=0, style=bold, color=blue];
m2_1199 -> m2_1200  [key=0, style=solid];
m2_1200 -> m2_1201  [key=0, style=solid];
m2_1201 -> m2_1202  [key=0, style=solid];
m2_1201 -> m2_20  [key=2, style=dotted];
m2_1201 -> m2_21  [key=2, style=dotted];
m2_1201 -> m2_1205  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1202 -> m2_1203  [key=0, style=solid];
m2_1202 -> m2_110  [key=2, style=dotted];
m2_1202 -> m2_1204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1203 -> m2_1199  [key=0, style=bold, color=blue];
m2_1496 -> m2_1497  [key=0, style=solid];
m2_1497 -> m2_1498  [key=0, style=solid];
m2_1497 -> m2_1508  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_1497 -> m2_1518  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_1497 -> m2_1528  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_1497 -> m2_1538  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_1498 -> m2_1499  [key=0, style=solid];
m2_1498 -> m2_20  [key=2, style=dotted];
m2_1498 -> m2_21  [key=2, style=dotted];
m2_1498 -> m2_1500  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1501  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1502  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1503  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1504  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1505  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1506  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1498 -> m2_1507  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1509  [key=0, style=solid];
m2_1508 -> m2_20  [key=2, style=dotted];
m2_1508 -> m2_21  [key=2, style=dotted];
m2_1508 -> m2_1510  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1511  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1512  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1513  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1514  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1515  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1516  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1508 -> m2_1517  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1519  [key=0, style=solid];
m2_1518 -> m2_20  [key=2, style=dotted];
m2_1518 -> m2_21  [key=2, style=dotted];
m2_1518 -> m2_1520  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1521  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1522  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1523  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1524  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1525  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1526  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1518 -> m2_1527  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1529  [key=0, style=solid];
m2_1528 -> m2_20  [key=2, style=dotted];
m2_1528 -> m2_21  [key=2, style=dotted];
m2_1528 -> m2_1530  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1531  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1532  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1533  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1534  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1535  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1536  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1528 -> m2_1537  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1539  [key=0, style=solid];
m2_1538 -> m2_20  [key=2, style=dotted];
m2_1538 -> m2_21  [key=2, style=dotted];
m2_1538 -> m2_1540  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1541  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1542  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1543  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1544  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1545  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1546  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1538 -> m2_1547  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1499 -> m2_1500  [key=0, style=solid];
m2_1500 -> m2_1501  [key=0, style=solid];
m2_1500 -> m2_22  [key=2, style=dotted];
m2_1500 -> n78  [key=2, style=dotted];
m2_1501 -> m2_1502  [key=0, style=solid];
m2_1501 -> m2_22  [key=2, style=dotted];
m2_1501 -> n78  [key=2, style=dotted];
m2_1502 -> m2_1503  [key=0, style=solid];
m2_1502 -> m2_1549  [key=2, style=dotted];
m2_1502 -> m2_24  [key=2, style=dotted];
m2_1503 -> m2_1504  [key=0, style=solid];
m2_1503 -> m2_24  [key=2, style=dotted];
m2_1504 -> m2_1505  [key=0, style=solid];
m2_1504 -> m2_22  [key=2, style=dotted];
m2_1504 -> n78  [key=2, style=dotted];
m2_1505 -> m2_1506  [key=0, style=solid];
m2_1505 -> m2_1549  [key=2, style=dotted];
m2_1505 -> m2_24  [key=2, style=dotted];
m2_1506 -> m2_1507  [key=0, style=solid];
m2_1506 -> m2_24  [key=2, style=dotted];
m2_1507 -> m2_1508  [key=0, style=solid];
m2_1507 -> m2_22  [key=2, style=dotted];
m2_1507 -> n78  [key=2, style=dotted];
m2_1509 -> m2_1510  [key=0, style=solid];
m2_1510 -> m2_1511  [key=0, style=solid];
m2_1510 -> m2_22  [key=2, style=dotted];
m2_1510 -> n78  [key=2, style=dotted];
m2_1511 -> m2_1512  [key=0, style=solid];
m2_1511 -> m2_22  [key=2, style=dotted];
m2_1511 -> n78  [key=2, style=dotted];
m2_1512 -> m2_1513  [key=0, style=solid];
m2_1512 -> m2_1550  [key=2, style=dotted];
m2_1512 -> m2_24  [key=2, style=dotted];
m2_1513 -> m2_1514  [key=0, style=solid];
m2_1513 -> m2_24  [key=2, style=dotted];
m2_1514 -> m2_1515  [key=0, style=solid];
m2_1514 -> m2_22  [key=2, style=dotted];
m2_1514 -> n78  [key=2, style=dotted];
m2_1515 -> m2_1516  [key=0, style=solid];
m2_1515 -> m2_1550  [key=2, style=dotted];
m2_1515 -> m2_24  [key=2, style=dotted];
m2_1516 -> m2_1517  [key=0, style=solid];
m2_1516 -> m2_24  [key=2, style=dotted];
m2_1517 -> m2_1518  [key=0, style=solid];
m2_1517 -> m2_22  [key=2, style=dotted];
m2_1517 -> n78  [key=2, style=dotted];
m2_1519 -> m2_1520  [key=0, style=solid];
m2_1520 -> m2_1521  [key=0, style=solid];
m2_1520 -> m2_22  [key=2, style=dotted];
m2_1520 -> n78  [key=2, style=dotted];
m2_1521 -> m2_1522  [key=0, style=solid];
m2_1521 -> m2_22  [key=2, style=dotted];
m2_1521 -> n78  [key=2, style=dotted];
m2_1522 -> m2_1523  [key=0, style=solid];
m2_1522 -> m2_24  [key=2, style=dotted];
m2_1523 -> m2_1524  [key=0, style=solid];
m2_1523 -> m2_24  [key=2, style=dotted];
m2_1524 -> m2_1525  [key=0, style=solid];
m2_1524 -> m2_22  [key=2, style=dotted];
m2_1524 -> n78  [key=2, style=dotted];
m2_1525 -> m2_1526  [key=0, style=solid];
m2_1525 -> m2_24  [key=2, style=dotted];
m2_1526 -> m2_1527  [key=0, style=solid];
m2_1526 -> m2_24  [key=2, style=dotted];
m2_1527 -> m2_1528  [key=0, style=solid];
m2_1527 -> m2_22  [key=2, style=dotted];
m2_1527 -> n78  [key=2, style=dotted];
m2_1529 -> m2_1530  [key=0, style=solid];
m2_1530 -> m2_1531  [key=0, style=solid];
m2_1530 -> m2_22  [key=2, style=dotted];
m2_1530 -> n78  [key=2, style=dotted];
m2_1531 -> m2_1532  [key=0, style=solid];
m2_1531 -> m2_850  [key=2, style=dotted];
m2_1532 -> m2_1533  [key=0, style=solid];
m2_1532 -> m2_1550  [key=2, style=dotted];
m2_1532 -> m2_24  [key=2, style=dotted];
m2_1533 -> m2_1534  [key=0, style=solid];
m2_1533 -> m2_24  [key=2, style=dotted];
m2_1534 -> m2_1535  [key=0, style=solid];
m2_1534 -> m2_850  [key=2, style=dotted];
m2_1535 -> m2_1536  [key=0, style=solid];
m2_1535 -> m2_1550  [key=2, style=dotted];
m2_1535 -> m2_24  [key=2, style=dotted];
m2_1536 -> m2_1537  [key=0, style=solid];
m2_1536 -> m2_24  [key=2, style=dotted];
m2_1537 -> m2_1538  [key=0, style=solid];
m2_1537 -> m2_22  [key=2, style=dotted];
m2_1537 -> n78  [key=2, style=dotted];
m2_1539 -> m2_1540  [key=0, style=solid];
m2_1540 -> m2_1541  [key=0, style=solid];
m2_1540 -> m2_22  [key=2, style=dotted];
m2_1540 -> n78  [key=2, style=dotted];
m2_1541 -> m2_1542  [key=0, style=solid];
m2_1541 -> m2_1551  [key=2, style=dotted];
m2_1542 -> m2_1543  [key=0, style=solid];
m2_1542 -> m2_1549  [key=2, style=dotted];
m2_1542 -> m2_24  [key=2, style=dotted];
m2_1543 -> m2_1544  [key=0, style=solid];
m2_1543 -> m2_24  [key=2, style=dotted];
m2_1544 -> m2_1545  [key=0, style=solid];
m2_1544 -> m2_1551  [key=2, style=dotted];
m2_1545 -> m2_1546  [key=0, style=solid];
m2_1545 -> m2_1549  [key=2, style=dotted];
m2_1545 -> m2_24  [key=2, style=dotted];
m2_1546 -> m2_1547  [key=0, style=solid];
m2_1546 -> m2_24  [key=2, style=dotted];
m2_1547 -> m2_1548  [key=0, style=solid];
m2_1547 -> m2_22  [key=2, style=dotted];
m2_1547 -> n78  [key=2, style=dotted];
m2_1548 -> m2_1496  [key=0, style=bold, color=blue];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_53  [key=2, style=dotted];
m2_40 -> m2_24  [key=2, style=dotted];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_53  [key=2, style=dotted];
m2_41 -> m2_24  [key=2, style=dotted];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_53  [key=2, style=dotted];
m2_42 -> m2_24  [key=2, style=dotted];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_53  [key=2, style=dotted];
m2_43 -> m2_24  [key=2, style=dotted];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_53  [key=2, style=dotted];
m2_44 -> m2_24  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_53  [key=2, style=dotted];
m2_45 -> m2_24  [key=2, style=dotted];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_53  [key=2, style=dotted];
m2_46 -> m2_24  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_53  [key=2, style=dotted];
m2_47 -> m2_24  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_53  [key=2, style=dotted];
m2_48 -> m2_24  [key=2, style=dotted];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_53  [key=2, style=dotted];
m2_49 -> m2_24  [key=2, style=dotted];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_53  [key=2, style=dotted];
m2_50 -> m2_24  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_53  [key=2, style=dotted];
m2_51 -> m2_24  [key=2, style=dotted];
m2_52 -> m2_39  [key=0, style=bold, color=blue];
m2_845 -> m2_846  [key=0, style=solid];
m2_846 -> m2_847  [key=0, style=solid];
m2_846 -> m2_20  [key=2, style=dotted];
m2_846 -> m2_21  [key=2, style=dotted];
m2_846 -> m2_848  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_847 -> m2_848  [key=0, style=solid];
m2_847 -> m2_850  [key=2, style=dotted];
m2_847 -> m2_441  [key=2, style=dotted];
m2_848 -> m2_849  [key=0, style=solid];
m2_848 -> m2_24  [key=2, style=dotted];
m2_849 -> m2_845  [key=0, style=bold, color=blue];
m2_1627 -> m2_1628  [key=0, style=solid];
m2_1627 -> m2_1631  [key=1, style=dashed, color=darkseagreen4, label="byte[]"];
m2_1628 -> m2_1629  [key=0, style=solid];
m2_1628 -> m2_1635  [key=2, style=dotted];
m2_1631 -> m2_1632  [key=0, style=solid];
m2_1631 -> m2_1636  [key=2, style=dotted];
m2_1629 -> m2_1630  [key=0, style=solid];
m2_1629 -> m2_1635  [key=2, style=dotted];
m2_1629 -> m2_1629  [key=1, style=dashed, color=darkseagreen4, label=toReturn];
m2_1629 -> m2_1631  [key=1, style=dashed, color=darkseagreen4, label=toReturn];
m2_1629 -> m2_1632  [key=1, style=dashed, color=darkseagreen4, label=toReturn];
m2_1629 -> m2_1633  [key=1, style=dashed, color=darkseagreen4, label=toReturn];
m2_1630 -> m2_1631  [key=0, style=solid];
m2_1630 -> m2_1632  [key=0, style=solid];
m2_1632 -> m2_1633  [key=0, style=solid];
m2_1633 -> m2_1634  [key=0, style=solid];
m2_1634 -> m2_1627  [key=0, style=bold, color=blue];
m2_1339 -> m2_1340  [key=0, style=solid];
m2_1340 -> m2_1341  [key=0, style=solid];
m2_1341 -> m2_1342  [key=0, style=solid];
m2_1341 -> m2_20  [key=2, style=dotted];
m2_1341 -> m2_21  [key=2, style=dotted];
m2_1341 -> m2_1343  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1344  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1345  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1346  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1347  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1348  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1349  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1350  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1351  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1352  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1341 -> m2_1353  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1342 -> m2_1343  [key=0, style=solid];
m2_1342 -> m2_22  [key=2, style=dotted];
m2_1343 -> m2_1344  [key=0, style=solid];
m2_1343 -> m2_24  [key=2, style=dotted];
m2_1344 -> m2_1345  [key=0, style=solid];
m2_1344 -> m2_22  [key=2, style=dotted];
m2_1345 -> m2_1346  [key=0, style=solid];
m2_1345 -> m2_24  [key=2, style=dotted];
m2_1346 -> m2_1347  [key=0, style=solid];
m2_1346 -> m2_22  [key=2, style=dotted];
m2_1347 -> m2_1348  [key=0, style=solid];
m2_1347 -> m2_24  [key=2, style=dotted];
m2_1348 -> m2_1349  [key=0, style=solid];
m2_1348 -> m2_22  [key=2, style=dotted];
m2_1349 -> m2_1350  [key=0, style=solid];
m2_1349 -> m2_24  [key=2, style=dotted];
m2_1350 -> m2_1351  [key=0, style=solid];
m2_1350 -> m2_22  [key=2, style=dotted];
m2_1351 -> m2_1352  [key=0, style=solid];
m2_1351 -> m2_24  [key=2, style=dotted];
m2_1352 -> m2_1353  [key=0, style=solid];
m2_1352 -> m2_22  [key=2, style=dotted];
m2_1353 -> m2_1354  [key=0, style=solid];
m2_1353 -> m2_24  [key=2, style=dotted];
m2_1354 -> m2_1339  [key=0, style=bold, color=blue];
m2_872 -> m2_873  [key=0, style=solid];
m2_873 -> m2_874  [key=0, style=solid];
m2_873 -> m2_20  [key=2, style=dotted];
m2_873 -> m2_21  [key=2, style=dotted];
m2_874 -> m2_875  [key=0, style=solid];
m2_874 -> m2_755  [key=2, style=dotted];
m2_874 -> m2_876  [key=1, style=dashed, color=darkseagreen4, label=data];
m2_874 -> m2_877  [key=1, style=dashed, color=darkseagreen4, label=data];
m2_875 -> m2_876  [key=0, style=solid];
m2_875 -> m2_24  [key=2, style=dotted];
m2_876 -> m2_877  [key=0, style=solid];
m2_876 -> m2_24  [key=2, style=dotted];
m2_877 -> m2_878  [key=0, style=solid];
m2_877 -> m2_24  [key=2, style=dotted];
m2_878 -> m2_872  [key=0, style=bold, color=blue];
m2_758 -> m2_759  [key=0, style=solid];
m2_759 -> m2_760  [key=0, style=solid];
m2_759 -> m2_21  [key=2, style=dotted];
m2_760 -> m2_761  [key=0, style=solid];
m2_760 -> m2_20  [key=2, style=dotted];
m2_760 -> m2_762  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_763  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_764  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_765  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_766  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_767  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_768  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_769  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_770  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_771  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_772  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_773  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_760 -> m2_774  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m2_761 -> m2_762  [key=0, style=solid];
m2_761 -> m2_22  [key=2, style=dotted];
m2_761 -> n78  [key=2, style=dotted];
m2_762 -> m2_763  [key=0, style=solid];
m2_762 -> m2_24  [key=2, style=dotted];
m2_763 -> m2_764  [key=0, style=solid];
m2_763 -> m2_22  [key=2, style=dotted];
m2_763 -> n78  [key=2, style=dotted];
m2_764 -> m2_765  [key=0, style=solid];
m2_764 -> m2_24  [key=2, style=dotted];
m2_765 -> m2_766  [key=0, style=solid];
m2_765 -> m2_24  [key=2, style=dotted];
m2_766 -> m2_767  [key=0, style=solid];
m2_766 -> m2_22  [key=2, style=dotted];
m2_766 -> n78  [key=2, style=dotted];
m2_767 -> m2_768  [key=0, style=solid];
m2_767 -> m2_24  [key=2, style=dotted];
m2_768 -> m2_769  [key=0, style=solid];
m2_768 -> m2_24  [key=2, style=dotted];
m2_769 -> m2_770  [key=0, style=solid];
m2_769 -> m2_22  [key=2, style=dotted];
m2_769 -> n78  [key=2, style=dotted];
m2_770 -> m2_771  [key=0, style=solid];
m2_770 -> m2_24  [key=2, style=dotted];
m2_771 -> m2_772  [key=0, style=solid];
m2_771 -> m2_24  [key=2, style=dotted];
m2_772 -> m2_773  [key=0, style=solid];
m2_772 -> m2_22  [key=2, style=dotted];
m2_772 -> n78  [key=2, style=dotted];
m2_773 -> m2_774  [key=0, style=solid];
m2_773 -> m2_24  [key=2, style=dotted];
m2_774 -> m2_775  [key=0, style=solid];
m2_774 -> m2_22  [key=2, style=dotted];
m2_774 -> m2_77  [key=2, style=dotted];
m2_775 -> m2_758  [key=0, style=bold, color=blue];
m2_1165 -> m2_1166  [key=0, style=solid];
m2_1166 -> m2_1167  [key=0, style=solid];
m2_1167 -> m2_1168  [key=0, style=solid];
m2_1167 -> m2_20  [key=2, style=dotted];
m2_1167 -> m2_21  [key=2, style=dotted];
m2_1167 -> m2_1169  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1167 -> m2_1170  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1167 -> m2_1171  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1167 -> m2_1172  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1168 -> m2_1169  [key=0, style=solid];
m2_1168 -> m2_22  [key=2, style=dotted];
m2_1168 -> n78  [key=2, style=dotted];
m2_1169 -> m2_1170  [key=0, style=solid];
m2_1169 -> m2_24  [key=2, style=dotted];
m2_1170 -> m2_1171  [key=0, style=solid];
m2_1170 -> m2_24  [key=2, style=dotted];
m2_1171 -> m2_1172  [key=0, style=solid];
m2_1171 -> m2_22  [key=2, style=dotted];
m2_1171 -> n78  [key=2, style=dotted];
m2_1172 -> m2_1173  [key=0, style=solid];
m2_1172 -> m2_24  [key=2, style=dotted];
m2_1173 -> m2_1165  [key=0, style=bold, color=blue];
m2_524 -> m2_525  [key=0, style=solid];
m2_525 -> m2_526  [key=0, style=solid];
m2_526 -> m2_527  [key=0, style=solid];
m2_526 -> m2_61  [key=2, style=dotted];
m2_526 -> m2_535  [key=1, style=dashed, color=darkseagreen4, label=helloWorldData];
m2_527 -> m2_528  [key=0, style=solid];
m2_527 -> m2_20  [key=2, style=dotted];
m2_527 -> m2_21  [key=2, style=dotted];
m2_527 -> m2_431  [key=2, style=dotted];
m2_527 -> m2_529  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_530  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_531  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_532  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_533  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_534  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_536  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_537  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_538  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_527 -> m2_539  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_535 -> m2_536  [key=0, style=solid];
m2_535 -> m2_523  [key=2, style=dotted];
m2_528 -> m2_529  [key=0, style=solid];
m2_528 -> m2_84  [key=2, style=dotted];
m2_528 -> n78  [key=2, style=dotted];
m2_529 -> m2_530  [key=0, style=solid];
m2_529 -> m2_24  [key=2, style=dotted];
m2_530 -> m2_531  [key=0, style=solid];
m2_530 -> m2_84  [key=2, style=dotted];
m2_530 -> n78  [key=2, style=dotted];
m2_531 -> m2_532  [key=0, style=solid];
m2_531 -> m2_84  [key=2, style=dotted];
m2_531 -> n78  [key=2, style=dotted];
m2_532 -> m2_533  [key=0, style=solid];
m2_532 -> m2_24  [key=2, style=dotted];
m2_533 -> m2_534  [key=0, style=solid];
m2_533 -> m2_84  [key=2, style=dotted];
m2_533 -> n78  [key=2, style=dotted];
m2_534 -> m2_535  [key=0, style=solid];
m2_534 -> m2_424  [key=2, style=dotted];
m2_536 -> m2_537  [key=0, style=solid];
m2_536 -> m2_24  [key=2, style=dotted];
m2_537 -> m2_538  [key=0, style=solid];
m2_537 -> m2_84  [key=2, style=dotted];
m2_537 -> n78  [key=2, style=dotted];
m2_538 -> m2_539  [key=0, style=solid];
m2_538 -> m2_24  [key=2, style=dotted];
m2_539 -> m2_540  [key=0, style=solid];
m2_539 -> m2_84  [key=2, style=dotted];
m2_539 -> m2_77  [key=2, style=dotted];
m2_540 -> m2_524  [key=0, style=bold, color=blue];
m2_833 -> m2_834  [key=0, style=solid];
m2_834 -> m2_835  [key=0, style=solid];
m2_834 -> m2_20  [key=2, style=dotted];
m2_834 -> m2_21  [key=2, style=dotted];
m2_834 -> m2_836  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_835 -> m2_836  [key=0, style=solid];
m2_835 -> m2_755  [key=2, style=dotted];
m2_835 -> m2_441  [key=2, style=dotted];
m2_836 -> m2_837  [key=0, style=solid];
m2_836 -> m2_24  [key=2, style=dotted];
m2_837 -> m2_833  [key=0, style=bold, color=blue];
m2_1174 -> m2_1175  [key=0, style=solid];
m2_1175 -> m2_1176  [key=0, style=solid];
m2_1176 -> m2_1177  [key=0, style=solid];
m2_1176 -> m2_20  [key=2, style=dotted];
m2_1176 -> m2_21  [key=2, style=dotted];
m2_1176 -> m2_1178  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1179  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1180  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1181  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1182  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1183  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1184  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1185  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1186  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1187  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1188  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1189  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1176 -> m2_1190  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1177 -> m2_1178  [key=0, style=solid];
m2_1177 -> m2_22  [key=2, style=dotted];
m2_1177 -> n78  [key=2, style=dotted];
m2_1178 -> m2_1179  [key=0, style=solid];
m2_1178 -> m2_24  [key=2, style=dotted];
m2_1179 -> m2_1180  [key=0, style=solid];
m2_1179 -> m2_22  [key=2, style=dotted];
m2_1179 -> n78  [key=2, style=dotted];
m2_1180 -> m2_1181  [key=0, style=solid];
m2_1180 -> m2_24  [key=2, style=dotted];
m2_1181 -> m2_1182  [key=0, style=solid];
m2_1181 -> m2_22  [key=2, style=dotted];
m2_1181 -> n78  [key=2, style=dotted];
m2_1182 -> m2_1183  [key=0, style=solid];
m2_1182 -> m2_24  [key=2, style=dotted];
m2_1183 -> m2_1184  [key=0, style=solid];
m2_1183 -> m2_22  [key=2, style=dotted];
m2_1183 -> n78  [key=2, style=dotted];
m2_1184 -> m2_1185  [key=0, style=solid];
m2_1184 -> m2_24  [key=2, style=dotted];
m2_1185 -> m2_1186  [key=0, style=solid];
m2_1185 -> m2_22  [key=2, style=dotted];
m2_1185 -> n78  [key=2, style=dotted];
m2_1186 -> m2_1187  [key=0, style=solid];
m2_1186 -> m2_24  [key=2, style=dotted];
m2_1187 -> m2_1188  [key=0, style=solid];
m2_1187 -> m2_22  [key=2, style=dotted];
m2_1187 -> n78  [key=2, style=dotted];
m2_1188 -> m2_1189  [key=0, style=solid];
m2_1188 -> m2_24  [key=2, style=dotted];
m2_1189 -> m2_1190  [key=0, style=solid];
m2_1189 -> m2_22  [key=2, style=dotted];
m2_1189 -> n78  [key=2, style=dotted];
m2_1190 -> m2_1191  [key=0, style=solid];
m2_1190 -> m2_24  [key=2, style=dotted];
m2_1191 -> m2_1174  [key=0, style=bold, color=blue];
m2_1010 -> m2_1011  [key=0, style=solid];
m2_1011 -> m2_1012  [key=0, style=solid];
m2_1012 -> m2_1013  [key=0, style=solid];
m2_1012 -> m2_20  [key=2, style=dotted];
m2_1012 -> m2_21  [key=2, style=dotted];
m2_1012 -> m2_1014  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1015  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1016  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1017  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1018  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1019  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1020  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1021  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1023  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1012 -> m2_1024  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1013 -> m2_1014  [key=0, style=solid];
m2_1013 -> m2_1026  [key=2, style=dotted];
m2_1014 -> m2_1015  [key=0, style=solid];
m2_1014 -> m2_22  [key=2, style=dotted];
m2_1014 -> n78  [key=2, style=dotted];
m2_1015 -> m2_1016  [key=0, style=solid];
m2_1015 -> m2_24  [key=2, style=dotted];
m2_1016 -> m2_1017  [key=0, style=solid];
m2_1016 -> m2_22  [key=2, style=dotted];
m2_1016 -> n78  [key=2, style=dotted];
m2_1017 -> m2_1018  [key=0, style=solid];
m2_1017 -> m2_24  [key=2, style=dotted];
m2_1018 -> m2_1019  [key=0, style=solid];
m2_1018 -> m2_850  [key=2, style=dotted];
m2_1019 -> m2_1020  [key=0, style=solid];
m2_1019 -> m2_24  [key=2, style=dotted];
m2_1020 -> m2_1021  [key=0, style=solid];
m2_1020 -> m2_24  [key=2, style=dotted];
m2_1021 -> m2_1022  [key=0, style=solid];
m2_1023 -> m2_1024  [key=0, style=solid];
m2_1023 -> m2_22  [key=2, style=dotted];
m2_1023 -> n78  [key=2, style=dotted];
m2_1024 -> m2_1025  [key=0, style=solid];
m2_1024 -> m2_24  [key=2, style=dotted];
m2_1022 -> m2_1023  [key=0, style=solid];
m2_1022 -> m2_1009  [key=2, style=dotted];
m2_1022 -> m2_24  [key=2, style=dotted];
m2_1022 -> m2_1022  [key=1, style=dashed, color=darkseagreen4, label=dt];
m2_1025 -> m2_1010  [key=0, style=bold, color=blue];
m2_1625 -> m2_1626  [key=0, style=solid];
m2_1626 -> m2_1625  [key=0, style=bold, color=blue];
m2_858 -> m2_859  [key=0, style=solid];
m2_859 -> m2_860  [key=0, style=solid];
m2_859 -> m2_20  [key=2, style=dotted];
m2_859 -> m2_21  [key=2, style=dotted];
m2_859 -> m2_863  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_860 -> m2_861  [key=0, style=solid];
m2_860 -> m2_110  [key=2, style=dotted];
m2_860 -> m2_862  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_861 -> m2_858  [key=0, style=bold, color=blue];
m2_939 -> m2_940  [key=0, style=solid];
m2_940 -> m2_941  [key=0, style=solid];
m2_941 -> m2_942  [key=0, style=solid];
m2_941 -> m2_20  [key=2, style=dotted];
m2_941 -> m2_21  [key=2, style=dotted];
m2_941 -> m2_943  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_944  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_945  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_946  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_947  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_948  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_949  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_950  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_941 -> m2_951  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_942 -> m2_943  [key=0, style=solid];
m2_942 -> m2_22  [key=2, style=dotted];
m2_942 -> n78  [key=2, style=dotted];
m2_943 -> m2_944  [key=0, style=solid];
m2_943 -> m2_24  [key=2, style=dotted];
m2_944 -> m2_945  [key=0, style=solid];
m2_944 -> m2_22  [key=2, style=dotted];
m2_944 -> n78  [key=2, style=dotted];
m2_945 -> m2_946  [key=0, style=solid];
m2_945 -> m2_24  [key=2, style=dotted];
m2_946 -> m2_947  [key=0, style=solid];
m2_946 -> m2_850  [key=2, style=dotted];
m2_947 -> m2_948  [key=0, style=solid];
m2_947 -> m2_24  [key=2, style=dotted];
m2_948 -> m2_949  [key=0, style=solid];
m2_948 -> m2_24  [key=2, style=dotted];
m2_949 -> m2_950  [key=0, style=solid];
m2_949 -> m2_936  [key=2, style=dotted];
m2_949 -> m2_937  [key=2, style=dotted];
m2_949 -> m2_938  [key=2, style=dotted];
m2_949 -> m2_24  [key=2, style=dotted];
m2_950 -> m2_951  [key=0, style=solid];
m2_950 -> m2_22  [key=2, style=dotted];
m2_950 -> n78  [key=2, style=dotted];
m2_951 -> m2_952  [key=0, style=solid];
m2_951 -> m2_24  [key=2, style=dotted];
m2_952 -> m2_939  [key=0, style=bold, color=blue];
m2_1067 -> m2_1068  [key=0, style=solid];
m2_1068 -> m2_1069  [key=0, style=solid];
m2_1068 -> m2_20  [key=2, style=dotted];
m2_1068 -> m2_21  [key=2, style=dotted];
m2_1068 -> m2_1072  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1069 -> m2_1070  [key=0, style=solid];
m2_1069 -> m2_110  [key=2, style=dotted];
m2_1069 -> m2_1071  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1070 -> m2_1067  [key=0, style=bold, color=blue];
m2_893 -> m2_894  [key=0, style=solid];
m2_894 -> m2_895  [key=0, style=solid];
m2_895 -> m2_896  [key=0, style=solid];
m2_895 -> m2_20  [key=2, style=dotted];
m2_895 -> m2_21  [key=2, style=dotted];
m2_895 -> m2_897  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_898  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_899  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_900  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_901  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_902  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_903  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_904  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_905  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_906  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_895 -> m2_907  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_896 -> m2_897  [key=0, style=solid];
m2_896 -> m2_130  [key=2, style=dotted];
m2_897 -> m2_898  [key=0, style=solid];
m2_897 -> m2_22  [key=2, style=dotted];
m2_897 -> n78  [key=2, style=dotted];
m2_898 -> m2_899  [key=0, style=solid];
m2_898 -> m2_24  [key=2, style=dotted];
m2_899 -> m2_900  [key=0, style=solid];
m2_899 -> m2_22  [key=2, style=dotted];
m2_899 -> n78  [key=2, style=dotted];
m2_900 -> m2_901  [key=0, style=solid];
m2_900 -> m2_24  [key=2, style=dotted];
m2_901 -> m2_902  [key=0, style=solid];
m2_901 -> m2_24  [key=2, style=dotted];
m2_902 -> m2_903  [key=0, style=solid];
m2_902 -> m2_22  [key=2, style=dotted];
m2_902 -> n78  [key=2, style=dotted];
m2_903 -> m2_904  [key=0, style=solid];
m2_903 -> m2_24  [key=2, style=dotted];
m2_904 -> m2_905  [key=0, style=solid];
m2_904 -> m2_24  [key=2, style=dotted];
m2_905 -> m2_906  [key=0, style=solid];
m2_905 -> m2_22  [key=2, style=dotted];
m2_905 -> n78  [key=2, style=dotted];
m2_906 -> m2_907  [key=0, style=solid];
m2_906 -> m2_24  [key=2, style=dotted];
m2_907 -> m2_908  [key=0, style=solid];
m2_907 -> m2_22  [key=2, style=dotted];
m2_907 -> m2_77  [key=2, style=dotted];
m2_908 -> m2_893  [key=0, style=bold, color=blue];
m2_1647 -> m2_40  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1647 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.JsonTextReaderTest"];
m2_1648 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1649 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1650 -> m2_145  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1651 -> m2_308  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1652 -> m2_408  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1653 -> m2_415  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1654 -> m2_422  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1655 -> m2_433  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1656 -> m2_448  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1657 -> m2_745  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1658 -> m2_825  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1659 -> m2_843  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1660 -> m2_856  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1661 -> m2_863  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1662 -> m2_870  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1663 -> m2_884  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1664 -> m2_891  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1665 -> m2_963  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1666 -> m2_1065  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1667 -> m2_1072  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1668 -> m2_1079  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1669 -> m2_1086  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1670 -> m2_1093  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1671 -> m2_1100  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1672 -> m2_1205  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1673 -> m2_1213  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1674 -> m2_1244  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1675 -> m2_1261  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1676 -> m2_1362  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1677 -> m2_1418  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1678 -> m2_1450  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1678 -> m2_1453  [key=1, style=dashed, color=darkseagreen4, label=reader];
m2_1679 -> m2_1575  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1679 -> m2_1578  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1679 -> m2_1581  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1679 -> m2_1584  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1679 -> m2_1587  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1679 -> m2_1590  [key=1, style=dashed, color=darkseagreen4, label=jsonTextReader];
m2_1680 -> m2_1610  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.ToggleReaderError"];
m2_1680 -> m2_1613  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.ToggleReaderError"];
m2_1680 -> m2_1615  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.ToggleReaderError"];
m2_1681 -> m2_1620  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m2_1681 -> m2_1621  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m2_1681 -> m2_1622  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m2_1681 -> m2_1628  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m2_1681 -> m2_1629  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m2_1681 -> m2_1631  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m2_1681 -> m2_1632  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.SlowStream"];
m3_226 -> m3_227  [key=0, style=solid];
m3_227 -> m3_229  [key=2, style=dotted];
m3_227 -> m3_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_227 -> m3_228  [key=0, style=solid];
m3_228 -> m3_226  [key=0, style=bold, color=blue];
m3_96 -> m3_97  [key=0, style=solid];
m3_204 -> m3_205  [key=0, style=solid];
m3_205 -> m3_93  [key=2, style=dotted];
m3_205 -> m3_206  [key=0, style=solid];
m3_206 -> m3_207  [key=0, style=solid];
m3_206 -> m3_208  [key=2, style=dotted];
m3_207 -> m3_204  [key=0, style=bold, color=blue];
m3_366 -> m3_367  [key=0, style=solid];
m3_367 -> m3_8  [key=2, style=dotted];
m3_367 -> m3_368  [key=0, style=solid];
m3_367 -> m3_30  [key=2, style=dotted];
m3_367 -> m3_369  [key=2, style=dotted];
m3_368 -> m3_366  [key=0, style=bold, color=blue];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_4  [key=0, style=solid];
m3_11 -> m3_19  [key=2, style=dotted];
m3_13 -> m3_8  [key=2, style=dotted];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_0  [key=0, style=bold, color=blue];
m3_15 -> m3_8  [key=2, style=dotted];
m3_15 -> m3_16  [key=0, style=solid];
m3_17 -> m3_8  [key=2, style=dotted];
m3_17 -> m3_18  [key=0, style=solid];
m3_19 -> m3_8  [key=2, style=dotted];
m3_19 -> m3_20  [key=0, style=solid];
m3_21 -> m3_8  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_21 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m3_21 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_21 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_23 -> m3_8  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_39  [key=0, style=solid];
m3_25 -> m3_8  [key=2, style=dotted];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=0, style=solid];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_27  [key=2, style=dotted];
m3_12 -> m3_28  [key=2, style=dotted];
m3_12 -> m3_20  [key=2, style=dotted];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_29  [key=2, style=dotted];
m3_14 -> m3_28  [key=2, style=dotted];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_30  [key=2, style=dotted];
m3_16 -> m3_28  [key=2, style=dotted];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_30  [key=2, style=dotted];
m3_18 -> m3_28  [key=2, style=dotted];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_30  [key=2, style=dotted];
m3_20 -> m3_28  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_31  [key=2, style=dotted];
m3_22 -> m3_24  [key=0, style=solid];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_31  [key=2, style=dotted];
m3_24 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_24 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_24 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_26 -> m3_11  [key=0, style=bold, color=blue];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_40  [key=2, style=dotted];
m3_26 -> m3_41  [key=2, style=dotted];
m3_26 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_26 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_26 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_80 -> m3_8  [key=2, style=dotted];
m3_80 -> m3_81  [key=0, style=solid];
m3_346 -> m3_347  [key=0, style=solid];
m3_347 -> m3_8  [key=2, style=dotted];
m3_347 -> m3_97  [key=2, style=dotted];
m3_347 -> m3_348  [key=0, style=solid];
m3_347 -> m3_145  [key=2, style=dotted];
m3_347 -> m3_345  [key=2, style=dotted];
m3_348 -> m3_346  [key=0, style=bold, color=blue];
m3_335 -> m3_336  [key=0, style=solid];
m3_336 -> m3_8  [key=2, style=dotted];
m3_336 -> m3_93  [key=2, style=dotted];
m3_336 -> m3_337  [key=0, style=solid];
m3_336 -> m3_338  [key=2, style=dotted];
m3_337 -> m3_335  [key=0, style=bold, color=blue];
m3_170 -> m3_171  [key=0, style=solid];
m3_171 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_171 -> m3_172  [key=0, style=solid];
m3_171 -> m3_159  [key=2, style=dotted];
m3_172 -> m3_170  [key=0, style=bold, color=blue];
m3_97 -> m3_98  [key=0, style=solid];
m3_88 -> m3_89  [key=0, style=solid, color=green];
m3_88 -> m3_97  [key=2, style=dotted];
m3_88 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_327 -> m3_328  [key=0, style=solid];
m3_332 -> m3_326  [key=2, style=dotted];
m3_332 -> m3_333  [key=0, style=solid];
m3_331 -> m3_332  [key=0, style=solid];
m3_330 -> m3_331  [key=0, style=solid];
m3_330 -> m3_334  [key=2, style=dotted];
m3_328 -> m3_330  [key=1, style=dashed, color=darkseagreen4, label=content];
m3_328 -> m3_329  [key=0, style=solid];
m3_329 -> m3_330  [key=0, style=solid];
m3_329 -> m3_50  [key=2, style=dotted];
m3_333 -> m3_327  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m3_0 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
m3_0 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m3_0 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m3_0 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m3_0 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_1 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_1 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_1 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label=resolver];
m3_2 -> m3_8  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_14  [key=2, style=dotted];
m3_3 -> m3_8  [key=2, style=dotted];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_15  [key=2, style=dotted];
m3_5 -> m3_8  [key=2, style=dotted];
m3_5 -> m3_10  [key=2, style=dotted];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_6  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_16  [key=2, style=dotted];
m3_9 -> m3_17  [key=2, style=dotted];
m3_10 -> m3_6  [key=0, style=solid];
m3_10 -> m3_18  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_12  [key=0, style=solid];
m3_4 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label=row];
m3_4 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label=row];
m3_4 -> m3_8  [key=2, style=dotted];
m3_4 -> m3_9  [key=2, style=dotted];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_11  [key=0, style=solid];
m3_6 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_6 -> m3_0  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=columnValue];
m3_394 -> m3_395  [key=0, style=solid];
m3_395 -> m3_8  [key=2, style=dotted];
m3_395 -> m3_396  [key=0, style=solid];
m3_395 -> m3_30  [key=2, style=dotted];
m3_395 -> m3_393  [key=2, style=dotted];
m3_396 -> m3_394  [key=0, style=bold, color=blue];
m3_94 -> m3_95  [key=0, style=solid];
m3_273 -> m3_274  [key=0, style=solid, color=green];
m3_274 -> m3_275  [key=0, style=solid, color=green];
m3_275 -> m3_276  [key=0, style=solid, color=green];
m3_275 -> m3_279  [key=2, style=dotted, color=green];
m3_276 -> m3_277  [key=0, style=solid, color=green];
m3_276 -> m3_10  [key=2, style=dotted, color=green];
m3_277 -> m3_278  [key=0, style=solid, color=green];
m3_277 -> m3_8  [key=2, style=dotted, color=green];
m3_278 -> m3_273  [key=0, style=bold, color=blue];
m3_547 -> m3_548  [key=0, style=solid];
m3_550 -> m3_8  [key=2, style=dotted];
m3_550 -> m3_551  [key=0, style=solid];
m3_550 -> m3_629  [key=2, style=dotted];
m3_551 -> m3_8  [key=2, style=dotted];
m3_551 -> m3_552  [key=0, style=solid];
m3_551 -> m3_630  [key=2, style=dotted];
m3_552 -> m3_8  [key=2, style=dotted];
m3_552 -> m3_553  [key=0, style=solid];
m3_552 -> m3_629  [key=2, style=dotted];
m3_553 -> m3_8  [key=2, style=dotted];
m3_553 -> m3_554  [key=0, style=solid];
m3_553 -> m3_630  [key=2, style=dotted];
m3_556 -> m3_8  [key=2, style=dotted];
m3_556 -> m3_557  [key=0, style=solid];
m3_556 -> m3_629  [key=2, style=dotted];
m3_557 -> m3_8  [key=2, style=dotted];
m3_557 -> m3_558  [key=0, style=solid];
m3_557 -> m3_630  [key=2, style=dotted];
m3_558 -> m3_8  [key=2, style=dotted];
m3_558 -> m3_559  [key=0, style=solid];
m3_558 -> m3_629  [key=2, style=dotted];
m3_559 -> m3_8  [key=2, style=dotted];
m3_559 -> m3_560  [key=0, style=solid];
m3_559 -> m3_630  [key=2, style=dotted];
m3_562 -> m3_8  [key=2, style=dotted];
m3_562 -> m3_563  [key=0, style=solid];
m3_562 -> m3_629  [key=2, style=dotted];
m3_563 -> m3_8  [key=2, style=dotted];
m3_563 -> m3_564  [key=0, style=solid];
m3_563 -> m3_630  [key=2, style=dotted];
m3_564 -> m3_8  [key=2, style=dotted];
m3_564 -> m3_565  [key=0, style=solid];
m3_564 -> m3_629  [key=2, style=dotted];
m3_565 -> m3_8  [key=2, style=dotted];
m3_565 -> m3_566  [key=0, style=solid];
m3_565 -> m3_630  [key=2, style=dotted];
m3_568 -> m3_8  [key=2, style=dotted];
m3_568 -> m3_569  [key=0, style=solid];
m3_568 -> m3_629  [key=2, style=dotted];
m3_569 -> m3_8  [key=2, style=dotted];
m3_569 -> m3_570  [key=0, style=solid];
m3_569 -> m3_630  [key=2, style=dotted];
m3_570 -> m3_8  [key=2, style=dotted];
m3_570 -> m3_571  [key=0, style=solid];
m3_570 -> m3_629  [key=2, style=dotted];
m3_571 -> m3_8  [key=2, style=dotted];
m3_571 -> m3_572  [key=0, style=solid];
m3_571 -> m3_630  [key=2, style=dotted];
m3_574 -> m3_8  [key=2, style=dotted];
m3_574 -> m3_575  [key=0, style=solid];
m3_574 -> m3_629  [key=2, style=dotted];
m3_575 -> m3_8  [key=2, style=dotted];
m3_575 -> m3_576  [key=0, style=solid];
m3_575 -> m3_630  [key=2, style=dotted];
m3_576 -> m3_8  [key=2, style=dotted];
m3_576 -> m3_577  [key=0, style=solid];
m3_576 -> m3_629  [key=2, style=dotted];
m3_577 -> m3_8  [key=2, style=dotted];
m3_577 -> m3_578  [key=0, style=solid];
m3_577 -> m3_630  [key=2, style=dotted];
m3_580 -> m3_8  [key=2, style=dotted];
m3_580 -> m3_581  [key=0, style=solid];
m3_580 -> m3_629  [key=2, style=dotted];
m3_581 -> m3_8  [key=2, style=dotted];
m3_581 -> m3_582  [key=0, style=solid];
m3_581 -> m3_630  [key=2, style=dotted];
m3_582 -> m3_8  [key=2, style=dotted];
m3_582 -> m3_583  [key=0, style=solid];
m3_582 -> m3_629  [key=2, style=dotted];
m3_583 -> m3_8  [key=2, style=dotted];
m3_583 -> m3_584  [key=0, style=solid];
m3_583 -> m3_630  [key=2, style=dotted];
m3_586 -> m3_8  [key=2, style=dotted];
m3_586 -> m3_587  [key=0, style=solid];
m3_586 -> m3_629  [key=2, style=dotted];
m3_587 -> m3_8  [key=2, style=dotted];
m3_587 -> m3_588  [key=0, style=solid];
m3_587 -> m3_630  [key=2, style=dotted];
m3_588 -> m3_8  [key=2, style=dotted];
m3_588 -> m3_589  [key=0, style=solid];
m3_588 -> m3_629  [key=2, style=dotted];
m3_589 -> m3_8  [key=2, style=dotted];
m3_589 -> m3_590  [key=0, style=solid];
m3_589 -> m3_630  [key=2, style=dotted];
m3_592 -> m3_8  [key=2, style=dotted];
m3_592 -> m3_593  [key=0, style=solid];
m3_592 -> m3_629  [key=2, style=dotted];
m3_593 -> m3_8  [key=2, style=dotted];
m3_593 -> m3_594  [key=0, style=solid];
m3_593 -> m3_630  [key=2, style=dotted];
m3_594 -> m3_8  [key=2, style=dotted];
m3_594 -> m3_595  [key=0, style=solid];
m3_594 -> m3_629  [key=2, style=dotted];
m3_595 -> m3_8  [key=2, style=dotted];
m3_595 -> m3_596  [key=0, style=solid];
m3_595 -> m3_630  [key=2, style=dotted];
m3_598 -> m3_8  [key=2, style=dotted];
m3_598 -> m3_599  [key=0, style=solid];
m3_598 -> m3_629  [key=2, style=dotted];
m3_599 -> m3_8  [key=2, style=dotted];
m3_599 -> m3_600  [key=0, style=solid];
m3_599 -> m3_630  [key=2, style=dotted];
m3_600 -> m3_8  [key=2, style=dotted];
m3_600 -> m3_601  [key=0, style=solid];
m3_600 -> m3_629  [key=2, style=dotted];
m3_601 -> m3_8  [key=2, style=dotted];
m3_601 -> m3_602  [key=0, style=solid];
m3_601 -> m3_630  [key=2, style=dotted];
m3_604 -> m3_8  [key=2, style=dotted];
m3_604 -> m3_605  [key=0, style=solid];
m3_604 -> m3_629  [key=2, style=dotted];
m3_605 -> m3_8  [key=2, style=dotted];
m3_605 -> m3_606  [key=0, style=solid];
m3_605 -> m3_630  [key=2, style=dotted];
m3_606 -> m3_8  [key=2, style=dotted];
m3_606 -> m3_607  [key=0, style=solid];
m3_606 -> m3_629  [key=2, style=dotted];
m3_607 -> m3_8  [key=2, style=dotted];
m3_607 -> m3_608  [key=0, style=solid];
m3_607 -> m3_630  [key=2, style=dotted];
m3_610 -> m3_8  [key=2, style=dotted];
m3_610 -> m3_611  [key=0, style=solid];
m3_610 -> m3_629  [key=2, style=dotted];
m3_611 -> m3_8  [key=2, style=dotted];
m3_611 -> m3_612  [key=0, style=solid];
m3_611 -> m3_630  [key=2, style=dotted];
m3_612 -> m3_8  [key=2, style=dotted];
m3_612 -> m3_613  [key=0, style=solid];
m3_612 -> m3_629  [key=2, style=dotted];
m3_613 -> m3_8  [key=2, style=dotted];
m3_613 -> m3_614  [key=0, style=solid];
m3_613 -> m3_630  [key=2, style=dotted];
m3_616 -> m3_8  [key=2, style=dotted];
m3_616 -> m3_617  [key=0, style=solid];
m3_616 -> m3_629  [key=2, style=dotted];
m3_617 -> m3_8  [key=2, style=dotted];
m3_617 -> m3_618  [key=0, style=solid];
m3_617 -> m3_630  [key=2, style=dotted];
m3_618 -> m3_8  [key=2, style=dotted];
m3_618 -> m3_619  [key=0, style=solid];
m3_618 -> m3_629  [key=2, style=dotted];
m3_619 -> m3_8  [key=2, style=dotted];
m3_619 -> m3_620  [key=0, style=solid];
m3_619 -> m3_630  [key=2, style=dotted];
m3_622 -> m3_8  [key=2, style=dotted];
m3_622 -> m3_623  [key=0, style=solid];
m3_622 -> m3_629  [key=2, style=dotted];
m3_623 -> m3_8  [key=2, style=dotted];
m3_623 -> m3_624  [key=0, style=solid];
m3_623 -> m3_630  [key=2, style=dotted];
m3_626 -> m3_8  [key=2, style=dotted];
m3_626 -> m3_627  [key=0, style=solid];
m3_626 -> m3_629  [key=2, style=dotted];
m3_627 -> m3_8  [key=2, style=dotted];
m3_627 -> m3_628  [key=0, style=solid];
m3_627 -> m3_630  [key=2, style=dotted];
m3_590 -> m3_279  [key=2, style=dotted];
m3_590 -> m3_592  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_590 -> m3_593  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_590 -> m3_594  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_590 -> m3_595  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_590 -> m3_591  [key=0, style=solid];
m3_548 -> m3_550  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_548 -> m3_551  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_548 -> m3_552  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_548 -> m3_553  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_548 -> m3_30  [key=2, style=dotted];
m3_548 -> m3_549  [key=0, style=solid];
m3_549 -> m3_550  [key=0, style=solid];
m3_549 -> m3_551  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_549 -> m3_552  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_549 -> m3_553  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_549 -> m3_27  [key=2, style=dotted];
m3_554 -> m3_556  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_554 -> m3_557  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_554 -> m3_558  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_554 -> m3_559  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_554 -> m3_261  [key=2, style=dotted];
m3_554 -> m3_555  [key=0, style=solid];
m3_555 -> m3_556  [key=0, style=solid];
m3_555 -> m3_557  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_555 -> m3_558  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_555 -> m3_559  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_555 -> m3_27  [key=2, style=dotted];
m3_560 -> m3_562  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_560 -> m3_563  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_560 -> m3_564  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_560 -> m3_565  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_560 -> m3_220  [key=2, style=dotted];
m3_560 -> m3_561  [key=0, style=solid];
m3_561 -> m3_562  [key=0, style=solid];
m3_561 -> m3_563  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_561 -> m3_564  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_561 -> m3_565  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_561 -> m3_27  [key=2, style=dotted];
m3_566 -> m3_568  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_566 -> m3_569  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_566 -> m3_570  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_566 -> m3_571  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_566 -> m3_220  [key=2, style=dotted];
m3_566 -> m3_567  [key=0, style=solid];
m3_567 -> m3_568  [key=0, style=solid];
m3_567 -> m3_569  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_567 -> m3_570  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_567 -> m3_571  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_567 -> m3_30  [key=2, style=dotted];
m3_572 -> m3_574  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_572 -> m3_575  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_572 -> m3_576  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_572 -> m3_577  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_572 -> m3_220  [key=2, style=dotted];
m3_572 -> m3_573  [key=0, style=solid];
m3_573 -> m3_574  [key=0, style=solid];
m3_573 -> m3_575  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_573 -> m3_576  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_573 -> m3_577  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_573 -> m3_261  [key=2, style=dotted];
m3_578 -> m3_580  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_578 -> m3_581  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_578 -> m3_582  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_578 -> m3_583  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_578 -> m3_30  [key=2, style=dotted];
m3_578 -> m3_579  [key=0, style=solid];
m3_579 -> m3_580  [key=0, style=solid];
m3_579 -> m3_581  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_579 -> m3_582  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_579 -> m3_583  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_579 -> m3_27  [key=2, style=dotted];
m3_584 -> m3_586  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_584 -> m3_587  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_584 -> m3_588  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_584 -> m3_589  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_584 -> m3_30  [key=2, style=dotted];
m3_584 -> m3_585  [key=0, style=solid];
m3_585 -> m3_586  [key=0, style=solid];
m3_585 -> m3_587  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_585 -> m3_588  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_585 -> m3_589  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_585 -> m3_220  [key=2, style=dotted];
m3_591 -> m3_592  [key=0, style=solid];
m3_591 -> m3_593  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_591 -> m3_594  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_591 -> m3_595  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_591 -> m3_220  [key=2, style=dotted];
m3_596 -> m3_598  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_596 -> m3_599  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_596 -> m3_600  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_596 -> m3_601  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_596 -> m3_30  [key=2, style=dotted];
m3_596 -> m3_597  [key=0, style=solid];
m3_597 -> m3_598  [key=0, style=solid];
m3_597 -> m3_599  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_597 -> m3_600  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_597 -> m3_601  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_597 -> m3_27  [key=2, style=dotted];
m3_602 -> m3_604  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_602 -> m3_605  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_602 -> m3_606  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_602 -> m3_607  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_602 -> m3_30  [key=2, style=dotted];
m3_602 -> m3_603  [key=0, style=solid];
m3_603 -> m3_604  [key=0, style=solid];
m3_603 -> m3_605  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_603 -> m3_606  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_603 -> m3_607  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_603 -> m3_136  [key=2, style=dotted];
m3_608 -> m3_610  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_608 -> m3_611  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_608 -> m3_612  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_608 -> m3_613  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_608 -> m3_27  [key=2, style=dotted];
m3_608 -> m3_609  [key=0, style=solid];
m3_609 -> m3_610  [key=0, style=solid];
m3_609 -> m3_611  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_609 -> m3_612  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_609 -> m3_613  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_609 -> m3_136  [key=2, style=dotted];
m3_614 -> m3_616  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_614 -> m3_617  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_614 -> m3_618  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_614 -> m3_619  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_614 -> m3_136  [key=2, style=dotted];
m3_614 -> m3_615  [key=0, style=solid];
m3_615 -> m3_616  [key=0, style=solid];
m3_615 -> m3_617  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_615 -> m3_618  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_615 -> m3_619  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_615 -> m3_27  [key=2, style=dotted];
m3_620 -> m3_622  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_620 -> m3_623  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_620 -> m3_27  [key=2, style=dotted];
m3_620 -> m3_621  [key=0, style=solid];
m3_621 -> m3_622  [key=0, style=solid];
m3_621 -> m3_623  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_624 -> m3_626  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_624 -> m3_627  [key=1, style=dashed, color=darkseagreen4, label=v1];
m3_624 -> m3_136  [key=2, style=dotted];
m3_624 -> m3_625  [key=0, style=solid];
m3_625 -> m3_626  [key=0, style=solid];
m3_625 -> m3_627  [key=1, style=dashed, color=darkseagreen4, label=v2];
m3_628 -> m3_547  [key=0, style=bold, color=blue];
m3_42 -> m3_43  [key=0, style=solid];
m3_234 -> m3_235  [key=0, style=solid];
m3_235 -> m3_237  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_235 -> m3_159  [key=2, style=dotted];
m3_235 -> m3_236  [key=0, style=solid];
m3_236 -> m3_234  [key=0, style=bold, color=blue];
m3_505 -> m3_506  [key=0, style=solid];
m3_507 -> m3_10  [key=2, style=dotted];
m3_507 -> m3_508  [key=0, style=solid];
m3_507 -> m3_511  [key=2, style=dotted];
m3_506 -> m3_507  [key=0, style=solid];
m3_506 -> m3_260  [key=2, style=dotted];
m3_506 -> m3_510  [key=2, style=dotted];
m3_508 -> m3_509  [key=0, style=solid];
m3_508 -> m3_290  [key=2, style=dotted];
m3_509 -> m3_505  [key=0, style=bold, color=blue];
m3_83 -> m3_8  [key=2, style=dotted];
m3_83 -> m3_84  [key=0, style=solid];
m3_467 -> m3_468  [key=0, style=solid];
m3_469 -> m3_8  [key=2, style=dotted];
m3_469 -> m3_470  [key=0, style=solid];
m3_469 -> m3_471  [key=2, style=dotted];
m3_468 -> m3_469  [key=0, style=solid];
m3_468 -> m3_418  [key=2, style=dotted];
m3_468 -> m3_419  [key=2, style=dotted];
m3_470 -> m3_467  [key=0, style=bold, color=blue];
m3_472 -> m3_473  [key=0, style=solid];
m3_473 -> m3_279  [key=2, style=dotted];
m3_473 -> m3_474  [key=0, style=solid];
m3_473 -> m3_476  [key=2, style=dotted];
m3_473 -> m3_136  [key=2, style=dotted];
m3_473 -> m3_425  [key=2, style=dotted];
m3_473 -> m3_307  [key=2, style=dotted];
m3_473 -> m3_145  [key=2, style=dotted];
m3_473 -> m3_457  [key=2, style=dotted];
m3_474 -> m3_289  [key=2, style=dotted];
m3_474 -> m3_475  [key=0, style=solid];
m3_474 -> m3_290  [key=2, style=dotted];
m3_475 -> m3_472  [key=0, style=bold, color=blue];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_42  [key=2, style=dotted];
m3_91 -> m3_8  [key=2, style=dotted];
m3_91 -> m3_92  [key=0, style=solid];
m3_512 -> m3_513  [key=0, style=solid];
m3_514 -> m3_8  [key=2, style=dotted];
m3_514 -> m3_515  [key=0, style=solid];
m3_516 -> m3_8  [key=2, style=dotted];
m3_516 -> m3_517  [key=0, style=solid];
m3_518 -> m3_8  [key=2, style=dotted];
m3_518 -> m3_519  [key=0, style=solid];
m3_521 -> m3_8  [key=2, style=dotted];
m3_521 -> m3_522  [key=0, style=solid];
m3_523 -> m3_8  [key=2, style=dotted];
m3_523 -> m3_524  [key=0, style=solid];
m3_525 -> m3_8  [key=2, style=dotted];
m3_525 -> m3_526  [key=0, style=solid];
m3_528 -> m3_8  [key=2, style=dotted];
m3_528 -> m3_529  [key=0, style=solid];
m3_532 -> m3_8  [key=2, style=dotted];
m3_532 -> m3_533  [key=0, style=solid];
m3_534 -> m3_8  [key=2, style=dotted];
m3_534 -> m3_535  [key=0, style=solid];
m3_536 -> m3_8  [key=2, style=dotted];
m3_536 -> m3_537  [key=0, style=solid];
m3_538 -> m3_8  [key=2, style=dotted];
m3_538 -> m3_539  [key=0, style=solid];
m3_513 -> m3_514  [key=0, style=solid];
m3_513 -> m3_136  [key=2, style=dotted];
m3_513 -> m3_515  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_513 -> m3_517  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_515 -> m3_516  [key=0, style=solid];
m3_515 -> m3_9  [key=2, style=dotted];
m3_517 -> m3_518  [key=0, style=solid];
m3_517 -> m3_28  [key=2, style=dotted];
m3_519 -> m3_136  [key=2, style=dotted];
m3_519 -> m3_520  [key=0, style=solid];
m3_519 -> m3_522  [key=1, style=dashed, color=darkseagreen4, label=d];
m3_519 -> m3_524  [key=1, style=dashed, color=darkseagreen4, label=d];
m3_520 -> m3_521  [key=0, style=solid];
m3_522 -> m3_523  [key=0, style=solid];
m3_522 -> m3_541  [key=2, style=dotted];
m3_524 -> m3_525  [key=0, style=solid];
m3_526 -> m3_27  [key=2, style=dotted];
m3_526 -> m3_527  [key=0, style=solid];
m3_527 -> m3_528  [key=0, style=solid];
m3_529 -> m3_27  [key=2, style=dotted];
m3_529 -> m3_530  [key=0, style=solid];
m3_529 -> m3_533  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_531 -> m3_532  [key=0, style=solid];
m3_533 -> m3_534  [key=0, style=solid];
m3_533 -> m3_28  [key=2, style=dotted];
m3_535 -> m3_536  [key=0, style=solid];
m3_535 -> m3_30  [key=2, style=dotted];
m3_535 -> m3_537  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_537 -> m3_538  [key=0, style=solid];
m3_537 -> m3_28  [key=2, style=dotted];
m3_539 -> m3_540  [key=0, style=solid];
m3_539 -> m3_229  [key=2, style=dotted];
m3_539 -> m3_542  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_530 -> m3_531  [key=0, style=solid];
m3_530 -> m3_539  [key=1, style=dashed, color=darkseagreen4, label=d];
m3_540 -> m3_512  [key=0, style=bold, color=blue];
m3_200 -> m3_201  [key=0, style=solid];
m3_202 -> m3_8  [key=2, style=dotted];
m3_202 -> m3_203  [key=0, style=solid];
m3_201 -> m3_93  [key=2, style=dotted];
m3_201 -> m3_202  [key=0, style=solid];
m3_203 -> m3_200  [key=0, style=bold, color=blue];
m3_246 -> m3_247  [key=0, style=solid];
m3_248 -> m3_8  [key=2, style=dotted];
m3_248 -> m3_249  [key=0, style=solid];
m3_249 -> m3_8  [key=2, style=dotted];
m3_249 -> m3_250  [key=0, style=solid];
m3_249 -> m3_251  [key=2, style=dotted];
m3_247 -> m3_248  [key=0, style=solid];
m3_247 -> m3_249  [key=1, style=dashed, color=darkseagreen4, label=f];
m3_247 -> m3_30  [key=2, style=dotted];
m3_247 -> m3_245  [key=2, style=dotted];
m3_250 -> m3_246  [key=0, style=bold, color=blue];
m3_378 -> m3_379  [key=0, style=solid];
m3_379 -> m3_8  [key=2, style=dotted];
m3_379 -> m3_380  [key=0, style=solid];
m3_379 -> m3_222  [key=2, style=dotted];
m3_379 -> m3_381  [key=2, style=dotted];
m3_380 -> m3_378  [key=0, style=bold, color=blue];
m3_177 -> m3_178  [key=0, style=solid];
m3_178 -> m3_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_159  [key=2, style=dotted];
m3_179 -> m3_177  [key=0, style=bold, color=blue];
m3_299 -> m3_300  [key=0, style=solid];
m3_300 -> m3_307  [key=2, style=dotted];
m3_300 -> m3_301  [key=0, style=solid];
m3_300 -> m3_305  [key=2, style=dotted];
m3_300 -> m3_306  [key=2, style=dotted];
m3_300 -> m3_303  [key=1, style=dashed, color=darkseagreen4, label=dateTimeOffset];
m3_301 -> m3_302  [key=0, style=solid];
m3_301 -> m3_308  [key=2, style=dotted];
m3_301 -> m3_309  [key=2, style=dotted];
m3_303 -> m3_304  [key=0, style=solid];
m3_303 -> m3_311  [key=2, style=dotted];
m3_302 -> m3_303  [key=0, style=solid];
m3_302 -> m3_310  [key=2, style=dotted];
m3_304 -> m3_299  [key=0, style=bold, color=blue];
m3_312 -> m3_313  [key=0, style=solid];
m3_321 -> m3_8  [key=2, style=dotted];
m3_321 -> m3_322  [key=0, style=solid];
m3_321 -> m3_307  [key=2, style=dotted];
m3_323 -> m3_8  [key=2, style=dotted];
m3_323 -> m3_323  [key=1, style=dashed, color=darkseagreen4, label=dateTimeOffset];
m3_323 -> m3_324  [key=0, style=solid];
m3_323 -> m3_307  [key=2, style=dotted];
m3_320 -> m3_321  [key=0, style=solid];
m3_322 -> m3_323  [key=0, style=solid];
m3_318 -> m3_320  [key=1, style=dashed, color=darkseagreen4, label=d];
m3_318 -> m3_322  [key=1, style=dashed, color=darkseagreen4, label=d];
m3_318 -> m3_319  [key=0, style=solid];
m3_319 -> m3_320  [key=0, style=solid];
m3_319 -> m3_326  [key=2, style=dotted];
m3_315 -> m3_37  [key=2, style=dotted];
m3_315 -> m3_316  [key=0, style=solid];
m3_315 -> m3_317  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m3_314 -> m3_38  [key=2, style=dotted];
m3_314 -> m3_315  [key=0, style=solid];
m3_317 -> m3_318  [key=0, style=solid];
m3_317 -> m3_325  [key=2, style=dotted];
m3_313 -> m3_314  [key=0, style=solid];
m3_316 -> m3_317  [key=0, style=solid];
m3_324 -> m3_312  [key=0, style=bold, color=blue];
m3_156 -> m3_157  [key=0, style=solid];
m3_157 -> m3_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_157 -> m3_158  [key=0, style=solid];
m3_157 -> m3_159  [key=2, style=dotted];
m3_158 -> m3_156  [key=0, style=bold, color=blue];
m3_397 -> m3_398  [key=0, style=solid];
m3_398 -> m3_8  [key=2, style=dotted];
m3_398 -> m3_399  [key=0, style=solid];
m3_398 -> m3_220  [key=2, style=dotted];
m3_398 -> m3_400  [key=2, style=dotted];
m3_399 -> m3_397  [key=0, style=bold, color=blue];
m3_370 -> m3_371  [key=0, style=solid];
m3_371 -> m3_8  [key=2, style=dotted];
m3_371 -> m3_372  [key=0, style=solid];
m3_371 -> m3_30  [key=2, style=dotted];
m3_371 -> m3_373  [key=2, style=dotted];
m3_372 -> m3_370  [key=0, style=bold, color=blue];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_56  [key=0, style=solid];
m3_89 -> m3_90  [key=0, style=solid, color=green];
m3_53 -> m3_89  [key=1, style=dashed, color=green, label=v];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_93  [key=2, style=dotted];
m3_53 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_57  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_66  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_67  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_68  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_70  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_72  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_74  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_79  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_81  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_82  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_83  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_85  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_87  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_53 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_8  [key=2, style=dotted];
m3_54 -> m3_8  [key=2, style=dotted];
m3_54 -> m3_55  [key=0, style=solid];
m3_54 -> m3_82  [key=2, style=dotted];
m3_54 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_54 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_54 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_54 -> m3_74  [key=1, style=dashed, color=red, label=column];
m3_55 -> m3_8  [key=2, style=dotted];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_83  [key=2, style=dotted];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_64  [key=0, style=solid];
m3_57 -> m3_8  [key=2, style=dotted];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_59  [key=0, style=solid];
m3_58 -> m3_8  [key=2, style=dotted];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_42  [key=2, style=dotted];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_40  [key=2, style=dotted];
m3_59 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=nestedDt];
m3_59 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label=nestedDt];
m3_60 -> m3_8  [key=2, style=dotted];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_63  [key=0, style=solid];
m3_61 -> m3_8  [key=2, style=dotted];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_45  [key=2, style=dotted];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_60  [key=0, style=solid];
m3_62 -> m3_42  [key=2, style=dotted];
m3_63 -> m3_8  [key=2, style=dotted];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_76  [key=0, style=solid];
m3_64 -> m3_8  [key=2, style=dotted];
m3_64 -> m3_65  [key=0, style=solid];
m3_64 -> m3_74  [key=0, style=solid, color=red];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_67  [key=0, style=solid];
m3_66 -> m3_8  [key=2, style=dotted];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_42  [key=2, style=dotted];
m3_67 -> m3_8  [key=2, style=dotted];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_84  [key=2, style=dotted];
m3_67 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_67 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_67 -> m3_72  [key=1, style=dashed, color=red, label=o];
m3_68 -> m3_69  [key=0, style=solid];
m3_68 -> m3_71  [key=0, style=solid];
m3_69 -> m3_8  [key=2, style=dotted];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_85  [key=2, style=dotted];
m3_70 -> m3_8  [key=2, style=dotted];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_68  [key=0, style=solid];
m3_70 -> m3_42  [key=2, style=dotted];
m3_72 -> m3_73  [key=0, style=solid, color=red];
m3_72 -> m3_88  [key=2, style=dotted, color=red];
m3_72 -> m3_89  [key=2, style=dotted, color=red];
m3_73 -> m3_8  [key=2, style=dotted];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_76  [key=0, style=solid, color=red];
m3_74 -> m3_8  [key=2, style=dotted];
m3_74 -> m3_75  [key=0, style=solid, color=red];
m3_74 -> m3_90  [key=2, style=dotted, color=red];
m3_75 -> m3_76  [key=0, style=solid];
m3_76 -> m3_8  [key=2, style=dotted];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_48  [key=0, style=solid];
m3_76 -> m3_42  [key=2, style=dotted];
m3_77 -> m3_8  [key=2, style=dotted];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_91  [key=2, style=dotted];
m3_78 -> m3_79  [key=0, style=solid];
m3_78 -> m3_94  [key=2, style=dotted];
m3_78 -> m3_83  [key=2, style=dotted];
m3_79 -> m3_8  [key=2, style=dotted];
m3_79 -> m3_80  [key=0, style=solid];
m3_79 -> m3_94  [key=2, style=dotted];
m3_79 -> m3_45  [key=0, style=bold, color=blue];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_95  [key=2, style=dotted];
m3_81 -> m3_92  [key=0, style=solid];
m3_81 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_81 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_81 -> m3_106  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_81 -> m3_108  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_81 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_82 -> m3_8  [key=2, style=dotted];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_95  [key=2, style=dotted];
m3_85 -> m3_86  [key=0, style=solid];
m3_86 -> m3_8  [key=2, style=dotted];
m3_86 -> m3_87  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_8  [key=2, style=dotted];
m3_71 -> m3_72  [key=0, style=solid, color=red];
m3_71 -> m3_73  [key=1, style=dashed, color=red, label=destinationArray];
m3_71 -> m3_86  [key=2, style=dotted];
m3_71 -> m3_87  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label=g];
m3_84 -> m3_96  [key=2, style=dotted];
m3_92 -> m3_52  [key=0, style=bold, color=blue];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label=tokenType];
m3_241 -> m3_242  [key=0, style=solid];
m3_243 -> m3_8  [key=2, style=dotted];
m3_243 -> m3_244  [key=0, style=solid];
m3_242 -> m3_243  [key=0, style=solid];
m3_242 -> m3_30  [key=2, style=dotted];
m3_242 -> m3_245  [key=2, style=dotted];
m3_244 -> m3_241  [key=0, style=bold, color=blue];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_111  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid, color=green];
m3_109 -> m3_8  [key=2, style=dotted, color=green];
m3_109 -> m3_111  [key=0, style=solid];
m3_109 -> m3_112  [key=2, style=dotted];
m3_108 -> m3_109  [key=0, style=solid, color=green];
m3_108 -> m3_110  [key=1, style=dashed, color=green, label=stringValue];
m3_108 -> m3_112  [key=2, style=dotted];
m3_108 -> m3_81  [key=2, style=dotted];
m3_110 -> m3_111  [key=0, style=solid, color=green];
m3_110 -> m3_8  [key=2, style=dotted, color=green];
m3_110 -> m3_43  [key=2, style=dotted];
m3_110 -> m3_44  [key=2, style=dotted];
m3_111 -> m3_107  [key=0, style=bold, color=blue];
m3_111 -> m3_81  [key=0, style=bold, color=blue];
m3_477 -> m3_478  [key=0, style=solid];
m3_479 -> m3_289  [key=2, style=dotted];
m3_479 -> m3_290  [key=2, style=dotted];
m3_479 -> m3_480  [key=0, style=solid];
m3_478 -> m3_94  [key=2, style=dotted];
m3_478 -> m3_141  [key=2, style=dotted];
m3_478 -> m3_476  [key=2, style=dotted];
m3_478 -> m3_479  [key=0, style=solid];
m3_480 -> m3_477  [key=0, style=bold, color=blue];
m3_164 -> m3_165  [key=0, style=solid];
m3_167 -> m3_8  [key=2, style=dotted];
m3_167 -> m3_168  [key=0, style=solid];
m3_165 -> m3_93  [key=2, style=dotted];
m3_165 -> m3_166  [key=0, style=solid];
m3_166 -> m3_167  [key=0, style=solid];
m3_166 -> m3_169  [key=2, style=dotted];
m3_168 -> m3_164  [key=0, style=bold, color=blue];
m3_382 -> m3_383  [key=0, style=solid];
m3_383 -> m3_8  [key=2, style=dotted];
m3_383 -> m3_279  [key=2, style=dotted];
m3_383 -> m3_384  [key=0, style=solid];
m3_383 -> m3_385  [key=2, style=dotted];
m3_384 -> m3_382  [key=0, style=bold, color=blue];
m3_446 -> m3_447  [key=0, style=solid];
m3_448 -> m3_8  [key=2, style=dotted];
m3_448 -> m3_449  [key=0, style=solid];
m3_448 -> m3_456  [key=2, style=dotted];
m3_450 -> m3_8  [key=2, style=dotted];
m3_450 -> m3_451  [key=0, style=solid];
m3_450 -> m3_456  [key=2, style=dotted];
m3_452 -> m3_8  [key=2, style=dotted];
m3_452 -> m3_453  [key=0, style=solid];
m3_452 -> m3_456  [key=2, style=dotted];
m3_454 -> m3_8  [key=2, style=dotted];
m3_454 -> m3_455  [key=0, style=solid];
m3_454 -> m3_456  [key=2, style=dotted];
m3_447 -> m3_448  [key=0, style=solid];
m3_447 -> m3_143  [key=2, style=dotted];
m3_447 -> m3_144  [key=2, style=dotted];
m3_449 -> m3_450  [key=0, style=solid];
m3_449 -> m3_94  [key=2, style=dotted];
m3_449 -> m3_141  [key=2, style=dotted];
m3_451 -> m3_452  [key=0, style=solid];
m3_451 -> m3_145  [key=2, style=dotted];
m3_451 -> m3_457  [key=2, style=dotted];
m3_453 -> m3_454  [key=0, style=solid];
m3_453 -> m3_136  [key=2, style=dotted];
m3_453 -> m3_458  [key=2, style=dotted];
m3_455 -> m3_446  [key=0, style=bold, color=blue];
m3_339 -> m3_340  [key=0, style=solid];
m3_340 -> m3_8  [key=2, style=dotted];
m3_340 -> m3_341  [key=0, style=solid];
m3_340 -> m3_27  [key=2, style=dotted];
m3_340 -> m3_338  [key=2, style=dotted];
m3_341 -> m3_339  [key=0, style=bold, color=blue];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [key=0, style=solid];
m3_34 -> m3_8  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_42  [key=2, style=dotted];
m3_35 -> m3_8  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_40  [key=2, style=dotted];
m3_35 -> m3_38  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_33 -> m3_37  [key=2, style=dotted];
m3_33 -> m3_38  [key=2, style=dotted];
m3_33 -> m3_39  [key=2, style=dotted];
m3_33 -> m3_43  [key=2, style=dotted];
m3_33 -> m3_44  [key=2, style=dotted];
m3_36 -> m3_32  [key=0, style=bold, color=blue];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_45  [key=2, style=dotted];
m3_37 -> m3_35  [key=0, style=solid];
m3_37 -> m3_42  [key=2, style=dotted];
m3_223 -> m3_224  [key=0, style=solid];
m3_224 -> m3_30  [key=2, style=dotted];
m3_224 -> m3_225  [key=0, style=solid];
m3_224 -> m3_221  [key=2, style=dotted];
m3_225 -> m3_223  [key=0, style=bold, color=blue];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_28  [key=2, style=dotted];
m3_481 -> m3_482  [key=0, style=solid];
m3_486 -> m3_8  [key=2, style=dotted];
m3_486 -> m3_487  [key=0, style=solid];
m3_491 -> m3_8  [key=2, style=dotted];
m3_491 -> m3_492  [key=0, style=solid];
m3_482 -> m3_486  [key=1, style=dashed, color=darkseagreen4, label=expectedDate];
m3_482 -> m3_307  [key=2, style=dotted];
m3_482 -> m3_483  [key=0, style=solid];
m3_482 -> m3_458  [key=2, style=dotted];
m3_482 -> m3_493  [key=2, style=dotted];
m3_482 -> m3_494  [key=2, style=dotted];
m3_485 -> m3_486  [key=0, style=solid];
m3_485 -> m3_39  [key=2, style=dotted];
m3_487 -> m3_491  [key=1, style=dashed, color=darkseagreen4, label=expectedDate2];
m3_487 -> m3_307  [key=2, style=dotted];
m3_487 -> m3_488  [key=0, style=solid];
m3_487 -> m3_458  [key=2, style=dotted];
m3_490 -> m3_491  [key=0, style=solid];
m3_490 -> m3_39  [key=2, style=dotted];
m3_483 -> m3_485  [key=1, style=dashed, color=darkseagreen4, label=reader];
m3_483 -> m3_37  [key=2, style=dotted];
m3_483 -> m3_38  [key=2, style=dotted];
m3_483 -> m3_484  [key=0, style=solid];
m3_484 -> m3_485  [key=0, style=solid];
m3_488 -> m3_490  [key=1, style=dashed, color=darkseagreen4, label=reader2];
m3_488 -> m3_37  [key=2, style=dotted];
m3_488 -> m3_38  [key=2, style=dotted];
m3_488 -> m3_489  [key=0, style=solid];
m3_489 -> m3_490  [key=0, style=solid];
m3_492 -> m3_481  [key=0, style=bold, color=blue];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_32  [key=0, style=solid];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_27  [key=2, style=dotted];
m3_374 -> m3_375  [key=0, style=solid];
m3_375 -> m3_8  [key=2, style=dotted];
m3_375 -> m3_376  [key=0, style=solid];
m3_375 -> m3_30  [key=2, style=dotted];
m3_375 -> m3_377  [key=2, style=dotted];
m3_376 -> m3_374  [key=0, style=bold, color=blue];
m3_100 -> m3_111  [key=0, style=solid];
m3_100 -> m3_8  [key=2, style=dotted];
m3_100 -> m3_101  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_42  [key=2, style=dotted];
m3_105 -> m3_98  [key=0, style=bold, color=blue];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_108  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_101  [key=0, style=solid];
m3_93 -> m3_104  [key=0, style=solid];
m3_93 -> m3_110  [key=0, style=solid];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_8  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_8  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_98 -> m3_99  [key=0, style=solid];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_101  [key=1, style=dashed, color=darkseagreen4, label=commentValue];
m3_99 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label=commentValue];
m3_99 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label=commentValue];
m3_99 -> m3_106  [key=2, style=dotted];
m3_99 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=commentValue];
m3_102 -> m3_103  [key=0, style=solid];
m3_103 -> m3_111  [key=0, style=solid];
m3_103 -> m3_8  [key=2, style=dotted];
m3_103 -> m3_104  [key=0, style=solid];
m3_146 -> m3_147  [key=0, style=solid];
m3_148 -> m3_8  [key=2, style=dotted];
m3_148 -> m3_149  [key=0, style=solid];
m3_149 -> m3_8  [key=2, style=dotted];
m3_149 -> m3_97  [key=2, style=dotted];
m3_149 -> m3_150  [key=0, style=solid];
m3_147 -> m3_148  [key=0, style=solid];
m3_147 -> m3_149  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_147 -> m3_151  [key=2, style=dotted];
m3_150 -> m3_146  [key=0, style=bold, color=blue];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_28 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_28 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_28 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=dt];
m3_41 -> m3_42  [key=0, style=solid];
m3_45 -> m3_8  [key=2, style=dotted];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_48  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label=DataTable];
m3_45 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label=DataTable];
m3_45 -> m3_57  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_68  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_70  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_74  [key=1, style=dashed, color=red, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m3_45 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label=DataTable];
m3_46 -> m3_41  [key=0, style=bold, color=blue];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_80  [key=2, style=dotted];
m3_46 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label=dr];
m3_46 -> m3_73  [key=1, style=dashed, color=red, label=dr];
m3_46 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=dr];
m3_46 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label=dr];
m3_46 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label=dr];
m3_386 -> m3_387  [key=0, style=solid];
m3_387 -> m3_8  [key=2, style=dotted];
m3_387 -> m3_388  [key=0, style=solid];
m3_387 -> m3_261  [key=2, style=dotted];
m3_387 -> m3_389  [key=2, style=dotted];
m3_388 -> m3_386  [key=0, style=bold, color=blue];
m3_252 -> m3_253  [key=0, style=solid];
m3_257 -> m3_258  [key=0, style=solid, color=green];
m3_257 -> m3_8  [key=2, style=dotted, color=green];
m3_254 -> m3_257  [key=1, style=dashed, color=green, label=orderedValues];
m3_254 -> m3_255  [key=0, style=solid];
m3_254 -> m3_262  [key=2, style=dotted];
m3_254 -> m3_263  [key=2, style=dotted];
m3_254 -> m3_264  [key=2, style=dotted];
m3_254 -> m3_265  [key=2, style=dotted];
m3_254 -> m3_266  [key=2, style=dotted];
m3_254 -> m3_267  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_254 -> m3_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_254 -> m3_256  [key=1, style=dashed, color=darkseagreen4, label=orderedValues];
m3_256 -> m3_257  [key=0, style=solid, color=green];
m3_256 -> m3_8  [key=2, style=dotted];
m3_255 -> m3_8  [key=2, style=dotted];
m3_255 -> m3_256  [key=0, style=solid];
m3_253 -> m3_254  [key=0, style=solid];
m3_253 -> m3_259  [key=2, style=dotted];
m3_253 -> m3_260  [key=2, style=dotted];
m3_253 -> m3_30  [key=2, style=dotted];
m3_253 -> m3_261  [key=2, style=dotted];
m3_253 -> m3_220  [key=2, style=dotted];
m3_258 -> m3_252  [key=0, style=bold, color=blue];
m3_404 -> m3_405  [key=0, style=solid];
m3_405 -> m3_8  [key=2, style=dotted];
m3_405 -> m3_406  [key=0, style=solid];
m3_405 -> m3_29  [key=2, style=dotted];
m3_405 -> m3_400  [key=2, style=dotted];
m3_406 -> m3_404  [key=0, style=bold, color=blue];
m3_401 -> m3_402  [key=0, style=solid];
m3_402 -> m3_8  [key=2, style=dotted];
m3_402 -> m3_403  [key=0, style=solid];
m3_402 -> m3_141  [key=2, style=dotted];
m3_402 -> m3_94  [key=2, style=dotted];
m3_402 -> m3_400  [key=2, style=dotted];
m3_403 -> m3_401  [key=0, style=bold, color=blue];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_32  [key=0, style=solid];
m3_459 -> m3_460  [key=0, style=solid];
m3_462 -> m3_8  [key=2, style=dotted];
m3_462 -> m3_463  [key=0, style=solid];
m3_464 -> m3_8  [key=2, style=dotted];
m3_464 -> m3_465  [key=0, style=solid];
m3_464 -> m3_457  [key=2, style=dotted];
m3_461 -> m3_462  [key=0, style=solid];
m3_461 -> m3_466  [key=2, style=dotted];
m3_463 -> m3_464  [key=0, style=solid];
m3_463 -> m3_466  [key=2, style=dotted];
m3_460 -> m3_220  [key=2, style=dotted];
m3_460 -> m3_461  [key=0, style=solid];
m3_460 -> m3_463  [key=1, style=dashed, color=darkseagreen4, label=v];
m3_465 -> m3_459  [key=0, style=bold, color=blue];
m3_113 -> m3_114  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_116  [key=2, style=dotted];
m3_115 -> m3_113  [key=0, style=bold, color=blue];
m3_115 -> m3_93  [key=2, style=dotted];
m3_115 -> m3_116  [key=0, style=solid];
m3_362 -> m3_363  [key=0, style=solid];
m3_363 -> m3_8  [key=2, style=dotted];
m3_363 -> m3_364  [key=0, style=solid];
m3_363 -> m3_30  [key=2, style=dotted];
m3_363 -> m3_365  [key=2, style=dotted];
m3_364 -> m3_362  [key=0, style=bold, color=blue];
m3_390 -> m3_391  [key=0, style=solid];
m3_391 -> m3_8  [key=2, style=dotted];
m3_391 -> m3_392  [key=0, style=solid];
m3_391 -> m3_220  [key=2, style=dotted];
m3_391 -> m3_393  [key=2, style=dotted];
m3_392 -> m3_390  [key=0, style=bold, color=blue];
m3_184 -> m3_185  [key=0, style=solid];
m3_185 -> m3_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_185 -> m3_186  [key=0, style=solid];
m3_185 -> m3_159  [key=2, style=dotted];
m3_186 -> m3_184  [key=0, style=bold, color=blue];
m3_116 -> m3_8  [key=2, style=dotted];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_9  [key=2, style=dotted];
m3_411 -> m3_412  [key=0, style=solid];
m3_412 -> m3_8  [key=2, style=dotted];
m3_412 -> m3_413  [key=0, style=solid];
m3_412 -> m3_30  [key=2, style=dotted];
m3_412 -> m3_414  [key=2, style=dotted];
m3_413 -> m3_411  [key=0, style=bold, color=blue];
m3_415 -> m3_416  [key=0, style=solid];
m3_416 -> m3_8  [key=2, style=dotted];
m3_416 -> m3_417  [key=0, style=solid];
m3_416 -> m3_418  [key=2, style=dotted];
m3_416 -> m3_419  [key=2, style=dotted];
m3_416 -> m3_420  [key=2, style=dotted];
m3_417 -> m3_415  [key=0, style=bold, color=blue];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_42  [key=2, style=dotted];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_77  [key=0, style=solid];
m3_48 -> m3_51  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ShouldSerializeEntityMember"];
m3_48 -> m3_53  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ShouldSerializeEntityMember"];
m3_48 -> m3_50  [key=2, style=dotted];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label=columnName];
m3_49 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label=columnName];
m3_49 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label=columnName];
m3_49 -> m3_73  [key=1, style=dashed, color=red, label=columnName];
m3_49 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=columnName];
m3_49 -> m3_47  [key=0, style=bold, color=blue];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_51 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_51 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=column];
m3_51 -> m3_74  [key=1, style=dashed, color=red, label=column];
m3_545 -> m3_8  [key=2, style=dotted];
m3_545 -> m3_546  [key=0, style=solid];
m3_267 -> m3_268  [key=0, style=solid];
m3_270 -> m3_271  [key=0, style=solid];
m3_161 -> m3_93  [key=2, style=dotted];
m3_161 -> m3_162  [key=0, style=solid];
m3_174 -> m3_93  [key=2, style=dotted];
m3_174 -> m3_175  [key=0, style=solid];
m3_181 -> m3_93  [key=2, style=dotted];
m3_181 -> m3_182  [key=0, style=solid];
m3_188 -> m3_93  [key=2, style=dotted];
m3_188 -> m3_189  [key=0, style=solid];
m3_196 -> m3_93  [key=2, style=dotted];
m3_196 -> m3_197  [key=0, style=solid];
m3_544 -> m3_545  [key=0, style=solid];
m3_546 -> m3_542  [key=0, style=bold, color=blue];
m3_269 -> m3_267  [key=0, style=bold, color=blue];
m3_268 -> m3_269  [key=0, style=solid];
m3_272 -> m3_270  [key=0, style=bold, color=blue];
m3_271 -> m3_272  [key=0, style=solid];
m3_160 -> m3_161  [key=0, style=solid];
m3_162 -> m3_163  [key=0, style=solid];
m3_173 -> m3_174  [key=0, style=solid];
m3_175 -> m3_176  [key=0, style=solid];
m3_180 -> m3_181  [key=0, style=solid];
m3_182 -> m3_183  [key=0, style=solid];
m3_187 -> m3_188  [key=0, style=solid];
m3_189 -> m3_190  [key=0, style=solid];
m3_189 -> m3_191  [key=2, style=dotted];
m3_195 -> m3_196  [key=0, style=solid];
m3_197 -> m3_198  [key=0, style=solid];
m3_197 -> m3_199  [key=2, style=dotted];
m3_543 -> m3_27  [key=2, style=dotted];
m3_543 -> m3_544  [key=0, style=solid];
m3_231 -> m3_30  [key=2, style=dotted];
m3_231 -> m3_232  [key=0, style=solid];
m3_232 -> m3_30  [key=2, style=dotted];
m3_232 -> m3_233  [key=0, style=solid];
m3_238 -> m3_29  [key=2, style=dotted];
m3_238 -> m3_239  [key=0, style=solid];
m3_542 -> m3_543  [key=0, style=solid];
m3_163 -> m3_160  [key=0, style=bold, color=blue];
m3_176 -> m3_173  [key=0, style=bold, color=blue];
m3_183 -> m3_180  [key=0, style=bold, color=blue];
m3_190 -> m3_187  [key=0, style=bold, color=blue];
m3_198 -> m3_195  [key=0, style=bold, color=blue];
m3_230 -> m3_231  [key=0, style=solid];
m3_233 -> m3_230  [key=0, style=bold, color=blue];
m3_237 -> m3_238  [key=0, style=solid];
m3_239 -> m3_240  [key=0, style=solid];
m3_240 -> m3_237  [key=0, style=bold, color=blue];
m3_39 -> m3_21  [key=0, style=bold, color=blue];
m3_342 -> m3_343  [key=0, style=solid];
m3_343 -> m3_8  [key=2, style=dotted];
m3_343 -> m3_344  [key=0, style=solid];
m3_343 -> m3_30  [key=2, style=dotted];
m3_343 -> m3_345  [key=2, style=dotted];
m3_344 -> m3_342  [key=0, style=bold, color=blue];
m3_280 -> m3_281  [key=0, style=solid, color=green];
m3_281 -> m3_282  [key=0, style=solid, color=green];
m3_281 -> m3_286  [key=2, style=dotted, color=green];
m3_281 -> m3_283  [key=1, style=dashed, color=green, label=jTokenWriter];
m3_282 -> m3_283  [key=0, style=solid];
m3_282 -> m3_287  [key=2, style=dotted];
m3_282 -> m3_288  [key=2, style=dotted];
m3_283 -> m3_284  [key=0, style=solid];
m3_283 -> m3_289  [key=2, style=dotted];
m3_284 -> m3_285  [key=0, style=solid];
m3_284 -> m3_290  [key=2, style=dotted];
m3_285 -> m3_280  [key=0, style=bold, color=blue];
m3_38 -> m3_39  [key=0, style=solid];
m3_213 -> m3_214  [key=0, style=solid];
m3_214 -> m3_30  [key=2, style=dotted];
m3_214 -> m3_215  [key=0, style=solid];
m3_214 -> m3_219  [key=2, style=dotted];
m3_214 -> m3_155  [key=2, style=dotted];
m3_215 -> m3_30  [key=2, style=dotted];
m3_215 -> m3_220  [key=2, style=dotted];
m3_215 -> m3_216  [key=0, style=solid];
m3_215 -> m3_219  [key=2, style=dotted];
m3_215 -> m3_221  [key=2, style=dotted];
m3_216 -> m3_30  [key=2, style=dotted];
m3_216 -> m3_222  [key=2, style=dotted];
m3_216 -> m3_217  [key=0, style=solid];
m3_216 -> m3_219  [key=2, style=dotted];
m3_216 -> m3_155  [key=2, style=dotted];
m3_217 -> m3_220  [key=2, style=dotted];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_219  [key=2, style=dotted];
m3_217 -> m3_221  [key=2, style=dotted];
m3_218 -> m3_213  [key=0, style=bold, color=blue];
m3_421 -> m3_422  [key=0, style=solid];
m3_423 -> m3_8  [key=2, style=dotted];
m3_423 -> m3_424  [key=0, style=solid];
m3_423 -> m3_418  [key=2, style=dotted];
m3_423 -> m3_136  [key=2, style=dotted];
m3_423 -> m3_420  [key=2, style=dotted];
m3_422 -> m3_423  [key=0, style=solid];
m3_422 -> m3_425  [key=2, style=dotted];
m3_424 -> m3_421  [key=0, style=bold, color=blue];
m3_354 -> m3_355  [key=0, style=solid];
m3_355 -> m3_8  [key=2, style=dotted];
m3_355 -> m3_356  [key=0, style=solid];
m3_355 -> m3_30  [key=2, style=dotted];
m3_355 -> m3_357  [key=2, style=dotted];
m3_356 -> m3_354  [key=0, style=bold, color=blue];
m3_152 -> m3_153  [key=0, style=solid];
m3_153 -> m3_30  [key=2, style=dotted];
m3_153 -> m3_154  [key=0, style=solid];
m3_153 -> m3_155  [key=2, style=dotted];
m3_154 -> m3_152  [key=0, style=bold, color=blue];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_42  [key=2, style=dotted];
m3_31 -> m3_39  [key=0, style=solid];
m3_192 -> m3_193  [key=0, style=solid];
m3_193 -> m3_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_193 -> m3_194  [key=0, style=solid];
m3_193 -> m3_159  [key=2, style=dotted];
m3_194 -> m3_192  [key=0, style=bold, color=blue];
m3_426 -> m3_427  [key=0, style=solid];
m3_437 -> m3_8  [key=2, style=dotted];
m3_437 -> m3_438  [key=0, style=solid];
m3_437 -> m3_445  [key=2, style=dotted];
m3_427 -> m3_437  [key=1, style=dashed, color=darkseagreen4, label=example];
m3_427 -> m3_428  [key=0, style=solid];
m3_436 -> m3_437  [key=0, style=solid];
m3_428 -> m3_137  [key=2, style=dotted];
m3_428 -> m3_429  [key=0, style=solid];
m3_428 -> m3_432  [key=1, style=dashed, color=darkseagreen4, label=obj];
m3_435 -> m3_436  [key=0, style=solid];
m3_435 -> m3_445  [key=2, style=dotted];
m3_435 -> m3_310  [key=2, style=dotted];
m3_429 -> m3_430  [key=0, style=solid];
m3_432 -> m3_433  [key=0, style=solid];
m3_432 -> m3_441  [key=2, style=dotted];
m3_432 -> m3_442  [key=2, style=dotted];
m3_434 -> m3_435  [key=0, style=solid];
m3_434 -> n369  [key=2, style=dotted];
m3_430 -> m3_434  [key=1, style=dashed, color=darkseagreen4, label=ms];
m3_430 -> m3_431  [key=0, style=solid];
m3_430 -> m3_439  [key=2, style=dotted];
m3_431 -> m3_432  [key=0, style=solid];
m3_431 -> m3_440  [key=2, style=dotted];
m3_431 -> m3_433  [key=1, style=dashed, color=darkseagreen4, label=tw];
m3_433 -> m3_434  [key=0, style=solid];
m3_433 -> m3_443  [key=2, style=dotted];
m3_438 -> m3_426  [key=0, style=bold, color=blue];
m3_349 -> m3_350  [key=0, style=solid];
m3_350 -> m3_8  [key=2, style=dotted];
m3_350 -> m3_351  [key=0, style=solid];
m3_350 -> m3_352  [key=2, style=dotted];
m3_350 -> m3_353  [key=2, style=dotted];
m3_351 -> m3_349  [key=0, style=bold, color=blue];
m3_118 -> m3_8  [key=2, style=dotted];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_138  [key=2, style=dotted];
m3_120 -> m3_8  [key=2, style=dotted];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_9  [key=2, style=dotted];
m3_122 -> m3_8  [key=2, style=dotted];
m3_122 -> m3_123  [key=0, style=solid];
m3_122 -> m3_9  [key=2, style=dotted];
m3_124 -> m3_8  [key=2, style=dotted];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_138  [key=2, style=dotted];
m3_126 -> m3_8  [key=2, style=dotted];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_138  [key=2, style=dotted];
m3_128 -> m3_8  [key=2, style=dotted];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_138  [key=2, style=dotted];
m3_130 -> m3_8  [key=2, style=dotted];
m3_130 -> m3_131  [key=0, style=solid];
m3_130 -> m3_138  [key=2, style=dotted];
m3_132 -> m3_8  [key=2, style=dotted];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_138  [key=2, style=dotted];
m3_134 -> m3_8  [key=2, style=dotted];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_138  [key=2, style=dotted];
m3_133 -> m3_97  [key=2, style=dotted];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_145  [key=2, style=dotted];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_136  [key=2, style=dotted];
m3_117 -> m3_137  [key=2, style=dotted];
m3_119 -> m3_120  [key=0, style=solid];
m3_119 -> m3_27  [key=2, style=dotted];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_29  [key=2, style=dotted];
m3_123 -> m3_124  [key=0, style=solid];
m3_123 -> m3_29  [key=2, style=dotted];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_139  [key=2, style=dotted];
m3_125 -> m3_140  [key=2, style=dotted];
m3_127 -> m3_128  [key=0, style=solid];
m3_127 -> m3_94  [key=2, style=dotted];
m3_127 -> m3_141  [key=2, style=dotted];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_95  [key=2, style=dotted];
m3_129 -> m3_142  [key=2, style=dotted];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_143  [key=2, style=dotted];
m3_131 -> m3_144  [key=2, style=dotted];
m3_135 -> m3_113  [key=0, style=bold, color=blue];
m3_209 -> m3_210  [key=0, style=solid];
m3_210 -> m3_93  [key=2, style=dotted];
m3_210 -> m3_211  [key=0, style=solid];
m3_211 -> m3_212  [key=0, style=solid];
m3_211 -> m3_208  [key=2, style=dotted];
m3_212 -> m3_209  [key=0, style=bold, color=blue];
m3_291 -> m3_292  [key=0, style=solid];
m3_295 -> m3_8  [key=2, style=dotted];
m3_295 -> m3_296  [key=0, style=solid];
m3_292 -> m3_286  [key=2, style=dotted];
m3_292 -> m3_293  [key=0, style=solid];
m3_292 -> m3_294  [key=1, style=dashed, color=darkseagreen4, label=jTokenWriter];
m3_294 -> m3_295  [key=0, style=solid];
m3_294 -> m3_287  [key=2, style=dotted];
m3_294 -> m3_297  [key=2, style=dotted];
m3_294 -> m3_298  [key=2, style=dotted];
m3_293 -> m3_287  [key=2, style=dotted];
m3_293 -> m3_288  [key=2, style=dotted];
m3_293 -> m3_294  [key=0, style=solid];
m3_296 -> m3_291  [key=0, style=bold, color=blue];
m3_358 -> m3_359  [key=0, style=solid];
m3_359 -> m3_8  [key=2, style=dotted];
m3_359 -> m3_360  [key=0, style=solid];
m3_359 -> m3_30  [key=2, style=dotted];
m3_359 -> m3_361  [key=2, style=dotted];
m3_360 -> m3_358  [key=0, style=bold, color=blue];
m3_407 -> m3_408  [key=0, style=solid];
m3_409 -> m3_8  [key=2, style=dotted];
m3_409 -> m3_410  [key=0, style=solid];
m3_409 -> m3_143  [key=2, style=dotted];
m3_409 -> m3_400  [key=2, style=dotted];
m3_408 -> m3_409  [key=0, style=solid];
m3_408 -> m3_144  [key=2, style=dotted];
m3_410 -> m3_407  [key=0, style=bold, color=blue];
m3_631 -> m3_282  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Linq.JValueTests"];
m3_631 -> m3_295  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Linq.JValueTests"];
m3_631 -> m3_293  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Linq.JValueTests"];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_9  [key=0, style=solid];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_11  [key=2, style=dotted];
m4_2 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=assembly];
m4_4 -> m4_10  [key=0, style=solid];
m4_4 -> m4_12  [key=2, style=dotted];
m4_4 -> d29  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_14  [key=2, style=dotted];
m4_5 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=type];
m4_7 -> m4_10  [key=0, style=solid];
m4_7 -> m4_12  [key=2, style=dotted];
m4_7 -> d29  [key=2, style=dotted];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_15  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_5  [key=0, style=solid];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=0, style=solid];
m4_8 -> m4_10  [key=0, style=solid];
m4_10 -> m4_0  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_5  [key=2, style=dotted];
m7_1 -> n304  [key=2, style=dotted];
m7_1 -> m7_7  [key=2, style=dotted];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_8  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_9  [key=2, style=dotted];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m8_18 -> m8_19  [key=0, style=solid, color=green];
m8_18 -> m8_20  [key=0, style=solid];
m8_19 -> m8_20  [key=0, style=solid, color=green];
m8_19 -> m8_4  [key=2, style=dotted, color=green];
m8_20 -> m8_21  [key=0, style=solid, color=red];
m8_20 -> m8_26  [key=2, style=dotted, color=red];
m8_20 -> m8_22  [key=1, style=dashed, color=red, label=schema];
m8_20 -> m8_17  [key=0, style=bold, color=blue];
m8_21 -> m8_22  [key=0, style=solid, color=red];
m8_21 -> m8_15  [key=2, style=dotted];
m8_21 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m8_22 -> m8_23  [key=0, style=solid, color=red];
m8_22 -> m8_16  [key=2, style=dotted, color=red];
m8_22 -> m8_24  [key=1, style=dashed, color=red, label=node];
m8_22 -> m8_25  [key=2, style=dotted];
m8_23 -> m8_24  [key=0, style=solid, color=red];
m8_23 -> n43  [key=2, style=dotted];
m8_24 -> m8_25  [key=0, style=solid, color=red];
m8_24 -> n43  [key=2, style=dotted, color=red];
m8_24 -> m8_21  [key=0, style=bold, color=blue];
m8_25 -> m8_18  [key=0, style=bold, color=blue];
m8_15 -> m8_16  [key=0, style=solid, color=green];
m8_15 -> m8_4  [key=2, style=dotted, color=green];
m8_13 -> m8_15  [key=1, style=dashed, color=green, label=object];
m8_13 -> m8_14  [key=0, style=solid];
m8_14 -> m8_15  [key=0, style=solid, color=green];
m8_14 -> m8_16  [key=0, style=solid];
m8_16 -> m8_13  [key=0, style=bold, color=blue];
m8_26 -> m8_2  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_7  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_11  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_15  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_19  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_18  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_26 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m8_9 -> m8_11  [key=1, style=dashed, color=green, label=object];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> n43  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid, color=green];
m8_11 -> m8_4  [key=2, style=dotted, color=green];
m8_11 -> n43  [key=2, style=dotted];
m8_10 -> m8_11  [key=0, style=solid, color=green];
m8_10 -> m8_12  [key=0, style=solid];
m8_10 -> n43  [key=2, style=dotted];
m8_12 -> m8_9  [key=0, style=bold, color=blue];
m8_12 -> m8_0  [key=0, style=bold, color=blue];
m8_5 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label=secondSchema];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_14  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid, color=green];
m8_7 -> m8_4  [key=2, style=dotted, color=green];
m8_7 -> m8_16  [key=2, style=dotted];
m8_7 -> m8_9  [key=1, style=dashed, color=darkseagreen4, label=node];
m8_7 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=node];
m8_7 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=node];
m8_6 -> m8_7  [key=0, style=solid, color=green];
m8_6 -> m8_8  [key=0, style=solid];
m8_6 -> m8_15  [key=2, style=dotted];
m8_8 -> m8_5  [key=0, style=bold, color=blue];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> n43  [key=2, style=dotted];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_14  [key=2, style=dotted];
m8_0 -> m8_2  [key=1, style=dashed, color=green, label=object];
m8_0 -> m8_1  [key=0, style=solid, color=red];
m8_2 -> m8_3  [key=0, style=solid, color=green];
m8_2 -> m8_4  [key=2, style=dotted, color=green];
m8_2 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label=second];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_1 -> m8_3  [key=0, style=solid];
m8_1 -> m8_4  [key=1, style=dashed, color=red, label=first];
m8_3 -> m8_0  [key=0, style=bold, color=blue];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_13  [key=2, style=dotted];
m8_3 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label=resolver];
m8_17 -> m8_19  [key=1, style=dashed, color=green, label=object];
m8_17 -> m8_18  [key=0, style=solid];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_8  [key=2, style=dotted];
m9_1 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label=array];
m9_1 -> m9_5  [key=1, style=dashed, color=darkseagreen4, label=array];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_9  [key=2, style=dotted];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_10  [key=2, style=dotted];
m9_3 -> m9_9  [key=2, style=dotted];
m9_5 -> m9_6  [key=0, style=solid];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> n163  [key=2, style=dotted];
m9_4 -> m9_6  [key=1, style=dashed, color=darkseagreen4, label=o];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> m9_12  [key=2, style=dotted];
m9_7 -> m9_0  [key=0, style=bold, color=blue];
m9_8 -> m9_6  [key=3, color=green, style=bold, label="Property variable Newtonsoft.Json.Serialization.IReferenceResolver ReferenceResolver"];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label=object];
m10_5 -> m10_8  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m10_5 -> m10_19  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Exception error"];
m10_5 -> m10_15  [key=2, style=dotted];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_8  [key=0, style=solid];
m10_6 -> m10_13  [key=2, style=dotted];
m10_6 -> m10_16  [key=2, style=dotted];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_12  [key=2, style=dotted];
m10_7 -> m10_15  [key=2, style=dotted];
m10_7 -> m10_17  [key=2, style=dotted];
m10_8 -> m10_9  [key=0, style=solid];
m10_8 -> m10_10  [key=0, style=solid];
m10_8 -> m10_17  [key=2, style=dotted];
m10_8 -> m10_18  [key=2, style=dotted];
m10_9 -> m10_11  [key=0, style=solid];
m10_9 -> m10_13  [key=2, style=dotted];
m10_9 -> m10_0  [key=0, style=bold, color=blue];
m10_10 -> m10_11  [key=0, style=solid];
m10_11 -> m10_5  [key=0, style=bold, color=blue];
m10_18 -> m10_14  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid, color=green];
m10_0 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
m10_1 -> m10_2  [key=0, style=solid, color=green];
m10_1 -> m10_10  [key=2, style=dotted, color=green];
m10_1 -> m10_11  [key=2, style=dotted, color=green];
m10_1 -> m10_12  [key=2, style=dotted, color=green];
m10_1 -> m10_4  [key=1, style=dashed, color=green, label=stockholder];
m10_1 -> d11  [key=2, style=dotted];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_13  [key=2, style=dotted];
m10_2 -> m10_14  [key=2, style=dotted];
m10_4 -> m10_5  [key=0, style=solid];
m10_4 -> m10_13  [key=2, style=dotted];
m10_4 -> m10_14  [key=2, style=dotted];
m10_4 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label=jsonTypeNameAuto];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_15  [key=2, style=dotted];
m10_3 -> m10_0  [key=0, style=bold, color=blue];
m10_14 -> m10_15  [key=0, style=solid];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_17  [key=0, style=solid];
m10_16 -> m10_18  [key=0, style=solid];
m10_16 -> m10_13  [key=2, style=dotted];
m10_17 -> m10_18  [key=0, style=solid];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_21  [key=1, style=dashed, color=red, label=object];
m10_19 -> m10_23  [key=1, style=dashed, color=darkseagreen4, label=object];
m10_20 -> m10_21  [key=0, style=solid, color=red];
m10_20 -> m10_5  [key=2, style=dotted];
m10_20 -> m10_22  [key=1, style=dashed, color=darkseagreen4, label=errorContext];
m10_20 -> m10_23  [key=1, style=dashed, color=darkseagreen4, label=errorContext];
m10_20 -> m10_24  [key=1, style=dashed, color=darkseagreen4, label=errorContext];
m10_21 -> m10_22  [key=0, style=solid, color=red];
m10_21 -> m10_26  [key=2, style=dotted, color=red];
m10_23 -> m10_24  [key=0, style=solid];
m10_23 -> m10_27  [key=2, style=dotted];
m10_23 -> m10_28  [key=2, style=dotted];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_24  [key=0, style=solid];
m10_24 -> m10_25  [key=0, style=solid];
m10_25 -> m10_19  [key=0, style=bold, color=blue];
m10_29 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_15  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m10_29 -> m10_23  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase"];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> n20  [key=2, style=dotted];
m11_1 -> m11_6  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_7  [key=2, style=dotted];
m11_2 -> m11_2  [key=1, style=dashed, color=darkseagreen4, label=p];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_8  [key=2, style=dotted];
m11_3 -> m11_9  [key=2, style=dotted];
m11_4 -> m11_0  [key=0, style=bold, color=blue];
m12_263 -> m12_256  [key=0, style=bold, color=blue];
m12_256 -> m12_257  [key=0, style=solid];
m12_256 -> m12_258  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.DictionaryEntry"];
m12_256 -> m12_238  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.DictionaryEntry entry"];
m12_257 -> m12_258  [key=0, style=solid];
m12_258 -> m12_259  [key=0, style=solid];
m12_258 -> m12_260  [key=0, style=solid];
m12_258 -> m12_258  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.DictionaryEntry"];
m12_259 -> m12_263  [key=0, style=solid];
m12_259 -> m12_264  [key=2, style=dotted];
m12_259 -> m12_259  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.DictionaryEntry"];
m12_259 -> m12_262  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.DictionaryEntry"];
m12_260 -> m12_261  [key=0, style=solid];
m12_260 -> m12_262  [key=0, style=solid];
m12_260 -> m12_20  [key=2, style=dotted];
m12_260 -> m12_124  [key=2, style=dotted];
m12_260 -> m12_260  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.DictionaryEntry"];
m12_261 -> m12_263  [key=0, style=solid];
m12_262 -> m12_263  [key=0, style=solid];
m12_262 -> m12_113  [key=2, style=dotted];
m12_262 -> m12_20  [key=2, style=dotted];
m12_262 -> d29  [key=2, style=dotted];
m12_262 -> m12_262  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.DictionaryEntry"];
m12_10 -> m12_11  [key=0, style=solid];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=0, style=solid];
m12_11 -> m12_9  [key=0, style=bold, color=blue];
m12_12 -> m12_13  [key=0, style=solid];
m12_12 -> m12_15  [key=2, style=dotted];
m12_13 -> m12_14  [key=0, style=solid];
m12_14 -> m12_10  [key=0, style=bold, color=blue];
m12_14 -> m12_12  [key=0, style=bold, color=blue];
m12_15 -> m12_16  [key=0, style=solid];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_18  [key=0, style=solid];
m12_17 -> m12_15  [key=0, style=bold, color=blue];
m12_17 -> m12_19  [key=0, style=solid];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_0  [key=0, style=bold, color=blue];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_6  [key=0, style=solid];
m12_4 -> m12_7  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_5  [key=0, style=solid];
m12_5 -> m12_0  [key=0, style=bold, color=blue];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_8  [key=2, style=dotted];
m12_5 -> m12_9  [key=2, style=dotted];
m12_100 -> m12_101  [key=0, style=solid];
m12_100 -> m12_102  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.ReferenceLoopHandling?"];
m12_100 -> m12_79  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_100 -> m12_45  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_100 -> m12_209  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_100 -> m12_240  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_100 -> m12_5  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.ReferenceLoopHandling? referenceLoopHandling"];
m12_100 -> m12_57  [key=3, color=darkorchid, style=bold, label="method methodReturn bool CheckForCircularReference"];
m12_100 -> m12_108  [key=3, color=darkorchid, style=bold, label="method methodReturn bool CheckForCircularReference"];
m12_101 -> m12_102  [key=0, style=solid];
m12_101 -> m12_110  [key=0, style=solid];
m12_101 -> m12_112  [key=2, style=dotted];
m12_102 -> m12_103  [key=0, style=solid];
m12_102 -> m12_105  [key=0, style=solid];
m12_102 -> m12_107  [key=0, style=solid];
m12_102 -> m12_109  [key=0, style=solid];
m12_102 -> m12_96  [key=2, style=dotted];
m12_110 -> m12_111  [key=0, style=solid];
m12_103 -> m12_104  [key=0, style=solid];
m12_105 -> m12_106  [key=0, style=solid];
m12_107 -> m12_108  [key=0, style=solid];
m12_109 -> m12_111  [key=0, style=solid];
m12_109 -> m12_114  [key=2, style=dotted];
m12_109 -> d29  [key=2, style=dotted];
m12_104 -> m12_111  [key=0, style=solid];
m12_104 -> m12_113  [key=2, style=dotted];
m12_106 -> m12_111  [key=0, style=solid];
m12_108 -> m12_111  [key=0, style=solid];
m12_111 -> m12_100  [key=0, style=bold, color=blue];
m12_7 -> m12_8  [key=0, style=solid];
m12_124 -> m12_125  [key=0, style=solid];
m12_124 -> m12_126  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_124 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_124 -> m12_108  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryConvertToString"];
m12_124 -> m12_57  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryConvertToString"];
m12_124 -> m12_49  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_124 -> m12_137  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m12_124 -> m12_257  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m12_125 -> m12_126  [key=0, style=solid];
m12_125 -> m12_133  [key=2, style=dotted];
m12_125 -> m12_127  [key=1, style=dashed, color=darkseagreen4, label=converter];
m12_125 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=converter];
m12_126 -> m12_127  [key=0, style=solid];
m12_126 -> m12_130  [key=0, style=solid];
m12_126 -> m12_20  [key=2, style=dotted];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> m12_135  [key=2, style=dotted];
m12_127 -> m12_128  [key=0, style=solid];
m12_127 -> m12_130  [key=0, style=solid];
m12_127 -> m12_134  [key=2, style=dotted];
m12_130 -> m12_131  [key=0, style=solid];
m12_130 -> m12_132  [key=1, style=dashed, color=darkseagreen4, label="out string"];
m12_129 -> m12_132  [key=0, style=solid];
m12_131 -> m12_132  [key=0, style=solid];
m12_132 -> m12_124  [key=0, style=bold, color=blue];
m12_77 -> m12_176  [key=0, style=solid];
m12_77 -> m12_67  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.PreserveReferencesHandling flag"];
m12_77 -> m12_69  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.PreserveReferencesHandling flag"];
m12_176 -> m12_177  [key=0, style=solid];
m12_177 -> m12_77  [key=0, style=bold, color=blue];
m12_168 -> m12_173  [key=0, style=solid];
m12_168 -> m12_174  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_168 -> m12_49  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_168 -> m12_51  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_168 -> m12_50  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_173 -> m12_174  [key=0, style=solid];
m12_173 -> m12_98  [key=2, style=dotted];
m12_174 -> m12_175  [key=0, style=solid];
m12_174 -> m12_122  [key=2, style=dotted];
m12_175 -> m12_168  [key=0, style=bold, color=blue];
m12_167 -> m12_178  [key=0, style=solid];
m12_167 -> m12_69  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.TypeNameHandling flag"];
m12_167 -> m12_67  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.TypeNameHandling flag"];
m12_178 -> m12_179  [key=0, style=solid];
m12_179 -> m12_167  [key=0, style=bold, color=blue];
m12_51 -> m12_193  [key=0, style=solid, color=red];
m12_51 -> m12_194  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m12_51 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonArrayContract"];
m12_51 -> m12_198  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_200  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_201  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_204  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_205  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_206  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_208  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m12_51 -> m12_209  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m12_51 -> m12_212  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_214  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_216  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m12_51 -> m12_217  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_220  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_222  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_51 -> m12_224  [key=1, style=dashed, color=red, label="System.Collections.IList"];
m12_51 -> m12_9  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonArrayContract contract"];
m12_51 -> m12_52  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonArrayContract contract"];
m12_193 -> m12_194  [key=0, style=solid, color=red];
m12_193 -> m12_164  [key=2, style=dotted, color=red];
m12_194 -> m12_195  [key=0, style=solid];
m12_194 -> m12_166  [key=2, style=dotted];
m12_195 -> m12_196  [key=0, style=solid];
m12_195 -> m12_77  [key=2, style=dotted];
m12_195 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_195 -> m12_199  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_195 -> m12_221  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_198 -> m12_199  [key=0, style=solid];
m12_198 -> m12_120  [key=2, style=dotted];
m12_200 -> m12_201  [key=0, style=solid];
m12_200 -> m12_98  [key=2, style=dotted];
m12_201 -> m12_202  [key=0, style=solid];
m12_201 -> m12_121  [key=2, style=dotted];
m12_201 -> m12_122  [key=2, style=dotted];
m12_203 -> m12_204  [key=0, style=solid];
m12_203 -> m12_20  [key=2, style=dotted];
m12_203 -> m12_168  [key=2, style=dotted];
m12_204 -> m12_205  [key=0, style=solid];
m12_204 -> m12_98  [key=2, style=dotted];
m12_205 -> m12_206  [key=0, style=solid];
m12_205 -> m12_226  [key=2, style=dotted];
m12_206 -> m12_207  [key=0, style=solid];
m12_206 -> m12_217  [key=1, style=dashed, color=darkseagreen4, label=initialDepth];
m12_208 -> m12_209  [key=0, style=solid];
m12_208 -> m12_220  [key=0, style=solid];
m12_208 -> m12_208  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m12_209 -> m12_210  [key=0, style=solid];
m12_209 -> m12_211  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_209 -> m12_212  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_209 -> m12_213  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_209 -> m12_214  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_212 -> m12_215  [key=0, style=solid];
m12_212 -> m12_219  [key=0, style=solid];
m12_212 -> m12_99  [key=2, style=dotted];
m12_214 -> m12_215  [key=0, style=solid];
m12_214 -> m12_219  [key=0, style=solid];
m12_214 -> m12_9  [key=2, style=dotted];
m12_216 -> m12_217  [key=0, style=solid];
m12_216 -> m12_218  [key=0, style=solid];
m12_216 -> m12_170  [key=2, style=dotted];
m12_217 -> m12_219  [key=0, style=solid];
m12_217 -> m12_171  [key=2, style=dotted];
m12_220 -> m12_221  [key=0, style=solid];
m12_220 -> m12_227  [key=2, style=dotted];
m12_222 -> m12_223  [key=0, style=solid];
m12_222 -> m12_123  [key=2, style=dotted];
m12_224 -> m12_225  [key=0, style=solid, color=red];
m12_224 -> m12_165  [key=2, style=dotted, color=red];
m12_196 -> m12_197  [key=0, style=solid];
m12_196 -> m12_167  [key=2, style=dotted];
m12_196 -> m12_202  [key=1, style=dashed, color=darkseagreen4, label=includeTypeDetails];
m12_196 -> m12_221  [key=1, style=dashed, color=darkseagreen4, label=includeTypeDetails];
m12_197 -> m12_198  [key=0, style=solid];
m12_197 -> m12_205  [key=0, style=solid];
m12_199 -> m12_200  [key=0, style=solid];
m12_199 -> m12_202  [key=0, style=solid];
m12_221 -> m12_222  [key=0, style=solid];
m12_221 -> m12_223  [key=0, style=solid];
m12_202 -> m12_203  [key=0, style=solid];
m12_202 -> m12_204  [key=0, style=solid];
m12_207 -> m12_208  [key=0, style=solid];
m12_207 -> m12_209  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_207 -> m12_216  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_207 -> m12_219  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_219 -> m12_208  [key=0, style=solid];
m12_219 -> m12_219  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_210 -> m12_211  [key=0, style=solid];
m12_210 -> m12_8  [key=2, style=dotted];
m12_210 -> m12_214  [key=1, style=dashed, color=darkseagreen4, label=valueContract];
m12_211 -> m12_212  [key=0, style=solid];
m12_211 -> m12_213  [key=0, style=solid];
m12_211 -> m12_55  [key=2, style=dotted];
m12_213 -> m12_214  [key=0, style=solid];
m12_213 -> m12_208  [key=0, style=solid];
m12_213 -> m12_100  [key=2, style=dotted];
m12_215 -> m12_216  [key=0, style=solid];
m12_218 -> m12_225  [key=0, style=solid];
m12_223 -> m12_224  [key=0, style=solid, color=red];
m12_223 -> m12_172  [key=2, style=dotted];
m12_225 -> m12_51  [key=0, style=bold, color=blue];
m12_55 -> m12_56  [key=0, style=solid];
m12_55 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_55 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m12_55 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m12_55 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_55 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_55 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_55 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_55 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_55 -> m12_57  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ShouldWriteReference"];
m12_55 -> m12_79  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_55 -> m12_45  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_55 -> m12_209  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_55 -> m12_240  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_55 -> m12_5  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonProperty property"];
m12_55 -> m12_210  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_55 -> m12_241  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_58  [key=0, style=solid];
m12_58 -> m12_59  [key=0, style=solid];
m12_58 -> m12_60  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_63  [key=0, style=solid];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_62 -> m12_73  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_73  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_68  [key=0, style=solid];
m12_68 -> m12_69  [key=0, style=solid];
m12_68 -> m12_70  [key=0, style=solid];
m12_70 -> m12_71  [key=0, style=solid];
m12_70 -> m12_72  [key=0, style=solid];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_78  [key=2, style=dotted];
m12_57 -> m12_76  [key=0, style=solid];
m12_59 -> m12_76  [key=0, style=solid];
m12_60 -> m12_61  [key=0, style=solid];
m12_60 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_60 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_60 -> m12_73  [key=1, style=dashed, color=darkseagreen4, label=isReference];
m12_60 -> m12_5  [key=3, color=darkorchid, style=bold, label="Local variable bool? isReference"];
m12_60 -> m12_77  [key=3, color=darkorchid, style=bold, label="Local variable bool? isReference"];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_65  [key=0, style=solid];
m12_65 -> m12_66  [key=0, style=solid];
m12_65 -> m12_73  [key=0, style=solid];
m12_73 -> m12_74  [key=0, style=solid];
m12_73 -> m12_75  [key=0, style=solid];
m12_67 -> m12_73  [key=0, style=solid];
m12_67 -> m12_77  [key=2, style=dotted];
m12_69 -> m12_73  [key=0, style=solid];
m12_69 -> m12_77  [key=2, style=dotted];
m12_71 -> m12_73  [key=0, style=solid];
m12_71 -> m12_77  [key=2, style=dotted];
m12_72 -> m12_73  [key=0, style=solid];
m12_72 -> m12_77  [key=2, style=dotted];
m12_74 -> m12_76  [key=0, style=solid];
m12_76 -> m12_55  [key=0, style=bold, color=blue];
m12_35 -> m12_42  [key=0, style=solid];
m12_35 -> m12_50  [key=2, style=dotted];
m12_49 -> m12_136  [key=0, style=solid, color=red];
m12_49 -> m12_138  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_49 -> m12_139  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_140  [key=1, style=dashed, color=red, label=object];
m12_49 -> m12_142  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_49 -> m12_143  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_144  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m12_49 -> m12_146  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_147  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_150  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_151  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m12_49 -> m12_153  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_49 -> m12_155  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_157  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_49 -> m12_158  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_160  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_49 -> m12_162  [key=1, style=dashed, color=red, label=object];
m12_49 -> m12_9  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonObjectContract contract"];
m12_136 -> m12_137  [key=0, style=solid, color=red];
m12_136 -> m12_164  [key=2, style=dotted, color=red];
m12_138 -> m12_139  [key=0, style=solid];
m12_138 -> m12_142  [key=0, style=solid];
m12_138 -> m12_124  [key=2, style=dotted];
m12_139 -> m12_140  [key=0, style=solid, color=red];
m12_139 -> m12_122  [key=2, style=dotted];
m12_140 -> m12_141  [key=0, style=solid, color=red];
m12_140 -> m12_165  [key=2, style=dotted, color=red];
m12_142 -> m12_143  [key=0, style=solid];
m12_142 -> m12_166  [key=2, style=dotted];
m12_143 -> m12_144  [key=0, style=solid];
m12_143 -> m12_120  [key=2, style=dotted];
m12_144 -> m12_145  [key=0, style=solid];
m12_144 -> m12_77  [key=2, style=dotted];
m12_146 -> m12_147  [key=0, style=solid];
m12_146 -> m12_98  [key=2, style=dotted];
m12_147 -> m12_148  [key=0, style=solid];
m12_147 -> m12_121  [key=2, style=dotted];
m12_147 -> m12_122  [key=2, style=dotted];
m12_149 -> m12_150  [key=0, style=solid];
m12_149 -> m12_168  [key=2, style=dotted];
m12_150 -> m12_151  [key=0, style=solid];
m12_150 -> m12_158  [key=1, style=dashed, color=darkseagreen4, label=initialDepth];
m12_151 -> m12_152  [key=0, style=solid];
m12_151 -> m12_160  [key=0, style=solid];
m12_151 -> m12_153  [key=1, style=dashed, color=darkseagreen4, label=property];
m12_151 -> m12_155  [key=1, style=dashed, color=darkseagreen4, label=property];
m12_151 -> m12_157  [key=1, style=dashed, color=darkseagreen4, label=property];
m12_153 -> m12_154  [key=0, style=solid];
m12_153 -> m12_169  [key=2, style=dotted];
m12_153 -> m12_155  [key=1, style=dashed, color=darkseagreen4, label=memberValue];
m12_155 -> m12_156  [key=0, style=solid];
m12_155 -> m12_151  [key=0, style=solid];
m12_155 -> m12_79  [key=2, style=dotted];
m12_157 -> m12_158  [key=0, style=solid];
m12_157 -> m12_159  [key=0, style=solid];
m12_157 -> m12_170  [key=2, style=dotted];
m12_158 -> m12_151  [key=0, style=solid];
m12_158 -> m12_171  [key=2, style=dotted];
m12_160 -> m12_161  [key=0, style=solid];
m12_160 -> m12_123  [key=2, style=dotted];
m12_162 -> m12_163  [key=0, style=solid, color=red];
m12_162 -> m12_165  [key=2, style=dotted, color=red];
m12_137 -> m12_138  [key=0, style=solid];
m12_141 -> m12_163  [key=0, style=solid];
m12_145 -> m12_146  [key=0, style=solid];
m12_145 -> m12_148  [key=0, style=solid];
m12_148 -> m12_149  [key=0, style=solid];
m12_148 -> m12_150  [key=0, style=solid];
m12_148 -> m12_167  [key=2, style=dotted];
m12_152 -> m12_153  [key=0, style=solid];
m12_152 -> m12_156  [key=0, style=solid];
m12_152 -> m12_151  [key=0, style=solid];
m12_156 -> m12_157  [key=0, style=solid];
m12_154 -> m12_155  [key=0, style=solid];
m12_154 -> m12_8  [key=2, style=dotted];
m12_159 -> m12_163  [key=0, style=solid];
m12_161 -> m12_162  [key=0, style=solid, color=red];
m12_161 -> m12_172  [key=2, style=dotted];
m12_163 -> m12_49  [key=0, style=bold, color=blue];
m12_36 -> m12_37  [key=0, style=solid];
m12_36 -> m12_42  [key=0, style=solid];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_39  [key=0, style=solid];
m12_8 -> m12_16  [key=0, style=solid];
m12_8 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_8 -> m12_2  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_8 -> m12_153  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_8 -> m12_209  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_8 -> m12_240  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_8 -> m12_5  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract GetContractSafe"];
m12_8 -> m12_6  [key=0, style=bold, color=blue];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_20  [key=2, style=dotted];
m12_18 -> m12_21  [key=2, style=dotted];
m12_19 -> m12_8  [key=0, style=bold, color=blue];
m12_19 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_28  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_25  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_0  [key=2, style=dotted];
m12_19 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_26  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_27  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_19 -> m12_7  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonSerializerProxy GetInternalSerializer"];
m12_38 -> m12_42  [key=0, style=solid];
m12_38 -> m12_51  [key=2, style=dotted];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_2  [key=0, style=bold, color=blue];
m12_52 -> m12_189  [key=0, style=solid];
m12_52 -> m12_9  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonArrayContract contract"];
m12_189 -> m12_190  [key=0, style=solid];
m12_189 -> m12_191  [key=2, style=dotted];
m12_189 -> m12_192  [key=2, style=dotted];
m12_189 -> m12_51  [key=2, style=dotted];
m12_190 -> m12_52  [key=0, style=bold, color=blue];
m12_9 -> m12_22  [key=0, style=solid];
m12_9 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_9 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_26  [key=1, style=dashed, color=red, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_9 -> m12_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_9 -> m12_29  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_9 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_9 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_34  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_9 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_36  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m12_9 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_9 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_9 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_9 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_9 -> m12_2  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_9 -> m12_79  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_9 -> m12_51  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_9 -> m12_50  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_9 -> m12_209  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_9 -> m12_240  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_9 -> m12_5  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonConverter memberConverter"];
m12_9 -> m12_81  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonConverter memberConverter"];
m12_9 -> m12_8  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_9 -> m12_210  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_9 -> m12_241  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_9 -> m12_10  [key=0, style=solid];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_26  [key=1, style=dashed, color=red, label=converter];
m12_22 -> m12_9  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.JsonConverter converter"];
m12_22 -> m12_36  [key=2, style=dotted];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_26  [key=0, style=solid, color=red];
m12_23 -> m12_36  [key=2, style=dotted];
m12_23 -> m12_16  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_23 -> m12_18  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract GetContractSafe"];
m12_24 -> m12_25  [key=0, style=solid];
m12_24 -> m12_43  [key=2, style=dotted];
m12_24 -> m12_29  [key=1, style=dashed, color=darkseagreen4, label=json];
m12_24 -> m12_37  [key=2, style=dotted];
m12_26 -> m12_27  [key=0, style=solid, color=red];
m12_26 -> m12_28  [key=0, style=solid, color=red];
m12_26 -> m12_44  [key=2, style=dotted, color=red];
m12_26 -> m12_26  [key=1, style=dashed, color=red, label=converter];
m12_26 -> m12_36  [key=2, style=dotted];
m12_27 -> m12_42  [key=0, style=solid];
m12_27 -> m12_45  [key=2, style=dotted];
m12_27 -> m12_28  [key=0, style=solid];
m12_27 -> m12_36  [key=2, style=dotted];
m12_28 -> m12_29  [key=0, style=solid];
m12_28 -> m12_30  [key=0, style=solid];
m12_28 -> m12_36  [key=2, style=dotted];
m12_29 -> m12_42  [key=0, style=solid];
m12_29 -> m12_46  [key=2, style=dotted];
m12_29 -> m12_30  [key=0, style=solid, color=green];
m12_29 -> m12_38  [key=2, style=dotted];
m12_29 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_29 -> m12_32  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_29 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label=obj];
m12_30 -> m12_31  [key=0, style=solid, color=green];
m12_30 -> m12_32  [key=0, style=solid];
m12_30 -> m12_35  [key=2, style=dotted, color=green];
m12_31 -> m12_42  [key=0, style=solid];
m12_31 -> m12_47  [key=2, style=dotted];
m12_31 -> m12_48  [key=2, style=dotted];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_36  [key=2, style=dotted];
m12_32 -> m12_33  [key=0, style=solid];
m12_32 -> m12_34  [key=0, style=solid];
m12_32 -> m12_36  [key=2, style=dotted];
m12_33 -> m12_42  [key=0, style=solid];
m12_33 -> m12_49  [key=2, style=dotted];
m12_33 -> m12_34  [key=0, style=solid];
m12_33 -> m12_36  [key=2, style=dotted];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_36  [key=0, style=solid];
m12_34 -> m12_18  [key=0, style=bold, color=blue];
m12_39 -> m12_40  [key=0, style=solid];
m12_39 -> m12_41  [key=0, style=solid];
m12_39 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_39 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializationCallbackAttributes.SerializationEventTestObject"];
m12_40 -> m12_42  [key=0, style=solid];
m12_40 -> m12_52  [key=2, style=dotted];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_53  [key=2, style=dotted];
m12_41 -> m12_20  [key=2, style=dotted];
m12_41 -> d29  [key=2, style=dotted];
m12_25 -> m12_42  [key=0, style=solid];
m12_25 -> m12_35  [key=2, style=dotted];
m12_25 -> m12_26  [key=0, style=solid];
m12_42 -> m12_9  [key=0, style=bold, color=blue];
m12_45 -> m12_180  [key=0, style=solid];
m12_45 -> m12_181  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_45 -> m12_182  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_45 -> m12_184  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_45 -> m12_185  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_45 -> m12_9  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_45 -> m12_22  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonConverter converter"];
m12_180 -> m12_181  [key=0, style=solid];
m12_180 -> m12_182  [key=0, style=solid];
m12_180 -> m12_55  [key=2, style=dotted];
m12_181 -> m12_187  [key=0, style=solid];
m12_181 -> m12_99  [key=2, style=dotted];
m12_182 -> m12_183  [key=0, style=solid];
m12_182 -> m12_184  [key=0, style=solid];
m12_182 -> m12_100  [key=2, style=dotted];
m12_184 -> m12_185  [key=0, style=solid];
m12_184 -> m12_166  [key=2, style=dotted];
m12_185 -> m12_186  [key=0, style=solid];
m12_185 -> m12_10  [key=2, style=dotted];
m12_185 -> m12_188  [key=2, style=dotted];
m12_183 -> m12_187  [key=0, style=solid];
m12_186 -> m12_187  [key=0, style=solid];
m12_186 -> m12_172  [key=2, style=dotted];
m12_187 -> m12_45  [key=0, style=bold, color=blue];
m12_20 -> m12_35  [key=2, style=dotted];
m12_20 -> m12_21  [key=0, style=solid];
m12_21 -> m12_36  [key=2, style=dotted];
m12_21 -> m12_22  [key=0, style=solid];
m12_50 -> m12_228  [key=0, style=solid, color=red];
m12_50 -> m12_229  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IDictionary"];
m12_50 -> m12_230  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonDictionaryContract"];
m12_50 -> m12_233  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_234  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_236  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_237  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_238  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IDictionary"];
m12_50 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_244  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_246  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IDictionary"];
m12_50 -> m12_250  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_252  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_50 -> m12_254  [key=1, style=dashed, color=red, label="System.Collections.IDictionary"];
m12_50 -> m12_9  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonDictionaryContract contract"];
m12_228 -> m12_229  [key=0, style=solid, color=red];
m12_228 -> m12_164  [key=2, style=dotted, color=red];
m12_229 -> m12_230  [key=0, style=solid];
m12_229 -> m12_166  [key=2, style=dotted];
m12_230 -> m12_231  [key=0, style=solid];
m12_230 -> m12_120  [key=2, style=dotted];
m12_231 -> m12_232  [key=0, style=solid];
m12_231 -> m12_77  [key=2, style=dotted];
m12_233 -> m12_234  [key=0, style=solid];
m12_233 -> m12_98  [key=2, style=dotted];
m12_234 -> m12_235  [key=0, style=solid];
m12_234 -> m12_121  [key=2, style=dotted];
m12_234 -> m12_122  [key=2, style=dotted];
m12_236 -> m12_237  [key=0, style=solid];
m12_236 -> m12_20  [key=2, style=dotted];
m12_236 -> m12_168  [key=2, style=dotted];
m12_237 -> m12_238  [key=0, style=solid];
m12_237 -> m12_250  [key=1, style=dashed, color=darkseagreen4, label=initialDepth];
m12_238 -> m12_239  [key=0, style=solid];
m12_238 -> m12_252  [key=0, style=solid];
m12_238 -> m12_240  [key=1, style=dashed, color=darkseagreen4, label=entry];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_98  [key=2, style=dotted];
m12_244 -> m12_248  [key=0, style=solid];
m12_244 -> m12_238  [key=0, style=solid];
m12_244 -> m12_99  [key=2, style=dotted];
m12_246 -> m12_247  [key=0, style=solid];
m12_246 -> m12_98  [key=2, style=dotted];
m12_247 -> m12_248  [key=0, style=solid];
m12_247 -> m12_238  [key=0, style=solid];
m12_247 -> m12_9  [key=2, style=dotted];
m12_249 -> m12_250  [key=0, style=solid];
m12_249 -> m12_251  [key=0, style=solid];
m12_249 -> m12_170  [key=2, style=dotted];
m12_250 -> m12_238  [key=0, style=solid];
m12_250 -> m12_171  [key=2, style=dotted];
m12_252 -> m12_253  [key=0, style=solid];
m12_252 -> m12_123  [key=2, style=dotted];
m12_254 -> m12_255  [key=0, style=solid, color=red];
m12_254 -> m12_165  [key=2, style=dotted, color=red];
m12_232 -> m12_233  [key=0, style=solid];
m12_232 -> m12_235  [key=0, style=solid];
m12_235 -> m12_236  [key=0, style=solid];
m12_235 -> m12_237  [key=0, style=solid];
m12_235 -> m12_167  [key=2, style=dotted];
m12_239 -> m12_240  [key=0, style=solid];
m12_239 -> m12_256  [key=2, style=dotted];
m12_239 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m12_239 -> m12_246  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m12_239 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m12_240 -> m12_241  [key=0, style=solid];
m12_240 -> m12_240  [key=1, style=dashed, color=darkseagreen4, label=entry];
m12_240 -> m12_242  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_240 -> m12_244  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_240 -> m12_245  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_240 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label=value];
m12_241 -> m12_242  [key=0, style=solid];
m12_241 -> m12_8  [key=2, style=dotted];
m12_241 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label=valueContract];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_245  [key=0, style=solid];
m12_242 -> m12_55  [key=2, style=dotted];
m12_245 -> m12_246  [key=0, style=solid];
m12_245 -> m12_238  [key=0, style=solid];
m12_245 -> m12_100  [key=2, style=dotted];
m12_248 -> m12_249  [key=0, style=solid];
m12_251 -> m12_255  [key=0, style=solid];
m12_253 -> m12_254  [key=0, style=solid, color=red];
m12_253 -> m12_172  [key=2, style=dotted];
m12_255 -> m12_50  [key=0, style=bold, color=blue];
m12_171 -> m12_265  [key=0, style=solid];
m12_171 -> m12_266  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_171 -> m12_267  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_171 -> m12_49  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_171 -> m12_51  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_171 -> m12_50  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_171 -> m12_150  [key=3, color=darkorchid, style=bold, label="Parameter variable int initialDepth"];
m12_171 -> m12_206  [key=3, color=darkorchid, style=bold, label="Parameter variable int initialDepth"];
m12_171 -> m12_237  [key=3, color=darkorchid, style=bold, label="Parameter variable int initialDepth"];
m12_265 -> m12_266  [key=0, style=solid];
m12_265 -> m12_269  [key=2, style=dotted];
m12_266 -> m12_267  [key=0, style=solid];
m12_266 -> m12_268  [key=0, style=solid];
m12_267 -> m12_266  [key=0, style=solid];
m12_267 -> m12_270  [key=2, style=dotted];
m12_268 -> m12_171  [key=0, style=bold, color=blue];
m12_99 -> m12_115  [key=0, style=solid];
m12_99 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_99 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_99 -> m12_118  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_99 -> m12_79  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_99 -> m12_45  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_99 -> m12_51  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_99 -> m12_50  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_99 -> m12_209  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_99 -> m12_240  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m12_115 -> m12_116  [key=0, style=solid];
m12_115 -> m12_120  [key=2, style=dotted];
m12_116 -> m12_117  [key=0, style=solid];
m12_116 -> m12_98  [key=2, style=dotted];
m12_117 -> m12_118  [key=0, style=solid];
m12_117 -> m12_121  [key=2, style=dotted];
m12_117 -> m12_122  [key=2, style=dotted];
m12_118 -> m12_119  [key=0, style=solid];
m12_118 -> m12_123  [key=2, style=dotted];
m12_119 -> m12_99  [key=0, style=bold, color=blue];
m12_79 -> m12_80  [key=0, style=solid];
m12_79 -> m12_81  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m12_79 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m12_79 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_79 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_79 -> m12_87  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_79 -> m12_88  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_79 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_79 -> m12_91  [key=1, style=dashed, color=darkseagreen4, label=object];
m12_79 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_79 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m12_79 -> m12_49  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonWriter writer"];
m12_79 -> m12_153  [key=3, color=darkorchid, style=bold, label="Parameter variable object memberValue"];
m12_79 -> m12_151  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonProperty property"];
m12_79 -> m12_154  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m12_80 -> m12_81  [key=0, style=solid];
m12_80 -> m12_88  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m12_80 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m12_81 -> m12_82  [key=0, style=solid];
m12_81 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label=memberConverter];
m12_82 -> m12_83  [key=0, style=solid];
m12_82 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label=defaultValue];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_85  [key=0, style=solid];
m12_83 -> m12_96  [key=2, style=dotted];
m12_85 -> m12_86  [key=0, style=solid];
m12_85 -> m12_87  [key=0, style=solid];
m12_85 -> m12_96  [key=2, style=dotted];
m12_85 -> m12_97  [key=2, style=dotted];
m12_87 -> m12_88  [key=0, style=solid];
m12_87 -> m12_91  [key=0, style=solid];
m12_87 -> m12_55  [key=2, style=dotted];
m12_88 -> m12_89  [key=0, style=solid];
m12_88 -> m12_98  [key=2, style=dotted];
m12_89 -> m12_90  [key=0, style=solid];
m12_89 -> m12_99  [key=2, style=dotted];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> m12_93  [key=0, style=solid];
m12_91 -> m12_100  [key=2, style=dotted];
m12_93 -> m12_94  [key=0, style=solid];
m12_93 -> m12_98  [key=2, style=dotted];
m12_94 -> m12_95  [key=0, style=solid];
m12_94 -> m12_9  [key=2, style=dotted];
m12_84 -> m12_95  [key=0, style=solid];
m12_86 -> m12_95  [key=0, style=solid];
m12_90 -> m12_95  [key=0, style=solid];
m12_92 -> m12_95  [key=0, style=solid];
m12_95 -> m12_79  [key=0, style=bold, color=blue];
m12_271 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_26  [key=1, style=dashed, color=red, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_69  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_71  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_72  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_87  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_91  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_101  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_102  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_109  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_142  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_144  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_147  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_148  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_154  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_155  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_157  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_158  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_161  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_180  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_181  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_182  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_184  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_185  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_186  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_189  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_194  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_196  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_201  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_210  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_211  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_212  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_213  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_214  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_216  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_217  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_223  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_229  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_234  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_235  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_236  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_239  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_241  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_242  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_244  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_245  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_250  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_253  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m12_271 -> m12_265  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m13_11 -> m13_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m13_12 -> m13_13  [key=0, style=solid];
m13_12 -> m13_14  [key=0, style=solid];
m13_13 -> m13_15  [key=0, style=solid];
m13_13 -> m13_16  [key=2, style=dotted];
m13_14 -> m13_15  [key=0, style=solid];
m13_14 -> m13_17  [key=2, style=dotted];
m13_15 -> m13_11  [key=0, style=bold, color=blue];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> m13_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m13_25 -> m13_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m13_26 -> m13_27  [key=0, style=solid];
m13_26 -> m13_28  [key=0, style=solid];
m13_27 -> m13_29  [key=0, style=solid];
m13_27 -> m13_30  [key=2, style=dotted];
m13_28 -> m13_29  [key=0, style=solid];
m13_28 -> m13_31  [key=2, style=dotted];
m13_29 -> m13_25  [key=0, style=bold, color=blue];
m13_18 -> m13_19  [key=0, style=solid];
m13_18 -> m13_20  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m13_18 -> m13_21  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m13_19 -> m13_20  [key=0, style=solid];
m13_19 -> m13_21  [key=0, style=solid];
m13_20 -> m13_22  [key=0, style=solid];
m13_20 -> m13_23  [key=2, style=dotted];
m13_21 -> m13_22  [key=0, style=solid];
m13_21 -> m13_24  [key=2, style=dotted];
m13_22 -> m13_18  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_0 -> m13_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalReader"];
m13_0 -> m13_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalReader"];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> d11  [key=2, style=dotted];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_4 -> m13_0  [key=0, style=bold, color=blue];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> m13_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m13_6 -> m13_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerInternalWriter"];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> d11  [key=2, style=dotted];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_10  [key=0, style=solid];
m13_10 -> m13_6  [key=0, style=bold, color=blue];
m13_32 -> m13_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_12  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_19  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_20  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_21  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_26  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m13_32 -> m13_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonSerializerProxy"];
m14_275 -> m14_276  [key=0, style=solid];
m14_277 -> m14_20  [key=2, style=dotted];
m14_277 -> m14_278  [key=0, style=solid];
m14_277 -> m14_279  [key=1, style=dashed, color=darkseagreen4, label=people];
m14_277 -> m14_280  [key=1, style=dashed, color=darkseagreen4, label=people];
m14_276 -> m14_277  [key=0, style=solid];
m14_276 -> m14_282  [key=2, style=dotted];
m14_276 -> m14_283  [key=2, style=dotted];
m14_276 -> m14_278  [key=1, style=dashed, color=darkseagreen4, label=p];
m14_276 -> m14_279  [key=1, style=dashed, color=darkseagreen4, label=p];
m14_278 -> m14_279  [key=0, style=solid];
m14_278 -> m14_38  [key=2, style=dotted];
m14_279 -> m14_280  [key=0, style=solid];
m14_279 -> m14_38  [key=2, style=dotted];
m14_280 -> m14_281  [key=0, style=solid];
m14_280 -> m14_91  [key=2, style=dotted];
m14_281 -> m14_275  [key=0, style=bold, color=blue];
m14_184 -> m14_185  [key=0, style=solid];
m14_191 -> m14_20  [key=2, style=dotted];
m14_191 -> m14_192  [key=0, style=solid];
m14_191 -> m14_37  [key=2, style=dotted];
m14_191 -> m14_194  [key=2, style=dotted];
m14_191 -> m14_68  [key=2, style=dotted];
m14_192 -> m14_40  [key=2, style=dotted];
m14_192 -> m14_193  [key=0, style=solid];
m14_185 -> m14_191  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_185 -> m14_186  [key=0, style=solid];
m14_185 -> m14_177  [key=2, style=dotted];
m14_185 -> m14_188  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_185 -> m14_190  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_190 -> m14_191  [key=0, style=solid];
m14_186 -> m14_187  [key=0, style=solid];
m14_186 -> m14_177  [key=2, style=dotted];
m14_186 -> m14_188  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_186 -> m14_189  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_188 -> m14_189  [key=0, style=solid];
m14_187 -> m14_190  [key=1, style=dashed, color=darkseagreen4, label=c3];
m14_187 -> m14_177  [key=2, style=dotted];
m14_187 -> m14_188  [key=0, style=solid];
m14_187 -> m14_189  [key=1, style=dashed, color=darkseagreen4, label=c3];
m14_189 -> m14_190  [key=0, style=solid];
m14_193 -> m14_184  [key=0, style=bold, color=blue];
m14_59 -> m14_60  [key=0, style=solid];
m14_64 -> m14_40  [key=2, style=dotted];
m14_64 -> m14_65  [key=0, style=solid];
m14_63 -> m14_64  [key=0, style=solid];
m14_63 -> m14_37  [key=2, style=dotted];
m14_63 -> m14_68  [key=2, style=dotted];
m14_60 -> m14_63  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_60 -> m14_61  [key=0, style=solid];
m14_60 -> m14_66  [key=2, style=dotted];
m14_60 -> m14_62  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_62 -> m14_63  [key=0, style=solid];
m14_62 -> m14_67  [key=2, style=dotted];
m14_61 -> m14_62  [key=0, style=solid];
m14_61 -> m14_66  [key=2, style=dotted];
m14_61 -> m14_67  [key=2, style=dotted];
m14_65 -> m14_59  [key=0, style=bold, color=blue];
m14_125 -> m14_126  [key=0, style=solid];
m14_127 -> m14_133  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_127 -> m14_66  [key=2, style=dotted];
m14_127 -> m14_128  [key=0, style=solid];
m14_127 -> m14_129  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_127 -> m14_130  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_128 -> m14_66  [key=2, style=dotted];
m14_128 -> m14_67  [key=2, style=dotted];
m14_128 -> m14_129  [key=0, style=solid];
m14_129 -> m14_67  [key=2, style=dotted];
m14_129 -> m14_130  [key=0, style=solid];
m14_126 -> m14_127  [key=0, style=solid];
m14_126 -> m14_130  [key=1, style=dashed, color=darkseagreen4, label=classRef];
m14_130 -> m14_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_130 -> m14_87  [key=2, style=dotted];
m14_130 -> m14_131  [key=0, style=solid];
m14_131 -> m14_125  [key=0, style=bold, color=blue];
m14_21 -> m14_22  [key=0, style=solid];
m14_32 -> m14_33  [key=0, style=solid, color=green];
m14_32 -> m14_40  [key=2, style=dotted, color=green];
m14_31 -> m14_32  [key=0, style=solid, color=green];
m14_31 -> m14_39  [key=2, style=dotted];
m14_31 -> m14_33  [key=1, style=dashed, color=darkseagreen4, label=s];
m14_33 -> m14_34  [key=0, style=solid];
m14_33 -> m14_41  [key=2, style=dotted];
m14_33 -> m14_35  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_22 -> m14_31  [key=1, style=dashed, color=darkseagreen4, label=settings];
m14_22 -> m14_33  [key=1, style=dashed, color=darkseagreen4, label=settings];
m14_22 -> m14_23  [key=0, style=solid];
m14_22 -> m14_37  [key=2, style=dotted];
m14_22 -> m14_24  [key=1, style=dashed, color=darkseagreen4, label=settings];
m14_22 -> m14_25  [key=1, style=dashed, color=darkseagreen4, label=settings];
m14_26 -> m14_31  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_26 -> m14_16  [key=2, style=dotted];
m14_26 -> m14_27  [key=0, style=solid];
m14_26 -> m14_29  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_26 -> m14_30  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_30 -> m14_31  [key=0, style=solid];
m14_30 -> m14_38  [key=2, style=dotted];
m14_34 -> m14_35  [key=0, style=solid];
m14_34 -> m14_42  [key=2, style=dotted];
m14_35 -> m14_36  [key=0, style=solid];
m14_35 -> m14_42  [key=2, style=dotted];
m14_23 -> m14_24  [key=0, style=solid];
m14_24 -> m14_25  [key=0, style=solid];
m14_25 -> m14_26  [key=0, style=solid];
m14_27 -> m14_30  [key=1, style=dashed, color=darkseagreen4, label=content];
m14_27 -> m14_28  [key=0, style=solid];
m14_27 -> m14_0  [key=2, style=dotted];
m14_27 -> m14_29  [key=1, style=dashed, color=darkseagreen4, label=content];
m14_29 -> m14_30  [key=0, style=solid];
m14_29 -> m14_38  [key=2, style=dotted];
m14_28 -> m14_29  [key=0, style=solid];
m14_36 -> m14_21  [key=0, style=bold, color=blue];
m14_363 -> m14_364  [key=0, style=solid];
m14_370 -> m14_40  [key=2, style=dotted];
m14_370 -> m14_371  [key=0, style=solid];
m14_369 -> m14_370  [key=0, style=solid];
m14_369 -> m14_91  [key=2, style=dotted];
m14_366 -> m14_38  [key=2, style=dotted];
m14_366 -> m14_367  [key=0, style=solid];
m14_368 -> m14_38  [key=2, style=dotted];
m14_368 -> m14_369  [key=0, style=solid];
m14_367 -> m14_38  [key=2, style=dotted];
m14_367 -> m14_372  [key=2, style=dotted];
m14_367 -> m14_368  [key=0, style=solid];
m14_365 -> m14_369  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_365 -> m14_366  [key=0, style=solid];
m14_365 -> m14_368  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_365 -> m14_367  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_365 -> m14_362  [key=2, style=dotted];
m14_364 -> m14_372  [key=2, style=dotted];
m14_364 -> m14_366  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_364 -> m14_368  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_364 -> m14_365  [key=0, style=solid];
m14_371 -> m14_363  [key=0, style=bold, color=blue];
m14_373 -> m14_374  [key=0, style=solid];
m14_379 -> m14_40  [key=2, style=dotted];
m14_379 -> m14_380  [key=0, style=solid];
m14_378 -> m14_379  [key=0, style=solid];
m14_378 -> m14_91  [key=2, style=dotted];
m14_374 -> m14_378  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_374 -> m14_375  [key=0, style=solid];
m14_374 -> m14_381  [key=2, style=dotted];
m14_374 -> m14_376  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_374 -> m14_377  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_377 -> m14_378  [key=0, style=solid];
m14_377 -> m14_67  [key=2, style=dotted];
m14_375 -> m14_67  [key=2, style=dotted];
m14_375 -> m14_376  [key=0, style=solid];
m14_376 -> m14_377  [key=0, style=solid];
m14_376 -> m14_67  [key=2, style=dotted];
m14_380 -> m14_373  [key=0, style=bold, color=blue];
m14_142 -> m14_143  [key=0, style=solid];
m14_143 -> m14_147  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_143 -> m14_144  [key=0, style=solid];
m14_144 -> m14_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_144 -> m14_145  [key=0, style=solid];
m14_144 -> m14_87  [key=2, style=dotted];
m14_145 -> m14_142  [key=0, style=bold, color=blue];
m14_245 -> m14_246  [key=0, style=solid];
m14_248 -> m14_42  [key=2, style=dotted];
m14_248 -> m14_249  [key=0, style=solid];
m14_249 -> m14_42  [key=2, style=dotted];
m14_249 -> m14_250  [key=0, style=solid];
m14_250 -> m14_42  [key=2, style=dotted];
m14_250 -> m14_251  [key=0, style=solid];
m14_251 -> m14_42  [key=2, style=dotted];
m14_251 -> m14_252  [key=0, style=solid];
m14_252 -> m14_42  [key=2, style=dotted];
m14_252 -> m14_253  [key=0, style=solid];
m14_253 -> m14_42  [key=2, style=dotted];
m14_253 -> m14_254  [key=0, style=solid];
m14_254 -> m14_42  [key=2, style=dotted];
m14_254 -> m14_255  [key=0, style=solid];
m14_247 -> m14_248  [key=0, style=solid];
m14_247 -> m14_249  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_247 -> m14_250  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_247 -> m14_251  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_247 -> m14_252  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_247 -> m14_253  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_247 -> m14_254  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_247 -> m14_219  [key=2, style=dotted];
m14_246 -> m14_247  [key=0, style=solid];
m14_255 -> m14_245  [key=0, style=bold, color=blue];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_3  [key=2, style=dotted];
m14_2 -> m14_3  [key=0, style=solid];
m14_2 -> m14_0  [key=0, style=bold, color=blue];
m14_3 -> m14_4  [key=0, style=solid];
m14_4 -> m14_5  [key=0, style=solid];
m14_5 -> m14_6  [key=0, style=solid];
m14_6 -> m14_7  [key=0, style=solid];
m14_7 -> m14_8  [key=0, style=solid];
m14_8 -> m14_9  [key=0, style=solid];
m14_8 -> m14_10  [key=2, style=dotted];
m14_8 -> m14_0  [key=2, style=dotted];
m14_9 -> m14_0  [key=0, style=bold, color=blue];
m14_9 -> m14_7  [key=0, style=bold, color=blue];
m14_264 -> m14_265  [key=0, style=solid];
m14_267 -> m14_42  [key=2, style=dotted];
m14_267 -> m14_268  [key=0, style=solid];
m14_272 -> m14_42  [key=2, style=dotted];
m14_272 -> m14_273  [key=0, style=solid];
m14_273 -> m14_42  [key=2, style=dotted];
m14_273 -> m14_274  [key=0, style=solid];
m14_270 -> m14_42  [key=2, style=dotted];
m14_270 -> m14_271  [key=0, style=solid];
m14_271 -> m14_42  [key=2, style=dotted];
m14_271 -> m14_272  [key=0, style=solid];
m14_266 -> m14_267  [key=0, style=solid];
m14_266 -> m14_272  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_266 -> m14_273  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_266 -> m14_219  [key=2, style=dotted];
m14_266 -> m14_268  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_266 -> m14_269  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_268 -> m14_272  [key=1, style=dashed, color=darkseagreen4, label=e1];
m14_268 -> m14_270  [key=1, style=dashed, color=darkseagreen4, label=e1];
m14_268 -> m14_269  [key=0, style=solid];
m14_269 -> m14_273  [key=1, style=dashed, color=darkseagreen4, label=e2];
m14_269 -> m14_270  [key=0, style=solid];
m14_269 -> m14_271  [key=1, style=dashed, color=darkseagreen4, label=e2];
m14_265 -> m14_266  [key=0, style=solid];
m14_274 -> m14_264  [key=0, style=bold, color=blue];
m14_305 -> m14_306  [key=0, style=solid];
m14_306 -> m14_307  [key=0, style=solid];
m14_306 -> m14_308  [key=2, style=dotted];
m14_307 -> m14_305  [key=0, style=bold, color=blue];
m14_301 -> m14_302  [key=0, style=solid];
m14_301 -> m14_303  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m14_302 -> m14_303  [key=0, style=solid];
m14_303 -> m14_304  [key=0, style=solid];
m14_304 -> m14_301  [key=0, style=bold, color=blue];
m14_203 -> m14_204  [key=0, style=solid];
m14_206 -> m14_20  [key=2, style=dotted];
m14_206 -> m14_207  [key=0, style=solid];
m14_208 -> m14_40  [key=2, style=dotted];
m14_208 -> m14_209  [key=0, style=solid];
m14_204 -> m14_206  [key=1, style=dashed, color=darkseagreen4, label=mikeManager];
m14_204 -> m14_205  [key=0, style=solid];
m14_204 -> m14_210  [key=2, style=dotted];
m14_205 -> m14_206  [key=0, style=solid];
m14_205 -> m14_210  [key=2, style=dotted];
m14_207 -> m14_208  [key=0, style=solid];
m14_207 -> m14_91  [key=2, style=dotted];
m14_209 -> m14_203  [key=0, style=bold, color=blue];
m14_100 -> m14_101  [key=0, style=solid];
m14_106 -> m14_40  [key=2, style=dotted];
m14_106 -> m14_107  [key=0, style=solid];
m14_105 -> m14_106  [key=0, style=solid];
m14_105 -> m14_37  [key=2, style=dotted];
m14_105 -> m14_68  [key=2, style=dotted];
m14_102 -> m14_38  [key=2, style=dotted];
m14_102 -> m14_103  [key=0, style=solid];
m14_103 -> m14_38  [key=2, style=dotted];
m14_103 -> m14_104  [key=0, style=solid];
m14_103 -> m14_86  [key=2, style=dotted];
m14_104 -> m14_38  [key=2, style=dotted];
m14_104 -> m14_105  [key=0, style=solid];
m14_104 -> m14_86  [key=2, style=dotted];
m14_101 -> m14_105  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_101 -> m14_102  [key=0, style=solid];
m14_101 -> m14_103  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_101 -> m14_104  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_101 -> m14_86  [key=2, style=dotted];
m14_107 -> m14_100  [key=0, style=bold, color=blue];
m14_256 -> m14_257  [key=0, style=solid];
m14_261 -> m14_40  [key=2, style=dotted];
m14_261 -> m14_262  [key=0, style=solid];
m14_260 -> m14_261  [key=0, style=solid];
m14_260 -> m14_91  [key=2, style=dotted];
m14_259 -> m14_260  [key=0, style=solid];
m14_259 -> m14_263  [key=2, style=dotted];
m14_257 -> m14_210  [key=2, style=dotted];
m14_257 -> m14_259  [key=1, style=dashed, color=darkseagreen4, label=e1];
m14_257 -> m14_258  [key=0, style=solid];
m14_258 -> m14_210  [key=2, style=dotted];
m14_258 -> m14_259  [key=0, style=solid];
m14_262 -> m14_256  [key=0, style=bold, color=blue];
m14_135 -> m14_136  [key=0, style=solid];
m14_140 -> m14_40  [key=2, style=dotted];
m14_140 -> m14_141  [key=0, style=solid];
m14_139 -> m14_140  [key=0, style=solid];
m14_139 -> m14_37  [key=2, style=dotted];
m14_139 -> m14_68  [key=2, style=dotted];
m14_136 -> m14_139  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_136 -> m14_137  [key=0, style=solid];
m14_136 -> m14_66  [key=2, style=dotted];
m14_136 -> m14_138  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_138 -> m14_139  [key=0, style=solid];
m14_138 -> m14_67  [key=2, style=dotted];
m14_137 -> m14_138  [key=0, style=solid];
m14_137 -> m14_66  [key=2, style=dotted];
m14_137 -> m14_67  [key=2, style=dotted];
m14_141 -> m14_135  [key=0, style=bold, color=blue];
m14_92 -> m14_93  [key=0, style=solid];
m14_98 -> m14_40  [key=2, style=dotted];
m14_98 -> m14_99  [key=0, style=solid];
m14_97 -> m14_98  [key=0, style=solid];
m14_97 -> m14_37  [key=2, style=dotted];
m14_97 -> m14_68  [key=2, style=dotted];
m14_94 -> m14_38  [key=2, style=dotted];
m14_94 -> m14_95  [key=0, style=solid];
m14_95 -> m14_38  [key=2, style=dotted];
m14_95 -> m14_96  [key=0, style=solid];
m14_95 -> m14_86  [key=2, style=dotted];
m14_96 -> m14_38  [key=2, style=dotted];
m14_96 -> m14_97  [key=0, style=solid];
m14_96 -> m14_86  [key=2, style=dotted];
m14_93 -> m14_97  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_93 -> m14_94  [key=0, style=solid];
m14_93 -> m14_95  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_93 -> m14_96  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_93 -> m14_86  [key=2, style=dotted];
m14_99 -> m14_92  [key=0, style=bold, color=blue];
m14_354 -> m14_355  [key=0, style=solid];
m14_360 -> m14_40  [key=2, style=dotted];
m14_360 -> m14_361  [key=0, style=solid];
m14_359 -> m14_360  [key=0, style=solid];
m14_359 -> m14_91  [key=2, style=dotted];
m14_356 -> m14_38  [key=2, style=dotted];
m14_356 -> m14_357  [key=0, style=solid];
m14_357 -> m14_38  [key=2, style=dotted];
m14_357 -> m14_358  [key=0, style=solid];
m14_358 -> m14_38  [key=2, style=dotted];
m14_358 -> m14_359  [key=0, style=solid];
m14_355 -> m14_359  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_355 -> m14_356  [key=0, style=solid];
m14_355 -> m14_357  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_355 -> m14_358  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_355 -> m14_362  [key=2, style=dotted];
m14_361 -> m14_354  [key=0, style=bold, color=blue];
m14_118 -> m14_119  [key=0, style=solid];
m14_119 -> m14_123  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_119 -> m14_120  [key=0, style=solid];
m14_120 -> m14_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_120 -> m14_121  [key=0, style=solid];
m14_120 -> m14_87  [key=2, style=dotted];
m14_121 -> m14_118  [key=0, style=bold, color=blue];
m14_313 -> m14_314  [key=0, style=solid];
m14_319 -> m14_41  [key=2, style=dotted];
m14_319 -> m14_320  [key=0, style=solid];
m14_317 -> m14_37  [key=2, style=dotted];
m14_317 -> m14_319  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m14_317 -> m14_318  [key=0, style=solid];
m14_318 -> m14_68  [key=2, style=dotted];
m14_318 -> m14_319  [key=0, style=solid];
m14_320 -> m14_321  [key=0, style=solid];
m14_320 -> m14_322  [key=2, style=dotted];
m14_316 -> m14_317  [key=0, style=solid];
m14_314 -> m14_318  [key=1, style=dashed, color=darkseagreen4, label=user1];
m14_314 -> m14_316  [key=1, style=dashed, color=darkseagreen4, label=user1];
m14_314 -> m14_315  [key=0, style=solid];
m14_314 -> m14_301  [key=2, style=dotted];
m14_315 -> m14_316  [key=0, style=solid];
m14_315 -> m14_301  [key=2, style=dotted];
m14_321 -> m14_313  [key=0, style=bold, color=blue];
m14_238 -> m14_239  [key=0, style=solid];
m14_241 -> m14_20  [key=2, style=dotted];
m14_241 -> m14_242  [key=0, style=solid];
m14_243 -> m14_40  [key=2, style=dotted];
m14_243 -> m14_244  [key=0, style=solid];
m14_239 -> m14_241  [key=1, style=dashed, color=darkseagreen4, label=e1];
m14_239 -> m14_240  [key=0, style=solid];
m14_239 -> m14_210  [key=2, style=dotted];
m14_240 -> m14_241  [key=0, style=solid];
m14_240 -> m14_210  [key=2, style=dotted];
m14_242 -> m14_243  [key=0, style=solid];
m14_242 -> m14_91  [key=2, style=dotted];
m14_244 -> m14_238  [key=0, style=bold, color=blue];
m14_195 -> m14_196  [key=0, style=solid];
m14_197 -> m14_20  [key=2, style=dotted];
m14_197 -> m14_198  [key=0, style=solid];
m14_197 -> m14_37  [key=2, style=dotted];
m14_197 -> m14_194  [key=2, style=dotted];
m14_197 -> m14_41  [key=2, style=dotted];
m14_197 -> m14_199  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_197 -> m14_200  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_197 -> m14_201  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_196 -> m14_197  [key=0, style=solid];
m14_198 -> m14_199  [key=0, style=solid];
m14_198 -> m14_42  [key=2, style=dotted];
m14_199 -> m14_200  [key=0, style=solid];
m14_199 -> m14_42  [key=2, style=dotted];
m14_200 -> m14_201  [key=0, style=solid];
m14_200 -> m14_42  [key=2, style=dotted];
m14_201 -> m14_202  [key=0, style=solid];
m14_201 -> m14_42  [key=2, style=dotted];
m14_202 -> m14_195  [key=0, style=bold, color=blue];
m14_382 -> m14_383  [key=0, style=solid];
m14_389 -> m14_40  [key=2, style=dotted];
m14_389 -> m14_390  [key=0, style=solid];
m14_388 -> m14_389  [key=0, style=solid];
m14_388 -> m14_91  [key=2, style=dotted];
m14_388 -> m14_390  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_390 -> m14_391  [key=0, style=solid];
m14_390 -> m14_219  [key=2, style=dotted];
m14_390 -> m14_392  [key=1, style=dashed, color=darkseagreen4, label=d];
m14_391 -> m14_42  [key=2, style=dotted];
m14_391 -> m14_392  [key=0, style=solid];
m14_384 -> m14_388  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_384 -> m14_385  [key=0, style=solid];
m14_384 -> m14_381  [key=2, style=dotted];
m14_384 -> m14_386  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_384 -> m14_387  [key=1, style=dashed, color=darkseagreen4, label=l];
m14_387 -> m14_388  [key=0, style=solid];
m14_387 -> m14_67  [key=2, style=dotted];
m14_392 -> m14_393  [key=0, style=solid];
m14_392 -> m14_76  [key=2, style=dotted];
m14_392 -> m14_77  [key=2, style=dotted];
m14_383 -> m14_372  [key=2, style=dotted];
m14_383 -> m14_384  [key=0, style=solid];
m14_383 -> m14_387  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_383 -> m14_385  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_386 -> m14_372  [key=2, style=dotted];
m14_386 -> m14_387  [key=0, style=solid];
m14_386 -> m14_67  [key=2, style=dotted];
m14_385 -> m14_386  [key=0, style=solid];
m14_385 -> m14_67  [key=2, style=dotted];
m14_393 -> m14_382  [key=0, style=bold, color=blue];
m14_16 -> m14_17  [key=0, style=solid];
m14_18 -> m14_19  [key=0, style=solid, color=green];
m14_18 -> m14_20  [key=2, style=dotted, color=green];
m14_17 -> m14_18  [key=0, style=solid, color=green];
m14_17 -> m14_20  [key=2, style=dotted];
m14_19 -> m14_16  [key=0, style=bold, color=blue];
m14_69 -> m14_70  [key=0, style=solid];
m14_71 -> m14_41  [key=2, style=dotted];
m14_71 -> m14_37  [key=2, style=dotted];
m14_71 -> m14_72  [key=0, style=solid];
m14_71 -> m14_73  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_71 -> m14_74  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_72 -> m14_42  [key=2, style=dotted];
m14_72 -> m14_73  [key=0, style=solid];
m14_73 -> m14_42  [key=2, style=dotted];
m14_73 -> m14_74  [key=0, style=solid];
m14_70 -> m14_71  [key=0, style=solid];
m14_74 -> m14_75  [key=0, style=solid];
m14_74 -> m14_76  [key=2, style=dotted];
m14_74 -> m14_77  [key=2, style=dotted];
m14_75 -> m14_69  [key=0, style=bold, color=blue];
m14_424 -> m14_425  [key=0, style=solid];
m14_425 -> m14_429  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_425 -> m14_426  [key=0, style=solid];
m14_426 -> m14_428  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_426 -> m14_427  [key=0, style=solid];
m14_426 -> m14_87  [key=2, style=dotted];
m14_427 -> m14_424  [key=0, style=bold, color=blue];
m14_409 -> m14_410  [key=0, style=solid];
m14_411 -> m14_20  [key=2, style=dotted];
m14_411 -> m14_412  [key=0, style=solid];
m14_411 -> m14_421  [key=2, style=dotted];
m14_411 -> m14_422  [key=2, style=dotted];
m14_413 -> m14_40  [key=2, style=dotted];
m14_413 -> m14_414  [key=0, style=solid];
m14_410 -> m14_411  [key=0, style=solid];
m14_410 -> m14_372  [key=2, style=dotted];
m14_412 -> m14_413  [key=0, style=solid];
m14_412 -> m14_91  [key=2, style=dotted];
m14_412 -> m14_414  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_414 -> m14_415  [key=0, style=solid];
m14_414 -> m14_219  [key=2, style=dotted];
m14_414 -> m14_416  [key=1, style=dashed, color=darkseagreen4, label=o2];
m14_414 -> m14_417  [key=1, style=dashed, color=darkseagreen4, label=o2];
m14_415 -> m14_416  [key=0, style=solid];
m14_415 -> m14_418  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_415 -> m14_419  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_416 -> m14_417  [key=0, style=solid];
m14_416 -> m14_418  [key=1, style=dashed, color=darkseagreen4, label=c3];
m14_417 -> m14_418  [key=0, style=solid];
m14_417 -> m14_419  [key=1, style=dashed, color=darkseagreen4, label=c4];
m14_418 -> m14_76  [key=2, style=dotted];
m14_418 -> m14_77  [key=2, style=dotted];
m14_418 -> m14_419  [key=0, style=solid];
m14_419 -> m14_420  [key=0, style=solid];
m14_419 -> m14_76  [key=2, style=dotted];
m14_419 -> m14_423  [key=2, style=dotted];
m14_420 -> m14_409  [key=0, style=bold, color=blue];
m14_132 -> m14_133  [key=0, style=solid];
m14_123 -> m14_41  [key=2, style=dotted];
m14_123 -> m14_37  [key=2, style=dotted];
m14_123 -> m14_124  [key=0, style=solid];
m14_147 -> m14_41  [key=2, style=dotted];
m14_147 -> m14_37  [key=2, style=dotted];
m14_147 -> m14_148  [key=0, style=solid];
m14_429 -> m14_41  [key=2, style=dotted];
m14_429 -> m14_37  [key=2, style=dotted];
m14_429 -> m14_430  [key=0, style=solid];
m14_122 -> m14_123  [key=0, style=solid];
m14_124 -> m14_122  [key=0, style=bold, color=blue];
m14_146 -> m14_147  [key=0, style=solid];
m14_148 -> m14_146  [key=0, style=bold, color=blue];
m14_428 -> m14_429  [key=0, style=solid];
m14_430 -> m14_428  [key=0, style=bold, color=blue];
m14_89 -> m14_91  [key=2, style=dotted];
m14_89 -> m14_90  [key=0, style=solid];
m14_133 -> m14_91  [key=2, style=dotted];
m14_133 -> m14_134  [key=0, style=solid];
m14_88 -> m14_89  [key=0, style=solid];
m14_90 -> m14_88  [key=0, style=bold, color=blue];
m14_134 -> m14_132  [key=0, style=bold, color=blue];
m14_309 -> m14_310  [key=0, style=solid];
m14_310 -> m14_311  [key=0, style=solid];
m14_310 -> m14_312  [key=2, style=dotted];
m14_311 -> m14_309  [key=0, style=bold, color=blue];
m14_394 -> m14_395  [key=0, style=solid];
m14_403 -> m14_40  [key=2, style=dotted];
m14_403 -> m14_404  [key=0, style=solid];
m14_401 -> m14_403  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_401 -> m14_402  [key=0, style=solid];
m14_401 -> m14_91  [key=2, style=dotted];
m14_401 -> m14_404  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_402 -> m14_403  [key=0, style=solid];
m14_404 -> m14_405  [key=0, style=solid];
m14_404 -> m14_219  [key=2, style=dotted];
m14_404 -> m14_406  [key=1, style=dashed, color=darkseagreen4, label=referenceObject];
m14_395 -> m14_401  [key=1, style=dashed, color=darkseagreen4, label=o1];
m14_395 -> m14_396  [key=0, style=solid];
m14_395 -> m14_408  [key=2, style=dotted];
m14_395 -> m14_397  [key=1, style=dashed, color=darkseagreen4, label=o1];
m14_395 -> m14_398  [key=1, style=dashed, color=darkseagreen4, label=o1];
m14_395 -> m14_399  [key=1, style=dashed, color=darkseagreen4, label=o1];
m14_395 -> m14_400  [key=1, style=dashed, color=darkseagreen4, label=o1];
m14_400 -> m14_401  [key=0, style=solid];
m14_405 -> m14_406  [key=0, style=solid];
m14_405 -> m14_322  [key=2, style=dotted];
m14_406 -> m14_407  [key=0, style=solid];
m14_406 -> m14_76  [key=2, style=dotted];
m14_406 -> m14_77  [key=2, style=dotted];
m14_396 -> m14_372  [key=2, style=dotted];
m14_396 -> m14_397  [key=0, style=solid];
m14_398 -> m14_372  [key=2, style=dotted];
m14_398 -> m14_399  [key=0, style=solid];
m14_397 -> m14_398  [key=0, style=solid];
m14_399 -> m14_400  [key=0, style=solid];
m14_407 -> m14_394  [key=0, style=bold, color=blue];
m14_284 -> m14_285  [key=0, style=solid];
m14_286 -> m14_20  [key=2, style=dotted];
m14_286 -> m14_287  [key=0, style=solid];
m14_286 -> m14_288  [key=1, style=dashed, color=darkseagreen4, label=people];
m14_286 -> m14_289  [key=1, style=dashed, color=darkseagreen4, label=people];
m14_285 -> m14_286  [key=0, style=solid];
m14_285 -> m14_282  [key=2, style=dotted];
m14_285 -> m14_283  [key=2, style=dotted];
m14_285 -> m14_287  [key=1, style=dashed, color=darkseagreen4, label=p];
m14_285 -> m14_288  [key=1, style=dashed, color=darkseagreen4, label=p];
m14_287 -> m14_288  [key=0, style=solid];
m14_287 -> m14_38  [key=2, style=dotted];
m14_288 -> m14_289  [key=0, style=solid];
m14_288 -> m14_38  [key=2, style=dotted];
m14_289 -> m14_37  [key=2, style=dotted];
m14_289 -> m14_68  [key=2, style=dotted];
m14_289 -> m14_290  [key=0, style=solid];
m14_290 -> m14_41  [key=2, style=dotted];
m14_290 -> m14_37  [key=2, style=dotted];
m14_290 -> m14_291  [key=0, style=solid];
m14_290 -> m14_292  [key=1, style=dashed, color=darkseagreen4, label=deserializedPeople];
m14_290 -> m14_293  [key=1, style=dashed, color=darkseagreen4, label=deserializedPeople];
m14_291 -> m14_42  [key=2, style=dotted];
m14_291 -> m14_292  [key=0, style=solid];
m14_294 -> m14_42  [key=2, style=dotted];
m14_294 -> m14_295  [key=0, style=solid];
m14_295 -> m14_42  [key=2, style=dotted];
m14_295 -> m14_296  [key=0, style=solid];
m14_297 -> m14_42  [key=2, style=dotted];
m14_297 -> m14_298  [key=0, style=solid];
m14_292 -> m14_294  [key=1, style=dashed, color=darkseagreen4, label=p1];
m14_292 -> m14_293  [key=0, style=solid];
m14_292 -> m14_296  [key=1, style=dashed, color=darkseagreen4, label=p1];
m14_293 -> m14_294  [key=0, style=solid];
m14_293 -> m14_295  [key=1, style=dashed, color=darkseagreen4, label=p2];
m14_293 -> m14_296  [key=1, style=dashed, color=darkseagreen4, label=p2];
m14_296 -> m14_297  [key=0, style=solid];
m14_296 -> m14_76  [key=2, style=dotted];
m14_298 -> m14_284  [key=0, style=bold, color=blue];
m14_323 -> m14_324  [key=0, style=solid];
m14_325 -> m14_20  [key=2, style=dotted];
m14_325 -> m14_326  [key=0, style=solid];
m14_325 -> m14_330  [key=1, style=dashed, color=darkseagreen4, label=myClasses1];
m14_325 -> m14_341  [key=1, style=dashed, color=darkseagreen4, label=myClasses1];
m14_333 -> m14_40  [key=2, style=dotted];
m14_333 -> m14_334  [key=0, style=solid];
m14_324 -> m14_325  [key=0, style=solid];
m14_324 -> m14_343  [key=2, style=dotted];
m14_326 -> m14_327  [key=0, style=solid];
m14_326 -> m14_344  [key=2, style=dotted];
m14_326 -> m14_330  [key=1, style=dashed, color=darkseagreen4, label=ser];
m14_326 -> m14_338  [key=1, style=dashed, color=darkseagreen4, label=ser];
m14_330 -> m14_331  [key=0, style=solid];
m14_330 -> m14_15  [key=2, style=dotted];
m14_341 -> m14_342  [key=0, style=solid];
m14_341 -> m14_353  [key=2, style=dotted];
m14_332 -> m14_333  [key=0, style=solid];
m14_332 -> m14_349  [key=2, style=dotted];
m14_334 -> m14_335  [key=0, style=solid];
m14_334 -> m14_350  [key=2, style=dotted];
m14_334 -> m14_336  [key=1, style=dashed, color=darkseagreen4, label=ms];
m14_327 -> m14_328  [key=0, style=solid];
m14_327 -> m14_345  [key=2, style=dotted];
m14_327 -> m14_331  [key=1, style=dashed, color=darkseagreen4, label=ms];
m14_338 -> m14_341  [key=1, style=dashed, color=darkseagreen4, label=myClasses2];
m14_338 -> m14_339  [key=0, style=solid];
m14_338 -> m14_10  [key=2, style=dotted];
m14_338 -> m14_340  [key=1, style=dashed, color=darkseagreen4, label=myClasses2];
m14_329 -> m14_330  [key=0, style=solid];
m14_329 -> m14_347  [key=2, style=dotted];
m14_331 -> m14_332  [key=0, style=solid];
m14_331 -> m14_334  [key=1, style=dashed, color=darkseagreen4, label=data];
m14_331 -> n369  [key=2, style=dotted];
m14_340 -> m14_341  [key=0, style=solid];
m14_340 -> m14_42  [key=2, style=dotted];
m14_339 -> m14_42  [key=2, style=dotted];
m14_339 -> m14_340  [key=0, style=solid];
m14_335 -> m14_336  [key=0, style=solid];
m14_336 -> m14_337  [key=0, style=solid];
m14_336 -> m14_351  [key=2, style=dotted];
m14_328 -> m14_329  [key=0, style=solid];
m14_328 -> m14_346  [key=2, style=dotted];
m14_337 -> m14_338  [key=0, style=solid];
m14_337 -> m14_352  [key=2, style=dotted];
m14_342 -> m14_323  [key=0, style=bold, color=blue];
m14_108 -> m14_109  [key=0, style=solid];
m14_110 -> m14_41  [key=2, style=dotted];
m14_110 -> m14_37  [key=2, style=dotted];
m14_110 -> m14_111  [key=0, style=solid];
m14_110 -> m14_112  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_110 -> m14_113  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_110 -> m14_114  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_110 -> m14_115  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_110 -> m14_116  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_111 -> m14_42  [key=2, style=dotted];
m14_111 -> m14_112  [key=0, style=solid];
m14_112 -> m14_42  [key=2, style=dotted];
m14_112 -> m14_113  [key=0, style=solid];
m14_113 -> m14_42  [key=2, style=dotted];
m14_113 -> m14_114  [key=0, style=solid];
m14_114 -> m14_42  [key=2, style=dotted];
m14_114 -> m14_115  [key=0, style=solid];
m14_115 -> m14_42  [key=2, style=dotted];
m14_115 -> m14_116  [key=0, style=solid];
m14_109 -> m14_110  [key=0, style=solid];
m14_116 -> m14_117  [key=0, style=solid];
m14_116 -> m14_76  [key=2, style=dotted];
m14_116 -> m14_77  [key=2, style=dotted];
m14_117 -> m14_108  [key=0, style=bold, color=blue];
m14_220 -> m14_221  [key=0, style=solid];
m14_228 -> m14_40  [key=2, style=dotted];
m14_228 -> m14_229  [key=0, style=solid];
m14_227 -> m14_228  [key=0, style=solid];
m14_227 -> m14_37  [key=2, style=dotted];
m14_227 -> m14_68  [key=2, style=dotted];
m14_221 -> m14_227  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_221 -> m14_177  [key=2, style=dotted];
m14_221 -> m14_222  [key=0, style=solid];
m14_221 -> m14_224  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_221 -> m14_226  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_226 -> m14_227  [key=0, style=solid];
m14_222 -> m14_177  [key=2, style=dotted];
m14_222 -> m14_223  [key=0, style=solid];
m14_222 -> m14_224  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_222 -> m14_225  [key=1, style=dashed, color=darkseagreen4, label=c2];
m14_223 -> m14_177  [key=2, style=dotted];
m14_223 -> m14_226  [key=1, style=dashed, color=darkseagreen4, label=c3];
m14_223 -> m14_224  [key=0, style=solid];
m14_223 -> m14_225  [key=1, style=dashed, color=darkseagreen4, label=c3];
m14_224 -> m14_225  [key=0, style=solid];
m14_225 -> m14_226  [key=0, style=solid];
m14_229 -> m14_220  [key=0, style=bold, color=blue];
m14_11 -> m14_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m14_11 -> m14_12  [key=0, style=solid];
m14_11 -> m14_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_4  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_6  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_11 -> m14_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializerSettings"];
m14_13 -> m14_15  [key=2, style=dotted];
m14_13 -> m14_14  [key=0, style=solid];
m14_12 -> m14_13  [key=0, style=solid];
m14_14 -> m14_11  [key=0, style=bold, color=blue];
m14_211 -> m14_212  [key=0, style=solid];
m14_214 -> m14_42  [key=2, style=dotted];
m14_214 -> m14_215  [key=0, style=solid];
m14_215 -> m14_42  [key=2, style=dotted];
m14_215 -> m14_216  [key=0, style=solid];
m14_216 -> m14_42  [key=2, style=dotted];
m14_216 -> m14_217  [key=0, style=solid];
m14_217 -> m14_42  [key=2, style=dotted];
m14_217 -> m14_218  [key=0, style=solid];
m14_213 -> m14_214  [key=0, style=solid];
m14_213 -> m14_215  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_213 -> m14_216  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_213 -> m14_217  [key=1, style=dashed, color=darkseagreen4, label=employees];
m14_213 -> m14_219  [key=2, style=dotted];
m14_212 -> m14_213  [key=0, style=solid];
m14_218 -> m14_211  [key=0, style=bold, color=blue];
m14_78 -> m14_79  [key=0, style=solid];
m14_81 -> m14_38  [key=2, style=dotted];
m14_81 -> m14_82  [key=0, style=solid];
m14_82 -> m14_38  [key=2, style=dotted];
m14_82 -> m14_83  [key=0, style=solid];
m14_82 -> m14_86  [key=2, style=dotted];
m14_83 -> m14_38  [key=2, style=dotted];
m14_83 -> m14_84  [key=0, style=solid];
m14_83 -> m14_86  [key=2, style=dotted];
m14_80 -> m14_81  [key=0, style=solid];
m14_80 -> m14_82  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_80 -> m14_83  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_80 -> m14_89  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_80 -> m14_86  [key=2, style=dotted];
m14_80 -> m14_84  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_84 -> m14_85  [key=0, style=solid];
m14_84 -> m14_87  [key=2, style=dotted];
m14_84 -> m14_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_79 -> m14_80  [key=0, style=solid];
m14_79 -> m14_84  [key=1, style=dashed, color=darkseagreen4, label=classRef];
m14_85 -> m14_78  [key=0, style=bold, color=blue];
m14_230 -> m14_231  [key=0, style=solid];
m14_232 -> m14_41  [key=2, style=dotted];
m14_232 -> m14_37  [key=2, style=dotted];
m14_232 -> m14_233  [key=0, style=solid];
m14_232 -> m14_234  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_232 -> m14_235  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_232 -> m14_236  [key=1, style=dashed, color=darkseagreen4, label=c1];
m14_233 -> m14_42  [key=2, style=dotted];
m14_233 -> m14_234  [key=0, style=solid];
m14_234 -> m14_42  [key=2, style=dotted];
m14_234 -> m14_235  [key=0, style=solid];
m14_235 -> m14_42  [key=2, style=dotted];
m14_235 -> m14_236  [key=0, style=solid];
m14_236 -> m14_42  [key=2, style=dotted];
m14_236 -> m14_237  [key=0, style=solid];
m14_231 -> m14_232  [key=0, style=solid];
m14_237 -> m14_230  [key=0, style=bold, color=blue];
m14_43 -> m14_44  [key=0, style=solid];
m14_45 -> m14_20  [key=2, style=dotted];
m14_45 -> m14_46  [key=0, style=solid];
m14_48 -> m14_40  [key=2, style=dotted];
m14_48 -> m14_49  [key=0, style=solid];
m14_44 -> m14_45  [key=0, style=solid];
m14_44 -> m14_57  [key=2, style=dotted];
m14_44 -> m14_46  [key=1, style=dashed, color=darkseagreen4, label=c];
m14_46 -> m14_47  [key=0, style=solid];
m14_46 -> m14_58  [key=2, style=dotted];
m14_47 -> m14_39  [key=2, style=dotted];
m14_47 -> m14_48  [key=0, style=solid];
m14_47 -> m14_37  [key=2, style=dotted];
m14_47 -> m14_49  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_49 -> m14_41  [key=2, style=dotted];
m14_49 -> m14_37  [key=2, style=dotted];
m14_49 -> m14_50  [key=0, style=solid];
m14_49 -> m14_51  [key=1, style=dashed, color=darkseagreen4, label=newP];
m14_49 -> m14_52  [key=1, style=dashed, color=darkseagreen4, label=newP];
m14_49 -> m14_53  [key=1, style=dashed, color=darkseagreen4, label=newP];
m14_49 -> m14_54  [key=1, style=dashed, color=darkseagreen4, label=newP];
m14_49 -> m14_55  [key=1, style=dashed, color=darkseagreen4, label=newP];
m14_50 -> m14_42  [key=2, style=dotted];
m14_50 -> m14_51  [key=0, style=solid];
m14_51 -> m14_42  [key=2, style=dotted];
m14_51 -> m14_52  [key=0, style=solid];
m14_52 -> m14_42  [key=2, style=dotted];
m14_52 -> m14_53  [key=0, style=solid];
m14_53 -> m14_42  [key=2, style=dotted];
m14_53 -> m14_54  [key=0, style=solid];
m14_54 -> m14_42  [key=2, style=dotted];
m14_54 -> m14_55  [key=0, style=solid];
m14_55 -> m14_42  [key=2, style=dotted];
m14_55 -> m14_56  [key=0, style=solid];
m14_56 -> m14_43  [key=0, style=bold, color=blue];
m14_166 -> m14_171  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
m14_166 -> m14_167  [key=0, style=solid];
m14_166 -> m14_174  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonSerializer"];
m14_170 -> m14_177  [key=2, style=dotted];
m14_170 -> m14_171  [key=0, style=solid];
m14_170 -> m14_172  [key=1, style=dashed, color=darkseagreen4, label=circularReferenceClass];
m14_169 -> m14_170  [key=0, style=solid];
m14_169 -> m14_173  [key=0, style=solid];
m14_171 -> m14_172  [key=0, style=solid];
m14_171 -> m14_178  [key=2, style=dotted];
m14_171 -> m14_179  [key=2, style=dotted];
m14_172 -> m14_175  [key=0, style=solid];
m14_168 -> m14_169  [key=0, style=solid];
m14_173 -> m14_174  [key=0, style=solid];
m14_167 -> m14_171  [key=1, style=dashed, color=darkseagreen4, label=o];
m14_167 -> m14_168  [key=0, style=solid];
m14_167 -> m14_173  [key=1, style=dashed, color=darkseagreen4, label=o];
m14_167 -> m14_176  [key=2, style=dotted];
m14_174 -> m14_175  [key=0, style=solid];
m14_174 -> m14_180  [key=2, style=dotted];
m14_175 -> m14_166  [key=0, style=bold, color=blue];
m14_432 -> m14_18  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container"];
m14_432 -> m14_17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.Container"];
m14_434 -> m14_123  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_436 -> m14_147  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_438 -> m14_429  [key=1, style=dashed, color=darkseagreen4, label=json];
m14_433 -> m14_89  [key=1, style=dashed, color=darkseagreen4, label=circularList];
m14_435 -> m14_133  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m14_431 -> m14_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.ContentA"];
m14_437 -> m14_302  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
m14_437 -> m14_303  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
m14_437 -> m14_306  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
m14_437 -> m14_310  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.User"];
m15_54 -> m15_55  [key=0, style=solid];
m15_54 -> m15_57  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<T>"];
m15_55 -> m15_60  [key=2, style=dotted];
m15_55 -> m15_56  [key=0, style=solid];
m15_55 -> m15_57  [key=0, style=solid];
m15_56 -> m15_59  [key=0, style=solid];
m15_57 -> m15_58  [key=0, style=solid];
m15_57 -> m15_15  [key=2, style=dotted];
m15_58 -> m15_59  [key=0, style=solid];
m15_59 -> m15_54  [key=0, style=bold, color=blue];
m15_34 -> m15_35  [key=0, style=solid];
m15_34 -> m15_37  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_34 -> m15_44  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_36 -> m15_60  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Linq.JsonLoadSettings settings"];
m15_36 -> m15_37  [key=0, style=solid];
m15_36 -> m15_43  [key=1, style=dashed, color=darkseagreen4, label=match];
m15_36 -> m15_46  [key=1, style=dashed, color=darkseagreen4, label=match];
m15_36 -> m15_62  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonReader reader"];
m15_36 -> m15_29  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Linq.JsonLoadSettings settings"];
m15_36 -> m15_39  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.JsonConverter GetJsonConverter"];
m15_35 -> m15_36  [key=0, style=solid];
m15_35 -> m15_33  [key=2, style=dotted];
m15_35 -> m15_41  [key=1, style=dashed, color=darkseagreen4, label=genericEnumerable];
m15_37 -> m15_24  [key=3, color=darkorchid, style=bold, label="Local variable System.Type converterType"];
m15_37 -> m15_38  [key=0, style=solid];
m15_37 -> m15_46  [key=0, style=solid];
m15_37 -> m15_48  [key=2, style=dotted];
m15_37 -> m15_42  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m15_37 -> m15_45  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m15_43 -> m15_37  [key=0, style=solid];
m15_43 -> m15_44  [key=0, style=solid];
m15_46 -> m15_47  [key=0, style=solid];
m15_39 -> m15_37  [key=0, style=solid];
m15_39 -> m15_40  [key=0, style=solid];
m15_41 -> m15_43  [key=0, style=solid];
m15_41 -> m15_42  [key=0, style=solid];
m15_44 -> m15_37  [key=0, style=solid];
m15_44 -> m15_45  [key=0, style=solid];
m15_44 -> m15_27  [key=2, style=dotted];
m15_45 -> m15_37  [key=0, style=solid];
m15_45 -> m15_46  [key=1, style=dashed, color=darkseagreen4, label=match];
m15_38 -> m15_39  [key=0, style=solid];
m15_38 -> m15_49  [key=2, style=dotted];
m15_38 -> m15_40  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m15_42 -> m15_43  [key=1, style=dashed, color=darkseagreen4, label=match];
m15_42 -> m15_46  [key=0, style=solid];
m15_40 -> m15_41  [key=0, style=solid];
m15_40 -> m15_44  [key=1, style=dashed, color=darkseagreen4, label=parameterType];
m15_47 -> m15_34  [key=0, style=bold, color=blue];
m15_29 -> m15_30  [key=0, style=solid];
m15_29 -> m15_31  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_30 -> m15_31  [key=0, style=solid];
m15_30 -> m15_33  [key=2, style=dotted];
m15_31 -> m15_32  [key=0, style=solid];
m15_31 -> m15_34  [key=2, style=dotted];
m15_32 -> m15_29  [key=0, style=bold, color=blue];
m15_16 -> m15_22  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_16 -> m15_17  [key=0, style=solid];
m15_16 -> m15_18  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_16 -> m15_20  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_16 -> m15_21  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.MemberSerialization GetObjectMemberSerialization"];
m15_24 -> m15_36  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.ICustomAttributeProvider attributeProvider"];
m15_24 -> m15_25  [key=0, style=solid];
m15_22 -> m15_24  [key=0, style=solid];
m15_22 -> m15_23  [key=0, style=solid];
m15_22 -> m15_28  [key=2, style=dotted];
m15_20 -> m15_22  [key=0, style=solid];
m15_20 -> m15_21  [key=0, style=solid];
m15_20 -> m15_28  [key=2, style=dotted];
m15_23 -> m15_25  [key=0, style=solid];
m15_19 -> m15_25  [key=0, style=solid];
m15_21 -> m15_25  [key=0, style=solid];
m15_17 -> m15_14  [key=2, style=dotted];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_26  [key=2, style=dotted];
m15_18 -> m15_20  [key=0, style=solid];
m15_18 -> m15_19  [key=0, style=solid];
m15_18 -> m15_27  [key=2, style=dotted];
m15_25 -> m15_16  [key=0, style=bold, color=blue];
m15_119 -> m15_120  [key=0, style=solid];
m15_119 -> m15_121  [key=1, style=dashed, color=darkseagreen4, label="System.Array"];
m15_119 -> m15_122  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m15_119 -> m15_124  [key=1, style=dashed, color=darkseagreen4, label="System.Array"];
m15_119 -> m15_125  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m15_119 -> m15_132  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m15_119 -> m15_135  [key=1, style=dashed, color=darkseagreen4, label="System.Array"];
m15_119 -> m15_137  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m15_137 -> m15_119  [key=2, style=dotted];
m15_137 -> m15_138  [key=0, style=solid];
m15_120 -> m15_121  [key=0, style=solid];
m15_120 -> m15_124  [key=1, style=dashed, color=darkseagreen4, label=dimension];
m15_120 -> m15_129  [key=1, style=dashed, color=darkseagreen4, label=dimension];
m15_120 -> m15_131  [key=1, style=dashed, color=darkseagreen4, label=dimension];
m15_120 -> m15_135  [key=1, style=dashed, color=darkseagreen4, label=dimension];
m15_120 -> m15_136  [key=1, style=dashed, color=darkseagreen4, label=dimension];
m15_121 -> m15_122  [key=0, style=solid];
m15_121 -> m15_124  [key=0, style=solid];
m15_122 -> m15_123  [key=0, style=solid];
m15_122 -> m15_140  [key=2, style=dotted];
m15_122 -> m15_141  [key=2, style=dotted];
m15_124 -> m15_125  [key=0, style=solid];
m15_124 -> m15_142  [key=2, style=dotted];
m15_124 -> m15_127  [key=1, style=dashed, color=darkseagreen4, label=dimensionLength];
m15_125 -> m15_126  [key=0, style=solid];
m15_125 -> m15_140  [key=2, style=dotted];
m15_132 -> m15_133  [key=0, style=solid];
m15_135 -> m15_139  [key=0, style=solid];
m15_135 -> m15_136  [key=0, style=solid];
m15_135 -> m15_142  [key=2, style=dotted];
m15_129 -> m15_137  [key=1, style=dashed, color=darkseagreen4, label=newIndices];
m15_129 -> m15_132  [key=1, style=dashed, color=darkseagreen4, label=newIndices];
m15_129 -> m15_130  [key=0, style=solid];
m15_129 -> m15_136  [key=1, style=dashed, color=darkseagreen4, label=newIndices];
m15_136 -> m15_137  [key=0, style=solid];
m15_138 -> m15_135  [key=0, style=solid];
m15_138 -> m15_138  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_123 -> m15_139  [key=0, style=solid];
m15_128 -> m15_139  [key=0, style=solid];
m15_128 -> m15_143  [key=2, style=dotted];
m15_131 -> m15_132  [key=0, style=solid];
m15_131 -> m15_134  [key=0, style=solid];
m15_127 -> m15_129  [key=0, style=solid];
m15_127 -> m15_128  [key=0, style=solid];
m15_126 -> m15_127  [key=0, style=solid];
m15_130 -> m15_132  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_130 -> m15_131  [key=0, style=solid];
m15_130 -> m15_133  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_133 -> m15_131  [key=0, style=solid];
m15_133 -> m15_133  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_134 -> m15_135  [key=0, style=solid];
m15_134 -> m15_136  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_134 -> m15_138  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_139 -> m15_119  [key=0, style=bold, color=blue];
m15_60 -> m15_51  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m15_60 -> m15_29  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Linq.JsonLoadSettings settings"];
m15_60 -> m15_63  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JArray Parse"];
m15_0 -> m15_1  [key=0, style=solid];
m15_1 -> m15_0  [key=0, style=bold, color=blue];
m15_28 -> m15_115  [key=3, color=darkorchid, style=bold, label="method methodReturn int IndexOf"];
m15_154 -> m15_155  [key=0, style=solid];
m15_154 -> m15_156  [key=1, style=dashed, color=darkseagreen4, label=int];
m15_154 -> m15_158  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m15_154 -> m15_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m15_157 -> m15_15  [key=2, style=dotted];
m15_157 -> m15_156  [key=0, style=solid];
m15_155 -> m15_157  [key=1, style=dashed, color=darkseagreen4, label=dimensions];
m15_155 -> m15_156  [key=0, style=solid];
m15_155 -> m15_106  [key=2, style=dotted];
m15_155 -> m15_158  [key=1, style=dashed, color=darkseagreen4, label=dimensions];
m15_156 -> m15_157  [key=0, style=solid];
m15_156 -> m15_158  [key=0, style=solid];
m15_158 -> m15_159  [key=0, style=solid];
m15_158 -> m15_162  [key=2, style=dotted];
m15_158 -> m15_163  [key=2, style=dotted];
m15_158 -> m15_160  [key=1, style=dashed, color=darkseagreen4, label=multidimensionalArray];
m15_159 -> m15_160  [key=0, style=solid];
m15_159 -> m15_119  [key=2, style=dotted];
m15_160 -> m15_161  [key=0, style=solid];
m15_161 -> m15_154  [key=0, style=bold, color=blue];
m15_140 -> m15_144  [key=0, style=solid];
m15_140 -> m15_146  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m15_140 -> m15_147  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m15_140 -> m15_148  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m15_144 -> m15_145  [key=0, style=solid];
m15_144 -> m15_149  [key=1, style=dashed, color=darkseagreen4, label=currentList];
m15_144 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=currentList];
m15_144 -> m15_152  [key=1, style=dashed, color=darkseagreen4, label=currentList];
m15_146 -> m15_147  [key=0, style=solid];
m15_146 -> m15_152  [key=0, style=solid];
m15_147 -> m15_148  [key=0, style=solid];
m15_147 -> m15_149  [key=1, style=dashed, color=darkseagreen4, label=index];
m15_147 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=index];
m15_148 -> m15_149  [key=0, style=solid];
m15_148 -> m15_150  [key=0, style=solid];
m15_149 -> m15_153  [key=0, style=solid];
m15_152 -> m15_153  [key=0, style=solid];
m15_145 -> m15_146  [key=0, style=solid];
m15_145 -> m15_147  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_145 -> m15_148  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_145 -> m15_151  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_150 -> m15_152  [key=1, style=dashed, color=darkseagreen4, label=currentList];
m15_150 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=currentList];
m15_150 -> m15_151  [key=0, style=solid];
m15_151 -> m15_146  [key=0, style=solid];
m15_151 -> m15_151  [key=1, style=dashed, color=darkseagreen4, label=i];
m15_153 -> m15_140  [key=0, style=bold, color=blue];
m15_106 -> m15_107  [key=0, style=solid];
m15_106 -> m15_108  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.IList"];
m15_106 -> m15_111  [key=1, style=dashed, color=darkseagreen4, label=int];
m15_110 -> m15_15  [key=2, style=dotted];
m15_110 -> m15_111  [key=0, style=solid];
m15_115 -> m15_28  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Linq.JToken item"];
m15_115 -> m15_109  [key=0, style=solid];
m15_107 -> m15_110  [key=1, style=dashed, color=darkseagreen4, label=dimensions];
m15_107 -> m15_108  [key=0, style=solid];
m15_107 -> n20  [key=2, style=dotted];
m15_107 -> m15_111  [key=1, style=dashed, color=darkseagreen4, label=dimensions];
m15_107 -> m15_116  [key=1, style=dashed, color=darkseagreen4, label=dimensions];
m15_108 -> m15_110  [key=1, style=dashed, color=darkseagreen4, label=currentArray];
m15_108 -> m15_109  [key=0, style=solid];
m15_108 -> m15_112  [key=1, style=dashed, color=darkseagreen4, label=currentArray];
m15_108 -> m15_113  [key=1, style=dashed, color=darkseagreen4, label=currentArray];
m15_109 -> m15_110  [key=0, style=solid];
m15_109 -> m15_116  [key=0, style=solid];
m15_111 -> m15_112  [key=0, style=solid];
m15_111 -> m15_116  [key=0, style=solid];
m15_113 -> m15_115  [key=1, style=dashed, color=darkseagreen4, label=v];
m15_113 -> m15_114  [key=0, style=solid];
m15_114 -> m15_115  [key=0, style=solid];
m15_114 -> m15_116  [key=0, style=solid];
m15_116 -> m15_117  [key=0, style=solid];
m15_112 -> m15_113  [key=0, style=solid];
m15_112 -> m15_116  [key=0, style=solid];
m15_117 -> m15_106  [key=0, style=bold, color=blue];
m15_79 -> m15_80  [key=0, style=solid];
m15_79 -> m15_82  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T, bool>"];
m15_79 -> m15_81  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<T>"];
m15_84 -> m15_84  [key=1, style=dashed, color=green, label=index];
m15_84 -> m15_81  [key=0, style=solid, color=green];
m15_80 -> m15_84  [key=1, style=dashed, color=green, label=index];
m15_80 -> m15_81  [key=0, style=solid];
m15_80 -> m15_83  [key=1, style=dashed, color=darkseagreen4, label=index];
m15_82 -> m15_84  [key=0, style=solid, color=green];
m15_82 -> m15_83  [key=0, style=solid];
m15_82 -> m15_87  [key=2, style=dotted];
m15_81 -> m15_85  [key=0, style=solid, color=green];
m15_81 -> m15_82  [key=0, style=solid];
m15_85 -> m15_86  [key=0, style=solid, color=green];
m15_83 -> m15_86  [key=0, style=solid];
m15_86 -> m15_79  [key=0, style=bold, color=blue];
m15_72 -> m15_75  [key=1, style=dashed, color=green, label="System.Collections.Generic.IList<T>"];
m15_72 -> m15_73  [key=0, style=solid];
m15_72 -> m15_74  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<T>"];
m15_75 -> m15_76  [key=0, style=solid, color=green];
m15_75 -> m15_74  [key=0, style=solid, color=green];
m15_75 -> m15_53  [key=2, style=dotted, color=green];
m15_74 -> m15_75  [key=0, style=solid, color=green];
m15_74 -> m15_77  [key=0, style=solid];
m15_76 -> m15_74  [key=0, style=solid, color=green];
m15_76 -> m15_77  [key=1, style=dashed, color=green, label=allAdded];
m15_77 -> m15_78  [key=0, style=solid];
m15_73 -> m15_74  [key=0, style=solid];
m15_73 -> m15_77  [key=1, style=dashed, color=darkseagreen4, label=allAdded];
m15_78 -> m15_72  [key=0, style=bold, color=blue];
m15_50 -> m15_51  [key=0, style=solid];
m15_51 -> m15_53  [key=2, style=dotted];
m15_51 -> m15_52  [key=0, style=solid];
m15_51 -> m15_60  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JArray Parse"];
m15_52 -> m15_50  [key=0, style=bold, color=blue];
m15_5 -> m15_11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<T>"];
m15_5 -> m15_6  [key=0, style=solid];
m15_5 -> m15_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<T>"];
m15_5 -> m15_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<T>"];
m15_5 -> m15_10  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<T>"];
m15_11 -> m15_15  [key=2, style=dotted];
m15_11 -> m15_10  [key=0, style=solid];
m15_10 -> m15_11  [key=0, style=solid];
m15_10 -> m15_12  [key=0, style=solid];
m15_7 -> m15_13  [key=2, style=dotted];
m15_7 -> m15_14  [key=2, style=dotted];
m15_7 -> m15_12  [key=0, style=solid];
m15_6 -> m15_7  [key=0, style=solid];
m15_6 -> m15_8  [key=0, style=solid];
m15_8 -> m15_10  [key=0, style=solid];
m15_8 -> m15_9  [key=0, style=solid];
m15_9 -> m15_12  [key=0, style=solid];
m15_12 -> m15_5  [key=0, style=bold, color=blue];
m15_61 -> m15_62  [key=0, style=solid];
m15_61 -> m15_64  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TSource>"];
m15_61 -> m15_67  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m15_61 -> m15_65  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TSource>"];
m15_61 -> m15_66  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TSource>"];
m15_63 -> m15_36  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JArray a"];
m15_63 -> m15_64  [key=0, style=solid];
m15_63 -> m15_67  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEqualityComparer<TSource>"];
m15_62 -> m15_63  [key=0, style=solid];
m15_62 -> m15_64  [key=0, style=solid];
m15_64 -> m15_65  [key=0, style=solid];
m15_64 -> m15_66  [key=0, style=solid];
m15_67 -> m15_68  [key=0, style=solid];
m15_67 -> m15_66  [key=0, style=solid];
m15_67 -> m15_71  [key=2, style=dotted];
m15_65 -> m15_70  [key=0, style=solid];
m15_65 -> m15_13  [key=2, style=dotted];
m15_65 -> m15_14  [key=2, style=dotted];
m15_66 -> m15_67  [key=0, style=solid];
m15_66 -> m15_69  [key=0, style=solid];
m15_68 -> m15_70  [key=0, style=solid];
m15_69 -> m15_70  [key=0, style=solid];
m15_70 -> m15_61  [key=0, style=bold, color=blue];
m16_10 -> m16_11  [key=0, style=solid];
m16_10 -> n37  [key=2, style=dotted];
m16_10 -> m16_20  [key=2, style=dotted];
m16_0 -> m16_1  [key=0, style=solid];
m16_11 -> m16_21  [key=2, style=dotted];
m16_11 -> m16_12  [key=0, style=solid];
m16_4 -> m16_10  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_4 -> m16_5  [key=0, style=solid];
m16_4 -> m16_15  [key=2, style=dotted];
m16_4 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_4 -> m16_7  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_4 -> m16_8  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_4 -> m16_9  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_4 -> m16_13  [key=2, style=dotted];
m16_9 -> m16_10  [key=0, style=solid];
m16_9 -> m16_14  [key=2, style=dotted];
m16_9 -> m16_18  [key=2, style=dotted];
m16_9 -> m16_0  [key=0, style=bold, color=blue];
m16_3 -> m16_14  [key=2, style=dotted];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_12  [key=2, style=dotted];
m16_8 -> m16_14  [key=2, style=dotted];
m16_8 -> m16_9  [key=0, style=solid];
m16_8 -> m16_16  [key=2, style=dotted];
m16_8 -> m16_17  [key=2, style=dotted];
m16_7 -> m16_14  [key=2, style=dotted];
m16_7 -> m16_8  [key=0, style=solid];
m16_7 -> m16_15  [key=2, style=dotted];
m16_5 -> m16_6  [key=0, style=solid];
m16_5 -> m16_14  [key=2, style=dotted];
m16_6 -> m16_7  [key=0, style=solid];
m16_6 -> m16_14  [key=2, style=dotted];
m16_1 -> m16_3  [key=1, style=dashed, color=darkseagreen4, label=role];
m16_1 -> m16_8  [key=1, style=dashed, color=darkseagreen4, label=o];
m16_1 -> m16_2  [key=0, style=solid];
m16_1 -> m16_13  [key=2, style=dotted];
m16_1 -> m16_10  [key=2, style=dotted];
m16_2 -> m16_3  [key=0, style=solid];
m16_2 -> m16_11  [key=2, style=dotted];
m16_2 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_2 -> m16_5  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_2 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_2 -> m16_7  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_12 -> m16_0  [key=0, style=bold, color=blue];
m16_22 -> m16_23  [key=0, style=solid];
m16_35 -> m16_36  [key=0, style=solid, color=green];
m16_35 -> m16_42  [key=2, style=dotted, color=green];
m16_34 -> m16_35  [key=0, style=solid, color=green];
m16_34 -> m16_21  [key=2, style=dotted];
m16_36 -> m16_37  [key=0, style=solid, color=green];
m16_36 -> m16_21  [key=2, style=dotted, color=green];
m16_37 -> m16_38  [key=0, style=solid, color=green];
m16_37 -> m16_43  [key=2, style=dotted, color=green];
m16_37 -> m16_42  [key=2, style=dotted, color=green];
m16_38 -> m16_39  [key=0, style=solid, color=green];
m16_38 -> m16_21  [key=2, style=dotted, color=green];
m16_24 -> m16_34  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_25  [key=0, style=solid];
m16_24 -> m16_40  [key=2, style=dotted];
m16_24 -> m16_26  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_27  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_28  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_29  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_30  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_31  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_32  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_24 -> m16_33  [key=1, style=dashed, color=darkseagreen4, label=person];
m16_33 -> m16_34  [key=0, style=solid];
m16_33 -> m16_21  [key=2, style=dotted];
m16_26 -> m16_21  [key=2, style=dotted];
m16_26 -> m16_27  [key=0, style=solid];
m16_26 -> m16_14  [key=2, style=dotted];
m16_27 -> m16_21  [key=2, style=dotted];
m16_27 -> m16_28  [key=0, style=solid];
m16_28 -> m16_21  [key=2, style=dotted];
m16_28 -> m16_29  [key=0, style=solid];
m16_29 -> m16_21  [key=2, style=dotted];
m16_29 -> m16_30  [key=0, style=solid];
m16_30 -> m16_21  [key=2, style=dotted];
m16_30 -> m16_31  [key=0, style=solid];
m16_31 -> m16_21  [key=2, style=dotted];
m16_31 -> m16_32  [key=0, style=solid];
m16_31 -> m16_14  [key=2, style=dotted];
m16_23 -> m16_24  [key=0, style=solid];
m16_23 -> m16_23  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_25 -> m16_26  [key=0, style=solid];
m16_25 -> m16_41  [key=2, style=dotted];
m16_32 -> m16_33  [key=0, style=solid];
m16_32 -> m16_41  [key=2, style=dotted];
m16_39 -> m16_22  [key=0, style=bold, color=blue];
m17_87 -> m17_88  [key=0, style=solid];
m17_88 -> m17_89  [key=0, style=solid];
m17_88 -> m17_23  [key=2, style=dotted];
m17_88 -> m17_90  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_91  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_92  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_93  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_94  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_95  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_96  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_97  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_98  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_88 -> m17_99  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_89 -> m17_90  [key=0, style=solid];
m17_89 -> m17_106  [key=2, style=dotted];
m17_90 -> m17_91  [key=0, style=solid];
m17_90 -> m17_107  [key=2, style=dotted];
m17_91 -> m17_92  [key=0, style=solid];
m17_91 -> m17_107  [key=2, style=dotted];
m17_92 -> m17_93  [key=0, style=solid];
m17_92 -> m17_107  [key=2, style=dotted];
m17_93 -> m17_94  [key=0, style=solid];
m17_93 -> m17_107  [key=2, style=dotted];
m17_94 -> m17_95  [key=0, style=solid];
m17_94 -> m17_25  [key=2, style=dotted];
m17_94 -> m17_100  [key=1, style=dashed, color=darkseagreen4, label=json];
m17_95 -> m17_96  [key=0, style=solid];
m17_95 -> m17_106  [key=2, style=dotted];
m17_96 -> m17_97  [key=0, style=solid];
m17_96 -> m17_107  [key=2, style=dotted];
m17_97 -> m17_98  [key=0, style=solid];
m17_97 -> m17_107  [key=2, style=dotted];
m17_98 -> m17_99  [key=0, style=solid];
m17_98 -> m17_107  [key=2, style=dotted];
m17_99 -> m17_100  [key=0, style=solid];
m17_99 -> m17_107  [key=2, style=dotted];
m17_100 -> m17_101  [key=0, style=solid];
m17_100 -> m17_28  [key=2, style=dotted];
m17_100 -> m17_102  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_100 -> m17_103  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_100 -> m17_104  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_101 -> m17_102  [key=0, style=solid];
m17_101 -> m17_106  [key=2, style=dotted];
m17_102 -> m17_103  [key=0, style=solid];
m17_102 -> m17_107  [key=2, style=dotted];
m17_103 -> m17_104  [key=0, style=solid];
m17_103 -> m17_107  [key=2, style=dotted];
m17_104 -> m17_105  [key=0, style=solid];
m17_104 -> m17_107  [key=2, style=dotted];
m17_105 -> m17_87  [key=0, style=bold, color=blue];
m17_0 -> m17_1  [key=0, style=solid];
m17_1 -> m17_2  [key=0, style=solid];
m17_1 -> m17_23  [key=2, style=dotted];
m17_1 -> m17_3  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_4  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_5  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_6  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_7  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_9  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_10  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_11  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_12  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_1 -> m17_13  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_2 -> m17_3  [key=0, style=solid];
m17_2 -> n43  [key=2, style=dotted];
m17_3 -> m17_4  [key=0, style=solid];
m17_3 -> n43  [key=2, style=dotted];
m17_4 -> m17_5  [key=0, style=solid];
m17_4 -> n43  [key=2, style=dotted];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> n43  [key=2, style=dotted];
m17_6 -> m17_7  [key=0, style=solid];
m17_6 -> n43  [key=2, style=dotted];
m17_7 -> m17_8  [key=0, style=solid];
m17_7 -> m17_25  [key=2, style=dotted];
m17_9 -> m17_10  [key=0, style=solid];
m17_9 -> n43  [key=2, style=dotted];
m17_10 -> m17_11  [key=0, style=solid];
m17_10 -> n43  [key=2, style=dotted];
m17_11 -> m17_12  [key=0, style=solid];
m17_11 -> n43  [key=2, style=dotted];
m17_12 -> m17_13  [key=0, style=solid];
m17_12 -> n43  [key=2, style=dotted];
m17_13 -> m17_14  [key=0, style=solid];
m17_13 -> n43  [key=2, style=dotted];
m17_8 -> m17_9  [key=0, style=solid];
m17_8 -> n43  [key=2, style=dotted];
m17_14 -> m17_15  [key=0, style=solid];
m17_14 -> m17_26  [key=2, style=dotted];
m17_14 -> m17_16  [key=1, style=dashed, color=darkseagreen4, label=o];
m17_15 -> m17_16  [key=0, style=solid];
m17_16 -> m17_17  [key=0, style=solid];
m17_16 -> m17_27  [key=2, style=dotted];
m17_16 -> m17_28  [key=2, style=dotted];
m17_16 -> m17_18  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_16 -> m17_19  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_16 -> m17_20  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_16 -> m17_21  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_17 -> m17_18  [key=0, style=solid];
m17_17 -> n43  [key=2, style=dotted];
m17_18 -> m17_19  [key=0, style=solid];
m17_18 -> n43  [key=2, style=dotted];
m17_19 -> m17_20  [key=0, style=solid];
m17_19 -> n43  [key=2, style=dotted];
m17_20 -> m17_21  [key=0, style=solid];
m17_20 -> n43  [key=2, style=dotted];
m17_21 -> m17_22  [key=0, style=solid];
m17_21 -> n43  [key=2, style=dotted];
m17_22 -> m17_0  [key=0, style=bold, color=blue];
m17_68 -> m17_69  [key=0, style=solid];
m17_69 -> m17_70  [key=0, style=solid];
m17_69 -> m17_86  [key=2, style=dotted];
m17_69 -> m17_67  [key=2, style=dotted];
m17_69 -> m17_71  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_72  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_73  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_74  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_76  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_77  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_78  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_69 -> m17_79  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_70 -> m17_71  [key=0, style=solid];
m17_70 -> n43  [key=2, style=dotted];
m17_71 -> m17_72  [key=0, style=solid];
m17_71 -> n43  [key=2, style=dotted];
m17_72 -> m17_73  [key=0, style=solid];
m17_72 -> n43  [key=2, style=dotted];
m17_73 -> m17_74  [key=0, style=solid];
m17_73 -> n43  [key=2, style=dotted];
m17_74 -> m17_75  [key=0, style=solid];
m17_74 -> m17_25  [key=2, style=dotted];
m17_74 -> m17_80  [key=1, style=dashed, color=darkseagreen4, label=json];
m17_76 -> m17_77  [key=0, style=solid];
m17_76 -> n43  [key=2, style=dotted];
m17_77 -> m17_78  [key=0, style=solid];
m17_77 -> n43  [key=2, style=dotted];
m17_78 -> m17_79  [key=0, style=solid];
m17_78 -> n43  [key=2, style=dotted];
m17_79 -> m17_80  [key=0, style=solid];
m17_79 -> n43  [key=2, style=dotted];
m17_75 -> m17_76  [key=0, style=solid];
m17_75 -> n43  [key=2, style=dotted];
m17_80 -> m17_81  [key=0, style=solid];
m17_80 -> m17_28  [key=2, style=dotted];
m17_80 -> m17_82  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_80 -> m17_83  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_80 -> m17_84  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_81 -> m17_82  [key=0, style=solid];
m17_81 -> n43  [key=2, style=dotted];
m17_82 -> m17_83  [key=0, style=solid];
m17_82 -> n43  [key=2, style=dotted];
m17_83 -> m17_84  [key=0, style=solid];
m17_83 -> n43  [key=2, style=dotted];
m17_84 -> m17_85  [key=0, style=solid];
m17_84 -> n43  [key=2, style=dotted];
m17_85 -> m17_68  [key=0, style=bold, color=blue];
m17_48 -> m17_49  [key=0, style=solid];
m17_49 -> m17_50  [key=0, style=solid];
m17_49 -> m17_66  [key=2, style=dotted];
m17_49 -> m17_67  [key=2, style=dotted];
m17_49 -> m17_51  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_52  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_53  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_54  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_56  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_57  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_58  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_49 -> m17_59  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_50 -> m17_51  [key=0, style=solid];
m17_50 -> n43  [key=2, style=dotted];
m17_51 -> m17_52  [key=0, style=solid];
m17_51 -> n43  [key=2, style=dotted];
m17_52 -> m17_53  [key=0, style=solid];
m17_52 -> n43  [key=2, style=dotted];
m17_53 -> m17_54  [key=0, style=solid];
m17_53 -> n43  [key=2, style=dotted];
m17_54 -> m17_55  [key=0, style=solid];
m17_54 -> m17_25  [key=2, style=dotted];
m17_54 -> m17_60  [key=1, style=dashed, color=darkseagreen4, label=json];
m17_56 -> m17_57  [key=0, style=solid];
m17_56 -> n43  [key=2, style=dotted];
m17_57 -> m17_58  [key=0, style=solid];
m17_57 -> n43  [key=2, style=dotted];
m17_58 -> m17_59  [key=0, style=solid];
m17_58 -> n43  [key=2, style=dotted];
m17_59 -> m17_60  [key=0, style=solid];
m17_59 -> n43  [key=2, style=dotted];
m17_55 -> m17_56  [key=0, style=solid];
m17_55 -> n43  [key=2, style=dotted];
m17_60 -> m17_61  [key=0, style=solid];
m17_60 -> m17_28  [key=2, style=dotted];
m17_60 -> m17_62  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_60 -> m17_63  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_60 -> m17_64  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_61 -> m17_62  [key=0, style=solid];
m17_61 -> n43  [key=2, style=dotted];
m17_62 -> m17_63  [key=0, style=solid];
m17_62 -> n43  [key=2, style=dotted];
m17_63 -> m17_64  [key=0, style=solid];
m17_63 -> n43  [key=2, style=dotted];
m17_64 -> m17_65  [key=0, style=solid];
m17_64 -> n43  [key=2, style=dotted];
m17_65 -> m17_48  [key=0, style=bold, color=blue];
m17_29 -> m17_30  [key=0, style=solid];
m17_30 -> m17_31  [key=0, style=solid];
m17_30 -> m17_47  [key=2, style=dotted];
m17_30 -> m17_32  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_33  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_34  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_35  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_37  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_38  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_39  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_30 -> m17_40  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_31 -> m17_32  [key=0, style=solid];
m17_31 -> n43  [key=2, style=dotted];
m17_32 -> m17_33  [key=0, style=solid];
m17_32 -> n43  [key=2, style=dotted];
m17_33 -> m17_34  [key=0, style=solid];
m17_33 -> n43  [key=2, style=dotted];
m17_34 -> m17_35  [key=0, style=solid];
m17_34 -> n43  [key=2, style=dotted];
m17_35 -> m17_36  [key=0, style=solid];
m17_35 -> m17_25  [key=2, style=dotted];
m17_35 -> m17_41  [key=1, style=dashed, color=darkseagreen4, label=json];
m17_37 -> m17_38  [key=0, style=solid];
m17_37 -> n43  [key=2, style=dotted];
m17_38 -> m17_39  [key=0, style=solid];
m17_38 -> n43  [key=2, style=dotted];
m17_39 -> m17_40  [key=0, style=solid];
m17_39 -> n43  [key=2, style=dotted];
m17_40 -> m17_41  [key=0, style=solid];
m17_40 -> n43  [key=2, style=dotted];
m17_36 -> m17_37  [key=0, style=solid];
m17_36 -> n43  [key=2, style=dotted];
m17_41 -> m17_42  [key=0, style=solid];
m17_41 -> m17_28  [key=2, style=dotted];
m17_41 -> m17_43  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_41 -> m17_44  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_41 -> m17_45  [key=1, style=dashed, color=darkseagreen4, label=obj];
m17_42 -> m17_43  [key=0, style=solid];
m17_42 -> n43  [key=2, style=dotted];
m17_43 -> m17_44  [key=0, style=solid];
m17_43 -> n43  [key=2, style=dotted];
m17_44 -> m17_45  [key=0, style=solid];
m17_44 -> n43  [key=2, style=dotted];
m17_45 -> m17_46  [key=0, style=solid];
m17_45 -> n43  [key=2, style=dotted];
m17_46 -> m17_29  [key=0, style=bold, color=blue];
}
