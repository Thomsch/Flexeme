digraph  {
n367 [label="System.Collections.Generic.IList<T>", span=""];
n368 [label=bool, span=""];
n369 [label=collectionDefinition, span=""];
n370 [label=object, span=""];
n371 [label=listDefinition, span=""];
n372 [label=object, span=""];
n373 [label=dictionaryDefinition, span=""];
n374 [label=object, span=""];
n0 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", span="38-38", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)"];
n1 [label="ValidationUtils.ArgumentNotNull(enumerable, ''enumerable'')", span="40-40", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)"];
n2 [label="return enumerable.Cast<object>().Where(o => o is T).Cast<T>();", span="42-42", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)"];
n4 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="94-94", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)"];
n3 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", span="38-38", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)"];
n5 [label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.Cast<TResult>()"];
n6 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n7 [label="Entry Unk.>", span="", cluster="Unk.>"];
n8 [label="Entry lambda expression", span="42-42", cluster="lambda expression"];
n9 [label="o is T", span="42-42", cluster="lambda expression"];
n10 [label="Exit lambda expression", span="42-42", cluster="lambda expression"];
n11 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", span="45-45", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])"];
n12 [label="return new List<T>(values);", span="47-47", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])"];
n13 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", span="45-45", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])"];
n14 [label="Entry System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)"];
n15 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", span="57-57", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)"];
n16 [label="collection != null", span="59-59", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)"];
n17 [label="return (collection.Count == 0);", span="61-61", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)"];
n18 [label="return true;", span="63-63", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)"];
n19 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", span="57-57", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)"];
n20 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", span="73-73", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)"];
n21 [label="collection != null", span="75-75", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)"];
n22 [label="return (collection.Count == 0);", span="77-77", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)"];
n23 [label="return true;", span="79-79", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)"];
n24 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", span="73-73", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)"];
n25 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", span="89-89", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)"];
n26 [label="IsNullOrEmpty<T>(list)", span="91-91", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)"];
n28 [label="return ReflectionUtils.ItemsUnitializedValue<T>(list);", span="94-94", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)"];
n27 [label="return true;", span="92-92", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)"];
n29 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", span="89-89", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)"];
n30 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue<T>(System.Collections.Generic.IList<T>)", span="345-345", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue<T>(System.Collections.Generic.IList<T>)"];
n31 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", span="104-104", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)"];
n32 [label="return Slice<T>(list, start, end, null);", span="106-106", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)"];
n33 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", span="104-104", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)"];
n34 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", span="118-118", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n35 [label="list == null", span="120-120", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n37 [label="step == 0", span="123-123", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n40 [label="list.Count == 0", span="129-129", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n42 [label="int s = step ?? 1", span="133-133", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n43 [label="int startIndex = start ?? 0", span="134-134", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n44 [label="int endIndex = end ?? list.Count", span="135-135", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n45 [label="startIndex = (startIndex < 0) ? list.Count + startIndex : startIndex", span="138-138", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n46 [label="endIndex = (endIndex < 0) ? list.Count + endIndex : endIndex", span="141-141", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n48 [label="endIndex = Math.Min(endIndex, list.Count - 1)", span="145-145", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n51 [label="slicedList.Add(list[i])", span="150-150", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n36 [label="throw new ArgumentNullException(''list'');", span="121-121", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n38 [label="throw new ArgumentException(''Step cannot be zero.'', ''step'');", span="124-124", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n39 [label="List<T> slicedList = new List<T>()", span="126-126", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n57 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n41 [label="return slicedList;", span="130-130", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n53 [label="return slicedList;", span="153-153", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n52 [label="i += s", span="148-148", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n47 [label="startIndex = Math.Max(startIndex, 0)", span="144-144", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n58 [label="Entry System.Math.Max(int, int)", span="0-0", cluster="System.Math.Max(int, int)"];
n49 [label="int i = startIndex", span="148-148", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n59 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)"];
n50 [label="i < endIndex", span="148-148", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n60 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n54 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", span="118-118", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)"];
n56 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)"];
n55 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n61 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", span="163-163", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n62 [label="keySelector == null", span="165-165", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n65 [label=source, span="170-170", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n66 [label="K key = keySelector(value)", span="173-173", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n63 [label="throw new ArgumentNullException(''keySelector'');", span="166-166", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n64 [label="Dictionary<K, List<V>> groupedValues = new Dictionary<K, List<V>>()", span="168-168", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n74 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n68 [label="!groupedValues.TryGetValue(key, out groupedValueList)", span="177-177", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n70 [label="groupedValues.Add(key, groupedValueList)", span="180-180", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n72 [label="return groupedValues;", span="186-186", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n71 [label="groupedValueList.Add(value)", span="183-183", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n67 [label="List<V> groupedValueList", span="174-174", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n75 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n69 [label="groupedValueList = new List<V>()", span="179-179", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n76 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)"];
n77 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)"];
n73 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", span="163-163", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)"];
n78 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="194-194", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n79 [label="initial == null", span="196-196", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n81 [label="collection == null", span="199-199", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n83 [label=collection, span="202-202", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n84 [label="initial.Add(value)", span="204-204", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n80 [label="throw new ArgumentNullException(''initial'');", span="197-197", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n82 [label="return;", span="200-200", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n85 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="194-194", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n86 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)"];
n87 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", span="208-208", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)"];
n88 [label="ValidationUtils.ArgumentNotNull(initial, ''initial'')", span="210-210", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)"];
n89 [label="ListWrapper<object> wrapper = new ListWrapper<object>(initial)", span="212-212", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)"];
n90 [label="wrapper.AddRange(collection.Cast<object>())", span="213-213", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)"];
n92 [label="Entry Newtonsoft.Json.Utilities.ListWrapper<T>.ListWrapper(System.Collections.IList)", span="46-46", cluster="Newtonsoft.Json.Utilities.ListWrapper<T>.ListWrapper(System.Collections.IList)"];
n91 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", span="208-208", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)"];
n93 [label="Entry System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", span="194-194", cluster="System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)"];
n94 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", span="216-216", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n95 [label="List<T> distinctList = new List<T>()", span="218-218", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n96 [label=collection, span="220-220", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n97 [label="!distinctList.Contains(value)", span="222-222", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n98 [label="distinctList.Add(value)", span="223-223", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n99 [label="return distinctList;", span="226-226", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n101 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)"];
n100 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", span="216-216", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)"];
n102 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", span="229-229", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])"];
n103 [label="List<List<T>> flattened = new List<List<T>>()", span="231-231", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])"];
n105 [label="Recurse<T>(new List<IList<T>>(lists), 0, currentList, flattened)", span="234-234", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])"];
n104 [label="Dictionary<int, T> currentList = new Dictionary<int, T>()", span="232-232", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])"];
n106 [label="return flattened;", span="236-236", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])"];
n108 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", span="239-239", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n107 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", span="229-229", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])"];
n109 [label="IList<T> currentArray = global[current]", span="241-241", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n112 [label="currentSet[current] = currentArray[i]", span="245-245", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n113 [label="current == global.Count - 1", span="247-247", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n116 [label="k < currentSet.Count", span="251-251", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n117 [label="items.Add(currentSet[k])", span="253-253", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n119 [label="flattenedResult.Add(items)", span="256-256", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n120 [label="Recurse(global, current + 1, currentSet, flattenedResult)", span="260-260", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n110 [label="int i = 0", span="243-243", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n111 [label="i < currentArray.Count", span="243-243", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n121 [label="i++", span="243-243", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n122 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", span="239-239", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n114 [label="List<T> items = new List<T>()", span="249-249", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n115 [label="int k = 0", span="251-251", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n118 [label="k++", span="251-251", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)"];
n123 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", span="265-265", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n124 [label="collection == null", span="267-267", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n126 [label="T[] array = new T[collection.Count]", span="270-270", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n127 [label="collection.CopyTo(array, 0)", span="271-271", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n125 [label="throw new ArgumentNullException(''collection'');", span="268-268", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n128 [label="return new List<T>(array);", span="273-273", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n130 [label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0", cluster="System.Collections.ICollection.CopyTo(System.Array, int)"];
n129 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", span="265-265", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)"];
n131 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="276-276", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n132 [label="a == null || b == null", span="278-278", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n133 [label="return (a == null && b == null);", span="279-279", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n134 [label="a.Count != b.Count", span="281-281", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n138 [label="i < a.Count", span="286-286", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n139 [label="!comparer.Equals(a[i], b[i])", span="288-288", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n135 [label="return false;", span="282-282", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n136 [label="EqualityComparer<T> comparer = EqualityComparer<T>.Default", span="284-284", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n137 [label="int i = 0", span="286-286", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n141 [label="i++", span="286-286", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n142 [label="return true;", span="292-292", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n140 [label="return false;", span="289-289", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n144 [label="Entry System.Collections.Generic.EqualityComparer<T>.Equals(T, T)", span="0-0", cluster="System.Collections.Generic.EqualityComparer<T>.Equals(T, T)"];
n143 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="276-276", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n145 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", span="296-296", cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)"];
n146 [label="return TryGetSingleItem<T>(list, false, out value);", span="298-298", cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)"];
n147 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", span="296-296", cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)"];
n148 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", span="301-301", cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)"];
n149 [label="return MiscellaneousUtils.TryAction<T>(delegate { return GetSingleItem(list, returnDefaultIfEmpty); }, out value);", span="303-303", cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)"];
n153 [label="return GetSingleItem(list, returnDefaultIfEmpty);", span="303-303", cluster="lambda expression"];
n150 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", span="301-301", cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)"];
n151 [label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.TryAction<T>(Newtonsoft.Json.Utilities.Creator<T>, out T)", span="21-21", cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.TryAction<T>(Newtonsoft.Json.Utilities.Creator<T>, out T)"];
n152 [label="Entry lambda expression", span="303-303", cluster="lambda expression"];
n154 [label="Exit lambda expression", span="303-303", cluster="lambda expression"];
n155 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", span="311-311", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n156 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", span="306-306", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)"];
n157 [label="return GetSingleItem<T>(list, false);", span="308-308", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)"];
n158 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", span="306-306", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)"];
n159 [label="list.Count == 1", span="313-313", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n160 [label="return list[0];", span="314-314", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n161 [label="returnDefaultIfEmpty && list.Count == 0", span="315-315", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n163 [label="throw new Exception(''Expected single {0} in list but got {1}.''.FormatWith(CultureInfo.InvariantCulture, typeof(T), list.Count));", span="318-318", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n162 [label="return default(T);", span="316-316", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n164 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", span="311-311", cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)"];
n165 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)"];
n166 [label="Entry string.FormatWith(System.IFormatProvider, params object[])", span="48-48", cluster="string.FormatWith(System.IFormatProvider, params object[])"];
n167 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="322-322", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n168 [label="ValidationUtils.ArgumentNotNull(list, ''list'')", span="324-324", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n169 [label="List<T> result = new List<T>(list.Count)", span="326-326", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n170 [label=list, span="327-327", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n171 [label="minus == null || !minus.Contains(t)", span="329-329", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n175 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)"];
n172 [label="result.Add(t)", span="330-330", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n173 [label="return result;", span="333-333", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n176 [label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Contains(T)"];
n174 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="322-322", cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)"];
n177 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", span="336-336", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)"];
n178 [label="ValidationUtils.ArgumentNotNull(listType, ''listType'')", span="338-338", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)"];
n179 [label="return (IList)ReflectionUtils.CreateGeneric(typeof(List<>), listType);", span="340-340", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)"];
n180 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", span="336-336", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)"];
n181 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Type, params object[])", span="618-618", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Type, params object[])"];
n182 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", span="343-343", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)"];
n183 [label="ValidationUtils.ArgumentNotNull(keyType, ''keyType'')", span="345-345", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)"];
n184 [label="ValidationUtils.ArgumentNotNull(valueType, ''valueType'')", span="346-346", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)"];
n185 [label="return (IDictionary)ReflectionUtils.CreateGeneric(typeof(Dictionary<,>), keyType, valueType);", span="348-348", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)"];
n186 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", span="343-343", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)"];
n187 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", span="351-351", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n188 [label="ValidationUtils.ArgumentNotNull(type, ''type'')", span="353-353", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n189 [label="type.IsArray", span="355-355", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n191 [label="typeof(IList).IsAssignableFrom(type)", span="357-357", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n193 [label="ReflectionUtils.ImplementsGenericDefinition(type, typeof(IList<>))", span="359-359", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n190 [label="return true;", span="356-356", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n192 [label="return true;", span="358-358", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n197 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)"];
n194 [label="return true;", span="360-360", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n195 [label="return false;", span="362-362", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n198 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", span="144-144", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)"];
n196 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", span="351-351", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)"];
n199 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", span="365-365", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n200 [label="ValidationUtils.ArgumentNotNull(type, ''type'')", span="367-367", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n201 [label="type.IsArray", span="369-369", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n203 [label="typeof(ICollection).IsAssignableFrom(type)", span="371-371", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n205 [label="ReflectionUtils.ImplementsGenericDefinition(type, typeof(ICollection<>))", span="373-373", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n202 [label="return true;", span="370-370", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n204 [label="return true;", span="372-372", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n206 [label="return true;", span="374-374", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n207 [label="return false;", span="376-376", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n208 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", span="365-365", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)"];
n209 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="379-379", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n210 [label="ValidationUtils.ArgumentNotNull(type, ''type'')", span="381-381", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n211 [label="typeof(IDictionary).IsAssignableFrom(type)", span="383-383", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n213 [label="ReflectionUtils.ImplementsGenericDefinition(type, typeof (IDictionary<,>))", span="385-385", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n212 [label="return true;", span="384-384", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n214 [label="return true;", span="386-386", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n215 [label="return false;", span="388-388", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n216 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="379-379", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)"];
n217 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", span="391-391", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n218 [label="ValidationUtils.ArgumentNotNull(list, ''list'')", span="393-393", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n220 [label="ReflectionUtils.ImplementsGenericDefinition(list.GetType(), typeof(ICollection<>), out collectionDefinition)", span="396-396", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n222 [label="Func<Type, IList<object>, object> instanceCreator = (t, a) =>\r\n        {\r\n          ConstructorInfo c = t.GetConstructor(new[] { collectionDefinition });\r\n          return c.Invoke(new[] { list });\r\n        }", span="401-405", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n235 [label="return c.Invoke(new[] { list });", span="404-404", cluster="lambda expression"];
n223 [label="return (IWrappedCollection)ReflectionUtils.CreateGeneric(typeof(CollectionWrapper<>), new[] { collectionItemType }, instanceCreator, list);", span="407-407", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n224 [label="list is IList", span="409-409", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n225 [label="return new CollectionWrapper<object>((IList)list);", span="411-411", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n226 [label="throw new Exception(''Can not create ListWrapper for type {0}.''.FormatWith(CultureInfo.InvariantCulture, list.GetType()));", span="415-415", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n219 [label="Type collectionDefinition", span="395-395", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n221 [label="Type collectionItemType = ReflectionUtils.GetCollectionItemType(collectionDefinition)", span="398-398", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n228 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n229 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", span="150-150", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)"];
n234 [label="ConstructorInfo c = t.GetConstructor(new[] { collectionDefinition })", span="403-403", cluster="lambda expression"];
n230 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", span="268-268", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)"];
n227 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", span="391-391", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)"];
n231 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Collections.Generic.IList<System.Type>, System.Func<System.Type, System.Collections.Generic.IList<object>, object>, params object[])", span="628-628", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Collections.Generic.IList<System.Type>, System.Func<System.Type, System.Collections.Generic.IList<object>, object>, params object[])"];
n232 [label="Entry Newtonsoft.Json.Utilities.CollectionWrapper<T>.CollectionWrapper(System.Collections.IList)", span="46-46", cluster="Newtonsoft.Json.Utilities.CollectionWrapper<T>.CollectionWrapper(System.Collections.IList)"];
n233 [label="Entry lambda expression", span="401-405", cluster="lambda expression"];
n237 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])"];
n236 [label="Exit lambda expression", span="401-405", cluster="lambda expression"];
n238 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])"];
n239 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", span="418-418", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n240 [label="ValidationUtils.ArgumentNotNull(list, ''list'')", span="420-420", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n242 [label="ReflectionUtils.ImplementsGenericDefinition(list.GetType(), typeof(IList<>), out listDefinition)", span="423-423", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n244 [label="Func<Type, IList<object>, object> instanceCreator = (t, a) =>\r\n        {\r\n          ConstructorInfo c = t.GetConstructor(new[] {listDefinition});\r\n          return c.Invoke(new[] { list });\r\n        }", span="428-432", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n252 [label="return c.Invoke(new[] { list });", span="431-431", cluster="lambda expression"];
n245 [label="return (IWrappedList)ReflectionUtils.CreateGeneric(typeof(ListWrapper<>), new[] { collectionItemType }, instanceCreator, list);", span="434-434", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n246 [label="list is IList", span="436-436", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n247 [label="return new ListWrapper<object>((IList)list);", span="438-438", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n248 [label="throw new Exception(''Can not create ListWrapper for type {0}.''.FormatWith(CultureInfo.InvariantCulture, list.GetType()));", span="442-442", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n241 [label="Type listDefinition", span="422-422", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n243 [label="Type collectionItemType = ReflectionUtils.GetCollectionItemType(listDefinition)", span="425-425", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n251 [label="ConstructorInfo c = t.GetConstructor(new[] {listDefinition})", span="430-430", cluster="lambda expression"];
n249 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", span="418-418", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)"];
n250 [label="Entry lambda expression", span="428-432", cluster="lambda expression"];
n253 [label="Exit lambda expression", span="428-432", cluster="lambda expression"];
n254 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", span="446-446", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n255 [label="ValidationUtils.ArgumentNotNull(dictionary, ''dictionary'')", span="448-448", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n257 [label="ReflectionUtils.ImplementsGenericDefinition(dictionary.GetType(), typeof(IDictionary<,>), out dictionaryDefinition)", span="451-451", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n260 [label="Func<Type, IList<object>, object> instanceCreator = (t, a) =>\r\n        {\r\n          ConstructorInfo c = t.GetConstructor(new[] { dictionaryDefinition });\r\n          return c.Invoke(new[] { dictionary });\r\n        }", span="457-461", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n271 [label="return c.Invoke(new[] { dictionary });", span="460-460", cluster="lambda expression"];
n261 [label="return (IWrappedDictionary)ReflectionUtils.CreateGeneric(typeof(DictionaryWrapper<,>), new[] { dictionaryKeyType, dictionaryValueType }, instanceCreator, dictionary);", span="463-463", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n262 [label="dictionary is IDictionary", span="465-465", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n263 [label="return new DictionaryWrapper<object, object>((IDictionary)dictionary);", span="467-467", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n264 [label="throw new Exception(''Can not create DictionaryWrapper for type {0}.''.FormatWith(CultureInfo.InvariantCulture, dictionary.GetType()));", span="471-471", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n256 [label="Type dictionaryDefinition", span="450-450", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n258 [label="Type dictionaryKeyType = ReflectionUtils.GetDictionaryKeyType(dictionaryDefinition)", span="453-453", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n259 [label="Type dictionaryValueType = ReflectionUtils.GetDictionaryValueType(dictionaryDefinition)", span="454-454", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n270 [label="ConstructorInfo c = t.GetConstructor(new[] { dictionaryDefinition })", span="459-459", cluster="lambda expression"];
n266 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyType(System.Type)", span="331-331", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyType(System.Type)"];
n267 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryValueType(System.Type)", span="322-322", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryValueType(System.Type)"];
n265 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", span="446-446", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)"];
n268 [label="Entry Newtonsoft.Json.Utilities.DictionaryWrapper<TKey, TValue>.DictionaryWrapper(System.Collections.IDictionary)", span="20-20", cluster="Newtonsoft.Json.Utilities.DictionaryWrapper<TKey, TValue>.DictionaryWrapper(System.Collections.IDictionary)"];
n269 [label="Entry lambda expression", span="457-461", cluster="lambda expression"];
n272 [label="Exit lambda expression", span="457-461", cluster="lambda expression"];
n273 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", span="475-475", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n274 [label="ValidationUtils.ArgumentNotNull(listType, ''listType'')", span="477-477", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n275 [label="ValidationUtils.ArgumentNotNull(populateList, ''populateList'')", span="478-478", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n279 [label="listType.IsArray", span="484-484", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n282 [label="ReflectionUtils.InheritsGenericDefinition(listType, typeof(ReadOnlyCollection<>), out collectionType)", span="491-491", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n286 [label="listType.GetConstructors()", span="497-497", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n292 [label="throw new Exception(''Read-only type {0} does not have a public constructor that takes a type that implements {1}.''.FormatWith(CultureInfo.InvariantCulture, listType, genericEnumerable));", span="512-512", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n295 [label="typeof(IList).IsAssignableFrom(listType)", span="519-519", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n296 [label="ReflectionUtils.IsInstantiatableType(listType)", span="521-521", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n297 [label="list = (IList)Activator.CreateInstance(listType)", span="522-522", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n298 [label="listType == typeof(IList)", span="523-523", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n301 [label="ReflectionUtils.ImplementsGenericDefinition(listType, typeof(IList<>))", span="528-528", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n302 [label="list = CreateGenericList(ReflectionUtils.GetCollectionItemType(listType))", span="530-530", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n305 [label="throw new Exception(''Cannot create and populate list type {0}.''.FormatWith(CultureInfo.InvariantCulture, listType));", span="538-538", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n306 [label="populateList(list, isReadOnlyOrFixedSize)", span="540-540", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n308 [label="listType.IsArray", span="545-545", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n309 [label="list = ToArray(((List<object>)list).ToArray(), ReflectionUtils.GetCollectionItemType(listType))", span="546-546", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n310 [label="ReflectionUtils.InheritsGenericDefinition(listType, typeof(ReadOnlyCollection<>))", span="547-547", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n311 [label="list = (IList)ReflectionUtils.CreateInstance(listType, list)", span="548-548", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n276 [label="IList list", span="480-480", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n277 [label="Type collectionType", span="481-481", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n278 [label="bool isReadOnlyOrFixedSize = false", span="482-482", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n307 [label=isReadOnlyOrFixedSize, span="543-543", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n280 [label="list = new List<object>()", span="488-488", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n281 [label="isReadOnlyOrFixedSize = true", span="489-489", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n304 [label="list == null", span="537-537", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n312 [label="return list;", span="551-551", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n283 [label="Type readOnlyCollectionContentsType = collectionType.GetGenericArguments()[0]", span="493-493", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n314 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", span="230-230", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)"];
n284 [label="Type genericEnumerable = ReflectionUtils.MakeGenericType(typeof(IEnumerable<>), readOnlyCollectionContentsType)", span="494-494", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n315 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n293 [label="list = CreateGenericList(readOnlyCollectionContentsType)", span="516-516", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n285 [label="bool suitableConstructor = false", span="495-495", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n316 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.MakeGenericType(System.Type, params System.Type[])", span="609-609", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.MakeGenericType(System.Type, params System.Type[])"];
n289 [label="genericEnumerable.IsAssignableFrom(parameters[0].ParameterType)", span="503-503", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n291 [label="!suitableConstructor", span="511-511", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n287 [label="IList<ParameterInfo> parameters = constructor.GetParameters()", span="499-499", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n317 [label="Entry System.Type.GetConstructors()", span="0-0", cluster="System.Type.GetConstructors()"];
n288 [label="parameters.Count == 1", span="501-501", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n318 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()"];
n290 [label="suitableConstructor = true", span="505-505", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n294 [label="isReadOnlyOrFixedSize = true", span="517-517", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n319 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsInstantiatableType(System.Type)", span="41-41", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsInstantiatableType(System.Type)"];
n299 [label="list = new List<object>()", span="524-524", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n300 [label="list = null", span="526-526", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n303 [label="list = null", span="534-534", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n320 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)"];
n321 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)"];
n324 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", span="224-224", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)"];
n325 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CreateInstance(System.Type, params object[])", span="650-650", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CreateInstance(System.Type, params object[])"];
n322 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()"];
n323 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", span="554-554", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n313 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", span="475-475", cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)"];
n326 [label="type == null", span="556-556", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n328 [label="Array destinationArray = Array.CreateInstance(type, initial.Length)", span="559-559", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n329 [label="Array.Copy(initial, 0, destinationArray, 0, initial.Length)", span="560-560", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n327 [label="throw new ArgumentNullException(''type'');", span="557-557", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n332 [label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0", cluster="System.Array.CreateInstance(System.Type, int)"];
n330 [label="return destinationArray;", span="561-561", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n333 [label="Entry System.Array.Copy(System.Array, int, System.Array, int, int)", span="0-0", cluster="System.Array.Copy(System.Array, int, System.Array, int, int)"];
n331 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", span="554-554", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)"];
n334 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", span="564-564", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)"];
n335 [label="return list.AddDistinct(value, EqualityComparer<T>.Default);", span="566-566", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)"];
n336 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", span="564-564", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)"];
n337 [label="Entry System.Collections.Generic.IList<T>.AddDistinct<T>(T, System.Collections.Generic.IEqualityComparer<T>)", span="569-569", cluster="System.Collections.Generic.IList<T>.AddDistinct<T>(T, System.Collections.Generic.IEqualityComparer<T>)"];
n338 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", span="569-569", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)"];
n339 [label="list.ContainsValue(value, comparer)", span="571-571", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)"];
n341 [label="list.Add(value)", span="574-574", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)"];
n340 [label="return false;", span="572-572", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)"];
n344 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="579-579", cluster="System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n342 [label="return true;", span="575-575", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)"];
n343 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", span="569-569", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)"];
n345 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="579-579", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n346 [label="comparer == null", span="581-581", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n348 [label="source == null", span="584-584", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n350 [label=source, span="587-587", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n351 [label="comparer.Equals(local, value)", span="589-589", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n347 [label="comparer = EqualityComparer<TSource>.Default", span="582-582", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n349 [label="throw new ArgumentNullException(''source'');", span="585-585", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n353 [label="return false;", span="593-593", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n352 [label="return true;", span="590-590", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n355 [label="Entry System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)", span="0-0", cluster="System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)"];
n354 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="579-579", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)"];
n356 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="596-596", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n357 [label="return list.AddRangeDistinct(values, EqualityComparer<T>.Default);", span="598-598", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n358 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="596-596", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)"];
n359 [label="Entry System.Collections.Generic.IList<T>.AddRangeDistinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="601-601", cluster="System.Collections.Generic.IList<T>.AddRangeDistinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n360 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="601-601", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n361 [label="bool allAdded = true", span="603-603", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n362 [label=values, span="604-604", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n363 [label="!list.AddDistinct(value, comparer)", span="606-606", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n365 [label="return allAdded;", span="610-610", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n364 [label="allAdded = false", span="607-607", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
n366 [label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="601-601", cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"];
d584 [label="Assert.AreEqual(p1, l[0])", span="958-958", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0];
d578 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="949-949", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()"];
d580 [label="IList l = new JObject(p1, p2)", span="951-951", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()"];
d583 [label="Assert.AreEqual(l, p3.Parent)", span="956-956", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0];
d585 [label="Assert.AreEqual(p3, l[1])", span="959-959", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0];
d13 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual"];
d586 [label="Assert.AreEqual(p2, l[2])", span="960-960", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0];
d579 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="950-950", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()"];
d587 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="947-947", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()"];
d581 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="953-953", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0];
d582 [label="l.Insert(1, p3)", span="955-955", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0];
d394 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="293-293", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)"];
d588 [label="Entry System.Collections.IList.Insert(int, object)", span="0-0", cluster="System.Collections.IList.Insert(int, object)"];
d590 [label="IList l = new JObject()", span="966-966", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", color=green, community=0];
d589 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="964-964", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()"];
d591 [label="Assert.IsFalse(l.IsReadOnly)", span="967-967", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", color=green, community=0];
d26 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()"];
d592 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="964-964", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()"];
d239 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse"];
d679 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1107-1114", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", color=green, community=0];
d678 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1105-1105", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()"];
d680 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1105-1105", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()"];
d98 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="211-211", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])"];
d681 [label="Entry lambda expression", span="1107-1114", cluster="lambda expression"];
d682 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1109-1109", cluster="lambda expression", color=green, community=0];
d683 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1110-1110", cluster="lambda expression"];
d684 [label="IList<JToken> l = new JObject(p1, p2)", span="1111-1111", cluster="lambda expression"];
d685 [label="l.Add(new JValue(''Bad!''))", span="1113-1113", cluster="lambda expression", color=green, community=0];
d686 [label="Exit lambda expression", span="1107-1114", cluster="lambda expression"];
d9 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(string)", span="154-154", cluster="Newtonsoft.Json.Linq.JValue.JValue(string)"];
d118 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)"];
d577 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="947-947", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()"];
d395 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])"];
d6 [label="Assert.AreEqual(null, v.Value)", span="73-73", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d18 [label="Assert.AreEqual(''Apple'', (string) o[''Name''])", span="94-94", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()"];
d33 [label="Assert.AreEqual(0, d.Keys.Count)", span="114-114", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d35 [label="Assert.AreEqual(1, d.Keys.Count)", span="118-118", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d40 [label="Assert.AreEqual(1, o.Children().Count())", span="126-126", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d42 [label="Assert.AreEqual(false, o.TryGetValue(''sdf'', out t))", span="129-129", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d44 [label="Assert.AreEqual(false, o.TryGetValue(null, out t))", span="132-132", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d46 [label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="135-135", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d43 [label="Assert.AreEqual(null, t)", span="130-130", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d45 [label="Assert.AreEqual(null, t)", span="133-133", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d47 [label="Assert.AreEqual(true, JToken.DeepEquals(new JValue(1), t))", span="136-136", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d58 [label="Assert.AreEqual(1, o.Children().Count())", span="144-144", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d60 [label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="147-147", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d63 [label="Assert.AreEqual(1, o.Children().Count())", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d64 [label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="153-153", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d67 [label="Assert.AreEqual(1, o.Children().Count())", span="157-157", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d68 [label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="159-159", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d61 [label="Assert.AreEqual(true, JToken.DeepEquals(new JValue(1), t))", span="148-148", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d65 [label="Assert.AreEqual(true, JToken.DeepEquals(new JValue(2), t))", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d69 [label="Assert.AreEqual(true, JToken.DeepEquals(JValue.CreateNull(), t))", span="160-160", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d75 [label="Assert.AreEqual(1, o.Children().Count())", span="168-168", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d76 [label="Assert.AreEqual(false, o.Remove(''sdf''))", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d77 [label="Assert.AreEqual(false, o.Remove(null))", span="171-171", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d78 [label="Assert.AreEqual(true, o.Remove(''PropertyNameValue''))", span="172-172", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d79 [label="Assert.AreEqual(0, o.Children().Count())", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d90 [label="Assert.AreEqual(true, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue'', v)))", span="188-188", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d86 [label="Assert.AreEqual(1, o.Children().Count())", span="183-183", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d87 [label="Assert.AreEqual(false, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue1'', new JValue(1))))", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d88 [label="Assert.AreEqual(false, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(2))))", span="186-186", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d89 [label="Assert.AreEqual(false, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1))))", span="187-187", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d91 [label="Assert.AreEqual(0, o.Children().Count())", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d107 [label="Assert.AreEqual(1, (int)o[''PropertyNameValue''])", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d109 [label="Assert.AreEqual(null, ((JValue)o[''PropertyNameValue1'']).Value)", span="213-213", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d110 [label="Assert.AreEqual(2, o.Children().Count())", span="215-215", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d115 [label="Assert.AreEqual(1, (int)o[''PropertyNameValue''])", span="224-224", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()"];
d116 [label="Assert.AreEqual(1, o.Children().Count())", span="225-225", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()"];
d122 [label="Assert.AreEqual(1, o.Children().Count())", span="233-233", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d125 [label="Assert.AreEqual(0, o.Children().Count())", span="238-238", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d126 [label="Assert.AreEqual(null, p.Parent)", span="240-240", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d134 [label="Assert.AreEqual(1, o.Children().Count())", span="249-249", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d136 [label="Assert.AreEqual(false, contains)", span="252-252", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d138 [label="Assert.AreEqual(true, contains)", span="255-255", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d140 [label="Assert.AreEqual(false, contains)", span="258-258", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d142 [label="Assert.AreEqual(false, contains)", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d144 [label="Assert.AreEqual(false, contains)", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d150 [label="Assert.AreEqual(1, o.Children().Count())", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d152 [label="Assert.AreEqual(true, contains)", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d160 [label="Assert.AreEqual(3, o.Children().Count())", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d163 [label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[0])", span="291-291", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d164 [label="Assert.AreEqual(''PropertyNameValue'', a[1].Key)", span="293-293", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d165 [label="Assert.AreEqual(1, (int)a[1].Value)", span="294-294", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d166 [label="Assert.AreEqual(''PropertyNameValue2'', a[2].Key)", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d167 [label="Assert.AreEqual(2, (int)a[2].Value)", span="297-297", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d168 [label="Assert.AreEqual(''PropertyNameValue3'', a[3].Key)", span="299-299", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d169 [label="Assert.AreEqual(3, (int)a[3].Value)", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d170 [label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[4])", span="302-302", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d207 [label="Assert.AreEqual(''FirstNameValue'', (string)o[''first_name''])", span="363-363", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d208 [label="Assert.AreEqual(JTokenType.Raw, ((JValue)o[''RawContent'']).Type)", span="364-364", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d209 [label="Assert.AreEqual(''[1,2,3,4,5]'', (string)o[''RawContent''])", span="365-365", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d210 [label="Assert.AreEqual(''LastNameValue'', (string)o[''last_name''])", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d219 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="384-384", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d221 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="387-387", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d223 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d225 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d227 [label="Assert.AreEqual(JsonToken.Raw, reader.TokenType)", span="396-396", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d229 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d231 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="402-402", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d233 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="405-405", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d246 [label="Assert.AreEqual(''FirstNameValue'', raw.FirstName)", span="426-426", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d247 [label="Assert.AreEqual(''LastNameValue'', raw.LastName)", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d248 [label="Assert.AreEqual(''[1,2,3,4,5]'', raw.RawContent.Value)", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d264 [label="Assert.AreEqual(DateTimeUtils.ConvertJavaScriptTicksToDateTime(1207285200000), (DateTime)v)", span="449-449", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()"];
d272 [label="Assert.AreEqual(true, value)", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d276 [label="Assert.AreEqual(null, value)", span="463-463", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d299 [label="Assert.AreEqual(''PropertyNameValue'' + i, property.Name)", span="502-502", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d300 [label="Assert.AreEqual(i, (int)property.Value)", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d309 [label="Assert.AreEqual(''PropertyNameValue'' + i, pair.Key)", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d310 [label="Assert.AreEqual(i, (int)pair.Value)", span="520-520", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d316 [label="Assert.AreEqual(null, v.Value)", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d317 [label="Assert.AreEqual(JTokenType.String, v.Type)", span="532-532", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d339 [label="Assert.AreEqual(''http://www.foo.com/'', shortie.Original)", span="607-607", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d340 [label="Assert.AreEqual(''krehqk'', shortie.Short)", span="608-608", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d341 [label="Assert.AreEqual(null, shortie.Shortened)", span="609-609", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d342 [label="Assert.AreEqual(0, shortie.Error.Code)", span="610-610", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d343 [label="Assert.AreEqual(''No action taken'', shortie.Error.ErrorMessage)", span="611-611", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d377 [label="Assert.AreEqual(p1, l[0])", span="674-674", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d381 [label="Assert.AreEqual(null, p1.Parent)", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d378 [label="Assert.AreEqual(p2, l[1])", span="675-675", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d384 [label="Assert.AreEqual(p2, l[1])", span="684-684", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d389 [label="Assert.AreEqual(null, p2.Parent)", span="692-692", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d386 [label="Assert.AreEqual(2, o.Properties().Count())", span="687-687", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d382 [label="Assert.AreEqual(l, p3.Parent)", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d383 [label="Assert.AreEqual(p3, l[0])", span="683-683", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d385 [label="Assert.AreEqual(2, l.Count)", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d390 [label="Assert.AreEqual(l, p4.Parent)", span="693-693", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d391 [label="Assert.AreEqual(p3, l[0])", span="695-695", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d392 [label="Assert.AreEqual(p4, l[1])", span="696-696", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d409 [label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="725-725", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d418 [label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="736-736", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d424 [label="Assert.AreEqual(null, (string)o[''StringValue''])", span="743-743", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d430 [label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="750-750", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d407 [label="Assert.AreEqual(null, changing)", span="723-723", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d408 [label="Assert.AreEqual(''value1'', changed)", span="724-724", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d410 [label="Assert.AreEqual(1, changingCount)", span="726-726", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d411 [label="Assert.AreEqual(1, changedCount)", span="727-727", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d413 [label="Assert.AreEqual(1, changingCount)", span="730-730", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d414 [label="Assert.AreEqual(1, changedCount)", span="731-731", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d416 [label="Assert.AreEqual(''value1'', changing)", span="734-734", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d417 [label="Assert.AreEqual(''value2'', changed)", span="735-735", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d419 [label="Assert.AreEqual(2, changingCount)", span="737-737", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d420 [label="Assert.AreEqual(2, changedCount)", span="738-738", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d422 [label="Assert.AreEqual(''value2'', changing)", span="741-741", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d423 [label="Assert.AreEqual(null, changed)", span="742-742", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d425 [label="Assert.AreEqual(3, changingCount)", span="744-744", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d426 [label="Assert.AreEqual(3, changedCount)", span="745-745", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d428 [label="Assert.AreEqual(null, changing)", span="748-748", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d429 [label="Assert.AreEqual(null, changed)", span="749-749", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d431 [label="Assert.AreEqual(4, changingCount)", span="751-751", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d432 [label="Assert.AreEqual(4, changedCount)", span="752-752", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d434 [label="Assert.AreEqual(4, changingCount)", span="755-755", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d435 [label="Assert.AreEqual(4, changedCount)", span="756-756", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d454 [label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="776-776", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d460 [label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="784-784", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d464 [label="Assert.AreEqual(null, (string)o[''StringValue''])", span="789-789", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d468 [label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d453 [label="Assert.AreEqual(''value1'', changed)", span="775-775", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d455 [label="Assert.AreEqual(1, changedCount)", span="777-777", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d457 [label="Assert.AreEqual(1, changedCount)", span="780-780", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d459 [label="Assert.AreEqual(''value2'', changed)", span="783-783", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d461 [label="Assert.AreEqual(2, changedCount)", span="785-785", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d463 [label="Assert.AreEqual(null, changed)", span="788-788", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d465 [label="Assert.AreEqual(3, changedCount)", span="790-790", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d467 [label="Assert.AreEqual(null, changed)", span="793-793", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d469 [label="Assert.AreEqual(4, changedCount)", span="795-795", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d471 [label="Assert.AreEqual(4, changedCount)", span="798-798", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d489 [label="Assert.AreEqual(0, l.IndexOf(p))", span="817-817", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()"];
d490 [label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="818-818", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()"];
d496 [label="Assert.AreEqual(1, l.Count)", span="827-827", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d498 [label="Assert.AreEqual(0, l.Count)", span="831-831", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d507 [label="Assert.AreEqual(p1, a[0])", span="845-845", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d508 [label="Assert.AreEqual(p2, a[1])", span="846-846", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d517 [label="Assert.AreEqual(3, l.Count)", span="860-860", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d518 [label="Assert.AreEqual(p3, l[2])", span="861-861", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d563 [label="Assert.AreEqual(null, p2.Parent)", span="926-926", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d555 [label="Assert.AreEqual(2, l.Count)", span="916-916", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d557 [label="Assert.AreEqual(1, l.Count)", span="919-919", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d561 [label="Assert.AreEqual(0, l.Count)", span="924-924", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d572 [label="Assert.AreEqual(1, l.Count)", span="940-940", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d574 [label="Assert.AreEqual(0, l.Count)", span="943-943", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d604 [label="Assert.AreEqual(p2, l[1])", span="989-989", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d603 [label="Assert.AreEqual(p3, l[0])", span="988-988", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d649 [label="Assert.AreEqual(0, l.IndexOf(p))", span="1057-1057", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()"];
d650 [label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="1058-1058", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()"];
d656 [label="Assert.AreEqual(1, l.Count)", span="1067-1067", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d658 [label="Assert.AreEqual(0, l.Count)", span="1071-1071", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d666 [label="Assert.AreEqual(p1, a[0])", span="1085-1085", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d667 [label="Assert.AreEqual(p2, a[1])", span="1086-1086", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d675 [label="Assert.AreEqual(3, l.Count)", span="1100-1100", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d676 [label="Assert.AreEqual(p3, l[2])", span="1101-1101", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d720 [label="Assert.AreEqual(null, p2.Parent)", span="1167-1167", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d712 [label="Assert.AreEqual(2, l.Count)", span="1157-1157", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d714 [label="Assert.AreEqual(1, l.Count)", span="1160-1160", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d718 [label="Assert.AreEqual(0, l.Count)", span="1165-1165", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d728 [label="Assert.AreEqual(1, l.Count)", span="1181-1181", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d730 [label="Assert.AreEqual(0, l.Count)", span="1184-1184", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d740 [label="Assert.AreEqual(p1, l[0])", span="1199-1199", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d742 [label="Assert.AreEqual(p2, l[2])", span="1201-1201", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d739 [label="Assert.AreEqual(l, p3.Parent)", span="1197-1197", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d741 [label="Assert.AreEqual(p3, l[1])", span="1200-1200", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d756 [label="Assert.AreEqual(p2, l[1])", span="1223-1223", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d755 [label="Assert.AreEqual(p3, l[0])", span="1222-1222", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d771 [label="Assert.AreEqual(ListSortDirection.Ascending, l.SortDirection)", span="1247-1247", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()"];
d775 [label="Assert.AreEqual(null, l.SortProperty)", span="1254-1254", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()"];
d779 [label="Assert.AreEqual(true, l.SupportsChangeNotification)", span="1261-1261", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()"];
d783 [label="Assert.AreEqual(false, l.SupportsSearching)", span="1268-1268", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()"];
d787 [label="Assert.AreEqual(false, l.SupportsSorting)", span="1275-1275", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()"];
d791 [label="Assert.AreEqual(true, l.AllowEdit)", span="1282-1282", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()"];
d795 [label="Assert.AreEqual(true, l.AllowNew)", span="1289-1289", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()"];
d799 [label="Assert.AreEqual(true, l.AllowRemove)", span="1296-1296", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()"];
d837 [label="Assert.AreEqual(false, l.IsSorted)", span="1349-1349", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()"];
d855 [label="Assert.AreEqual(o, p.Parent)", span="1374-1374", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d854 [label="Assert.AreEqual(''Property!'', p.Name)", span="1373-1373", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d864 [label="Assert.AreEqual(string.Empty, l.GetListName(null))", span="1384-1384", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()"];
d886 [label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1419-1419", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d891 [label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1426-1426", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d897 [label="Assert.AreEqual(2, (int)o[''Test1''])", span="1433-1433", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d884 [label="Assert.AreEqual(changedType, ListChangedType.ItemAdded)", span="1417-1417", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d885 [label="Assert.AreEqual(index, 2)", span="1418-1418", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d889 [label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1424-1424", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d890 [label="Assert.AreEqual(index, 2)", span="1425-1425", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d895 [label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1431-1431", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d896 [label="Assert.AreEqual(index, 0)", span="1432-1432", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d914 [label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1459-1459", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d919 [label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1466-1466", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d925 [label="Assert.AreEqual(2, (int)o[''Test1''])", span="1473-1473", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d912 [label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Add)", span="1457-1457", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d913 [label="Assert.AreEqual(index, 2)", span="1458-1458", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d917 [label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1464-1464", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d918 [label="Assert.AreEqual(index, 2)", span="1465-1465", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d923 [label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1471-1471", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d924 [label="Assert.AreEqual(index, 0)", span="1472-1472", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d935 [label="Assert.AreEqual(''435 N Mulford Rd'', searchAddress)", span="1528-1528", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()"];
d948 [label="Assert.AreEqual(3, (int)o[key])", span="1549-1549", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()"];
d954 [label="Assert.AreEqual(''Name2'', value)", span="1563-1563", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()"];
d959 [label="Assert.AreEqual(DBNull.Value, v.Value)", span="1572-1572", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d960 [label="Assert.AreEqual(JTokenType.Null, v.Type)", span="1573-1573", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d1028 [label="Assert.AreEqual(false, prop1.CanResetValue(o))", span="1693-1693", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1029 [label="Assert.AreEqual(false, prop1.ShouldSerializeValue(o))", span="1694-1694", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1034 [label="Assert.AreEqual(false, prop2.CanResetValue(o))", span="1700-1700", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1035 [label="Assert.AreEqual(false, prop2.ShouldSerializeValue(o))", span="1701-1701", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1040 [label="Assert.AreEqual(false, prop3.CanResetValue(o))", span="1707-1707", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1041 [label="Assert.AreEqual(false, prop3.ShouldSerializeValue(o))", span="1708-1708", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1046 [label="Assert.AreEqual(false, prop4.CanResetValue(o))", span="1714-1714", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1047 [label="Assert.AreEqual(false, prop4.ShouldSerializeValue(o))", span="1715-1715", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1023 [label="Assert.AreEqual(4, properties.Count)", span="1687-1687", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1025 [label="Assert.AreEqual(''prop1'', prop1.Name)", span="1690-1690", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1026 [label="Assert.AreEqual(typeof(object), prop1.PropertyType)", span="1691-1691", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1027 [label="Assert.AreEqual(typeof(JObject), prop1.ComponentType)", span="1692-1692", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1031 [label="Assert.AreEqual(''prop2'', prop2.Name)", span="1697-1697", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1032 [label="Assert.AreEqual(typeof(object), prop2.PropertyType)", span="1698-1698", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1033 [label="Assert.AreEqual(typeof(JObject), prop2.ComponentType)", span="1699-1699", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1037 [label="Assert.AreEqual(''prop3'', prop3.Name)", span="1704-1704", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1038 [label="Assert.AreEqual(typeof(object), prop3.PropertyType)", span="1705-1705", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1039 [label="Assert.AreEqual(typeof(JObject), prop3.ComponentType)", span="1706-1706", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1043 [label="Assert.AreEqual(''prop4'', prop4.Name)", span="1711-1711", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1044 [label="Assert.AreEqual(typeof(object), prop4.PropertyType)", span="1712-1712", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1045 [label="Assert.AreEqual(typeof(JObject), prop4.ComponentType)", span="1713-1713", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1054 [label="Assert.AreEqual(0, o.Count)", span="1723-1723", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()"];
d1058 [label="Assert.AreEqual(v.Value, TimeSpan.FromDays(1))", span="1730-1730", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()"];
d1059 [label="Assert.AreEqual(''1.00:00:00'', v.ToString())", span="1732-1732", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()"];
d1066 [label="Assert.AreEqual(v.Value, new Uri(''http://www.stuff.co.nz''))", span="1739-1739", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()"];
d1067 [label="Assert.AreEqual(''http://www.stuff.co.nz/'', v.ToString())", span="1741-1741", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()"];
d1072 [label="Assert.AreEqual(v.Value, new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1748-1748", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()"];
d1073 [label="Assert.AreEqual(''9065acf3-c820-467d-be50-8d4664beaf35'', v.ToString())", span="1750-1750", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()"];
d1102 [label="Assert.AreEqual(0, l1.Count)", span="1828-1828", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1104 [label="Assert.AreEqual(0, l2.Count)", span="1831-1831", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1107 [label="Assert.AreEqual(1, l1.Count)", span="1836-1836", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1109 [label="Assert.AreEqual(1, l2.Count)", span="1839-1839", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1125 [label="Assert.AreEqual(''Upper'', exactMatch)", span="1871-1871", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1126 [label="Assert.AreEqual(''Lower'', ignoreCase)", span="1872-1872", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1134 [label="Assert.AreEqual(null, a.GetValue(''NAME'', StringComparison.Ordinal))", span="1883-1883", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1135 [label="Assert.AreEqual(null, a.GetValue(''NAME''))", span="1884-1884", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1136 [label="Assert.AreEqual(null, a.GetValue(''TITLE''))", span="1885-1885", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1137 [label="Assert.AreEqual(''Name!'', (string)a.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase))", span="1886-1886", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1138 [label="Assert.AreEqual(''name!'', (string)a.GetValue(''name'', StringComparison.Ordinal))", span="1887-1887", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1139 [label="Assert.AreEqual(null, a.GetValue(null, StringComparison.Ordinal))", span="1888-1888", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1140 [label="Assert.AreEqual(null, a.GetValue(null))", span="1889-1889", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1143 [label="Assert.AreEqual(null, v)", span="1893-1893", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1147 [label="Assert.AreEqual(''Name!'', (string)v)", span="1899-1899", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1149 [label="Assert.AreEqual(''name!'', (string)v)", span="1902-1902", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1178 [label="Assert.AreEqual(@''{''''foo'''':''''bar'''',''''name'''':''''Daniel Wertheim'''',''''birthDate'''':''''0001-01-01T00:00:00'''',''''lastModified'''':''''0001-01-01T00:00:00''''}'', json)", span="1957-1957", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()"];
d373 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="669-669", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d374 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="670-670", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d379 [label="JProperty p3 = new JProperty(''Test1'', ''III'')", span="677-677", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d387 [label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="689-689", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d479 [label="JProperty p = new JProperty(''Test'', 1)", span="804-804", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()"];
d482 [label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="808-808", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()"];
d487 [label="JProperty p = new JProperty(''Test'', 1)", span="814-814", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()"];
d494 [label="JProperty p = new JProperty(''Test'', 1)", span="824-824", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d502 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="837-837", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d503 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="838-838", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d512 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="852-852", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d513 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="853-853", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d515 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="856-856", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d525 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="869-869", cluster="lambda expression"];
d526 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="870-870", cluster="lambda expression"];
d534 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="882-882", cluster="lambda expression"];
d535 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="883-883", cluster="lambda expression"];
d543 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="895-895", cluster="lambda expression"];
d544 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="896-896", cluster="lambda expression"];
d546 [label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="899-899", cluster="lambda expression"];
d550 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="908-908", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d551 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="909-909", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d553 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="912-912", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d567 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="932-932", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d568 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="933-933", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d598 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="980-980", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d599 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="981-981", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d601 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="984-984", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d610 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="997-997", cluster="lambda expression"];
d611 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="998-998", cluster="lambda expression"];
d613 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1001-1001", cluster="lambda expression"];
d621 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1013-1013", cluster="lambda expression"];
d622 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1014-1014", cluster="lambda expression"];
d628 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1024-1024", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()"];
d629 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1025-1025", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()"];
d635 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1034-1034", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()"];
d636 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1035-1035", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()"];
d641 [label="JProperty p = new JProperty(''Test'', 1)", span="1044-1044", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()"];
d644 [label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="1048-1048", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()"];
d647 [label="JProperty p = new JProperty(''Test'', 1)", span="1054-1054", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()"];
d654 [label="JProperty p = new JProperty(''Test'', 1)", span="1064-1064", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d661 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1077-1077", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d662 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1078-1078", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d670 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1092-1092", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d671 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1093-1093", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d673 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1096-1096", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d691 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1122-1122", cluster="lambda expression"];
d692 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1123-1123", cluster="lambda expression"];
d700 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1136-1136", cluster="lambda expression"];
d701 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1137-1137", cluster="lambda expression"];
d703 [label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="1140-1140", cluster="lambda expression"];
d707 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1149-1149", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d708 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1150-1150", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d710 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1153-1153", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d723 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1173-1173", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d724 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1174-1174", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d734 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1190-1190", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d735 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1191-1191", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d737 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1194-1194", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d750 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1214-1214", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d751 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1215-1215", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d753 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1218-1218", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d762 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1231-1231", cluster="lambda expression"];
d763 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1232-1232", cluster="lambda expression"];
d765 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1235-1235", cluster="lambda expression"];
d861 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1380-1380", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()"];
d862 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1381-1381", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()"];
d868 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1390-1390", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d869 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1391-1391", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d876 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1401-1401", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d877 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1402-1402", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d882 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1414-1414", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d887 [label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1421-1421", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d904 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1441-1441", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d905 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1442-1442", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d910 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1454-1454", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d915 [label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1461-1461", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d1084 [label="JObject o1 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1776-1781", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1086 [label="JObject o2 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1785-1790", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1088 [label="JObject o3 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 2),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1794-1799", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1090 [label="JObject o4 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(2, 1)))", span="1803-1808", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1092 [label="JObject o5 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1))", span="1812-1816", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1158 [label="o.AddFirst(new JProperty(''foo'', ''bar''))", span="1918-1918", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d22 [label="var o = new JObject()", span="100-100", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()"];
d31 [label="var o = new JObject()", span="111-111", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d38 [label="JObject o = new JObject()", span="124-124", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d56 [label="JObject o = new JObject()", span="142-142", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d73 [label="JObject o = new JObject()", span="166-166", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d84 [label="JObject o = new JObject()", span="181-181", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d100 [label="JObject o = new JObject()", span="198-198", cluster="lambda expression"];
d105 [label="JObject o = new JObject()", span="207-207", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d113 [label="JObject o = new JObject()", span="221-221", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()"];
d120 [label="JObject o = new JObject()", span="231-231", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d132 [label="JObject o = new JObject()", span="247-247", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d148 [label="JObject o = new JObject()", span="270-270", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d156 [label="JObject o = new JObject()", span="281-281", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d177 [label="JObject o = new JObject()", span="310-310", cluster="lambda expression"];
d184 [label="JObject o = new JObject()", span="321-321", cluster="lambda expression"];
d191 [label="JObject o = new JObject()", span="332-332", cluster="lambda expression"];
d198 [label="JObject o = new JObject()", span="342-342", cluster="lambda expression"];
d286 [label="JObject o = new JObject()", span="478-478", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d293 [label="JObject o = new JObject()", span="493-493", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d304 [label="JObject o = new JObject()", span="512-512", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d318 [label="JObject o = new JObject()", span="534-534", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d348 [label="JObject o = new JObject()", span="617-617", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d355 [label="JObject moss = new JObject()", span="632-632", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d362 [label="JObject jen = new JObject()", span="649-649", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d403 [label="JObject o = new JObject()", span="708-708", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d450 [label="JObject o = new JObject()", span="766-766", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d594 [label="IList l = new JObject()", span="973-973", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()"];
d746 [label="IList<JToken> l = new JObject()", span="1207-1207", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()"];
d770 [label="IBindingList l = new JObject()", span="1246-1246", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()"];
d774 [label="IBindingList l = new JObject()", span="1253-1253", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()"];
d778 [label="IBindingList l = new JObject()", span="1260-1260", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()"];
d782 [label="IBindingList l = new JObject()", span="1267-1267", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()"];
d786 [label="IBindingList l = new JObject()", span="1274-1274", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()"];
d790 [label="IBindingList l = new JObject()", span="1281-1281", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()"];
d794 [label="IBindingList l = new JObject()", span="1288-1288", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()"];
d798 [label="IBindingList l = new JObject()", span="1295-1295", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()"];
d802 [label="IBindingList l = new JObject()", span="1302-1302", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()"];
d810 [label="IBindingList l = new JObject()", span="1312-1312", cluster="lambda expression"];
d818 [label="IBindingList l = new JObject()", span="1322-1322", cluster="lambda expression"];
d823 [label="IBindingList l = new JObject()", span="1330-1330", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()"];
d831 [label="IBindingList l = new JObject()", span="1340-1340", cluster="lambda expression"];
d836 [label="IBindingList l = new JObject()", span="1348-1348", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()"];
d843 [label="IBindingList l = new JObject()", span="1357-1357", cluster="lambda expression"];
d848 [label="JObject o = new JObject()", span="1365-1365", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d941 [label="JObject o = new JObject()", span="1536-1536", cluster="lambda expression"];
d946 [label="JObject o = new JObject()", span="1546-1546", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()"];
d961 [label="JObject o = new JObject()", span="1575-1575", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d1113 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(), new JObject()))", span="1845-1845", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1114 [label="JObject a = new JObject()", span="1847-1847", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1115 [label="JObject b = new JObject()", span="1848-1848", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1130 [label="JObject a = new JObject()", span="1878-1878", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d234 [label="Assert.IsFalse(reader.Read())", span="407-407", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d558 [label="Assert.IsFalse(l.Contains(p1))", span="920-920", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d562 [label="Assert.IsFalse(l.Contains(p2))", span="925-925", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d595 [label="Assert.IsFalse(l.IsFixedSize)", span="974-974", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()"];
d638 [label="Assert.IsFalse(l.IsSynchronized)", span="1038-1038", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()"];
d715 [label="Assert.IsFalse(l.Contains(p1))", span="1161-1161", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d719 [label="Assert.IsFalse(l.Contains(p2))", span="1166-1166", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d711 [label="Assert.IsFalse(l.Remove(p3))", span="1156-1156", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d747 [label="Assert.IsFalse(l.IsReadOnly)", span="1208-1208", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()"];
d892 [label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1427-1427", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d920 [label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1467-1467", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d1089 [label="Assert.IsFalse(o1.DeepEquals(o3))", span="1801-1801", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1091 [label="Assert.IsFalse(o1.DeepEquals(o4))", span="1810-1810", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1093 [label="Assert.IsFalse(o1.DeepEquals(o5))", span="1818-1818", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1094 [label="Assert.IsFalse(o1.DeepEquals(null))", span="1820-1820", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1142 [label="Assert.IsFalse(a.TryGetValue(''NAME'', StringComparison.Ordinal, out v))", span="1892-1892", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1144 [label="Assert.IsFalse(a.TryGetValue(''NAME'', out v))", span="1895-1895", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1145 [label="Assert.IsFalse(a.TryGetValue(''TITLE'', out v))", span="1896-1896", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1150 [label="Assert.IsFalse(a.TryGetValue(null, StringComparison.Ordinal, out v))", span="1904-1904", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d96 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', null);\r\n                o.Add(''PropertyNameValue'', null);\r\n            }, ''Can not add property PropertyNameValue to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="196-201", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()"];
d174 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0);\r\n            }, @''Value cannot be null.\r\nParameter name: array'')", span="308-313", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()"];
d181 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1);\r\n            }, @''arrayIndex is less than 0.\r\nParameter name: arrayIndex'')", span="319-324", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()"];
d188 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1);\r\n            }, @''arrayIndex is equal to or greater than the length of array.'')", span="330-334", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()"];
d195 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', new JValue(1));\r\n                o.Add(''PropertyNameValue2'', new JValue(2));\r\n                o.Add(''PropertyNameValue3'', new JValue(3));\r\n\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1);\r\n            }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="340-348", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()"];
d253 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''[''''prop'''']'';\r\n                JObject.Parse(json);\r\n            }, ''Error reading JObject from JsonReader. Current JsonReader item is not an object: StartArray. Path '', line 1, position 1.'')", span="434-438", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()"];
d280 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }''); }, ''Invalid property identifier character: ]. Path 'name', line 3, position 5.'')", span="469-472", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()"];
d522 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="867-874", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()"];
d531 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(''Bad!'');\r\n            }, ''Argument is not a JToken.'')", span="880-887", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()"];
d540 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="893-902", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()"];
d607 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="995-1005", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()"];
d618 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l[0] = new JValue(true);\r\n            }, @''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1011-1018", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()"];
d688 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                // string is implicitly converted to JValue\r\n                l.Add(''Bad!'');\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1120-1128", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()"];
d697 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1134-1143", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()"];
d759 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1229-1239", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()"];
d807 [label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.ApplySort(null, ListSortDirection.Ascending);\r\n            }, ''Specified method is not supported.'')", span="1310-1314", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()"];
d815 [label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.RemoveSort();\r\n            }, ''Specified method is not supported.'')", span="1320-1324", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()"];
d828 [label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.Find(null, null);\r\n            }, ''Specified method is not supported.'')", span="1338-1342", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()"];
d840 [label="ExceptionAssert.Throws<JsonException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.AddNew();\r\n            }, ''Could not determine new value to add to 'Newtonsoft.Json.Linq.JObject'.'')", span="1355-1359", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()"];
d938 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o[0] = new JValue(3);\r\n            }, ''Set JObject values with invalid key value: 0. Object property name expected.'')", span="1534-1538", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()"];
d968 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o[''responseData''];\r\n            }, ''Can not convert Object to String.'')", span="1589-1600", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()"];
d976 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o.Property(''responseData'');\r\n            }, ''Can not convert Object to String.'')", span="1606-1617", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()"];
d985 [label="ExceptionAssert.Throws<Exception>(() => { JObject.Parse(''{ foo:''); }, ''Unexpected end of content while loading JObject. Path 'foo', line 1, position 6.'')", span="1623-1623", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()"];
d1007 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0'';\r\n\r\n                JsonReader reader = new JsonTextReader(new StringReader(jsonText));\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n\r\n                JToken.ReadFrom(reader);\r\n            }, ''Unexpected end of content while loading JObject. Path 'short.error.code', line 6, position 15.'')", span="1658-1675", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()"];
d1077 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n            }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 10, position 2.'')", span="1756-1770", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()"];
d2 [label="var v = new JValue(s)", span="64-64", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d315 [label="JValue v = new JValue(s)", span="530-530", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d350 [label="o[''m''] = new JValue('''')", span="619-619", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d351 [label="o[''o''] = new JValue(@''<div class='s1'>'' + StringUtils.CarriageReturnLineFeed + @''</div>'')", span="620-620", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d356 [label="moss[''FirstName''] = new JValue(''Maurice'')", span="633-633", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d357 [label="moss[''LastName''] = new JValue(''Moss'')", span="634-634", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d359 [label="moss[''Department''] = new JValue(''IT'')", span="636-636", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d360 [label="moss[''JobTitle''] = new JValue(''Support'')", span="637-637", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d528 [label="l.Add(new JValue(''Bad!''))", span="873-873", cluster="lambda expression"];
d114 [label="((ICollection<KeyValuePair<string, JToken>>)o).Add(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="222-222", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()"];
d674 [label="l.Add(p3)", span="1098-1098", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d694 [label="l.Add(''Bad!'')", span="1127-1127", cluster="lambda expression"];
d704 [label="l.Add(p3)", span="1142-1142", cluster="lambda expression"];
d375 [label="JObject o = new JObject(p1, p2)", span="672-672", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d504 [label="IList l = new JObject(p1, p2)", span="839-839", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d514 [label="IList l = new JObject(p1, p2)", span="854-854", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d527 [label="IList l = new JObject(p1, p2)", span="871-871", cluster="lambda expression"];
d536 [label="IList l = new JObject(p1, p2)", span="884-884", cluster="lambda expression"];
d545 [label="IList l = new JObject(p1, p2)", span="897-897", cluster="lambda expression"];
d552 [label="IList l = new JObject(p1, p2)", span="910-910", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d569 [label="IList l = new JObject(p1, p2)", span="934-934", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d600 [label="IList l = new JObject(p1, p2)", span="982-982", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d612 [label="IList l = new JObject(p1, p2)", span="999-999", cluster="lambda expression"];
d623 [label="IList l = new JObject(p1, p2)", span="1015-1015", cluster="lambda expression"];
d630 [label="IList l = new JObject(p1, p2)", span="1026-1026", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()"];
d637 [label="IList l = new JObject(p1, p2)", span="1036-1036", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()"];
d663 [label="IList<JToken> l = new JObject(p1, p2)", span="1079-1079", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d672 [label="IList<JToken> l = new JObject(p1, p2)", span="1094-1094", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d693 [label="IList<JToken> l = new JObject(p1, p2)", span="1124-1124", cluster="lambda expression"];
d702 [label="IList<JToken> l = new JObject(p1, p2)", span="1138-1138", cluster="lambda expression"];
d709 [label="IList<JToken> l = new JObject(p1, p2)", span="1151-1151", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d725 [label="IList<JToken> l = new JObject(p1, p2)", span="1175-1175", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d736 [label="IList<JToken> l = new JObject(p1, p2)", span="1192-1192", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d752 [label="IList<JToken> l = new JObject(p1, p2)", span="1216-1216", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d764 [label="IList<JToken> l = new JObject(p1, p2)", span="1233-1233", cluster="lambda expression"];
d863 [label="ITypedList l = new JObject(p1, p2)", span="1382-1382", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()"];
d870 [label="ITypedList l = new JObject(p1, p2)", span="1392-1392", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d878 [label="JObject o = new JObject(p1, p2)", span="1403-1403", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d906 [label="JObject o = new JObject(p1, p2)", span="1443-1443", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d5 [label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="69-71", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d7 [label="Assert.IsNull((string)o.title)", span="74-74", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d17 [label="JToken o = JToken.Parse(json)", span="92-92", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()"];
d19 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="79-79", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()"];
d32 [label="var d = (IDictionary<string, JToken>)o", span="112-112", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d34 [label="o[''value''] = true", span="116-116", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d36 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", span="109-109", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d39 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d41 [label="JToken t", span="128-128", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d51 [label="Entry Newtonsoft.Json.Linq.JContainer.Children()", span="251-251", cluster="Newtonsoft.Json.Linq.JContainer.Children()"];
d52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
d53 [label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", span="514-514", cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)"];
d48 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", span="122-122", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d49 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="70-70", cluster="Newtonsoft.Json.Linq.JValue.JValue(long)"];
d54 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="152-152", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)"];
d57 [label="o[''PropertyNameValue''] = new JValue(1)", span="143-143", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d59 [label="JToken t", span="146-146", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d62 [label="o[''PropertyNameValue''] = new JValue(2)", span="150-150", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d66 [label="o[''PropertyNameValue''] = null", span="156-156", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d70 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", span="140-140", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d71 [label="Entry Newtonsoft.Json.Linq.JValue.CreateNull()", span="547-547", cluster="Newtonsoft.Json.Linq.JValue.CreateNull()"];
d74 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="167-167", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d81 [label="Entry Newtonsoft.Json.Linq.JObject.Remove(string)", span="498-498", cluster="Newtonsoft.Json.Linq.JObject.Remove(string)"];
d80 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d83 [label="JValue v = new JValue(1)", span="180-180", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d93 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)"];
d94 [label="Entry System.Collections.Generic.ICollection<T>.Remove(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Remove(T)"];
d85 [label="o.Add(''PropertyNameValue'', v)", span="182-182", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d92 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", span="178-178", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d106 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="209-209", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d108 [label="o.Add(''PropertyNameValue1'', null)", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d111 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", span="205-205", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d117 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="219-219", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()"];
d121 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d123 [label="JProperty p = (JProperty)o.Children().ElementAt(0)", span="235-235", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d124 [label="((ICollection<KeyValuePair<string, JToken>>)o).Clear()", span="237-237", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d127 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", span="229-229", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d133 [label="o.Add(''PropertyNameValue'', v)", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d135 [label="bool contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d137 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', v))", span="254-254", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d139 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(2)))", span="257-257", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d141 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue1'', new JValue(1)))", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d143 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(default(KeyValuePair<string, JToken>))", span="263-263", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d145 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="244-244", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d149 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="271-271", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d151 [label="bool contains = ((IDictionary<string, JToken>)o).ContainsKey(''PropertyNameValue'')", span="274-274", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d153 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="268-268", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d159 [label="o.Add(''PropertyNameValue3'', new JValue(3))", span="284-284", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d161 [label="KeyValuePair<string, JToken>[] a = new KeyValuePair<string, JToken>[5]", span="287-287", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d162 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(a, 1)", span="289-289", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d171 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d206 [label="JObject o = JObject.FromObject(raw)", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d211 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d217 [label="JsonReader reader = new JTokenReader(o)", span="381-381", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d218 [label="Assert.IsTrue(reader.Read())", span="383-383", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d220 [label="Assert.IsTrue(reader.Read())", span="386-386", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d222 [label="Assert.IsTrue(reader.Read())", span="389-389", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d224 [label="Assert.IsTrue(reader.Read())", span="392-392", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d226 [label="Assert.IsTrue(reader.Read())", span="395-395", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d228 [label="Assert.IsTrue(reader.Read())", span="398-398", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d230 [label="Assert.IsTrue(reader.Read())", span="401-401", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d232 [label="Assert.IsTrue(reader.Read())", span="404-404", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d245 [label="raw = (PersonRaw)serializer.Deserialize(reader, typeof(PersonRaw))", span="424-424", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d249 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="411-411", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d263 [label="JValue v = (JValue)a[0]", span="447-447", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()"];
d265 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()"];
d267 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", span="181-181", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)"];
d271 [label="bool? value = o.Value<bool?>(''foo'')", span="457-457", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d273 [label="json = @''{''''foo'''':null}''", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d275 [label="value = o.Value<bool?>(''foo'')", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d277 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d297 [label="int i = 1", span="499-499", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d298 [label=t, span="500-500", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d301 [label="i++", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d308 [label=o, span="517-517", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d307 [label="int i = 1", span="516-516", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d311 [label="i++", span="522-522", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d336 [label="Shortie shortie = new Shortie\r\n            {\r\n                Original = (string)json[''short''][''original''],\r\n                Short = (string)json[''short''][''short''],\r\n                Error = new ShortieException\r\n                {\r\n                    Code = (int)json[''short''][''error''][''code''],\r\n                    ErrorMessage = (string)json[''short''][''error''][''msg'']\r\n                }\r\n            }", span="590-599", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d338 [label="Console.WriteLine(shortie.Error.ErrorMessage)", span="604-604", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d344 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="573-573", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d376 [label="IList l = o", span="673-673", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d380 [label="p1.Replace(p3)", span="679-679", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d388 [label="p2.Replace(p4)", span="691-691", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d397 [label="Entry Newtonsoft.Json.Linq.JObject.Properties()", span="229-229", cluster="Newtonsoft.Json.Linq.JObject.Properties()"];
d393 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="667-667", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d406 [label="o[''StringValue''] = ''value1''", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d439 [label="changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="712-712", cluster="lambda expression"];
d444 [label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="718-718", cluster="lambda expression"];
d440 [label="changingCount++", span="713-713", cluster="lambda expression"];
d445 [label="changedCount++", span="719-719", cluster="lambda expression"];
d412 [label="o[''StringValue''] = ''value1''", span="729-729", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d415 [label="o[''StringValue''] = ''value2''", span="733-733", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d421 [label="o[''StringValue''] = null", span="740-740", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d427 [label="o[''NullValue''] = null", span="747-747", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d433 [label="o[''NullValue''] = null", span="754-754", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d436 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="701-701", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d452 [label="o[''StringValue''] = ''value1''", span="774-774", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d475 [label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="770-770", cluster="lambda expression"];
d476 [label="changedCount++", span="771-771", cluster="lambda expression"];
d456 [label="o[''StringValue''] = ''value1''", span="779-779", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d458 [label="o[''StringValue''] = ''value2''", span="782-782", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d462 [label="o[''StringValue''] = null", span="787-787", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d466 [label="o[''NullValue''] = null", span="792-792", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d470 [label="o[''NullValue''] = null", span="797-797", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d472 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="761-761", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d488 [label="IList l = new JObject(p)", span="815-815", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()"];
d492 [label="Entry System.Collections.IList.IndexOf(object)", span="0-0", cluster="System.Collections.IList.IndexOf(object)"];
d491 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="812-812", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()"];
d495 [label="IList l = new JObject(p)", span="825-825", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d497 [label="l.Clear()", span="829-829", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d499 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="822-822", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d505 [label="object[] a = new object[l.Count]", span="841-841", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d506 [label="l.CopyTo(a, 0)", span="843-843", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d509 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="835-835", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d516 [label="l.Add(p3)", span="858-858", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d519 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="850-850", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d564 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="906-906", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d554 [label="l.Remove(p3)", span="915-915", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d556 [label="l.Remove(p1)", span="918-918", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d560 [label="l.Remove(p2)", span="923-923", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d571 [label="l.Remove(p1)", span="939-939", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d573 [label="l.Remove(p2)", span="942-942", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d575 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="930-930", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d605 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="978-978", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d602 [label="l[0] = p3", span="986-986", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d648 [label="IList<JToken> l = new JObject(p)", span="1055-1055", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()"];
d652 [label="Entry System.Collections.Generic.IList<T>.IndexOf(T)", span="0-0", cluster="System.Collections.Generic.IList<T>.IndexOf(T)"];
d651 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1052-1052", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()"];
d655 [label="IList<JToken> l = new JObject(p)", span="1065-1065", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d657 [label="l.Clear()", span="1069-1069", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d659 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1062-1062", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d664 [label="JToken[] a = new JToken[l.Count]", span="1081-1081", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d665 [label="l.CopyTo(a, 0)", span="1083-1083", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d668 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1075-1075", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d677 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1090-1090", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d721 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1147-1147", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d713 [label="Assert.IsTrue(l.Remove(p1))", span="1159-1159", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d717 [label="Assert.IsTrue(l.Remove(p2))", span="1164-1164", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d727 [label="l.Remove(p1)", span="1180-1180", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d729 [label="l.Remove(p2)", span="1183-1183", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d731 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1171-1171", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d743 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1188-1188", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d738 [label="l.Insert(1, p3)", span="1196-1196", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d757 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1212-1212", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d754 [label="l[0] = p3", span="1220-1220", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d772 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1244-1244", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()"];
d776 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1251-1251", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()"];
d780 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1258-1258", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()"];
d784 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1265-1265", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()"];
d788 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1272-1272", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()"];
d792 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1279-1279", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()"];
d796 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1286-1286", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()"];
d800 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1293-1293", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()"];
d838 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1346-1346", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()"];
d853 [label="JProperty p = (JProperty)newObject", span="1372-1372", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d856 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1363-1363", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d865 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1378-1378", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()"];
d866 [label="Entry System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", span="0-0", cluster="System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])"];
d901 [label="index = a.NewIndex", span="1411-1411", cluster="lambda expression"];
d898 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1399-1399", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d883 [label="o.Add(p3)", span="1416-1416", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d900 [label="changedType = a.ListChangedType", span="1410-1410", cluster="lambda expression"];
d888 [label="((IList<JToken>)o)[index.Value] = p4", span="1423-1423", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d894 [label="o[''Test1''] = 2", span="1430-1430", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d929 [label="index = a.NewStartingIndex", span="1451-1451", cluster="lambda expression"];
d926 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1439-1439", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d911 [label="o.Add(p3)", span="1456-1456", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d928 [label="changedType = a.Action", span="1450-1450", cluster="lambda expression"];
d916 [label="((IList<JToken>)o)[index.Value] = p4", span="1463-1463", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d922 [label="o[''Test1''] = 2", span="1470-1470", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d934 [label="string searchAddress = (string)o[''Placemark''][0][''AddressDetails''][''Country''][''AdministrativeArea''][''SubAdministrativeArea''][''Locality''][''Thoroughfare''][''ThoroughfareName'']", span="1527-1527", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()"];
d936 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1478-1478", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()"];
d945 [label="object key = ''TestKey''", span="1544-1544", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()"];
d947 [label="o[key] = new JValue(3)", span="1547-1547", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()"];
d949 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1542-1542", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()"];
d953 [label="string value = (string)o[''Name'']", span="1561-1561", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()"];
d955 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1553-1553", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()"];
d958 [label="JValue v = new JValue(dbNull)", span="1571-1571", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d1020 [label="JObject o = JObject.Parse(''{'prop1':12,'prop2':'hi!','prop3':null,'prop4':[1,2,3]}'')", span="1682-1682", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1024 [label="PropertyDescriptor prop1 = properties[0]", span="1689-1689", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1050 [label="Entry System.ComponentModel.PropertyDescriptor.CanResetValue(object)", span="0-0", cluster="System.ComponentModel.PropertyDescriptor.CanResetValue(object)"];
d1030 [label="PropertyDescriptor prop2 = properties[1]", span="1696-1696", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1051 [label="Entry System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", span="0-0", cluster="System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)"];
d1036 [label="PropertyDescriptor prop3 = properties[2]", span="1703-1703", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1042 [label="PropertyDescriptor prop4 = properties[3]", span="1710-1710", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1048 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1680-1680", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1022 [label="PropertyDescriptorCollection properties = descriptor.GetProperties()", span="1686-1686", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1053 [label="JObject o = JObject.Parse(''{ /* A Comment */ }'')", span="1722-1722", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()"];
d1055 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1720-1720", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()"];
d1057 [label="JValue v = (JValue)JToken.FromObject(TimeSpan.FromDays(1))", span="1729-1729", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()"];
d1061 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
d1060 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1727-1727", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()"];
d1063 [label="Entry Newtonsoft.Json.Linq.JValue.ToString()", span="792-792", cluster="Newtonsoft.Json.Linq.JValue.ToString()"];
d1065 [label="JValue v = (JValue)JToken.FromObject(new Uri(''http://www.stuff.co.nz''))", span="1738-1738", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()"];
d1069 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)"];
d1068 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1736-1736", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()"];
d1071 [label="JValue v = (JValue)JToken.FromObject(new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1747-1747", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()"];
d1075 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)"];
d1074 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1745-1745", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()"];
d1101 [label="IList<JToken> l1 = o.ToList<JToken>()", span="1827-1827", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1103 [label="IList<KeyValuePair<string, JToken>> l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1830-1830", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1105 [label="o = JObject.Parse(@''{'hi':null}'')", span="1833-1833", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1106 [label="l1 = o.ToList<JToken>()", span="1835-1835", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1108 [label="l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1838-1838", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1110 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1824-1824", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1123 [label="string exactMatch = (string)o.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase)", span="1865-1865", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1124 [label="string ignoreCase = (string)o.GetValue(''Name'', StringComparison.OrdinalIgnoreCase)", span="1868-1868", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1127 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1858-1858", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1133 [label="a[''title''] = ''Title!''", span="1881-1881", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1128 [label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", span="433-433", cluster="Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)"];
d1152 [label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string)", span="420-420", cluster="Newtonsoft.Json.Linq.JObject.GetValue(string)"];
d1141 [label="JToken v", span="1891-1891", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1146 [label="Assert.IsTrue(a.TryGetValue(''NAME'', StringComparison.OrdinalIgnoreCase, out v))", span="1898-1898", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1148 [label="Assert.IsTrue(a.TryGetValue(''name'', StringComparison.Ordinal, out v))", span="1901-1901", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1177 [label="var json = JsonConvert.SerializeObject(p, settings)", span="1955-1955", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()"];
d1179 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1942-1942", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()"];
d372 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="667-667", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()"];
d478 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="802-802", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()"];
d480 [label="IList l = new JObject(p)", span="805-805", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()"];
d481 [label="Assert.IsTrue(l.Contains(p))", span="807-807", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()"];
d483 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="802-802", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()"];
d485 [label="Entry System.Collections.IList.Contains(object)", span="0-0", cluster="System.Collections.IList.Contains(object)"];
d486 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="812-812", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()"];
d493 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="822-822", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()"];
d501 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="835-835", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()"];
d511 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="850-850", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()"];
d524 [label="Entry lambda expression", span="867-874", cluster="lambda expression"];
d533 [label="Entry lambda expression", span="880-887", cluster="lambda expression"];
d542 [label="Entry lambda expression", span="893-902", cluster="lambda expression"];
d547 [label="l.Add(p3)", span="901-901", cluster="lambda expression"];
d549 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="906-906", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d559 [label="Assert.IsTrue(l.Contains(p2))", span="921-921", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()"];
d566 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="930-930", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d597 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="978-978", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()"];
d609 [label="Entry lambda expression", span="995-1005", cluster="lambda expression"];
d614 [label="l[0] = p3", span="1003-1003", cluster="lambda expression"];
d615 [label="l[1] = p3", span="1004-1004", cluster="lambda expression"];
d620 [label="Entry lambda expression", span="1011-1018", cluster="lambda expression"];
d627 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1022-1022", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()"];
d634 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1032-1032", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()"];
d640 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1042-1042", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()"];
d642 [label="IList<JToken> l = new JObject(p)", span="1045-1045", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()"];
d643 [label="Assert.IsTrue(l.Contains(p))", span="1047-1047", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()"];
d645 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1042-1042", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()"];
d146 [label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Contains(T)"];
d646 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1052-1052", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()"];
d653 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1062-1062", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()"];
d660 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1075-1075", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()"];
d669 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1090-1090", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()"];
d690 [label="Entry lambda expression", span="1120-1128", cluster="lambda expression"];
d699 [label="Entry lambda expression", span="1134-1143", cluster="lambda expression"];
d706 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1147-1147", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d716 [label="Assert.IsTrue(l.Contains(p2))", span="1162-1162", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()"];
d722 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1171-1171", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d733 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1188-1188", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()"];
d749 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1212-1212", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()"];
d761 [label="Entry lambda expression", span="1229-1239", cluster="lambda expression"];
d766 [label="l[0] = p3", span="1237-1237", cluster="lambda expression"];
d767 [label="l[1] = p3", span="1238-1238", cluster="lambda expression"];
d860 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1378-1378", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()"];
d867 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1388-1388", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d875 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1399-1399", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d881 [label="o.ListChanged += (s, a) =>\r\n            {\r\n                changedType = a.ListChangedType;\r\n                index = a.NewIndex;\r\n            }", span="1408-1412", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d893 [label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1428-1428", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d903 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1439-1439", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d909 [label="o._collectionChanged += (s, a) =>\r\n            {\r\n                changedType = a.Action;\r\n                index = a.NewStartingIndex;\r\n            }", span="1448-1452", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d921 [label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1468-1468", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d1083 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1774-1774", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1085 [label="Assert.IsTrue(o1.DeepEquals(o1))", span="1783-1783", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1096 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", span="283-283", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])"];
d1097 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])"];
d1087 [label="Assert.IsTrue(o1.DeepEquals(o2))", span="1792-1792", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1157 [label="var o = (JObject)token", span="1917-1917", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d1159 [label="o.WriteTo(writer)", span="1919-1919", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d1164 [label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="566-566", cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)"];
d21 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="98-98", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()"];
d23 [label="o.Add(new JProperty(''novalue''))", span="101-101", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()"];
d24 [label="StringAssert.AreEqual(@''{\r\n  ''''novalue'''': null\r\n}'', o.ToString())", span="103-105", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()"];
d30 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", span="109-109", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()"];
d37 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", span="122-122", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()"];
d55 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", span="140-140", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()"];
d72 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()"];
d99 [label="Entry lambda expression", span="196-201", cluster="lambda expression"];
d101 [label="o.Add(''PropertyNameValue'', null)", span="199-199", cluster="lambda expression"];
d102 [label="o.Add(''PropertyNameValue'', null)", span="200-200", cluster="lambda expression"];
d104 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", span="205-205", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()"];
d112 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="219-219", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()"];
d119 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", span="229-229", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()"];
d131 [label="JValue v = new JValue(1)", span="246-246", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d147 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="268-268", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()"];
d155 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d157 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="282-282", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d158 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()"];
d176 [label="Entry lambda expression", span="308-312", cluster="lambda expression"];
d178 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0)", span="311-311", cluster="lambda expression"];
d183 [label="Entry lambda expression", span="319-323", cluster="lambda expression"];
d185 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1)", span="322-322", cluster="lambda expression"];
d190 [label="Entry lambda expression", span="330-334", cluster="lambda expression"];
d192 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1)", span="333-333", cluster="lambda expression"];
d197 [label="Entry lambda expression", span="340-348", cluster="lambda expression"];
d199 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="343-343", cluster="lambda expression"];
d200 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="344-344", cluster="lambda expression"];
d201 [label="o.Add(''PropertyNameValue3'', new JValue(3))", span="345-345", cluster="lambda expression"];
d202 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1)", span="347-347", cluster="lambda expression"];
d285 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d287 [label="o[''val1''] = new JRaw(''1'')", span="479-479", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d288 [label="o[''val2''] = new JRaw(''1'')", span="480-480", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d289 [label="string json = o.ToString()", span="482-482", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d292 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d294 [label="o.Add(''PropertyNameValue1'', new JValue(1))", span="494-494", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d295 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="495-495", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d296 [label="JToken t = o", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d303 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="510-510", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d305 [label="o.Add(''PropertyNameValue1'', new JValue(1))", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d306 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="514-514", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d319 [label="o[''title''] = v", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d320 [label="string output = o.ToString()", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d347 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="615-615", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d349 [label="o[''rc''] = new JValue(200)", span="618-618", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d352 [label="StringAssert.AreEqual(@''{\r\n  ''''rc'''': 200,\r\n  ''''m'''': '''''''',\r\n  ''''o'''': ''''<div class='s1'>\r\n</div>''''\r\n}'', o.ToString())", span="622-626", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d354 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="630-630", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d358 [label="moss[''BirthDate''] = new JValue(new DateTime(1977, 12, 30))", span="635-635", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d361 [label="Console.WriteLine(moss.ToString())", span="639-639", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d363 [label="jen[''FirstName''] = ''Jen''", span="650-650", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d364 [label="jen[''LastName''] = ''Barber''", span="651-651", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d365 [label="jen[''BirthDate''] = new DateTime(1978, 3, 15)", span="652-652", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d366 [label="jen[''Department''] = ''IT''", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d367 [label="jen[''JobTitle''] = ''Manager''", span="654-654", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d368 [label="Console.WriteLine(jen.ToString())", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d402 [label="int changedCount = 0", span="706-706", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d404 [label="o.PropertyChanging += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changingCount++;\r\n            }", span="709-714", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d405 [label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="715-720", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d449 [label="int changedCount = 0", span="764-764", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d451 [label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="767-772", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d593 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="971-971", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()"];
d745 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1205-1205", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()"];
d769 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1244-1244", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()"];
d773 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1251-1251", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()"];
d777 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1258-1258", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()"];
d781 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1265-1265", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()"];
d785 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1272-1272", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()"];
d789 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1279-1279", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()"];
d793 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1286-1286", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()"];
d797 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1293-1293", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()"];
d801 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1300-1300", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()"];
d803 [label="l.AddIndex(null)", span="1304-1304", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()"];
d809 [label="Entry lambda expression", span="1310-1314", cluster="lambda expression"];
d811 [label="l.ApplySort(null, ListSortDirection.Ascending)", span="1313-1313", cluster="lambda expression"];
d817 [label="Entry lambda expression", span="1320-1324", cluster="lambda expression"];
d819 [label="l.RemoveSort()", span="1323-1323", cluster="lambda expression"];
d822 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1328-1328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()"];
d824 [label="l.RemoveIndex(null)", span="1332-1332", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()"];
d830 [label="Entry lambda expression", span="1338-1342", cluster="lambda expression"];
d832 [label="l.Find(null, null)", span="1341-1341", cluster="lambda expression"];
d835 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1346-1346", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()"];
d842 [label="Entry lambda expression", span="1355-1359", cluster="lambda expression"];
d844 [label="l.AddNew()", span="1358-1358", cluster="lambda expression"];
d847 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1363-1363", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d849 [label="o._addingNew += (s, e) => e.NewObject = new JProperty(''Property!'')", span="1366-1366", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d850 [label="IBindingList l = o", span="1368-1368", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d940 [label="Entry lambda expression", span="1534-1538", cluster="lambda expression"];
d942 [label="o[0] = new JValue(3)", span="1537-1537", cluster="lambda expression"];
d962 [label="o[''title''] = v", span="1576-1576", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d963 [label="string output = o.ToString()", span="1578-1578", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d1112 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1843-1843", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d238 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue"];
d1118 [label="Assert.IsTrue(JToken.DeepEquals(a, b))", span="1853-1853", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1119 [label="Assert.IsTrue(JToken.DeepEquals(b, a))", span="1854-1854", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1116 [label="b.Add(''hi'', ''bye'')", span="1850-1850", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1117 [label="b.Remove(''hi'')", span="1851-1851", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d1129 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1876-1876", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1131 [label="a[''Name''] = ''Name!''", span="1879-1879", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d1132 [label="a[''name''] = ''name!''", span="1880-1880", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d235 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="370-370", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d237 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="365-365", cluster="Newtonsoft.Json.JsonReader.Read()"];
d596 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="971-971", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()"];
d639 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1032-1032", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()"];
d748 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1205-1205", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()"];
d1098 [label="Entry Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", span="118-118", cluster="Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)"];
d1095 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1774-1774", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()"];
d1153 [label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", span="465-465", cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)"];
d1151 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1876-1876", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()"];
d95 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()"];
d97 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()"];
d173 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="306-306", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()"];
d175 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="306-306", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()"];
d180 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="317-317", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()"];
d182 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="317-317", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()"];
d187 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()"];
d189 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()"];
d194 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="338-338", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()"];
d196 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="338-338", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()"];
d252 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="432-432", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()"];
d254 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="432-432", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()"];
d255 [label="Entry lambda expression", span="434-438", cluster="lambda expression"];
d279 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()"];
d281 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()"];
d282 [label="Entry lambda expression", span="469-472", cluster="lambda expression"];
d521 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="865-865", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()"];
d523 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="865-865", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()"];
d530 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="878-878", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()"];
d532 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="878-878", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()"];
d539 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="891-891", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()"];
d541 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="891-891", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()"];
d606 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="993-993", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()"];
d608 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="993-993", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()"];
d617 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1009-1009", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()"];
d619 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1009-1009", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()"];
d687 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1118-1118", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()"];
d689 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1118-1118", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()"];
d696 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1132-1132", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()"];
d698 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1132-1132", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()"];
d758 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1227-1227", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()"];
d760 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1227-1227", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()"];
d806 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1308-1308", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()"];
d808 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1308-1308", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()"];
d814 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1318-1318", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()"];
d816 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1318-1318", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()"];
d827 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1336-1336", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()"];
d829 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1336-1336", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()"];
d839 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1353-1353", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()"];
d841 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1353-1353", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()"];
d937 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1532-1532", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()"];
d939 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1532-1532", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()"];
d967 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1587-1587", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()"];
d969 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1587-1587", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()"];
d970 [label="Entry lambda expression", span="1589-1600", cluster="lambda expression"];
d975 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1604-1604", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()"];
d977 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1604-1604", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()"];
d978 [label="Entry lambda expression", span="1606-1617", cluster="lambda expression"];
d984 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1621-1621", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()"];
d986 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1621-1621", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()"];
d987 [label="Entry lambda expression", span="1623-1623", cluster="lambda expression"];
d1006 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1656-1656", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()"];
d1008 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1656-1656", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()"];
d1009 [label="Entry lambda expression", span="1658-1675", cluster="lambda expression"];
d1076 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1754-1754", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()"];
d1078 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1754-1754", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()"];
d1079 [label="Entry lambda expression", span="1756-1770", cluster="lambda expression"];
d1 [label="string s = null", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d3 [label="dynamic o = JObject.FromObject(new { title = v })", span="65-65", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d314 [label="string s = null", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d529 [label="Exit lambda expression", span="867-874", cluster="lambda expression"];
d520 [label="Entry System.Collections.IList.Add(object)", span="0-0", cluster="System.Collections.IList.Add(object)"];
d695 [label="Exit lambda expression", span="1120-1128", cluster="lambda expression"];
d705 [label="Exit lambda expression", span="1134-1143", cluster="lambda expression"];
d537 [label="l.Add(''Bad!'')", span="886-886", cluster="lambda expression"];
d570 [label="l.RemoveAt(0)", span="937-937", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()"];
d624 [label="l[0] = new JValue(true)", span="1017-1017", cluster="lambda expression"];
d631 [label="Assert.IsNotNull(l.SyncRoot)", span="1028-1028", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()"];
d726 [label="l.RemoveAt(0)", span="1178-1178", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()"];
d871 [label="PropertyDescriptorCollection propertyDescriptors = l.GetItemProperties(null)", span="1394-1394", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d879 [label="ListChangedType? changedType = null", span="1405-1405", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d907 [label="NotifyCollectionChangedAction? changedType = null", span="1445-1445", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d4 [label="string output = o.ToString()", span="67-67", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d12 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="184-184", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)"];
d8 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="61-61", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d14 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull"];
d16 [label="string json = @''{ /*comment2*/\r\n        ''''Name'''': /*comment3*/ ''''Apple'''' /*comment4*/, /*comment5*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment6*/ [ /*comment7*/\r\n          ''''Small'''', /*comment8*/\r\n          ''''Medium'''' /*comment9*/,\r\n          /*comment10*/ ''''Large''''\r\n        /*comment11*/ ] /*comment12*/\r\n      } /*comment13*/''", span="81-90", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()"];
d20 [label="Entry Newtonsoft.Json.Linq.JToken.Parse(string)", span="1896-1896", cluster="Newtonsoft.Json.Linq.JToken.Parse(string)"];
d15 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="79-79", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()"];
d50 [label="Entry Newtonsoft.Json.Linq.JObject.Add(string, Newtonsoft.Json.Linq.JToken)", span="477-477", cluster="Newtonsoft.Json.Linq.JObject.Add(string, Newtonsoft.Json.Linq.JToken)"];
d82 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", span="178-178", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()"];
d128 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)"];
d129 [label="Entry System.Collections.Generic.ICollection<T>.Clear()", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Clear()"];
d130 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="244-244", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()"];
d154 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)"];
d172 [label="Entry System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.CopyTo(T[], int)"];
d205 [label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="354-359", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d10 [label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="377-377", cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)"];
d204 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()"];
d216 [label="JObject o = JObject.FromObject(raw)", span="379-379", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d236 [label="Entry Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", span="44-44", cluster="Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)"];
d243 [label="JsonReader reader = new JTokenReader(o)", span="422-422", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d244 [label="JsonSerializer serializer = new JsonSerializer()", span="423-423", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d251 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="686-686", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)"];
d240 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="411-411", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d262 [label="JArray a = (JArray)JsonConvert.DeserializeObject(json)", span="446-446", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()"];
d260 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()"];
d270 [label="JObject o = (JObject)JsonConvert.DeserializeObject(json)", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d278 [label="Entry Newtonsoft.Json.Linq.JToken.Value<T>(object)", span="313-313", cluster="Newtonsoft.Json.Linq.JToken.Value<T>(object)"];
d274 [label="o = (JObject)JsonConvert.DeserializeObject(json)", span="461-461", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d268 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d302 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()"];
d312 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="510-510", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()"];
d335 [label="JObject json = JObject.Parse(jsonText)", span="588-588", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d337 [label="Console.WriteLine(shortie.Original)", span="601-601", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d345 [label="Entry Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()"];
d346 [label="Entry Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", span="35-35", cluster="Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()"];
d332 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)"];
d333 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="573-573", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d396 [label="Entry Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", span="383-383", cluster="Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)"];
d438 [label="JObject s = (JObject)sender", span="711-711", cluster="lambda expression"];
d437 [label="Entry lambda expression", span="709-714", cluster="lambda expression"];
d441 [label="Exit lambda expression", span="709-714", cluster="lambda expression"];
d443 [label="JObject s = (JObject)sender", span="717-717", cluster="lambda expression"];
d442 [label="Entry lambda expression", span="715-720", cluster="lambda expression"];
d446 [label="Exit lambda expression", span="715-720", cluster="lambda expression"];
d1185 [label=changingCount, span=""];
d1186 [label=changedCount, span=""];
d398 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="701-701", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d474 [label="JObject s = (JObject)sender", span="769-769", cluster="lambda expression"];
d473 [label="Entry lambda expression", span="767-772", cluster="lambda expression"];
d477 [label="Exit lambda expression", span="767-772", cluster="lambda expression"];
d1187 [label=changedCount, span=""];
d447 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="761-761", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d484 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)"];
d500 [label="Entry System.Collections.IList.Clear()", span="0-0", cluster="System.Collections.IList.Clear()"];
d510 [label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0", cluster="System.Collections.ICollection.CopyTo(System.Array, int)"];
d565 [label="Entry System.Collections.IList.Remove(object)", span="0-0", cluster="System.Collections.IList.Remove(object)"];
d744 [label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0", cluster="System.Collections.Generic.IList<T>.Insert(int, T)"];
d851 [label="object newObject = l.AddNew()", span="1369-1369", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d852 [label="Assert.IsNotNull(newObject)", span="1370-1370", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()"];
d899 [label="Entry lambda expression", span="1408-1412", cluster="lambda expression"];
d902 [label="Exit lambda expression", span="1408-1412", cluster="lambda expression"];
d28 [label="Entry Newtonsoft.Json.Linq.JContainer.Add(object)", span="552-552", cluster="Newtonsoft.Json.Linq.JContainer.Add(object)"];
d927 [label="Entry lambda expression", span="1448-1452", cluster="lambda expression"];
d930 [label="Exit lambda expression", span="1448-1452", cluster="lambda expression"];
d933 [label="JObject o = JObject.Parse(json)", span="1525-1525", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()"];
d931 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1478-1478", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()"];
d944 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1542-1542", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()"];
d952 [label="JObject o = JObject.Parse(json)", span="1560-1560", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()"];
d950 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1553-1553", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()"];
d957 [label="DBNull dbNull = DBNull.Value", span="1570-1570", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d966 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="190-190", cluster="Newtonsoft.Json.Linq.JValue.JValue(object)"];
d1019 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1680-1680", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d1021 [label="ICustomTypeDescriptor descriptor = o", span="1684-1684", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()"];
d259 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="359-359", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)"];
d1049 [label="Entry System.ComponentModel.ICustomTypeDescriptor.GetProperties()", span="0-0", cluster="System.ComponentModel.ICustomTypeDescriptor.GetProperties()"];
d1052 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1720-1720", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()"];
d1056 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1727-1727", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()"];
d1062 [label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object)", span="1668-1668", cluster="Newtonsoft.Json.Linq.JToken.FromObject(object)"];
d1064 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1736-1736", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()"];
d1070 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1745-1745", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()"];
d1100 [label="JObject o = JObject.Parse(@''{}'')", span="1826-1826", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1111 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()"];
d1099 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1824-1824", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()"];
d1122 [label="JObject o = JObject.Parse(@''{\r\n        'name': 'Lower',\r\n        'NAME': 'Upper'\r\n      }'')", span="1860-1863", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1121 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1858-1858", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()"];
d1175 [label="var p = new Person\r\n            {\r\n                Name = ''Daniel Wertheim'',\r\n            }", span="1944-1947", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()"];
d1176 [label="var settings = new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter> { new FooJsonConverter() },\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            }", span="1949-1953", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()"];
d1184 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="570-570", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)"];
d1174 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1942-1942", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()"];
d538 [label="Exit lambda expression", span="880-887", cluster="lambda expression"];
d548 [label="Exit lambda expression", span="893-902", cluster="lambda expression"];
d616 [label="Exit lambda expression", span="995-1005", cluster="lambda expression"];
d625 [label="Exit lambda expression", span="1011-1018", cluster="lambda expression"];
d632 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1022-1022", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()"];
d768 [label="Exit lambda expression", span="1229-1239", cluster="lambda expression"];
d873 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1388-1388", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d880 [label="int? index = null", span="1406-1406", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()"];
d908 [label="int? index = null", span="1446-1446", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()"];
d1155 [label="var token = JToken.FromObject(value, new JsonSerializer\r\n                {\r\n                    ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n                })", span="1911-1914", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d1156 [label="token.Type == JTokenType.Object", span="1915-1915", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d1154 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1909-1909", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d1161 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1909-1909", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d1165 [label="Entry Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="403-403", cluster="Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])"];
d25 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="98-98", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()"];
d27 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string)", span="270-270", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string)"];
d29 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="404-404", cluster="Newtonsoft.Json.Linq.JToken.ToString()"];
d103 [label="Exit lambda expression", span="196-201", cluster="lambda expression"];
d179 [label="Exit lambda expression", span="308-312", cluster="lambda expression"];
d186 [label="Exit lambda expression", span="319-323", cluster="lambda expression"];
d193 [label="Exit lambda expression", span="330-334", cluster="lambda expression"];
d203 [label="Exit lambda expression", span="340-348", cluster="lambda expression"];
d291 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d213 [label="Entry Newtonsoft.Json.Linq.JRaw.JRaw(object)", span="48-48", cluster="Newtonsoft.Json.Linq.JRaw.JRaw(object)"];
d290 [label="StringAssert.AreEqual(@''{\r\n  ''''val1'''': 1,\r\n  ''''val2'''': 1\r\n}'', json)", span="484-487", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()"];
d321 [label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="539-541", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d353 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="615-615", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()"];
d369 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="630-630", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()"];
d370 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", span="125-125", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)"];
d371 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)"];
d401 [label="int changingCount = 0", span="705-705", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d448 [label="object changed = null", span="763-763", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()"];
d804 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1300-1300", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()"];
d805 [label="Entry System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", span="0-0", cluster="System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)"];
d812 [label="Exit lambda expression", span="1310-1314", cluster="lambda expression"];
d813 [label="Entry System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", span="0-0", cluster="System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)"];
d820 [label="Exit lambda expression", span="1320-1324", cluster="lambda expression"];
d821 [label="Entry System.ComponentModel.IBindingList.RemoveSort()", span="0-0", cluster="System.ComponentModel.IBindingList.RemoveSort()"];
d825 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1328-1328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()"];
d826 [label="Entry System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", span="0-0", cluster="System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)"];
d833 [label="Exit lambda expression", span="1338-1342", cluster="lambda expression"];
d834 [label="Entry System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", span="0-0", cluster="System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)"];
d845 [label="Exit lambda expression", span="1355-1359", cluster="lambda expression"];
d846 [label="Entry System.ComponentModel.IBindingList.AddNew()", span="0-0", cluster="System.ComponentModel.IBindingList.AddNew()"];
d858 [label="e.NewObject = new JProperty(''Property!'')", span="1366-1366", cluster="lambda expression"];
d943 [label="Exit lambda expression", span="1534-1538", cluster="lambda expression"];
d964 [label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="1580-1582", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d1120 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1843-1843", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()"];
d214 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="370-370", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d993 [label="reader.Read()", span="1641-1641", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d994 [label="reader.Read()", span="1642-1642", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d995 [label="reader.Read()", span="1643-1643", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d996 [label="reader.Read()", span="1644-1644", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d997 [label="reader.Read()", span="1645-1645", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d1012 [label="reader.Read()", span="1668-1668", cluster="lambda expression"];
d1013 [label="reader.Read()", span="1669-1669", cluster="lambda expression"];
d1014 [label="reader.Read()", span="1670-1670", cluster="lambda expression"];
d1015 [label="reader.Read()", span="1671-1671", cluster="lambda expression"];
d1016 [label="reader.Read()", span="1672-1672", cluster="lambda expression"];
d258 [label="Exit lambda expression", span="434-438", cluster="lambda expression"];
d256 [label="string json = @''[''''prop'''']''", span="436-436", cluster="lambda expression"];
d284 [label="Exit lambda expression", span="469-472", cluster="lambda expression"];
d283 [label="JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }'')", span="469-472", cluster="lambda expression"];
d974 [label="Exit lambda expression", span="1589-1600", cluster="lambda expression"];
d971 [label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1591-1595", cluster="lambda expression"];
d982 [label="Exit lambda expression", span="1606-1617", cluster="lambda expression"];
d979 [label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1608-1612", cluster="lambda expression"];
d989 [label="Exit lambda expression", span="1623-1623", cluster="lambda expression"];
d988 [label="JObject.Parse(''{ foo:'')", span="1623-1623", cluster="lambda expression"];
d1018 [label="Exit lambda expression", span="1658-1675", cluster="lambda expression"];
d1010 [label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0''", span="1660-1665", cluster="lambda expression"];
d1082 [label="Exit lambda expression", span="1756-1770", cluster="lambda expression"];
d1080 [label="string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987''", span="1758-1767", cluster="lambda expression"];
d0 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="61-61", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()"];
d313 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d576 [label="Entry System.Collections.IList.RemoveAt(int)", span="0-0", cluster="System.Collections.IList.RemoveAt(int)"];
d626 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(bool)", span="145-145", cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)"];
d633 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull"];
d732 [label="Entry System.Collections.Generic.IList<T>.RemoveAt(int)", span="0-0", cluster="System.Collections.Generic.IList<T>.RemoveAt(int)"];
d872 [label="Assert.IsNull(propertyDescriptors)", span="1395-1395", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()"];
d874 [label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0", cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])"];
d11 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
d1000 [label="StringAssert.AreEqual(@''{\r\n  ''''code'''': 0,\r\n  ''''msg'''': ''''No action taken''''\r\n}'', o.ToString(Formatting.Indented))", span="1649-1652", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d212 [label="Entry Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()"];
d242 [label="JObject o = JObject.FromObject(raw)", span="420-420", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d215 [label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="372-377", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()"];
d250 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="433-433", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()"];
d241 [label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="413-418", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()"];
d261 [label="string json = @''[new Date(1207285200000)]''", span="444-444", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()"];
d266 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)"];
d269 [label="string json = @''{''''foo'''':true}''", span="455-455", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()"];
d334 [label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''original'''':''''http://www.foo.com/'''',\r\n    ''''short'''':''''krehqk'''',\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="575-586", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()"];
d329 [label="Console.WriteLine(name)", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d330 [label="Console.WriteLine(smallest)", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d399 [label="object changing = null", span="703-703", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d932 [label="string json = @''{\r\n  ''''name'''': ''''Address: 435 North Mulford Road Rockford, IL 61107'''',\r\n  ''''Status'''': {\r\n    ''''code'''': 200,\r\n    ''''request'''': ''''geocode''''\r\n  },\r\n  ''''Placemark'''': [ {\r\n    ''''id'''': ''''p1'''',\r\n    ''''address'''': ''''435 N Mulford Rd, Rockford, IL 61107, USA'''',\r\n    ''''AddressDetails'''': {\r\n   ''''Accuracy'''' : 8,\r\n   ''''Country'''' : {\r\n      ''''AdministrativeArea'''' : {\r\n         ''''AdministrativeAreaName'''' : ''''IL'''',\r\n         ''''SubAdministrativeArea'''' : {\r\n            ''''Locality'''' : {\r\n               ''''LocalityName'''' : ''''Rockford'''',\r\n               ''''PostalCode'''' : {\r\n                  ''''PostalCodeNumber'''' : ''''61107''''\r\n               },\r\n               ''''Thoroughfare'''' : {\r\n                  ''''ThoroughfareName'''' : ''''435 N Mulford Rd''''\r\n               }\r\n            },\r\n            ''''SubAdministrativeAreaName'''' : ''''Winnebago''''\r\n         }\r\n      },\r\n      ''''CountryName'''' : ''''USA'''',\r\n      ''''CountryNameCode'''' : ''''US''''\r\n   }\r\n},\r\n    ''''ExtendedData'''': {\r\n      ''''LatLonBox'''': {\r\n        ''''north'''': 42.2753076,\r\n        ''''south'''': 42.2690124,\r\n        ''''east'''': -88.9964645,\r\n        ''''west'''': -89.0027597\r\n      }\r\n    },\r\n    ''''Point'''': {\r\n      ''''coordinates'''': [ -88.9995886, 42.2721596, 0 ]\r\n    }\r\n  } ]\r\n}''", span="1480-1523", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()"];
d951 [label="string json = @''{\r\n        ''''Name'''': ''''Name1'''',\r\n        ''''Name'''': ''''Name2''''\r\n      }''", span="1555-1558", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()"];
d956 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1568-1568", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d257 [label="JObject.Parse(json)", span="437-437", cluster="lambda expression"];
d325 [label="JObject o = JObject.Parse(json)", span="558-558", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d972 [label="JObject o = JObject.Parse(json)", span="1597-1597", cluster="lambda expression"];
d980 [label="JObject o = JObject.Parse(json)", span="1614-1614", cluster="lambda expression"];
d1081 [label="JObject o = JObject.Parse(json)", span="1769-1769", cluster="lambda expression"];
d1180 [label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="36-36", cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()"];
d1181 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="359-359", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()"];
d1182 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d1183 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", span="1907-1907", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()"];
d1162 [label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()"];
d1163 [label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", span="1679-1679", cluster="Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)"];
d1160 [label="token.WriteTo(writer)", span="1922-1922", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)"];
d322 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()"];
d400 [label="object changed = null", span="704-704", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()"];
d857 [label="Entry lambda expression", span="1366-1366", cluster="lambda expression"];
d859 [label="Exit lambda expression", span="1366-1366", cluster="lambda expression"];
d965 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1568-1568", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()"];
d992 [label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1640-1640", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d998 [label="JObject o = (JObject)JToken.ReadFrom(reader)", span="1647-1647", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d1011 [label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1667-1667", cluster="lambda expression"];
d1017 [label="JToken.ReadFrom(reader)", span="1674-1674", cluster="lambda expression"];
d973 [label="string name = (string)o[''responseData'']", span="1599-1599", cluster="lambda expression"];
d981 [label="string name = (string)o.Property(''responseData'')", span="1616-1616", cluster="lambda expression"];
d999 [label="Assert.IsNotNull(o)", span="1648-1648", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d1001 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1627-1627", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d1005 [label="Entry Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="415-415", cluster="Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])"];
d326 [label="string name = (string)o[''Name'']", span="560-560", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d328 [label="string smallest = (string)sizes[0]", span="565-565", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d331 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d324 [label="string json = @''{\r\n        ''''Name'''': ''''Apple'''',\r\n        ''''Expiry'''': new Date(1230422400000),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': [\r\n          ''''Small'''',\r\n          ''''Medium'''',\r\n          ''''Large''''\r\n        ]\r\n      }''", span="547-556", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d327 [label="JArray sizes = (JArray)o[''Sizes'']", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
d1166 [label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="396-396", cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])"];
d991 [label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="1629-1638", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d1002 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="72-72", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)"];
d1003 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)"];
d1004 [label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1843-1843", cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)"];
d983 [label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="239-239", cluster="Newtonsoft.Json.Linq.JObject.Property(string)"];
d990 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1627-1627", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()"];
d323 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()"];
m0_14 [label="Entry double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", span="0-0", cluster="double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", file="ConvertUtilsTests.cs"];
m0_12 [label="Entry string.ToCharArray()", span="0-0", cluster="string.ToCharArray()", file="ConvertUtilsTests.cs"];
m0_91 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)", span="840-840", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)", file="ConvertUtilsTests.cs"];
m0_178 [label="Entry int.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)", span="0-0", cluster="int.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)", file="ConvertUtilsTests.cs"];
m0_9 [label="Assert.AreEqual(expectedValue.Value, d)", span="61-61", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", color=red, community=0];
m0_13 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.DoubleTryParse(char[], int, int, out double)", span="953-953", cluster="Newtonsoft.Json.Utilities.ConvertUtils.DoubleTryParse(char[], int, int, out double)", file="ConvertUtilsTests.cs"];
m0_133 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="ConvertUtilsTests.cs"];
m0_8 [label="expectedValue != null", span="59-59", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs"];
m0_134 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", span="216-216", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_135 [label="HexParseSame(''0000'')", span="218-218", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_136 [label="HexParseSame(''1234'')", span="219-219", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_137 [label="HexParseSame(''4321'')", span="220-220", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_138 [label="HexParseSame(''abcd'')", span="221-221", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_139 [label="HexParseSame(''dcba'')", span="222-222", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_140 [label="HexParseSame(''ffff'')", span="223-223", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_141 [label="HexParseSame(''ABCD'')", span="224-224", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_142 [label="HexParseSame(''DCBA'')", span="225-225", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_143 [label="HexParseSame(''FFFF'')", span="226-226", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_144 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", span="216-216", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs"];
m0_132 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", span="746-746", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", file="ConvertUtilsTests.cs"];
m0_10 [label="Assert.AreEqual(expectedValue, d2, ''DoubleTryParse result is not equal to double.Parse'')", span="63-63", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", color=red, community=0];
m0_59 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", span="122-122", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_60 [label="long l", span="124-124", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_61 [label="char[] c = ''43443333222211111117''.ToCharArray()", span="125-125", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_62 [label="ParseResult result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="126-126", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_63 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="127-127", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_64 [label="c = ''9223372036854775807''.ToCharArray()", span="129-129", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_65 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="130-130", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_66 [label="Assert.AreEqual(ParseResult.Success, result)", span="131-131", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_67 [label="Assert.AreEqual(9223372036854775807L, l)", span="132-132", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_68 [label="c = ''9223372036854775808''.ToCharArray()", span="134-134", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_69 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="135-135", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_70 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="136-136", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_71 [label="int i = 3", span="138-138", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_72 [label="i < 10", span="138-138", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_73 [label="c = (''9'' + i + ''23372036854775807'').ToCharArray()", span="140-140", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_76 [label="i++", span="138-138", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_77 [label="c = ''-9223372036854775808''.ToCharArray()", span="145-145", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_74 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="141-141", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_75 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="142-142", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_78 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="146-146", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_79 [label="Assert.AreEqual(ParseResult.Success, result)", span="147-147", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_80 [label="Assert.AreEqual(-9223372036854775808L, l)", span="148-148", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_81 [label="c = ''-9223372036854775809''.ToCharArray()", span="150-150", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_82 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="151-151", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_83 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="152-152", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_84 [label="int i = 3", span="154-154", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_85 [label="i < 10", span="154-154", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_86 [label="c = (''-9'' + i + ''23372036854775808'').ToCharArray()", span="156-156", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_89 [label="i++", span="154-154", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_87 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="157-157", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_88 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="158-158", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_90 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", span="122-122", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_0 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", span="45-45", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs"];
m0_1 [label="double d", span="47-47", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_2 [label="char[] c = s.ToCharArray()", span="48-48", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_3 [label="ParseResult result = ConvertUtils.DoubleTryParse(c, 0, c.Length, out d)", span="49-49", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs"];
m0_4 [label="double d2", span="51-51", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_5 [label="bool result2 = double.TryParse(s, NumberStyles.Float, CultureInfo.InvariantCulture, out d2)\r\n                && !s.StartsWith(''.'')\r\n                && s.IndexOf(''.e'', StringComparison.OrdinalIgnoreCase) == -1", span="52-54", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs"];
m0_16 [label="Entry string.IndexOf(string, System.StringComparison)", span="0-0", cluster="string.IndexOf(string, System.StringComparison)", file="ConvertUtilsTests.cs"];
m0_17 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ConvertUtilsTests.cs"];
m0_92 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", span="163-163", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_93 [label="int i", span="165-165", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_94 [label="char[] c = ''43443333227''.ToCharArray()", span="166-166", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_95 [label="ParseResult result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="167-167", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_96 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="168-168", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_97 [label="c = ''2147483647''.ToCharArray()", span="170-170", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_98 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="171-171", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_99 [label="Assert.AreEqual(ParseResult.Success, result)", span="172-172", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_100 [label="Assert.AreEqual(2147483647, i)", span="173-173", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_101 [label="c = ''2147483648''.ToCharArray()", span="175-175", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_102 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="176-176", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_103 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="177-177", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_104 [label="c = ''-2147483648''.ToCharArray()", span="179-179", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_105 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="180-180", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_106 [label="Assert.AreEqual(ParseResult.Success, result)", span="181-181", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_107 [label="Assert.AreEqual(-2147483648, i)", span="182-182", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_108 [label="c = ''-2147483649''.ToCharArray()", span="184-184", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_109 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="185-185", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_110 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="186-186", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_111 [label="int j = 2", span="188-188", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_112 [label="j < 10", span="188-188", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_115 [label="string t = j.ToString(CultureInfo.InvariantCulture) + k.ToString(CultureInfo.InvariantCulture) + ''47483647''", span="192-192", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_120 [label="j++", span="188-188", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_113 [label="int k = 2", span="190-190", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_121 [label="int j = 2", span="201-201", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_114 [label="k < 10", span="190-190", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_119 [label="k++", span="190-190", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_116 [label="c = t.ToCharArray()", span="194-194", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_117 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="195-195", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_118 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="197-197", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_122 [label="j < 10", span="201-201", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_125 [label="string t = ''-'' + j.ToString(CultureInfo.InvariantCulture) + k.ToString(CultureInfo.InvariantCulture) + ''47483648''", span="205-205", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_130 [label="j++", span="201-201", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_123 [label="int k = 2", span="203-203", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_124 [label="k < 10", span="203-203", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_129 [label="k++", span="203-203", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_126 [label="c = t.ToCharArray()", span="207-207", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_127 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="208-208", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_128 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="210-210", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_131 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", span="163-163", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_146 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", span="230-230", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs"];
m0_147 [label="int value = ConvertUtils.HexTextToInt(''!0000''.ToCharArray(), 1, 5)", span="232-232", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs"];
m0_148 [label="Assert.AreEqual(0, value)", span="233-233", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs"];
m0_149 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", span="230-230", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs"];
m0_151 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", span="237-237", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_152 [label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''-100''.ToCharArray(), 0, 4); }, ''Invalid hex character: -'')", span="239-239", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_153 [label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''000g''.ToCharArray(), 0, 4); }, ''Invalid hex character: g'')", span="240-240", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_154 [label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt('' ssd''.ToCharArray(), 0, 4); }, ''Invalid hex character:  '')", span="241-241", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_155 [label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''000:''.ToCharArray(), 0, 4); }, ''Invalid hex character: :'')", span="242-242", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_156 [label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''000G''.ToCharArray(), 0, 4); }, ''Invalid hex character: G'')", span="243-243", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_157 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", span="237-237", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs"];
m0_150 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.HexTextToInt(char[], int, int)", span="1134-1134", cluster="Newtonsoft.Json.Utilities.ConvertUtils.HexTextToInt(char[], int, int)", file="ConvertUtilsTests.cs"];
m0_145 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", span="246-246", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs"];
m0_174 [label="int v1 = int.Parse(text, NumberStyles.HexNumber, CultureInfo.InvariantCulture)", span="248-248", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs"];
m0_175 [label="int v2 = ConvertUtils.HexTextToInt(text.ToCharArray(), 0, 4)", span="250-250", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs"];
m0_176 [label="Assert.AreEqual(v1, v2, ''Invalid result when parsing hex text: '' + text)", span="252-252", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs"];
m0_177 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", span="246-246", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs"];
m0_6 [label="Assert.AreEqual(expectedResult, result)", span="56-56", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs"];
m0_7 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Post.Post()", span="38-38", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Post.Post()", file="ConvertUtilsTests.cs"];
m0_11 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", span="45-45", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs"];
m0_18 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", span="68-68", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_19 [label="AssertDoubleTryParse(''-123'', ParseResult.Success, -123)", span="70-70", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_20 [label="AssertDoubleTryParse(''0'', ParseResult.Success, 0)", span="71-71", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_21 [label="AssertDoubleTryParse(''123'', ParseResult.Success, 123)", span="72-72", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_22 [label="AssertDoubleTryParse(''567.89'', ParseResult.Success, 567.89)", span="73-73", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_23 [label="AssertDoubleTryParse(''-567.89'', ParseResult.Success, -567.89)", span="74-74", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_24 [label="AssertDoubleTryParse(''1E23'', ParseResult.Success, 1E23)", span="75-75", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_25 [label="AssertDoubleTryParse(''1.1E23'', ParseResult.Success, 1.1E23)", span="76-76", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_26 [label="AssertDoubleTryParse(''1E+23'', ParseResult.Success, 1E+23)", span="77-77", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_27 [label="AssertDoubleTryParse(''1E-1'', ParseResult.Success, 1E-1)", span="78-78", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_28 [label="AssertDoubleTryParse(''1E-2'', ParseResult.Success, 1E-2)", span="79-79", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_29 [label="AssertDoubleTryParse(''1E-3'', ParseResult.Success, 1E-3)", span="80-80", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_30 [label="AssertDoubleTryParse(''1E-4'', ParseResult.Success, 1E-4)", span="81-81", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_31 [label="AssertDoubleTryParse(''1E-5'', ParseResult.Success, 1E-5)", span="82-82", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_32 [label="AssertDoubleTryParse(''1E-10'', ParseResult.Success, 1E-10)", span="83-83", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_33 [label="AssertDoubleTryParse(''1E-20'', ParseResult.Success, 1E-20)", span="84-84", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_34 [label="AssertDoubleTryParse(''1'', ParseResult.Success, null)", span="85-85", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", color=red, community=0, file="ConvertUtilsTests.cs"];
m0_35 [label="AssertDoubleTryParse(''1E-100'', ParseResult.Success, 1E-100)", span="91-91", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_36 [label="AssertDoubleTryParse(''1E-300'', ParseResult.Success, 1E-300)", span="92-92", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_37 [label="AssertDoubleTryParse(''1E+309'', ParseResult.Overflow, null)", span="94-94", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_38 [label="AssertDoubleTryParse(''-1E+5000'', ParseResult.Overflow, null)", span="95-95", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_39 [label="AssertDoubleTryParse(''.1E23'', ParseResult.Invalid, null)", span="97-97", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_40 [label="AssertDoubleTryParse(''1..1E23'', ParseResult.Invalid, null)", span="98-98", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_41 [label="AssertDoubleTryParse(''1.E23'', ParseResult.Invalid, null)", span="99-99", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_42 [label="AssertDoubleTryParse(''1E2.3'', ParseResult.Invalid, null)", span="100-100", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_43 [label="AssertDoubleTryParse(''1EE-10'', ParseResult.Invalid, null)", span="101-101", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_44 [label="AssertDoubleTryParse(''1E-1-0'', ParseResult.Invalid, null)", span="102-102", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_45 [label="AssertDoubleTryParse(''1-E10'', ParseResult.Invalid, null)", span="103-103", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_46 [label="AssertDoubleTryParse('''', ParseResult.Invalid, null)", span="104-104", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_47 [label="AssertDoubleTryParse(''5.1231231E'', ParseResult.Invalid, null)", span="105-105", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_48 [label="AssertDoubleTryParse(''1E+23i'', ParseResult.Invalid, null)", span="106-106", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_49 [label="AssertDoubleTryParse(''1EE+23'', ParseResult.Invalid, null)", span="107-107", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_50 [label="AssertDoubleTryParse(''1E++23'', ParseResult.Invalid, null)", span="108-108", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_51 [label="AssertDoubleTryParse(''E23'', ParseResult.Invalid, null)", span="109-109", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_52 [label="AssertDoubleTryParse(''4.94065645841247E-324'', ParseResult.Success, 4.94065645841247E-324)", span="111-111", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_53 [label="AssertDoubleTryParse(''4.94065645841247E-342'', ParseResult.Success, 4.94065645841247E-342)", span="112-112", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_54 [label="AssertDoubleTryParse(''1.7976931348623157E+308'', ParseResult.Success, double.MaxValue)", span="114-114", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_55 [label="AssertDoubleTryParse(''-1.7976931348623157E+308'', ParseResult.Success, double.MinValue)", span="115-115", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_56 [label="AssertDoubleTryParse(''1.7976931348623159E+308'', ParseResult.Overflow, null)", span="117-117", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_57 [label="AssertDoubleTryParse(''-1.7976931348623159E+308'', ParseResult.Overflow, null)", span="118-118", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_58 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", span="68-68", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs"];
m0_15 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)", file="ConvertUtilsTests.cs"];
m0_171 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_159 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_162 [label="Entry lambda expression", span="240-240", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_165 [label="Entry lambda expression", span="241-241", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_168 [label="Entry lambda expression", span="242-242", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_160 [label="ConvertUtils.HexTextToInt(''-100''.ToCharArray(), 0, 4)", span="239-239", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_161 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_163 [label="ConvertUtils.HexTextToInt(''000g''.ToCharArray(), 0, 4)", span="240-240", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_164 [label="Exit lambda expression", span="240-240", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_166 [label="ConvertUtils.HexTextToInt('' ssd''.ToCharArray(), 0, 4)", span="241-241", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_167 [label="Exit lambda expression", span="241-241", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_169 [label="ConvertUtils.HexTextToInt(''000:''.ToCharArray(), 0, 4)", span="242-242", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_170 [label="Exit lambda expression", span="242-242", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_172 [label="ConvertUtils.HexTextToInt(''000G''.ToCharArray(), 0, 4)", span="243-243", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_173 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="ConvertUtilsTests.cs"];
m0_158 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="369-369", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ConvertUtilsTests.cs"];
m0_179 [label="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests", span="", file="ConvertUtilsTests.cs"];
m1_893 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="1449-1449", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_894 [label="JsonReader reader = new JsonTextReader(new StringReader(@''true''))", span="1451-1451", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_895 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsBytes(); }, ''Unexpected character encountered while parsing value: t. Path '', line 1, position 1.'')", span="1453-1453", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_896 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="1449-1449", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_1949 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", span="2991-2991", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1950 [label="JsonTextReader reader = new JsonTextReader(new StringReader(''{\''Test1\'':false}''))", span="2993-2993", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1951 [label="Assert.IsTrue(reader.Read())", span="2995-2995", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1952 [label="Assert.IsTrue(reader.Read())", span="2996-2996", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1955 [label="Assert.IsTrue(reader.Read())", span="3001-3001", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1956 [label="Assert.IsFalse(reader.Read())", span="3002-3002", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1954 [label="Assert.AreEqual(''false'', s)", span="2999-2999", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1953 [label="string s = reader.ReadAsString()", span="2998-2998", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1957 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", span="2991-2991", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs"];
m1_1229 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="JsonTextReaderTest.cs"];
m1_269 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", span="467-467", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_271 [label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="473-473", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_272 [label="Assert.IsTrue(jsonTextReader.Read())", span="475-475", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_274 [label="Assert.IsTrue(jsonTextReader.Read())", span="478-478", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_276 [label="Assert.IsTrue(jsonTextReader.Read())", span="481-481", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_279 [label="Assert.IsTrue(jsonTextReader.Read())", span="485-485", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_281 [label="Assert.IsFalse(jsonTextReader.Read())", span="488-488", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_273 [label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="476-476", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_275 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="479-479", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_277 [label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="482-482", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_278 [label="Assert.AreEqual(@''/Date(9467082_PIE_340000-0631)/'', jsonTextReader.Value)", span="483-483", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_280 [label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="486-486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_270 [label="string json = @''{\r\n    ChildId: '\/Date(9467082_PIE_340000-0631)\/'\r\n}''", span="469-471", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_282 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", span="467-467", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs"];
m1_1244 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1923-1923", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1247 [label="JsonReader jsonReader = new JsonTextReader(sr)", span="1933-1933", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1246 [label="StringReader sr = new StringReader(input)", span="1931-1931", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1249 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="1936-1936", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1251 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1939-1939", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1252 [label="Assert.AreEqual(jsonReader.Value, double.NaN)", span="1940-1940", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1254 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1943-1943", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1255 [label="Assert.AreEqual(jsonReader.Value, double.PositiveInfinity)", span="1944-1944", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1257 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1947-1947", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1258 [label="Assert.AreEqual(jsonReader.Value, double.NegativeInfinity)", span="1948-1948", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1260 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="1951-1951", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1248 [label="jsonReader.Read()", span="1935-1935", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1250 [label="jsonReader.Read()", span="1938-1938", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1253 [label="jsonReader.Read()", span="1942-1942", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1256 [label="jsonReader.Read()", span="1946-1946", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1259 [label="jsonReader.Read()", span="1950-1950", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1245 [label="string input = @''[\r\n  NaN,\r\n  Infinity,\r\n  -Infinity\r\n]''", span="1925-1929", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_1261 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1923-1923", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs"];
m1_728 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", span="1186-1186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs"];
m1_729 [label="JsonTextReader reader = new JsonTextReader(new StringReader(''n''))", span="1188-1188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs"];
m1_730 [label="ExceptionAssert.Throws<JsonReaderException>(() => reader.Read(), ''Unexpected end when reading JSON. Path '', line 1, position 1.'')", span="1189-1189", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs"];
m1_731 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", span="1186-1186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs"];
m1_1624 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="2482-2482", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1626 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2486-2486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1627 [label="Assert.IsTrue(reader.Read())", span="2488-2488", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1629 [label="Assert.IsTrue(reader.Read())", span="2491-2491", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1635 [label="Assert.IsTrue(reader.Read())", span="2499-2499", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1628 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2489-2489", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1630 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2492-2492", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1632 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="2495-2495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1633 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2496-2496", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1634 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2011, 8, 1, 21, 25, 0, DateTimeKind.Utc), TimeSpan.Zero), reader.Value)", span="2497-2497", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1636 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2500-2500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1625 [label="string json = @''{''''Offset'''':''''2011-08-01T21:25Z''''}''", span="2484-2484", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1631 [label="reader.ReadAsDateTimeOffset()", span="2494-2494", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_1637 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="2482-2482", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs"];
m1_13 [label="Entry System.DateTime.ToUniversalTime()", span="0-0", cluster="System.DateTime.ToUniversalTime()", file="JsonTextReaderTest.cs"];
m1_1622 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="JsonTextReaderTest.cs"];
m1_925 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="JsonTextReaderTest.cs"];
m1_934 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="1495-1495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_941 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="1534-1534", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_938 [label="StringReader sr = new StringReader(newLinesText)", span="1528-1528", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_942 [label="Assert.IsTrue(reader.Read())", span="1535-1535", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_944 [label="Assert.IsTrue(reader.Read())", span="1538-1538", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_947 [label="Assert.IsTrue(reader.Read())", span="1542-1542", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_949 [label="Assert.IsTrue(reader.Read())", span="1545-1545", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_953 [label="Assert.IsTrue(reader.Read())", span="1550-1550", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_956 [label="Assert.IsTrue(reader.Read())", span="1554-1554", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_959 [label="Assert.IsTrue(reader.Read())", span="1558-1558", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_962 [label="Assert.IsTrue(reader.Read())", span="1562-1562", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_964 [label="Assert.IsTrue(reader.Read())", span="1565-1565", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_966 [label="Assert.IsTrue(reader.Read())", span="1568-1568", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_968 [label="Assert.IsTrue(reader.Read())", span="1571-1571", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_971 [label="Assert.IsTrue(reader.Read())", span="1575-1575", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_973 [label="Assert.IsTrue(reader.Read())", span="1578-1578", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_975 [label="Assert.IsTrue(reader.Read())", span="1581-1581", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_946 [label="Assert.AreEqual(newLinesText + ''name1'' + newLinesText, reader.Value)", span="1540-1540", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_961 [label="Assert.AreEqual(newLinesText + ''blah comment'' + newLinesText, reader.Value)", span="1560-1560", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_943 [label="Assert.AreEqual(7, reader.LineNumber)", span="1536-1536", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_945 [label="Assert.AreEqual(31, reader.LineNumber)", span="1539-1539", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_948 [label="Assert.AreEqual(37, reader.LineNumber)", span="1543-1543", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_950 [label="Assert.AreEqual(55, reader.LineNumber)", span="1546-1546", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_951 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1547-1547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_952 [label="Assert.AreEqual(''Date'', reader.Value)", span="1548-1548", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_954 [label="Assert.AreEqual(61, reader.LineNumber)", span="1551-1551", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_955 [label="Assert.AreEqual(1L, reader.Value)", span="1552-1552", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_957 [label="Assert.AreEqual(73, reader.LineNumber)", span="1555-1555", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_958 [label="Assert.AreEqual(null, reader.Value)", span="1556-1556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_960 [label="Assert.AreEqual(91, reader.LineNumber)", span="1559-1559", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_963 [label="Assert.AreEqual(97, reader.LineNumber)", span="1563-1563", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_965 [label="Assert.AreEqual(109, reader.LineNumber)", span="1566-1566", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_967 [label="Assert.AreEqual(115, reader.LineNumber)", span="1569-1569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_969 [label="Assert.AreEqual(133, reader.LineNumber)", span="1572-1572", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_970 [label="Assert.AreEqual(''name2'', reader.Value)", span="1573-1573", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_972 [label="Assert.AreEqual(139, reader.LineNumber)", span="1576-1576", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_974 [label="Assert.AreEqual(145, reader.LineNumber)", span="1579-1579", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_976 [label="Assert.AreEqual(151, reader.LineNumber)", span="1582-1582", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_936 [label="string json =\r\n                newLinesText\r\n                + ''{'' + newLinesText\r\n                + ''''' + newLinesText\r\n                + ''name1'' + newLinesText\r\n                + ''''' + newLinesText\r\n                + '':'' + newLinesText\r\n                + ''['' + newLinesText\r\n                + ''new'' + newLinesText\r\n                + ''Date'' + newLinesText\r\n                + ''('' + newLinesText\r\n                + ''1'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''null'' + newLinesText\r\n                + ''/*'' + newLinesText\r\n                + ''blah comment'' + newLinesText\r\n                + ''*/'' + newLinesText\r\n                + '')'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''1.1111'' + newLinesText\r\n                + '']'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''name2'' + newLinesText\r\n                + '':'' + newLinesText\r\n                + ''{'' + newLinesText\r\n                + ''}'' + newLinesText\r\n                + ''}'' + newLinesText", span="1499-1525", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_939 [label="sr.ReadLine() != null", span="1529-1529", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_935 [label="string newLinesText = StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed + StringUtils.LineFeed + StringUtils.CarriageReturnLineFeed + '' '' + StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed", span="1497-1497", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_937 [label="int count = 0", span="1527-1527", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_940 [label="count++", span="1531-1531", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_977 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="1495-1495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs"];
m1_2870 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", span="4352-4352", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs"];
m1_2874 [label="Assert.AreEqual(1, UnmanagedResourceFakingJsonReader.DisposalCalls)", span="4357-4357", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs"];
m1_2873 [label="GC.WaitForPendingFinalizers()", span="4356-4356", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs"];
m1_2872 [label="GC.Collect()", span="4355-4355", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs"];
m1_2871 [label="UnmanagedResourceFakingJsonReader.CreateAndDispose()", span="4354-4354", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs"];
m1_2875 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", span="4352-4352", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs"];
m1_2503 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", span="3843-3843", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2505 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3847-3847", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2506 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsString(); }, ''Unexpected end when reading JSON. Path '', line 1, position 3.'')", span="3849-3849", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2504 [label="string json = @''tru''", span="3845-3845", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2507 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", span="3843-3843", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_1982 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="3040-3040", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_1984 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3043-3043", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_1983 [label="string json = ''new Date,()''", span="3042-3042", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_1985 [label="ExceptionAssert.Throws<JsonReaderException>(() => { Assert.IsTrue(reader.Read()); }, ''Unexpected character while parsing constructor: ,. Path '', line 1, position 8.'')", span="3045-3045", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_1986 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="3040-3040", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs"];
m1_915 [label="Entry System.Convert.ToBase64String(byte[])", span="0-0", cluster="System.Convert.ToBase64String(byte[])", file="JsonTextReaderTest.cs"];
m1_192 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", span="348-348", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_194 [label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="355-355", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_195 [label="Assert.IsTrue(jsonTextReader.Read())", span="357-357", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_197 [label="Assert.IsTrue(jsonTextReader.Read())", span="360-360", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_199 [label="Assert.IsTrue(jsonTextReader.Read())", span="363-363", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_201 [label="Assert.IsTrue(jsonTextReader.Read())", span="366-366", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_203 [label="Assert.IsTrue(jsonTextReader.Read())", span="369-369", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_207 [label="Assert.IsTrue(jsonTextReader.Read())", span="374-374", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_209 [label="Assert.IsFalse(jsonTextReader.Read())", span="377-377", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_196 [label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="358-358", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_198 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="361-361", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_200 [label="Assert.AreEqual(JsonToken.Integer, jsonTextReader.TokenType)", span="364-364", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_202 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="367-367", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_204 [label="Assert.AreEqual(JsonToken.Integer, jsonTextReader.TokenType)", span="370-370", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_205 [label="Assert.AreEqual(typeof(BigInteger), jsonTextReader.ValueType)", span="371-371", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_206 [label="Assert.AreEqual(BigInteger.Parse(''333333333333333333333333333333333333333''), jsonTextReader.Value)", span="372-372", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_208 [label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="375-375", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_212 [label="Assert.AreEqual(BigInteger.Parse(''333333333333333333333333333333333333333''), i)", span="381-381", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_193 [label="string json = @''{\r\n    ParentId: 1,\r\n    ChildId: 333333333333333333333333333333333333333,\r\n}''", span="350-353", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_210 [label="JObject o = JObject.Parse(json)", span="379-379", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_211 [label="var i = (BigInteger)((JValue)o[''ChildId'']).Value", span="380-380", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_213 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", span="348-348", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs"];
m1_1672 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="2555-2555", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1674 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2559-2559", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1675 [label="Assert.IsTrue(reader.Read())", span="2561-2561", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1677 [label="Assert.IsTrue(reader.Read())", span="2564-2564", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1676 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2562-2562", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1678 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2565-2565", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1680 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2568-2568", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1681 [label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="2569-2569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1682 [label="Assert.AreEqual(1m, reader.Value)", span="2570-2570", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1673 [label="string json = @''{''''Name'''':1}''", span="2557-2557", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1679 [label="reader.ReadAsDecimal()", span="2567-2567", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1683 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="2555-2555", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs"];
m1_1231 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="422-422", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonTextReaderTest.cs"];
m1_427 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="698-698", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs"];
m1_429 [label="JsonReader jsonReader = new JsonTextReader(new StringReader(input))", span="721-721", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs"];
m1_428 [label="string input = @''{\r\n''''matches'''' : [\r\n{''''t'''':''''C'''', ''''n'''':''''Citigroup Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''662713''''}\r\n,{''''t'''':''''CHL'''', ''''n'''':''''China Mobile Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''660998''''}\r\n,{''''t'''':''''PTR'''', ''''n'''':''''PetroChina Company Limited (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''664536''''}\r\n,{''''t'''':''''RIO'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''671472''''}\r\n,{''''t'''':''''RIOPR'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''3512643''''}\r\n,{''''t'''':''''CSCO'''', ''''n'''':''''Cisco Systems, Inc.'''', ''''e'''':''''NASDAQ'''', ''''id'''':''''99624''''}\r\n,{''''t'''':''''CVX'''', ''''n'''':''''Chevron Corporation'''', ''''e'''':''''NYSE'''', ''''id'''':''''667226''''}\r\n,{''''t'''':''''TM'''', ''''n'''':''''Toyota Motor Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''655880''''}\r\n,{''''t'''':''''JPM'''', ''''n'''':''''JPMorgan Chase \\x26 Co.'''', ''''e'''':''''NYSE'''', ''''id'''':''''665639''''}\r\n,{''''t'''':''''COP'''', ''''n'''':''''ConocoPhillips'''', ''''e'''':''''NYSE'''', ''''id'''':''''1691168''''}\r\n,{''''t'''':''''LFC'''', ''''n'''':''''China Life Insurance Company Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''688679''''}\r\n,{''''t'''':''''NOK'''', ''''n'''':''''Nokia Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''657729''''}\r\n,{''''t'''':''''KO'''', ''''n'''':''''The Coca-Cola Company'''', ''''e'''':''''NYSE'''', ''''id'''':''''6550''''}\r\n,{''''t'''':''''VZ'''', ''''n'''':''''Verizon Communications Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''664887''''}\r\n,{''''t'''':''''AMX'''', ''''n'''':''''America Movil S.A.B de C.V. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''665834''''}],\r\n''''all'''' : false\r\n}\r\n''", span="700-719", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs"];
m1_430 [label="jsonReader.Read()", span="723-723", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs"];
m1_431 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="698-698", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs"];
m1_451 [label="Entry System.Text.UTF8Encoding.UTF8Encoding(bool)", span="0-0", cluster="System.Text.UTF8Encoding.UTF8Encoding(bool)", file="JsonTextReaderTest.cs"];
m1_2441 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", span="3762-3762", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs"];
m1_2443 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3766-3766", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs"];
m1_2444 [label="Assert.AreEqual(true, reader.ReadAsBoolean())", span="3768-3768", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs"];
m1_2445 [label="Assert.AreEqual(null, reader.ReadAsBoolean())", span="3769-3769", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs"];
m1_2442 [label="string json = '\0' + @''true'' + '\0' + '\0'", span="3764-3764", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs"];
m1_2446 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", span="3762-3762", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs"];
m1_1655 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JsonTextReaderTest.cs"];
m1_1623 [label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0", cluster="System.TimeSpan.Add(System.TimeSpan)", file="JsonTextReaderTest.cs"];
m1_14 [label="Entry Newtonsoft.Json.JavaScriptConvert.ConvertDateTimeToJavaScriptTicks(System.DateTimeOffset)", span="138-138", cluster="Newtonsoft.Json.JavaScriptConvert.ConvertDateTimeToJavaScriptTicks(System.DateTimeOffset)", file="JsonTextReaderTest.cs"];
m1_2581 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="3952-3952", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs"];
m1_2583 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))\r\n            {\r\n                MaxDepth = 1\r\n            }", span="3956-3959", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs"];
m1_2584 [label="Assert.IsTrue(reader.Read())", span="3961-3961", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs"];
m1_2582 [label="string json = ''[[]]''", span="3954-3954", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs"];
m1_2585 [label="ExceptionAssert.Throws<JsonReaderException>(() => { Assert.IsTrue(reader.Read()); }, ''The reader's MaxDepth of 1 has been exceeded. Path '[0]', line 1, position 2.'')", span="3963-3963", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs"];
m1_2586 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="3952-3952", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs"];
m1_1237 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(decimal)", span="1028-1028", cluster="Newtonsoft.Json.JsonWriter.WriteValue(decimal)", file="JsonTextReaderTest.cs"];
m1_215 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonTextReaderTest.cs"];
m1_1290 [label="Entry System.Convert.ToInt32(char)", span="0-0", cluster="System.Convert.ToInt32(char)", file="JsonTextReaderTest.cs"];
m1_1516 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="2321-2321", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs"];
m1_1517 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1.0]''))", span="2323-2323", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs"];
m1_1518 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsBytes(); }, ''Unexpected token when reading bytes: Float. Path '[0]', line 1, position 4.'')", span="2325-2325", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs"];
m1_1519 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="2321-2321", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs"];
m1_1376 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)", file="JsonTextReaderTest.cs"];
m1_2721 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="4145-4145", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2723 [label="JsonTextReader jsonTextReader = new JsonTextReader(toggleReaderError)", span="4148-4148", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2722 [label="ToggleReaderError toggleReaderError = new ToggleReaderError(new StringReader(''{'first':1,'second':2,'third':3}''))", span="4147-4147", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2724 [label="Assert.IsTrue(jsonTextReader.Read())", span="4150-4150", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2729 [label="Assert.IsTrue(jsonTextReader.Read())", span="4159-4159", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2734 [label="Assert.IsTrue(jsonTextReader.Read())", span="4168-4168", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2730 [label="Assert.AreEqual(''first'', jsonTextReader.Value)", span="4160-4160", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2735 [label="Assert.AreEqual(1L, jsonTextReader.Value)", span="4169-4169", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2726 [label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4154-4154", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2727 [label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4155-4155", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2732 [label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4164-4164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2737 [label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4173-4173", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2738 [label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4174-4174", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2739 [label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4175-4175", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2725 [label="toggleReaderError.Error = true", span="4152-4152", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2728 [label="toggleReaderError.Error = false", span="4157-4157", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2731 [label="toggleReaderError.Error = true", span="4162-4162", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2733 [label="toggleReaderError.Error = false", span="4166-4166", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2736 [label="toggleReaderError.Error = true", span="4171-4171", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2740 [label="toggleReaderError.Error = false", span="4177-4177", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_2741 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="4145-4145", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs"];
m1_387 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="JsonTextReaderTest.cs"];
m1_34 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="108-108", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaNAndInifinity_ReadAsDouble()", file="JsonTextReaderTest.cs"];
m1_1082 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="JsonTextReaderTest.cs"];
m1_2433 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", span="3752-3752", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2435 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3756-3756", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2436 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsBoolean(); }, ''Unexpected end when reading JSON. Path '', line 1, position 3.'')", span="3758-3758", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2434 [label="string json = @''tru''", span="3754-3754", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2437 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", span="3752-3752", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs"];
m1_2579 [label="Entry double.ToString(System.IFormatProvider)", span="0-0", cluster="double.ToString(System.IFormatProvider)", file="JsonTextReaderTest.cs"];
m1_2862 [label="Entry System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, int)", span="0-0", cluster="System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, int)", file="JsonTextReaderTest.cs"];
m1_886 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="1441-1441", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs"];
m1_887 [label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\''))", span="1443-1443", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs"];
m1_888 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.Read(); }, ''Unterminated string. Expected delimiter: '. Path '', line 1, position 3.'')", span="1445-1445", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs"];
m1_889 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="1441-1441", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs"];
m1_1416 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="2181-2181", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1418 [label="JsonTextReader jsonReader = new JsonTextReader(s)", span="2184-2184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1417 [label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="2183-2183", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1419 [label="Assert.IsTrue(jsonReader.Read())", span="2186-2186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1433 [label="Assert.IsTrue(jsonReader.Read())", span="2204-2204", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1435 [label="Assert.IsFalse(jsonReader.Read())", span="2207-2207", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1420 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="2187-2187", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1422 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2190-2190", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1423 [label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="2191-2191", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1424 [label="Assert.AreEqual(250, jsonReader.Value)", span="2192-2192", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1426 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2195-2195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1427 [label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="2196-2196", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1428 [label="Assert.AreEqual(250, jsonReader.Value)", span="2197-2197", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1430 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2200-2200", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1431 [label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="2201-2201", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1432 [label="Assert.AreEqual(250, jsonReader.Value)", span="2202-2202", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1434 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="2205-2205", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1421 [label="jsonReader.ReadAsInt32()", span="2189-2189", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1425 [label="jsonReader.ReadAsInt32()", span="2194-2194", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1429 [label="jsonReader.ReadAsInt32()", span="2199-2199", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1436 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="2181-2181", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs"];
m1_1991 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="3049-3049", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1993 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="3052-3052", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1994 [label="Assert.IsTrue(reader.Read())", span="3054-3054", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1996 [label="Assert.IsTrue(reader.Read())", span="3057-3057", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1998 [label="Assert.IsTrue(reader.Read())", span="3060-3060", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2000 [label="Assert.IsTrue(reader.Read())", span="3063-3063", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2002 [label="Assert.IsTrue(reader.Read())", span="3066-3066", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2004 [label="Assert.IsTrue(reader.Read())", span="3069-3069", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2006 [label="Assert.IsTrue(reader.Read())", span="3072-3072", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2008 [label="Assert.IsTrue(reader.Read())", span="3075-3075", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2010 [label="Assert.IsTrue(reader.Read())", span="3078-3078", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2012 [label="Assert.IsFalse(reader.Read())", span="3081-3081", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1995 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="3055-3055", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1997 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="3058-3058", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1999 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="3061-3061", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2001 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="3064-3064", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2003 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="3067-3067", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2005 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="3070-3070", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2007 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="3073-3073", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2009 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="3076-3076", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2011 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="3079-3079", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_1992 [label="string json = ''\x00a0{\x00a0'h\x00a0i\x00a0'\x00a0:\x00a0[\x00a0true\x00a0,\x00a0new\x00a0Date\x00a0(\x00a0)\x00a0]\x00a0/*\x00a0comment\x00a0*/\x00a0}\x00a0''", span="3051-3051", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2013 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="3049-3049", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs"];
m1_2742 [label="Entry Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="4430-4430", cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonTextReaderTest.cs"];
m1_2915 [label="_inner = inner", span="4432-4432", cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonTextReaderTest.cs"];
m1_2916 [label="Exit Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="4430-4430", cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonTextReaderTest.cs"];
m1_1770 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="JsonTextReaderTest.cs"];
m1_2067 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", span="3164-3164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2068 [label="JsonTextReader reader = new JsonTextReader(new StringReader(''['',,'']''))", span="3166-3166", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2069 [label="reader.Read()", span="3167-3167", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2073 [label="Assert.IsTrue(reader.Read())", span="3176-3176", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2071 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                reader.ReadAsBytes();\r\n            }, ''Unexpected character encountered while parsing value: ,. Path '[1]', line 1, position 5.'')", span="3170-3173", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2070 [label="CollectionAssert.AreEquivalent(new byte[0], reader.ReadAsBytes())", span="3168-3168", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2072 [label="CollectionAssert.AreEquivalent(new byte[0], reader.ReadAsBytes())", span="3175-3175", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_2074 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", span="3164-3164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs"];
m1_62 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsString()", span="439-439", cluster="Newtonsoft.Json.JsonTextReader.ReadAsString()", file="JsonTextReaderTest.cs"];
m1_214 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="JsonTextReaderTest.cs"];
m1_2819 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", span="4289-4289", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2833 [label="var jsonTextReader = new JsonTextReader(sr)", span="4328-4328", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2834 [label="jsonTextReader.Read()", span="4330-4330", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2832 [label="var sr = new StreamReader(stream, new UTF8Encoding(), false)", span="4327-4327", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2838 [label="Console.WriteLine($''{i} - {jsonTextReader.TokenType} - {jsonTextReader.Value}'')", span="4339-4339", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2835 [label="i++", span="4332-4332", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2839 [label="clientReceivedEvent.Set()", span="4345-4345", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2829 [label="var stream = new NetworkStream(socket)", span="4323-4323", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2831 [label="int i = 0", span="4326-4326", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2836 [label="i == 193", span="4334-4334", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2837 [label="string s = string.Empty", span="4336-4336", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2823 [label="var clientReceivedEvent = new ManualResetEvent(false)", span="4295-4295", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2840 [label="Console.WriteLine(''Done'')", span="4347-4347", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2830 [label="var serializer = new JsonSerializer()", span="4324-4324", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2828 [label="socket.Connect(''127.0.0.1'', port)", span="4321-4321", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2826 [label="var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)", span="4319-4319", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2822 [label="var serverStartedEvent = new ManualResetEvent(false)", span="4294-4294", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2824 [label="ThreadPool.QueueUserWorkItem(work =>\r\n            {\r\n                var server = new TcpListener(IPAddress.Parse(''0.0.0.0''), port);\r\n                server.Start();\r\n\r\n                serverStartedEvent.Set();\r\n\r\n                var serverSocket = server.AcceptSocket();\r\n\r\n                var jsonString = ''[\r\n'' + String.Join('','', Enumerable.Repeat(''  \''testdata\''\r\n'', jsonArrayElementsCount).ToArray()) + '']'';\r\n                var bytes = new UTF8Encoding().GetBytes(jsonString);\r\n                serverSocket.Send(bytes);\r\n                Console.WriteLine(''server send: '' + bytes.Length);\r\n\r\n\r\n                clientReceivedEvent.WaitOne();\r\n\r\n            })", span="4297-4314", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2820 [label="int port = 11999", span="4291-4291", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2827 [label="socket.Blocking = false", span="4320-4320", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2825 [label="serverStartedEvent.WaitOne()", span="4316-4316", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2821 [label="int jsonArrayElementsCount = 193", span="4292-4292", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_2841 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", span="4289-4289", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs"];
m1_749 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", span="1207-1207", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_751 [label="JsonTextReader reader = new JsonTextReader(new StringReader(i.ToString(CultureInfo.InvariantCulture)))", span="1211-1211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_752 [label="reader.Read()", span="1212-1212", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_753 [label="Assert.AreEqual(typeof(long), reader.ValueType)", span="1213-1213", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_757 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n                {\r\n                    reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)));\r\n                    reader.ReadAsInt32();\r\n                }, ''JSON integer '' + total + '' is too large or small for an Int32. Path '', line 1, position 10.'')", span="1218-1222", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_750 [label="long i = int.MaxValue", span="1209-1209", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_756 [label="long total = j + i", span="1217-1217", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_754 [label="int j = 1", span="1215-1215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_758 [label="j++", span="1215-1215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_755 [label="j < 1000", span="1215-1215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_759 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", span="1207-1207", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs"];
m1_1481 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", span="2275-2275", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs"];
m1_1482 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''\r\nnew Date()''))", span="2277-2278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs"];
m1_1483 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsDecimal(); }, ''Unexpected character encountered while parsing value: e. Path '', line 2, position 2.'')", span="2280-2280", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs"];
m1_1484 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", span="2275-2275", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs"];
m1_2719 [label="Entry System.DateTime.DateTime(long, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(long, System.DateTimeKind)", file="JsonTextReaderTest.cs"];
m1_2850 [label="Entry System.Threading.EventWaitHandle.Set()", span="0-0", cluster="System.Threading.EventWaitHandle.Set()", file="JsonTextReaderTest.cs"];
m1_433 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="730-730", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_435 [label="JsonReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="734-734", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_436 [label="Assert.IsTrue(reader.Read())", span="736-736", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_437 [label="Assert.IsTrue(reader.Read())", span="737-737", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_438 [label="Assert.IsTrue(reader.Read())", span="738-738", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_441 [label="Assert.IsTrue(reader.Read())", span="742-742", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_443 [label="Assert.IsTrue(reader.Read())", span="745-745", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_445 [label="Assert.IsTrue(reader.Read())", span="748-748", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_447 [label="Assert.IsTrue(reader.Read())", span="751-751", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_439 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="739-739", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_440 [label="Assert.AreEqual(''Date'', reader.Value)", span="740-740", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_442 [label="Assert.AreEqual(0L, reader.Value)", span="743-743", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_444 [label="Assert.AreEqual(''hi'', reader.Value)", span="746-746", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_446 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="749-749", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_448 [label="Assert.AreEqual(''MemberConverter'', reader.Value)", span="752-752", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_434 [label="string json = @''{''''DefaultConverter'''':new Date(0, ''''hi''''),''''MemberConverter'''':''''1970-01-01T00:00:00Z''''}''", span="732-732", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_449 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="730-730", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs"];
m1_926 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="1486-1486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs"];
m1_927 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{aww''))", span="1488-1488", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs"];
m1_928 [label="Assert.IsTrue(reader.Read())", span="1489-1489", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs"];
m1_929 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.Read(); }, ''Unexpected end while parsing unquoted property name. Path '', line 1, position 4.'')", span="1491-1491", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs"];
m1_930 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="1486-1486", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs"];
m1_1262 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1956-1956", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1265 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1961-1961", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1266 [label="reader.Read()", span="1963-1963", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1268 [label="reader.Read()", span="1966-1966", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1272 [label="Assert.IsTrue(reader.Read())", span="1971-1971", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1274 [label="Assert.IsFalse(reader.Read())", span="1974-1974", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1267 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1964-1964", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1269 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1967-1967", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1270 [label="Assert.AreEqual(typeof(string), reader.ValueType)", span="1968-1968", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1271 [label="Assert.AreEqual(20000, reader.Value.ToString().Length)", span="1969-1969", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1273 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1972-1972", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1275 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1975-1975", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1264 [label="string json = @''['''''' + new string(' ', length) + @'''''']''", span="1959-1959", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1263 [label="int length = 20000", span="1958-1958", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_1276 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1956-1956", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs"];
m1_2117 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", span="3237-3237", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2119 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3241-3241", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2120 [label="reader.Read()", span="3243-3243", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2122 [label="Assert.AreEqual(''[0]'', reader.Path)", span="3245-3245", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2124 [label="Assert.AreEqual(''[1]'', reader.Path)", span="3247-3247", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2126 [label="Assert.AreEqual(''[2]'', reader.Path)", span="3249-3249", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2128 [label="Assert.AreEqual(''[3]'', reader.Path)", span="3251-3251", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2130 [label="Assert.AreEqual(''[4]'', reader.Path)", span="3253-3253", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2132 [label="Assert.AreEqual(''[5]'', reader.Path)", span="3255-3255", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2134 [label="Assert.AreEqual(''[6]'', reader.Path)", span="3257-3257", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2136 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="3260-3260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2138 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="3263-3263", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2140 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="3266-3266", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2118 [label="string json = @''['','','','','','','']''", span="3239-3239", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2121 [label="reader.ReadAsInt32()", span="3244-3244", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2123 [label="reader.ReadAsDecimal()", span="3246-3246", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2125 [label="reader.ReadAsDateTime()", span="3248-3248", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2127 [label="reader.ReadAsDateTimeOffset()", span="3250-3250", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2129 [label="reader.ReadAsString()", span="3252-3252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2131 [label="reader.ReadAsBytes()", span="3254-3254", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2133 [label="reader.ReadAsDouble()", span="3256-3256", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2135 [label="Assert.IsNull(reader.ReadAsString())", span="3259-3259", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2137 [label="Assert.IsNull(reader.ReadAsString())", span="3262-3262", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2139 [label="Assert.IsNull(reader.ReadAsBytes())", span="3265-3265", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_2141 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", span="3237-3237", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs"];
m1_1935 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", span="2969-2969", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs"];
m1_1936 [label="JsonTextReader reader = new JsonTextReader(new StringReader('''1,112.34'''))", span="2971-2971", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs"];
m1_1937 [label="Assert.AreEqual(1112.34d, reader.ReadAsDouble())", span="2972-2972", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs"];
m1_1938 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", span="2969-2969", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs"];
m1_686 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="JsonTextReaderTest.cs"];
m1_2409 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", span="3722-3722", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs"];
m1_2411 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3726-3726", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs"];
m1_2412 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsString(); }, ''Error parsing null value. Path '', line 1, position 4.'')", span="3728-3728", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs"];
m1_2410 [label="string json = @''nullllll''", span="3724-3724", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs"];
m1_2413 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", span="3722-3722", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs"];
m1_2779 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", span="4211-4211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs"];
m1_2781 [label="ExceptionAssert.Throws<JsonReaderException>(\r\n                () =>\r\n                {\r\n                    JsonTextReader reader = new JsonTextReader(new StringReader(json));\r\n                    while (reader.Read())\r\n                    {\r\n                    }\r\n                },\r\n                ''Unexpected character encountered while parsing value: !. Path 'frameworks.dnxcore50.dependencies['System.Xml.ReaderWriter'].source', line 6, position 20.'')", span="4225-4233", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs"];
m1_2780 [label="string json = @''{\r\n  ''''frameworks'''': {\r\n    ''''dnxcore50'''': {\r\n      ''''dependencies'''': {\r\n        ''''System.Xml.ReaderWriter'''': {\r\n          ''''source'''': !!! !!!\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="4213-4223", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs"];
m1_2782 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", span="4211-4211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs"];
m1_426 [label="Entry Newtonsoft.Json.JsonTextReader.Close()", span="2399-2399", cluster="Newtonsoft.Json.JsonTextReader.Close()", file="JsonTextReaderTest.cs"];
m1_140 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", span="261-261", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_142 [label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="271-271", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_143 [label="Assert.IsTrue(jsonTextReader.Read())", span="272-272", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_145 [label="Assert.IsTrue(jsonTextReader.Read())", span="275-275", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_147 [label="Assert.IsTrue(jsonTextReader.Read())", span="278-278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_149 [label="Assert.IsTrue(jsonTextReader.Read())", span="281-281", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_152 [label="Assert.IsTrue(jsonTextReader.Read())", span="285-285", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_155 [label="Assert.IsTrue(jsonTextReader.Read())", span="289-289", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_158 [label="Assert.IsTrue(jsonTextReader.Read())", span="293-293", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_160 [label="Assert.IsTrue(jsonTextReader.Read())", span="296-296", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_144 [label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="273-273", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_146 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="276-276", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_148 [label="Assert.AreEqual(JsonToken.StartArray, jsonTextReader.TokenType)", span="279-279", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_150 [label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="282-282", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_151 [label="Assert.AreEqual(''src'', jsonTextReader.Value)", span="283-283", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_153 [label="Assert.AreEqual(JsonToken.Comment, jsonTextReader.TokenType)", span="286-286", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_154 [label="Assert.AreEqual(@'''''''', jsonTextReader.Value)", span="287-287", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_156 [label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="290-290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_157 [label="Assert.AreEqual(''test'', jsonTextReader.Value)", span="291-291", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_159 [label="Assert.AreEqual(JsonToken.EndArray, jsonTextReader.TokenType)", span="294-294", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_161 [label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="297-297", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_141 [label="string json = @''{\r\n    ''''projects'''': [\r\n        ''''src'''',\r\n        //''''\r\n        ''''test''''\r\n    ]\r\n}''", span="263-269", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_162 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", span="261-261", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs"];
m1_45 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="JsonTextReaderTest.cs"];
m1_1055 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", span="1720-1720", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1057 [label="reader = new JsonTextReader(new StringReader(''1''))", span="1724-1724", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1059 [label="reader = new JsonTextReader(new StringReader(''-1''))", span="1727-1727", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1061 [label="reader = new JsonTextReader(new StringReader(''0''))", span="1730-1730", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1063 [label="reader = new JsonTextReader(new StringReader(''-0''))", span="1733-1733", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1065 [label="reader = new JsonTextReader(new StringReader(int.MaxValue.ToString()))", span="1736-1736", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1067 [label="reader = new JsonTextReader(new StringReader(int.MinValue.ToString()))", span="1739-1739", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1069 [label="reader = new JsonTextReader(new StringReader(long.MaxValue.ToString()))", span="1742-1742", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1071 [label="reader = new JsonTextReader(new StringReader(''9999999999999999999999999999999999999999999999999999999999999999999999999999asdasdasd''))", span="1745-1745", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1073 [label="reader = new JsonTextReader(new StringReader(''1E-06''))", span="1748-1748", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1075 [label="reader = new JsonTextReader(new StringReader(''1.1''))", span="1751-1751", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1077 [label="reader = new JsonTextReader(new StringReader(''''))", span="1754-1754", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1079 [label="reader = new JsonTextReader(new StringReader(''-''))", span="1757-1757", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1058 [label="Assert.AreEqual(1, reader.ReadAsInt32())", span="1725-1725", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1060 [label="Assert.AreEqual(-1, reader.ReadAsInt32())", span="1728-1728", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1062 [label="Assert.AreEqual(0, reader.ReadAsInt32())", span="1731-1731", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1064 [label="Assert.AreEqual(0, reader.ReadAsInt32())", span="1734-1734", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1066 [label="Assert.AreEqual(int.MaxValue, reader.ReadAsInt32())", span="1737-1737", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1068 [label="Assert.AreEqual(int.MinValue, reader.ReadAsInt32())", span="1740-1740", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1078 [label="Assert.AreEqual(null, reader.ReadAsInt32())", span="1755-1755", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1070 [label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''JSON integer 9223372036854775807 is too large or small for an Int32. Path '', line 1, position 19.'')", span="1743-1743", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1072 [label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Unexpected character encountered while parsing number: s. Path '', line 1, position 77.'')", span="1746-1746", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1074 [label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Input string '1E-06' is not a valid integer. Path '', line 1, position 5.'')", span="1749-1749", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1076 [label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Input string '1.1' is not a valid integer. Path '', line 1, position 3.'')", span="1752-1752", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1080 [label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Input string '-' is not a valid integer. Path '', line 1, position 1.'')", span="1758-1758", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1056 [label="JsonTextReader reader = null", span="1722-1722", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_1081 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", span="1720-1720", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs"];
m1_2526 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="3877-3877", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs"];
m1_2527 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{}}''))", span="3879-3879", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs"];
m1_2528 [label="Assert.IsTrue(reader.Read())", span="3880-3880", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs"];
m1_2529 [label="Assert.IsTrue(reader.Read())", span="3881-3881", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs"];
m1_2530 [label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.Read(); }, ''Additional text encountered after finished reading JSON content: }. Path '', line 1, position 2.'')", span="3883-3883", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs"];
m1_2531 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="3877-3877", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs"];
m1_375 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="613-613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_377 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="617-617", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_378 [label="Assert.IsTrue(reader.Read())", span="619-619", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_379 [label="Assert.IsTrue(reader.Read())", span="620-620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_380 [label="Assert.IsTrue(reader.Read())", span="622-622", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_381 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="623-623", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_383 [label="Assert.AreEqual(2, s.Length)", span="626-626", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_385 [label="Assert.AreEqual(1, stringInfo.LengthInTextElements)", span="629-629", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_376 [label="string json = @''{ ''''MATHEMATICAL ITALIC CAPITAL ALPHA'''': ''''\uD835\uDEE2'''' }''", span="615-615", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_382 [label="string s = reader.Value.ToString()", span="625-625", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_384 [label="StringInfo stringInfo = new StringInfo(s)", span="628-628", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_386 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="613-613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs"];
m1_1395 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="2151-2151", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1397 [label="JsonTextReader jsonReader = new JsonTextReader(s)", span="2154-2154", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1396 [label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="2153-2153", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1398 [label="Assert.IsTrue(jsonReader.Read())", span="2156-2156", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1400 [label="jsonReader.Read()", span="2159-2159", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1404 [label="jsonReader.Read()", span="2164-2164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1408 [label="jsonReader.Read()", span="2169-2169", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1412 [label="Assert.IsTrue(jsonReader.Read())", span="2174-2174", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1414 [label="Assert.IsFalse(jsonReader.Read())", span="2177-2177", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1399 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="2157-2157", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1401 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2160-2160", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1402 [label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="2161-2161", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1403 [label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="2162-2162", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1405 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2165-2165", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1406 [label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="2166-2166", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1407 [label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="2167-2167", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1409 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2170-2170", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1410 [label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="2171-2171", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1411 [label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="2172-2172", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1413 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="2175-2175", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_1415 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="2151-2151", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs"];
m1_2049 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", span="3137-3137", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs"];
m1_2050 [label="JsonTextReader reader = new JsonTextReader(new StringReader('']''))", span="3139-3139", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs"];
m1_2051 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                reader.ReadAsBytes();\r\n            }, ''Unexpected character encountered while parsing value: ]. Path '', line 1, position 1.'')", span="3141-3144", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs"];
m1_2052 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", span="3137-3137", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs"];
m1_173 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsBytes()", span="448-448", cluster="Newtonsoft.Json.JsonTextReader.ReadAsBytes()", file="JsonTextReaderTest.cs"];
m1_1445 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="2221-2221", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs"];
m1_1446 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="2223-2223", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs"];
m1_1448 [label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="2226-2226", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs"];
m1_1447 [label="Assert.IsNull(reader.ReadAsDecimal())", span="2225-2225", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs"];
m1_1449 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="2221-2221", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs"];
m1_17 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaN_ReadAsInt32()", span="82-82", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaN_ReadAsInt32()", file="JsonTextReaderTest.cs"];
m1_810 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="1290-1290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_812 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1307-1307", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_815 [label="Assert.IsTrue(reader.Read())", span="1314-1314", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_817 [label="Assert.IsTrue(reader.Read())", span="1317-1317", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_818 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1318-1318", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_819 [label="Assert.AreEqual(''type'', reader.Value)", span="1319-1319", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_811 [label="string json = @''\r\n{\r\n  ''''description'''': ''''A person'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", span="1292-1305", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_813 [label="int i = 0", span="1312-1312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_814 [label="i < 14", span="1312-1312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_816 [label="i++", span="1312-1312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_820 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="1290-1290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs"];
m1_1291 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="2002-2002", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1293 [label="JsonReader jsonReader = new JsonTextReader(new StringReader(json))", span="2007-2007", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1295 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="2010-2010", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1297 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2013-2013", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1298 [label="Assert.AreEqual(0.0, jsonReader.Value)", span="2014-2014", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1300 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2017-2017", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1301 [label="Assert.AreEqual(0.0, jsonReader.Value)", span="2018-2018", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1303 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2021-2021", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1304 [label="Assert.AreEqual(0.1, jsonReader.Value)", span="2022-2022", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1306 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2025-2025", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1307 [label="Assert.AreEqual(1.0, jsonReader.Value)", span="2026-2026", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1309 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2029-2029", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1310 [label="Assert.AreEqual(1.000001, jsonReader.Value)", span="2030-2030", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1312 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2033-2033", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1313 [label="Assert.AreEqual(1E-06, jsonReader.Value)", span="2034-2034", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1315 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2037-2037", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1316 [label="Assert.AreEqual(4.94065645841247E-324, jsonReader.Value)", span="2038-2038", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1318 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2041-2041", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1319 [label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="2042-2042", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1321 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2045-2045", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1322 [label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="2046-2046", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1324 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2049-2049", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1325 [label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="2050-2050", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1327 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2053-2053", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1328 [label="Assert.AreEqual(double.MaxValue, jsonReader.Value)", span="2054-2054", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1330 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2057-2057", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1331 [label="Assert.AreEqual(double.MinValue, jsonReader.Value)", span="2058-2058", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1333 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2061-2061", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1334 [label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="2062-2062", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1336 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2065-2065", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1337 [label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="2066-2066", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1339 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2069-2069", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1340 [label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="2070-2070", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1342 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2073-2073", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1343 [label="Assert.AreEqual(0d, jsonReader.Value)", span="2074-2074", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1345 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2077-2077", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1346 [label="Assert.AreEqual(0.0000025d, jsonReader.Value)", span="2078-2078", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1348 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2081-2081", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1349 [label="Assert.AreEqual(3000000000d, jsonReader.Value)", span="2082-2082", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1351 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="2085-2085", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1292 [label="string json =\r\n                @''[0.0,0.0,0.1,1.0,1.000001,1E-06,4.94065645841247E-324,Infinity,-Infinity,NaN,1.7976931348623157E+308,-1.7976931348623157E+308,Infinity,-Infinity,NaN,0e-10,0.25e-5,0.3e10]''", span="2004-2005", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1294 [label="jsonReader.Read()", span="2009-2009", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1296 [label="jsonReader.Read()", span="2012-2012", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1299 [label="jsonReader.Read()", span="2016-2016", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1302 [label="jsonReader.Read()", span="2020-2020", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1305 [label="jsonReader.Read()", span="2024-2024", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1308 [label="jsonReader.Read()", span="2028-2028", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1311 [label="jsonReader.Read()", span="2032-2032", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1314 [label="jsonReader.Read()", span="2036-2036", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1317 [label="jsonReader.Read()", span="2040-2040", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1320 [label="jsonReader.Read()", span="2044-2044", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1323 [label="jsonReader.Read()", span="2048-2048", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1326 [label="jsonReader.Read()", span="2052-2052", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1329 [label="jsonReader.Read()", span="2056-2056", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1332 [label="jsonReader.Read()", span="2060-2060", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1335 [label="jsonReader.Read()", span="2064-2064", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1338 [label="jsonReader.Read()", span="2068-2068", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1341 [label="jsonReader.Read()", span="2072-2072", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1344 [label="jsonReader.Read()", span="2076-2076", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1347 [label="jsonReader.Read()", span="2080-2080", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1350 [label="jsonReader.Read()", span="2084-2084", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1352 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="2002-2002", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs"];
m1_1656 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="2529-2529", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1658 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2533-2533", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1660 [label="Assert.IsTrue(reader.Read())", span="2536-2536", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1662 [label="Assert.IsTrue(reader.Read())", span="2539-2539", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1669 [label="Assert.IsTrue(reader.Read())", span="2549-2549", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1661 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2537-2537", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1663 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2540-2540", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1665 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="2543-2543", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1666 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2544-2544", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1670 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2550-2550", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1668 [label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="2547-2547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1657 [label="string json = @''{''''Offset'''':''''30/1/2011''''}''", span="2531-2531", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1659 [label="reader.Culture = new CultureInfo(''en-NZ'')", span="2534-2534", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1664 [label="reader.ReadAsDateTimeOffset()", span="2542-2542", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1667 [label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="2546-2546", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_1671 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="2529-2529", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs"];
m1_2865 [label="Entry System.Net.Sockets.TcpListener.AcceptSocket()", span="0-0", cluster="System.Net.Sockets.TcpListener.AcceptSocket()", file="JsonTextReaderTest.cs"];
m1_39 [label="Assert.AreEqual(double.NegativeInfinity, reader.ReadAsDouble())", span="115-115", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaNAndInifinity_ReadAsDouble()", file="JsonTextReaderTest.cs"];
m1_84 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", span="184-184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_86 [label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="188-188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_96 [label="jsonTextReader = new JsonTextReader(new StringReader(json))", span="203-203", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_114 [label="jsonTextReader = new JsonTextReader(new StringReader(json))", span="227-227", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_87 [label="Assert.IsTrue(jsonTextReader.Read())", span="190-190", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_91 [label="Assert.IsTrue(jsonTextReader.Read())", span="195-195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_97 [label="Assert.IsTrue(jsonTextReader.Read())", span="205-205", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_101 [label="Assert.IsTrue(jsonTextReader.Read())", span="210-210", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_105 [label="Assert.IsTrue(jsonTextReader.Read())", span="215-215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_109 [label="Assert.IsTrue(jsonTextReader.Read())", span="220-220", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_115 [label="Assert.IsTrue(jsonTextReader.Read())", span="229-229", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_119 [label="Assert.IsTrue(jsonTextReader.Read())", span="234-234", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_123 [label="Assert.IsTrue(jsonTextReader.Read())", span="239-239", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_127 [label="Assert.IsTrue(jsonTextReader.Read())", span="244-244", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_131 [label="Assert.IsTrue(jsonTextReader.Read())", span="249-249", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_135 [label="Assert.IsTrue(jsonTextReader.Read())", span="254-254", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_88 [label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="191-191", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_89 [label="Assert.AreEqual(1, jsonTextReader.LineNumber)", span="192-192", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_90 [label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="193-193", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_92 [label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="197-197", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_93 [label="Assert.AreEqual(1, jsonTextReader.LineNumber)", span="198-198", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_94 [label="Assert.AreEqual(2, jsonTextReader.LinePosition)", span="199-199", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_98 [label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="206-206", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_99 [label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="207-207", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_100 [label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="208-208", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_102 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="211-211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_103 [label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="212-212", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_104 [label="Assert.AreEqual(5, jsonTextReader.LinePosition)", span="213-213", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_106 [label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="216-216", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_107 [label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="217-217", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_108 [label="Assert.AreEqual(9, jsonTextReader.LinePosition)", span="218-218", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_110 [label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="221-221", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_111 [label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="222-222", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_112 [label="Assert.AreEqual(10, jsonTextReader.LinePosition)", span="223-223", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_116 [label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="230-230", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_117 [label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="231-231", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_118 [label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="232-232", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_120 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="235-235", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_121 [label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="236-236", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_122 [label="Assert.AreEqual(5, jsonTextReader.LinePosition)", span="237-237", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_124 [label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="240-240", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_125 [label="Assert.AreEqual(3, jsonTextReader.LineNumber)", span="241-241", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_126 [label="Assert.AreEqual(4, jsonTextReader.LinePosition)", span="242-242", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_128 [label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="245-245", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_129 [label="Assert.AreEqual(3, jsonTextReader.LineNumber)", span="246-246", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_130 [label="Assert.AreEqual(9, jsonTextReader.LinePosition)", span="247-247", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_132 [label="Assert.AreEqual(JsonToken.Boolean, jsonTextReader.TokenType)", span="250-250", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_133 [label="Assert.AreEqual(3, jsonTextReader.LineNumber)", span="251-251", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_134 [label="Assert.AreEqual(13, jsonTextReader.LinePosition)", span="252-252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_136 [label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="255-255", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_137 [label="Assert.AreEqual(4, jsonTextReader.LineNumber)", span="256-256", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_138 [label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="257-257", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_85 [label="string json = ''{}''", span="186-186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_95 [label="json = ''\n{\''a\'':\''bc\''}''", span="201-201", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_113 [label="json = ''\n{\''a\'':\n\''bc\'',\''d\'':true\n}''", span="225-225", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_139 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", span="184-184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs"];
m1_2922 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="JsonTextReaderTest.cs"];
m1_36 [label="Assert.AreEqual(double.PositiveInfinity, reader.ReadAsDouble())", span="111-111", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaNAndInifinity_ReadAsDouble()", file="JsonTextReaderTest.cs"];
m1_231 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", span="409-409", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_233 [label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="418-418", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_234 [label="Assert.IsTrue(jsonTextReader.Read())", span="420-420", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_240 [label="Assert.IsTrue(jsonTextReader.Read())", span="431-431", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_242 [label="Assert.IsFalse(jsonTextReader.Read())", span="434-434", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_235 [label="Assert.AreEqual(JsonToken.StartArray, jsonTextReader.TokenType)", span="421-421", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_241 [label="Assert.AreEqual(JsonToken.EndArray, jsonTextReader.TokenType)", span="432-432", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_236 [label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''JSON integer 333333333333333333333333333333333333333 is too large or small for an Int32. Path '[0]', line 2, position 41.'')", span="423-423", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_237 [label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''Input string '3.3' is not a valid integer. Path '[1]', line 3, position 5.'')", span="425-425", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_238 [label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''Unexpected character encountered while parsing value: ,. Path '[2]', line 4, position 3.'')", span="427-427", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_239 [label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''Input string '0f' is not a valid integer. Path '[3]', line 5, position 4.'')", span="429-429", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_232 [label="string json = @''[\r\n  333333333333333333333333333333333333333,\r\n  3.3,\r\n  ,\r\n  0f\r\n]''", span="411-416", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_243 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", span="409-409", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs"];
m1_1861 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="2860-2860", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonTextReaderTest.cs"];
m1_1863 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2863-2863", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonTextReaderTest.cs"];
}
