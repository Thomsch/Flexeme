digraph  {
n367 [label="System.Collections.Generic.IList<T>", span=""];
n368 [label=bool, span=""];
n369 [label=collectionDefinition, span=""];
n370 [label=object, span=""];
n371 [label=listDefinition, span=""];
n372 [label=object, span=""];
n373 [label=dictionaryDefinition, span=""];
n374 [label=object, span=""];
n0 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", span="38-38"];
n1 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", label="ValidationUtils.ArgumentNotNull(enumerable, ''enumerable'')", span="40-40"];
n2 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", label="return enumerable.Cast<object>().Where(o => o is T).Cast<T>();", span="42-42"];
n4 [cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="94-94"];
n3 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CastValid<T>(System.Collections.IEnumerable)", span="38-38"];
n5 [cluster="System.Collections.IEnumerable.Cast<TResult>()", label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0"];
n6 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n7 [cluster="Unk.>", label="Entry Unk.>", span=""];
n8 [cluster="lambda expression", label="Entry lambda expression", span="42-42"];
n9 [cluster="lambda expression", label="o is T", span="42-42"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="42-42"];
n11 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", span="45-45"];
n12 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", label="return new List<T>(values);", span="47-47"];
n13 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(params T[])", span="45-45"];
n14 [cluster="System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", label="Entry System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
n15 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", span="57-57"];
n16 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", label="collection != null", span="59-59"];
n17 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", label="return (collection.Count == 0);", span="61-61"];
n18 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", label="return true;", span="63-63"];
n19 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)", span="57-57"];
n20 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", span="73-73"];
n21 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", label="collection != null", span="75-75"];
n22 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", label="return (collection.Count == 0);", span="77-77"];
n23 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", label="return true;", span="79-79"];
n24 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", span="73-73"];
n25 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", span="89-89"];
n26 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", label="IsNullOrEmpty<T>(list)", span="91-91"];
n28 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", label="return ReflectionUtils.ItemsUnitializedValue<T>(list);", span="94-94"];
n27 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", label="return true;", span="92-92"];
n29 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault<T>(System.Collections.Generic.IList<T>)", span="89-89"];
n30 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue<T>(System.Collections.Generic.IList<T>)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue<T>(System.Collections.Generic.IList<T>)", span="345-345"];
n31 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", span="104-104"];
n32 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", label="return Slice<T>(list, start, end, null);", span="106-106"];
n33 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?)", span="104-104"];
n34 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", span="118-118"];
n35 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="list == null", span="120-120"];
n37 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="step == 0", span="123-123"];
n40 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="list.Count == 0", span="129-129"];
n42 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="int s = step ?? 1", span="133-133"];
n43 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="int startIndex = start ?? 0", span="134-134"];
n44 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="int endIndex = end ?? list.Count", span="135-135"];
n45 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="startIndex = (startIndex < 0) ? list.Count + startIndex : startIndex", span="138-138"];
n46 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="endIndex = (endIndex < 0) ? list.Count + endIndex : endIndex", span="141-141"];
n48 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="endIndex = Math.Min(endIndex, list.Count - 1)", span="145-145"];
n51 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="slicedList.Add(list[i])", span="150-150"];
n36 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="throw new ArgumentNullException(''list'');", span="121-121"];
n38 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="throw new ArgumentException(''Step cannot be zero.'', ''step'');", span="124-124"];
n39 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="List<T> slicedList = new List<T>()", span="126-126"];
n57 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n41 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="return slicedList;", span="130-130"];
n53 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="return slicedList;", span="153-153"];
n52 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="i += s", span="148-148"];
n47 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="startIndex = Math.Max(startIndex, 0)", span="144-144"];
n58 [cluster="System.Math.Max(int, int)", label="Entry System.Math.Max(int, int)", span="0-0"];
n49 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="int i = startIndex", span="148-148"];
n59 [cluster="System.Math.Min(int, int)", label="Entry System.Math.Min(int, int)", span="0-0"];
n50 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="i < endIndex", span="148-148"];
n60 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n54 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Slice<T>(System.Collections.Generic.IList<T>, int?, int?, int?)", span="118-118"];
n56 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n55 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n61 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", span="163-163"];
n62 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="keySelector == null", span="165-165"];
n65 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label=source, span="170-170"];
n66 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="K key = keySelector(value)", span="173-173"];
n63 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="throw new ArgumentNullException(''keySelector'');", span="166-166"];
n64 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="Dictionary<K, List<V>> groupedValues = new Dictionary<K, List<V>>()", span="168-168"];
n74 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n68 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="!groupedValues.TryGetValue(key, out groupedValueList)", span="177-177"];
n70 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="groupedValues.Add(key, groupedValueList)", span="180-180"];
n72 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="return groupedValues;", span="186-186"];
n71 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="groupedValueList.Add(value)", span="183-183"];
n67 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="List<V> groupedValueList", span="174-174"];
n75 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n69 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="groupedValueList = new List<V>()", span="179-179"];
n76 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
n77 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n73 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GroupBy<K, V>(System.Collections.Generic.ICollection<V>, System.Func<V, K>)", span="163-163"];
n78 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="194-194"];
n79 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="initial == null", span="196-196"];
n81 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="collection == null", span="199-199"];
n83 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label=collection, span="202-202"];
n84 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="initial.Add(value)", span="204-204"];
n80 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="throw new ArgumentNullException(''initial'');", span="197-197"];
n82 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="return;", span="200-200"];
n85 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="194-194"];
n86 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
n87 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", span="208-208"];
n88 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", label="ValidationUtils.ArgumentNotNull(initial, ''initial'')", span="210-210"];
n89 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", label="ListWrapper<object> wrapper = new ListWrapper<object>(initial)", span="212-212"];
n90 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", label="wrapper.AddRange(collection.Cast<object>())", span="213-213"];
n92 [cluster="Newtonsoft.Json.Utilities.ListWrapper<T>.ListWrapper(System.Collections.IList)", label="Entry Newtonsoft.Json.Utilities.ListWrapper<T>.ListWrapper(System.Collections.IList)", span="46-46"];
n91 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRange(System.Collections.IList, System.Collections.IEnumerable)", span="208-208"];
n93 [cluster="System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", span="194-194"];
n94 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", span="216-216"];
n95 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label="List<T> distinctList = new List<T>()", span="218-218"];
n96 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label=collection, span="220-220"];
n97 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label="!distinctList.Contains(value)", span="222-222"];
n98 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label="distinctList.Add(value)", span="223-223"];
n99 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label="return distinctList;", span="226-226"];
n101 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
n100 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Distinct<T>(System.Collections.Generic.List<T>)", span="216-216"];
n102 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", span="229-229"];
n103 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", label="List<List<T>> flattened = new List<List<T>>()", span="231-231"];
n105 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", label="Recurse<T>(new List<IList<T>>(lists), 0, currentList, flattened)", span="234-234"];
n104 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", label="Dictionary<int, T> currentList = new Dictionary<int, T>()", span="232-232"];
n106 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", label="return flattened;", span="236-236"];
n108 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", span="239-239"];
n107 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Flatten<T>(params System.Collections.Generic.IList<T>[])", span="229-229"];
n109 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="IList<T> currentArray = global[current]", span="241-241"];
n112 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="currentSet[current] = currentArray[i]", span="245-245"];
n113 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="current == global.Count - 1", span="247-247"];
n116 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="k < currentSet.Count", span="251-251"];
n117 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="items.Add(currentSet[k])", span="253-253"];
n119 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="flattenedResult.Add(items)", span="256-256"];
n120 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="Recurse(global, current + 1, currentSet, flattenedResult)", span="260-260"];
n110 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="int i = 0", span="243-243"];
n111 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="i < currentArray.Count", span="243-243"];
n121 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="i++", span="243-243"];
n122 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", span="239-239"];
n114 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="List<T> items = new List<T>()", span="249-249"];
n115 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="int k = 0", span="251-251"];
n118 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Recurse<T>(System.Collections.Generic.IList<System.Collections.Generic.IList<T>>, int, System.Collections.Generic.Dictionary<int, T>, System.Collections.Generic.List<System.Collections.Generic.List<T>>)", label="k++", span="251-251"];
n123 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", span="265-265"];
n124 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="collection == null", span="267-267"];
n126 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="T[] array = new T[collection.Count]", span="270-270"];
n127 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="collection.CopyTo(array, 0)", span="271-271"];
n125 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="throw new ArgumentNullException(''collection'');", span="268-268"];
n128 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="return new List<T>(array);", span="273-273"];
n130 [cluster="System.Collections.ICollection.CopyTo(System.Array, int)", label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0"];
n129 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateList<T>(System.Collections.ICollection)", span="265-265"];
n131 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="276-276"];
n132 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="a == null || b == null", span="278-278"];
n133 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="return (a == null && b == null);", span="279-279"];
n134 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="a.Count != b.Count", span="281-281"];
n138 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="i < a.Count", span="286-286"];
n139 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="!comparer.Equals(a[i], b[i])", span="288-288"];
n135 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="return false;", span="282-282"];
n136 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="EqualityComparer<T> comparer = EqualityComparer<T>.Default", span="284-284"];
n137 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="int i = 0", span="286-286"];
n141 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="i++", span="286-286"];
n142 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="return true;", span="292-292"];
n140 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="return false;", span="289-289"];
n144 [cluster="System.Collections.Generic.EqualityComparer<T>.Equals(T, T)", label="Entry System.Collections.Generic.EqualityComparer<T>.Equals(T, T)", span="0-0"];
n143 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="276-276"];
n145 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", span="296-296"];
n146 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", label="return TryGetSingleItem<T>(list, false, out value);", span="298-298"];
n147 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, out T)", span="296-296"];
n148 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", span="301-301"];
n149 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", label="return MiscellaneousUtils.TryAction<T>(delegate { return GetSingleItem(list, returnDefaultIfEmpty); }, out value);", span="303-303"];
n153 [cluster="lambda expression", label="return GetSingleItem(list, returnDefaultIfEmpty);", span="303-303"];
n150 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.TryGetSingleItem<T>(System.Collections.Generic.IList<T>, bool, out T)", span="301-301"];
n151 [cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.TryAction<T>(Newtonsoft.Json.Utilities.Creator<T>, out T)", label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.TryAction<T>(Newtonsoft.Json.Utilities.Creator<T>, out T)", span="21-21"];
n152 [cluster="lambda expression", label="Entry lambda expression", span="303-303"];
n154 [cluster="lambda expression", label="Exit lambda expression", span="303-303"];
n155 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", span="311-311"];
n156 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", span="306-306"];
n157 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", label="return GetSingleItem<T>(list, false);", span="308-308"];
n158 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>)", span="306-306"];
n159 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="list.Count == 1", span="313-313"];
n160 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="return list[0];", span="314-314"];
n161 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="returnDefaultIfEmpty && list.Count == 0", span="315-315"];
n163 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="throw new Exception(''Expected single {0} in list but got {1}.''.FormatWith(CultureInfo.InvariantCulture, typeof(T), list.Count));", span="318-318"];
n162 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="return default(T);", span="316-316"];
n164 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.GetSingleItem<T>(System.Collections.Generic.IList<T>, bool)", span="311-311"];
n165 [cluster="System.Exception.Exception(string)", label="Entry System.Exception.Exception(string)", span="0-0"];
n166 [cluster="string.FormatWith(System.IFormatProvider, params object[])", label="Entry string.FormatWith(System.IFormatProvider, params object[])", span="48-48"];
n167 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="322-322"];
n168 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="ValidationUtils.ArgumentNotNull(list, ''list'')", span="324-324"];
n169 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="List<T> result = new List<T>(list.Count)", span="326-326"];
n170 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label=list, span="327-327"];
n171 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="minus == null || !minus.Contains(t)", span="329-329"];
n175 [cluster="System.Collections.Generic.List<T>.List(int)", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
n172 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="result.Add(t)", span="330-330"];
n173 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="return result;", span="333-333"];
n176 [cluster="System.Collections.Generic.ICollection<T>.Contains(T)", label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0"];
n174 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.Minus<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)", span="322-322"];
n177 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", span="336-336"];
n178 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", label="ValidationUtils.ArgumentNotNull(listType, ''listType'')", span="338-338"];
n179 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", label="return (IList)ReflectionUtils.CreateGeneric(typeof(List<>), listType);", span="340-340"];
n180 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)", span="336-336"];
n181 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Type, params object[])", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Type, params object[])", span="618-618"];
n182 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", span="343-343"];
n183 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", label="ValidationUtils.ArgumentNotNull(keyType, ''keyType'')", span="345-345"];
n184 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", label="ValidationUtils.ArgumentNotNull(valueType, ''valueType'')", span="346-346"];
n185 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", label="return (IDictionary)ReflectionUtils.CreateGeneric(typeof(Dictionary<,>), keyType, valueType);", span="348-348"];
n186 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateGenericDictionary(System.Type, System.Type)", span="343-343"];
n187 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", span="351-351"];
n188 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="ValidationUtils.ArgumentNotNull(type, ''type'')", span="353-353"];
n189 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="type.IsArray", span="355-355"];
n191 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="typeof(IList).IsAssignableFrom(type)", span="357-357"];
n193 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="ReflectionUtils.ImplementsGenericDefinition(type, typeof(IList<>))", span="359-359"];
n190 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="return true;", span="356-356"];
n192 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="return true;", span="358-358"];
n197 [cluster="System.Type.IsAssignableFrom(System.Type)", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
n194 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="return true;", span="360-360"];
n195 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="return false;", span="362-362"];
n198 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", span="144-144"];
n196 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsListType(System.Type)", span="351-351"];
n199 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", span="365-365"];
n200 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="ValidationUtils.ArgumentNotNull(type, ''type'')", span="367-367"];
n201 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="type.IsArray", span="369-369"];
n203 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="typeof(ICollection).IsAssignableFrom(type)", span="371-371"];
n205 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="ReflectionUtils.ImplementsGenericDefinition(type, typeof(ICollection<>))", span="373-373"];
n202 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="return true;", span="370-370"];
n204 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="return true;", span="372-372"];
n206 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="return true;", span="374-374"];
n207 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="return false;", span="376-376"];
n208 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsCollectionType(System.Type)", span="365-365"];
n209 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="379-379"];
n210 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="ValidationUtils.ArgumentNotNull(type, ''type'')", span="381-381"];
n211 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="typeof(IDictionary).IsAssignableFrom(type)", span="383-383"];
n213 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="ReflectionUtils.ImplementsGenericDefinition(type, typeof (IDictionary<,>))", span="385-385"];
n212 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="return true;", span="384-384"];
n214 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="return true;", span="386-386"];
n215 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="return false;", span="388-388"];
n216 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="379-379"];
n217 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", span="391-391"];
n218 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="ValidationUtils.ArgumentNotNull(list, ''list'')", span="393-393"];
n220 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="ReflectionUtils.ImplementsGenericDefinition(list.GetType(), typeof(ICollection<>), out collectionDefinition)", span="396-396"];
n222 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="Func<Type, IList<object>, object> instanceCreator = (t, a) =>\r\n        {\r\n          ConstructorInfo c = t.GetConstructor(new[] { collectionDefinition });\r\n          return c.Invoke(new[] { list });\r\n        }", span="401-405"];
n235 [cluster="lambda expression", label="return c.Invoke(new[] { list });", span="404-404"];
n223 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="return (IWrappedCollection)ReflectionUtils.CreateGeneric(typeof(CollectionWrapper<>), new[] { collectionItemType }, instanceCreator, list);", span="407-407"];
n224 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="list is IList", span="409-409"];
n225 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="return new CollectionWrapper<object>((IList)list);", span="411-411"];
n226 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="throw new Exception(''Can not create ListWrapper for type {0}.''.FormatWith(CultureInfo.InvariantCulture, list.GetType()));", span="415-415"];
n219 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="Type collectionDefinition", span="395-395"];
n221 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="Type collectionItemType = ReflectionUtils.GetCollectionItemType(collectionDefinition)", span="398-398"];
n228 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n229 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", span="150-150"];
n234 [cluster="lambda expression", label="ConstructorInfo c = t.GetConstructor(new[] { collectionDefinition })", span="403-403"];
n230 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", span="268-268"];
n227 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateCollectionWrapper(object)", span="391-391"];
n231 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Collections.Generic.IList<System.Type>, System.Func<System.Type, System.Collections.Generic.IList<object>, object>, params object[])", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type, System.Collections.Generic.IList<System.Type>, System.Func<System.Type, System.Collections.Generic.IList<object>, object>, params object[])", span="628-628"];
n232 [cluster="Newtonsoft.Json.Utilities.CollectionWrapper<T>.CollectionWrapper(System.Collections.IList)", label="Entry Newtonsoft.Json.Utilities.CollectionWrapper<T>.CollectionWrapper(System.Collections.IList)", span="46-46"];
n233 [cluster="lambda expression", label="Entry lambda expression", span="401-405"];
n237 [cluster="System.Type.GetConstructor(System.Type[])", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
n236 [cluster="lambda expression", label="Exit lambda expression", span="401-405"];
n238 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
n239 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", span="418-418"];
n240 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="ValidationUtils.ArgumentNotNull(list, ''list'')", span="420-420"];
n242 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="ReflectionUtils.ImplementsGenericDefinition(list.GetType(), typeof(IList<>), out listDefinition)", span="423-423"];
n244 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="Func<Type, IList<object>, object> instanceCreator = (t, a) =>\r\n        {\r\n          ConstructorInfo c = t.GetConstructor(new[] {listDefinition});\r\n          return c.Invoke(new[] { list });\r\n        }", span="428-432"];
n252 [cluster="lambda expression", label="return c.Invoke(new[] { list });", span="431-431"];
n245 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="return (IWrappedList)ReflectionUtils.CreateGeneric(typeof(ListWrapper<>), new[] { collectionItemType }, instanceCreator, list);", span="434-434"];
n246 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="list is IList", span="436-436"];
n247 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="return new ListWrapper<object>((IList)list);", span="438-438"];
n248 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="throw new Exception(''Can not create ListWrapper for type {0}.''.FormatWith(CultureInfo.InvariantCulture, list.GetType()));", span="442-442"];
n241 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="Type listDefinition", span="422-422"];
n243 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="Type collectionItemType = ReflectionUtils.GetCollectionItemType(listDefinition)", span="425-425"];
n251 [cluster="lambda expression", label="ConstructorInfo c = t.GetConstructor(new[] {listDefinition})", span="430-430"];
n249 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateListWrapper(object)", span="418-418"];
n250 [cluster="lambda expression", label="Entry lambda expression", span="428-432"];
n253 [cluster="lambda expression", label="Exit lambda expression", span="428-432"];
n254 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", span="446-446"];
n255 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="ValidationUtils.ArgumentNotNull(dictionary, ''dictionary'')", span="448-448"];
n257 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="ReflectionUtils.ImplementsGenericDefinition(dictionary.GetType(), typeof(IDictionary<,>), out dictionaryDefinition)", span="451-451"];
n260 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="Func<Type, IList<object>, object> instanceCreator = (t, a) =>\r\n        {\r\n          ConstructorInfo c = t.GetConstructor(new[] { dictionaryDefinition });\r\n          return c.Invoke(new[] { dictionary });\r\n        }", span="457-461"];
n271 [cluster="lambda expression", label="return c.Invoke(new[] { dictionary });", span="460-460"];
n261 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="return (IWrappedDictionary)ReflectionUtils.CreateGeneric(typeof(DictionaryWrapper<,>), new[] { dictionaryKeyType, dictionaryValueType }, instanceCreator, dictionary);", span="463-463"];
n262 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="dictionary is IDictionary", span="465-465"];
n263 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="return new DictionaryWrapper<object, object>((IDictionary)dictionary);", span="467-467"];
n264 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="throw new Exception(''Can not create DictionaryWrapper for type {0}.''.FormatWith(CultureInfo.InvariantCulture, dictionary.GetType()));", span="471-471"];
n256 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="Type dictionaryDefinition", span="450-450"];
n258 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="Type dictionaryKeyType = ReflectionUtils.GetDictionaryKeyType(dictionaryDefinition)", span="453-453"];
n259 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="Type dictionaryValueType = ReflectionUtils.GetDictionaryValueType(dictionaryDefinition)", span="454-454"];
n270 [cluster="lambda expression", label="ConstructorInfo c = t.GetConstructor(new[] { dictionaryDefinition })", span="459-459"];
n266 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyType(System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyType(System.Type)", span="331-331"];
n267 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryValueType(System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryValueType(System.Type)", span="322-322"];
n265 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateDictionaryWrapper(object)", span="446-446"];
n268 [cluster="Newtonsoft.Json.Utilities.DictionaryWrapper<TKey, TValue>.DictionaryWrapper(System.Collections.IDictionary)", label="Entry Newtonsoft.Json.Utilities.DictionaryWrapper<TKey, TValue>.DictionaryWrapper(System.Collections.IDictionary)", span="20-20"];
n269 [cluster="lambda expression", label="Entry lambda expression", span="457-461"];
n272 [cluster="lambda expression", label="Exit lambda expression", span="457-461"];
n273 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", span="475-475"];
n274 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="ValidationUtils.ArgumentNotNull(listType, ''listType'')", span="477-477"];
n275 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="ValidationUtils.ArgumentNotNull(populateList, ''populateList'')", span="478-478"];
n279 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="listType.IsArray", span="484-484"];
n282 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="ReflectionUtils.InheritsGenericDefinition(listType, typeof(ReadOnlyCollection<>), out collectionType)", span="491-491"];
n286 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="listType.GetConstructors()", span="497-497"];
n292 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="throw new Exception(''Read-only type {0} does not have a public constructor that takes a type that implements {1}.''.FormatWith(CultureInfo.InvariantCulture, listType, genericEnumerable));", span="512-512"];
n295 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="typeof(IList).IsAssignableFrom(listType)", span="519-519"];
n296 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="ReflectionUtils.IsInstantiatableType(listType)", span="521-521"];
n297 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = (IList)Activator.CreateInstance(listType)", span="522-522"];
n298 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="listType == typeof(IList)", span="523-523"];
n301 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="ReflectionUtils.ImplementsGenericDefinition(listType, typeof(IList<>))", span="528-528"];
n302 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = CreateGenericList(ReflectionUtils.GetCollectionItemType(listType))", span="530-530"];
n305 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="throw new Exception(''Cannot create and populate list type {0}.''.FormatWith(CultureInfo.InvariantCulture, listType));", span="538-538"];
n306 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="populateList(list, isReadOnlyOrFixedSize)", span="540-540"];
n308 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="listType.IsArray", span="545-545"];
n309 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = ToArray(((List<object>)list).ToArray(), ReflectionUtils.GetCollectionItemType(listType))", span="546-546"];
n310 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="ReflectionUtils.InheritsGenericDefinition(listType, typeof(ReadOnlyCollection<>))", span="547-547"];
n311 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = (IList)ReflectionUtils.CreateInstance(listType, list)", span="548-548"];
n276 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="IList list", span="480-480"];
n277 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="Type collectionType", span="481-481"];
n278 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="bool isReadOnlyOrFixedSize = false", span="482-482"];
n307 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label=isReadOnlyOrFixedSize, span="543-543"];
n280 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = new List<object>()", span="488-488"];
n281 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="isReadOnlyOrFixedSize = true", span="489-489"];
n304 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list == null", span="537-537"];
n312 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="return list;", span="551-551"];
n283 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="Type readOnlyCollectionContentsType = collectionType.GetGenericArguments()[0]", span="493-493"];
n314 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", span="230-230"];
n284 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="Type genericEnumerable = ReflectionUtils.MakeGenericType(typeof(IEnumerable<>), readOnlyCollectionContentsType)", span="494-494"];
n315 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n293 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = CreateGenericList(readOnlyCollectionContentsType)", span="516-516"];
n285 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="bool suitableConstructor = false", span="495-495"];
n316 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.MakeGenericType(System.Type, params System.Type[])", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.MakeGenericType(System.Type, params System.Type[])", span="609-609"];
n289 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="genericEnumerable.IsAssignableFrom(parameters[0].ParameterType)", span="503-503"];
n291 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="!suitableConstructor", span="511-511"];
n287 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="IList<ParameterInfo> parameters = constructor.GetParameters()", span="499-499"];
n317 [cluster="System.Type.GetConstructors()", label="Entry System.Type.GetConstructors()", span="0-0"];
n288 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="parameters.Count == 1", span="501-501"];
n318 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
n290 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="suitableConstructor = true", span="505-505"];
n294 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="isReadOnlyOrFixedSize = true", span="517-517"];
n319 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsInstantiatableType(System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsInstantiatableType(System.Type)", span="41-41"];
n299 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = new List<object>()", span="524-524"];
n300 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = null", span="526-526"];
n303 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="list = null", span="534-534"];
n320 [cluster="System.Activator.CreateInstance(System.Type)", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
n321 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
n324 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", span="224-224"];
n325 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CreateInstance(System.Type, params object[])", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CreateInstance(System.Type, params object[])", span="650-650"];
n322 [cluster="System.Collections.Generic.List<T>.ToArray()", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
n323 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", span="554-554"];
n313 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type, System.Action<System.Collections.IList, bool>)", span="475-475"];
n326 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="type == null", span="556-556"];
n328 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="Array destinationArray = Array.CreateInstance(type, initial.Length)", span="559-559"];
n329 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="Array.Copy(initial, 0, destinationArray, 0, initial.Length)", span="560-560"];
n327 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="throw new ArgumentNullException(''type'');", span="557-557"];
n332 [cluster="System.Array.CreateInstance(System.Type, int)", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
n330 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="return destinationArray;", span="561-561"];
n333 [cluster="System.Array.Copy(System.Array, int, System.Array, int, int)", label="Entry System.Array.Copy(System.Array, int, System.Array, int, int)", span="0-0"];
n331 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ToArray(System.Array, System.Type)", span="554-554"];
n334 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", span="564-564"];
n335 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", label="return list.AddDistinct(value, EqualityComparer<T>.Default);", span="566-566"];
n336 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T)", span="564-564"];
n337 [cluster="System.Collections.Generic.IList<T>.AddDistinct<T>(T, System.Collections.Generic.IEqualityComparer<T>)", label="Entry System.Collections.Generic.IList<T>.AddDistinct<T>(T, System.Collections.Generic.IEqualityComparer<T>)", span="569-569"];
n338 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", span="569-569"];
n339 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", label="list.ContainsValue(value, comparer)", span="571-571"];
n341 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", label="list.Add(value)", span="574-574"];
n340 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", label="return false;", span="572-572"];
n344 [cluster="System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="579-579"];
n342 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", label="return true;", span="575-575"];
n343 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddDistinct<T>(System.Collections.Generic.IList<T>, T, System.Collections.Generic.IEqualityComparer<T>)", span="569-569"];
n345 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="579-579"];
n346 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="comparer == null", span="581-581"];
n348 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="source == null", span="584-584"];
n350 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label=source, span="587-587"];
n351 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="comparer.Equals(local, value)", span="589-589"];
n347 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="comparer = EqualityComparer<TSource>.Default", span="582-582"];
n349 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="throw new ArgumentNullException(''source'');", span="585-585"];
n353 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="return false;", span="593-593"];
n352 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="return true;", span="590-590"];
n355 [cluster="System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)", label="Entry System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)", span="0-0"];
n354 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.ContainsValue<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="579-579"];
n356 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="596-596"];
n357 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="return list.AddRangeDistinct(values, EqualityComparer<T>.Default);", span="598-598"];
n358 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)", span="596-596"];
n359 [cluster="System.Collections.Generic.IList<T>.AddRangeDistinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="Entry System.Collections.Generic.IList<T>.AddRangeDistinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="601-601"];
n360 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="601-601"];
n361 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="bool allAdded = true", span="603-603"];
n362 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label=values, span="604-604"];
n363 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="!list.AddDistinct(value, comparer)", span="606-606"];
n365 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="return allAdded;", span="610-610"];
n364 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="allAdded = false", span="607-607"];
n366 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", label="Exit Newtonsoft.Json.Utilities.CollectionUtils.AddRangeDistinct<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)", span="601-601"];
d584 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0, label="0: Assert.AreEqual(p1, l[0])", span="958-958"];
d578 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="949-949"];
d580 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", label="IList l = new JObject(p1, p2)", span="951-951"];
d583 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0, label="0: Assert.AreEqual(l, p3.Parent)", span="956-956"];
d585 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0, label="0: Assert.AreEqual(p3, l[1])", span="959-959"];
d13 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
d586 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0, label="0: Assert.AreEqual(p2, l[2])", span="960-960"];
d579 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="950-950"];
d587 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="947-947"];
d581 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0, label="0: JProperty p3 = new JProperty(''Test3'', ''III'')", span="953-953"];
d582 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", color=green, community=0, label="0: l.Insert(1, p3)", span="955-955"];
d394 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="293-293"];
d588 [cluster="System.Collections.IList.Insert(int, object)", label="Entry System.Collections.IList.Insert(int, object)", span="0-0"];
d590 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", color=green, community=0, label="0: IList l = new JObject()", span="966-966"];
d589 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="964-964"];
d591 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", color=green, community=0, label="0: Assert.IsFalse(l.IsReadOnly)", span="967-967"];
d26 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87"];
d592 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="964-964"];
d239 [cluster="Unk.IsFalse", label="Entry Unk.IsFalse", span=""];
d679 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", color=green, community=0, label="0: ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1107-1114"];
d678 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1105-1105"];
d680 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1105-1105"];
d98 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="211-211"];
d681 [cluster="lambda expression", label="Entry lambda expression", span="1107-1114"];
d682 [cluster="lambda expression", color=green, community=0, label="0: JProperty p1 = new JProperty(''Test1'', 1)", span="1109-1109"];
d683 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1110-1110"];
d684 [cluster="lambda expression", label="IList<JToken> l = new JObject(p1, p2)", span="1111-1111"];
d685 [cluster="lambda expression", color=green, community=0, label="0: l.Add(new JValue(''Bad!''))", span="1113-1113"];
d686 [cluster="lambda expression", label="Exit lambda expression", span="1107-1114"];
d9 [cluster="Newtonsoft.Json.Linq.JValue.JValue(string)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(string)", span="154-154"];
d118 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
d577 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="947-947"];
d395 [cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104"];
d6 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="Assert.AreEqual(null, v.Value)", span="73-73"];
d18 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", label="Assert.AreEqual(''Apple'', (string) o[''Name''])", span="94-94"];
d33 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="Assert.AreEqual(0, d.Keys.Count)", span="114-114"];
d35 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="Assert.AreEqual(1, d.Keys.Count)", span="118-118"];
d40 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(1, o.Children().Count())", span="126-126"];
d42 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(false, o.TryGetValue(''sdf'', out t))", span="129-129"];
d44 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(false, o.TryGetValue(null, out t))", span="132-132"];
d46 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="135-135"];
d43 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(null, t)", span="130-130"];
d45 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(null, t)", span="133-133"];
d47 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Assert.AreEqual(true, JToken.DeepEquals(new JValue(1), t))", span="136-136"];
d58 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(1, o.Children().Count())", span="144-144"];
d60 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="147-147"];
d63 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(1, o.Children().Count())", span="151-151"];
d64 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="153-153"];
d67 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(1, o.Children().Count())", span="157-157"];
d68 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(true, o.TryGetValue(''PropertyNameValue'', out t))", span="159-159"];
d61 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(true, JToken.DeepEquals(new JValue(1), t))", span="148-148"];
d65 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(true, JToken.DeepEquals(new JValue(2), t))", span="154-154"];
d69 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Assert.AreEqual(true, JToken.DeepEquals(JValue.CreateNull(), t))", span="160-160"];
d75 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Assert.AreEqual(1, o.Children().Count())", span="168-168"];
d76 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Assert.AreEqual(false, o.Remove(''sdf''))", span="170-170"];
d77 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Assert.AreEqual(false, o.Remove(null))", span="171-171"];
d78 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Assert.AreEqual(true, o.Remove(''PropertyNameValue''))", span="172-172"];
d79 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Assert.AreEqual(0, o.Children().Count())", span="174-174"];
d90 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Assert.AreEqual(true, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue'', v)))", span="188-188"];
d86 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Assert.AreEqual(1, o.Children().Count())", span="183-183"];
d87 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Assert.AreEqual(false, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue1'', new JValue(1))))", span="185-185"];
d88 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Assert.AreEqual(false, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(2))))", span="186-186"];
d89 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Assert.AreEqual(false, ((ICollection<KeyValuePair<string, JToken>>)o).Remove(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1))))", span="187-187"];
d91 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Assert.AreEqual(0, o.Children().Count())", span="190-190"];
d107 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="Assert.AreEqual(1, (int)o[''PropertyNameValue''])", span="210-210"];
d109 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="Assert.AreEqual(null, ((JValue)o[''PropertyNameValue1'']).Value)", span="213-213"];
d110 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="Assert.AreEqual(2, o.Children().Count())", span="215-215"];
d115 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", label="Assert.AreEqual(1, (int)o[''PropertyNameValue''])", span="224-224"];
d116 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", label="Assert.AreEqual(1, o.Children().Count())", span="225-225"];
d122 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="Assert.AreEqual(1, o.Children().Count())", span="233-233"];
d125 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="Assert.AreEqual(0, o.Children().Count())", span="238-238"];
d126 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="Assert.AreEqual(null, p.Parent)", span="240-240"];
d134 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Assert.AreEqual(1, o.Children().Count())", span="249-249"];
d136 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Assert.AreEqual(false, contains)", span="252-252"];
d138 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Assert.AreEqual(true, contains)", span="255-255"];
d140 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Assert.AreEqual(false, contains)", span="258-258"];
d142 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Assert.AreEqual(false, contains)", span="261-261"];
d144 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Assert.AreEqual(false, contains)", span="264-264"];
d150 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="Assert.AreEqual(1, o.Children().Count())", span="272-272"];
d152 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="Assert.AreEqual(true, contains)", span="275-275"];
d160 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(3, o.Children().Count())", span="285-285"];
d163 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[0])", span="291-291"];
d164 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(''PropertyNameValue'', a[1].Key)", span="293-293"];
d165 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(1, (int)a[1].Value)", span="294-294"];
d166 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(''PropertyNameValue2'', a[2].Key)", span="296-296"];
d167 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(2, (int)a[2].Value)", span="297-297"];
d168 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(''PropertyNameValue3'', a[3].Key)", span="299-299"];
d169 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(3, (int)a[3].Value)", span="300-300"];
d170 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[4])", span="302-302"];
d207 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="Assert.AreEqual(''FirstNameValue'', (string)o[''first_name''])", span="363-363"];
d208 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="Assert.AreEqual(JTokenType.Raw, ((JValue)o[''RawContent'']).Type)", span="364-364"];
d209 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="Assert.AreEqual(''[1,2,3,4,5]'', (string)o[''RawContent''])", span="365-365"];
d210 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="Assert.AreEqual(''LastNameValue'', (string)o[''last_name''])", span="366-366"];
d219 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="384-384"];
d221 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="387-387"];
d223 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="390-390"];
d225 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="393-393"];
d227 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.Raw, reader.TokenType)", span="396-396"];
d229 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="399-399"];
d231 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="402-402"];
d233 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="405-405"];
d246 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="Assert.AreEqual(''FirstNameValue'', raw.FirstName)", span="426-426"];
d247 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="Assert.AreEqual(''LastNameValue'', raw.LastName)", span="427-427"];
d248 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="Assert.AreEqual(''[1,2,3,4,5]'', raw.RawContent.Value)", span="428-428"];
d264 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", label="Assert.AreEqual(DateTimeUtils.ConvertJavaScriptTicksToDateTime(1207285200000), (DateTime)v)", span="449-449"];
d272 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="Assert.AreEqual(true, value)", span="458-458"];
d276 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="Assert.AreEqual(null, value)", span="463-463"];
d299 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="Assert.AreEqual(''PropertyNameValue'' + i, property.Name)", span="502-502"];
d300 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="Assert.AreEqual(i, (int)property.Value)", span="503-503"];
d309 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="Assert.AreEqual(''PropertyNameValue'' + i, pair.Key)", span="519-519"];
d310 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="Assert.AreEqual(i, (int)pair.Value)", span="520-520"];
d316 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="Assert.AreEqual(null, v.Value)", span="531-531"];
d317 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="Assert.AreEqual(JTokenType.String, v.Type)", span="532-532"];
d339 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Assert.AreEqual(''http://www.foo.com/'', shortie.Original)", span="607-607"];
d340 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Assert.AreEqual(''krehqk'', shortie.Short)", span="608-608"];
d341 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Assert.AreEqual(null, shortie.Shortened)", span="609-609"];
d342 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Assert.AreEqual(0, shortie.Error.Code)", span="610-610"];
d343 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Assert.AreEqual(''No action taken'', shortie.Error.ErrorMessage)", span="611-611"];
d377 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(p1, l[0])", span="674-674"];
d381 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(null, p1.Parent)", span="680-680"];
d378 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(p2, l[1])", span="675-675"];
d384 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(p2, l[1])", span="684-684"];
d389 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(null, p2.Parent)", span="692-692"];
d386 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(2, o.Properties().Count())", span="687-687"];
d382 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(l, p3.Parent)", span="681-681"];
d383 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(p3, l[0])", span="683-683"];
d385 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(2, l.Count)", span="686-686"];
d390 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(l, p4.Parent)", span="693-693"];
d391 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(p3, l[0])", span="695-695"];
d392 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Assert.AreEqual(p4, l[1])", span="696-696"];
d409 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="725-725"];
d418 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="736-736"];
d424 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(null, (string)o[''StringValue''])", span="743-743"];
d430 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="750-750"];
d407 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(null, changing)", span="723-723"];
d408 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(''value1'', changed)", span="724-724"];
d410 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(1, changingCount)", span="726-726"];
d411 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(1, changedCount)", span="727-727"];
d413 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(1, changingCount)", span="730-730"];
d414 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(1, changedCount)", span="731-731"];
d416 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(''value1'', changing)", span="734-734"];
d417 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(''value2'', changed)", span="735-735"];
d419 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(2, changingCount)", span="737-737"];
d420 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(2, changedCount)", span="738-738"];
d422 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(''value2'', changing)", span="741-741"];
d423 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(null, changed)", span="742-742"];
d425 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(3, changingCount)", span="744-744"];
d426 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(3, changedCount)", span="745-745"];
d428 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(null, changing)", span="748-748"];
d429 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(null, changed)", span="749-749"];
d431 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(4, changingCount)", span="751-751"];
d432 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(4, changedCount)", span="752-752"];
d434 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(4, changingCount)", span="755-755"];
d435 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Assert.AreEqual(4, changedCount)", span="756-756"];
d454 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="776-776"];
d460 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="784-784"];
d464 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(null, (string)o[''StringValue''])", span="789-789"];
d468 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="794-794"];
d453 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(''value1'', changed)", span="775-775"];
d455 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(1, changedCount)", span="777-777"];
d457 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(1, changedCount)", span="780-780"];
d459 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(''value2'', changed)", span="783-783"];
d461 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(2, changedCount)", span="785-785"];
d463 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(null, changed)", span="788-788"];
d465 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(3, changedCount)", span="790-790"];
d467 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(null, changed)", span="793-793"];
d469 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(4, changedCount)", span="795-795"];
d471 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Assert.AreEqual(4, changedCount)", span="798-798"];
d489 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", label="Assert.AreEqual(0, l.IndexOf(p))", span="817-817"];
d490 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="818-818"];
d496 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="Assert.AreEqual(1, l.Count)", span="827-827"];
d498 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="Assert.AreEqual(0, l.Count)", span="831-831"];
d507 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="Assert.AreEqual(p1, a[0])", span="845-845"];
d508 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="Assert.AreEqual(p2, a[1])", span="846-846"];
d517 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="Assert.AreEqual(3, l.Count)", span="860-860"];
d518 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="Assert.AreEqual(p3, l[2])", span="861-861"];
d563 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.AreEqual(null, p2.Parent)", span="926-926"];
d555 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.AreEqual(2, l.Count)", span="916-916"];
d557 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.AreEqual(1, l.Count)", span="919-919"];
d561 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.AreEqual(0, l.Count)", span="924-924"];
d572 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="Assert.AreEqual(1, l.Count)", span="940-940"];
d574 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="Assert.AreEqual(0, l.Count)", span="943-943"];
d604 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="Assert.AreEqual(p2, l[1])", span="989-989"];
d603 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="Assert.AreEqual(p3, l[0])", span="988-988"];
d649 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", label="Assert.AreEqual(0, l.IndexOf(p))", span="1057-1057"];
d650 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="1058-1058"];
d656 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="Assert.AreEqual(1, l.Count)", span="1067-1067"];
d658 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="Assert.AreEqual(0, l.Count)", span="1071-1071"];
d666 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="Assert.AreEqual(p1, a[0])", span="1085-1085"];
d667 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="Assert.AreEqual(p2, a[1])", span="1086-1086"];
d675 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="Assert.AreEqual(3, l.Count)", span="1100-1100"];
d676 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="Assert.AreEqual(p3, l[2])", span="1101-1101"];
d720 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.AreEqual(null, p2.Parent)", span="1167-1167"];
d712 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.AreEqual(2, l.Count)", span="1157-1157"];
d714 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.AreEqual(1, l.Count)", span="1160-1160"];
d718 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.AreEqual(0, l.Count)", span="1165-1165"];
d728 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="Assert.AreEqual(1, l.Count)", span="1181-1181"];
d730 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="Assert.AreEqual(0, l.Count)", span="1184-1184"];
d740 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="Assert.AreEqual(p1, l[0])", span="1199-1199"];
d742 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="Assert.AreEqual(p2, l[2])", span="1201-1201"];
d739 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="Assert.AreEqual(l, p3.Parent)", span="1197-1197"];
d741 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="Assert.AreEqual(p3, l[1])", span="1200-1200"];
d756 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="Assert.AreEqual(p2, l[1])", span="1223-1223"];
d755 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="Assert.AreEqual(p3, l[0])", span="1222-1222"];
d771 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", label="Assert.AreEqual(ListSortDirection.Ascending, l.SortDirection)", span="1247-1247"];
d775 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", label="Assert.AreEqual(null, l.SortProperty)", span="1254-1254"];
d779 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", label="Assert.AreEqual(true, l.SupportsChangeNotification)", span="1261-1261"];
d783 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", label="Assert.AreEqual(false, l.SupportsSearching)", span="1268-1268"];
d787 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", label="Assert.AreEqual(false, l.SupportsSorting)", span="1275-1275"];
d791 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", label="Assert.AreEqual(true, l.AllowEdit)", span="1282-1282"];
d795 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", label="Assert.AreEqual(true, l.AllowNew)", span="1289-1289"];
d799 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", label="Assert.AreEqual(true, l.AllowRemove)", span="1296-1296"];
d837 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", label="Assert.AreEqual(false, l.IsSorted)", span="1349-1349"];
d855 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="Assert.AreEqual(o, p.Parent)", span="1374-1374"];
d854 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="Assert.AreEqual(''Property!'', p.Name)", span="1373-1373"];
d864 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", label="Assert.AreEqual(string.Empty, l.GetListName(null))", span="1384-1384"];
d886 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1419-1419"];
d891 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1426-1426"];
d897 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(2, (int)o[''Test1''])", span="1433-1433"];
d884 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(changedType, ListChangedType.ItemAdded)", span="1417-1417"];
d885 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(index, 2)", span="1418-1418"];
d889 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1424-1424"];
d890 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(index, 2)", span="1425-1425"];
d895 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1431-1431"];
d896 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.AreEqual(index, 0)", span="1432-1432"];
d914 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1459-1459"];
d919 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1466-1466"];
d925 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(2, (int)o[''Test1''])", span="1473-1473"];
d912 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Add)", span="1457-1457"];
d913 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(index, 2)", span="1458-1458"];
d917 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1464-1464"];
d918 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(index, 2)", span="1465-1465"];
d923 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1471-1471"];
d924 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.AreEqual(index, 0)", span="1472-1472"];
d935 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", label="Assert.AreEqual(''435 N Mulford Rd'', searchAddress)", span="1528-1528"];
d948 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", label="Assert.AreEqual(3, (int)o[key])", span="1549-1549"];
d954 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", label="Assert.AreEqual(''Name2'', value)", span="1563-1563"];
d959 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="Assert.AreEqual(DBNull.Value, v.Value)", span="1572-1572"];
d960 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="Assert.AreEqual(JTokenType.Null, v.Type)", span="1573-1573"];
d1028 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop1.CanResetValue(o))", span="1693-1693"];
d1029 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop1.ShouldSerializeValue(o))", span="1694-1694"];
d1034 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop2.CanResetValue(o))", span="1700-1700"];
d1035 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop2.ShouldSerializeValue(o))", span="1701-1701"];
d1040 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop3.CanResetValue(o))", span="1707-1707"];
d1041 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop3.ShouldSerializeValue(o))", span="1708-1708"];
d1046 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop4.CanResetValue(o))", span="1714-1714"];
d1047 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(false, prop4.ShouldSerializeValue(o))", span="1715-1715"];
d1023 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(4, properties.Count)", span="1687-1687"];
d1025 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(''prop1'', prop1.Name)", span="1690-1690"];
d1026 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(object), prop1.PropertyType)", span="1691-1691"];
d1027 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(JObject), prop1.ComponentType)", span="1692-1692"];
d1031 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(''prop2'', prop2.Name)", span="1697-1697"];
d1032 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(object), prop2.PropertyType)", span="1698-1698"];
d1033 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(JObject), prop2.ComponentType)", span="1699-1699"];
d1037 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(''prop3'', prop3.Name)", span="1704-1704"];
d1038 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(object), prop3.PropertyType)", span="1705-1705"];
d1039 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(JObject), prop3.ComponentType)", span="1706-1706"];
d1043 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(''prop4'', prop4.Name)", span="1711-1711"];
d1044 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(object), prop4.PropertyType)", span="1712-1712"];
d1045 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Assert.AreEqual(typeof(JObject), prop4.ComponentType)", span="1713-1713"];
d1054 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", label="Assert.AreEqual(0, o.Count)", span="1723-1723"];
d1058 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", label="Assert.AreEqual(v.Value, TimeSpan.FromDays(1))", span="1730-1730"];
d1059 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", label="Assert.AreEqual(''1.00:00:00'', v.ToString())", span="1732-1732"];
d1066 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", label="Assert.AreEqual(v.Value, new Uri(''http://www.stuff.co.nz''))", span="1739-1739"];
d1067 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", label="Assert.AreEqual(''http://www.stuff.co.nz/'', v.ToString())", span="1741-1741"];
d1072 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", label="Assert.AreEqual(v.Value, new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1748-1748"];
d1073 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", label="Assert.AreEqual(''9065acf3-c820-467d-be50-8d4664beaf35'', v.ToString())", span="1750-1750"];
d1102 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="Assert.AreEqual(0, l1.Count)", span="1828-1828"];
d1104 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="Assert.AreEqual(0, l2.Count)", span="1831-1831"];
d1107 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="Assert.AreEqual(1, l1.Count)", span="1836-1836"];
d1109 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="Assert.AreEqual(1, l2.Count)", span="1839-1839"];
d1125 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="Assert.AreEqual(''Upper'', exactMatch)", span="1871-1871"];
d1126 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="Assert.AreEqual(''Lower'', ignoreCase)", span="1872-1872"];
d1134 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(null, a.GetValue(''NAME'', StringComparison.Ordinal))", span="1883-1883"];
d1135 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(null, a.GetValue(''NAME''))", span="1884-1884"];
d1136 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(null, a.GetValue(''TITLE''))", span="1885-1885"];
d1137 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(''Name!'', (string)a.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase))", span="1886-1886"];
d1138 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(''name!'', (string)a.GetValue(''name'', StringComparison.Ordinal))", span="1887-1887"];
d1139 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(null, a.GetValue(null, StringComparison.Ordinal))", span="1888-1888"];
d1140 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(null, a.GetValue(null))", span="1889-1889"];
d1143 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(null, v)", span="1893-1893"];
d1147 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(''Name!'', (string)v)", span="1899-1899"];
d1149 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.AreEqual(''name!'', (string)v)", span="1902-1902"];
d1178 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", label="Assert.AreEqual(@''{''''foo'''':''''bar'''',''''name'''':''''Daniel Wertheim'''',''''birthDate'''':''''0001-01-01T00:00:00'''',''''lastModified'''':''''0001-01-01T00:00:00''''}'', json)", span="1957-1957"];
d373 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="669-669"];
d374 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="670-670"];
d379 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="JProperty p3 = new JProperty(''Test1'', ''III'')", span="677-677"];
d387 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="689-689"];
d479 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", label="JProperty p = new JProperty(''Test'', 1)", span="804-804"];
d482 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="808-808"];
d487 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", label="JProperty p = new JProperty(''Test'', 1)", span="814-814"];
d494 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="JProperty p = new JProperty(''Test'', 1)", span="824-824"];
d502 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="837-837"];
d503 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="838-838"];
d512 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="852-852"];
d513 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="853-853"];
d515 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="856-856"];
d525 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="869-869"];
d526 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="870-870"];
d534 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="882-882"];
d535 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="883-883"];
d543 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="895-895"];
d544 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="896-896"];
d546 [cluster="lambda expression", label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="899-899"];
d550 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="908-908"];
d551 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="909-909"];
d553 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="912-912"];
d567 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="932-932"];
d568 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="933-933"];
d598 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="980-980"];
d599 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="981-981"];
d601 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="984-984"];
d610 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="997-997"];
d611 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="998-998"];
d613 [cluster="lambda expression", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1001-1001"];
d621 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1013-1013"];
d622 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1014-1014"];
d628 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1024-1024"];
d629 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1025-1025"];
d635 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1034-1034"];
d636 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1035-1035"];
d641 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", label="JProperty p = new JProperty(''Test'', 1)", span="1044-1044"];
d644 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="1048-1048"];
d647 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", label="JProperty p = new JProperty(''Test'', 1)", span="1054-1054"];
d654 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="JProperty p = new JProperty(''Test'', 1)", span="1064-1064"];
d661 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1077-1077"];
d662 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1078-1078"];
d670 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1092-1092"];
d671 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1093-1093"];
d673 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1096-1096"];
d691 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1122-1122"];
d692 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1123-1123"];
d700 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1136-1136"];
d701 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1137-1137"];
d703 [cluster="lambda expression", label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="1140-1140"];
d707 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1149-1149"];
d708 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1150-1150"];
d710 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1153-1153"];
d723 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1173-1173"];
d724 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1174-1174"];
d734 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1190-1190"];
d735 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1191-1191"];
d737 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1194-1194"];
d750 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1214-1214"];
d751 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1215-1215"];
d753 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1218-1218"];
d762 [cluster="lambda expression", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1231-1231"];
d763 [cluster="lambda expression", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1232-1232"];
d765 [cluster="lambda expression", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1235-1235"];
d861 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1380-1380"];
d862 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1381-1381"];
d868 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1390-1390"];
d869 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1391-1391"];
d876 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1401-1401"];
d877 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1402-1402"];
d882 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1414-1414"];
d887 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1421-1421"];
d904 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1441-1441"];
d905 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1442-1442"];
d910 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1454-1454"];
d915 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1461-1461"];
d1084 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="JObject o1 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1776-1781"];
d1086 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="JObject o2 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1785-1790"];
d1088 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="JObject o3 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 2),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1794-1799"];
d1090 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="JObject o4 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(2, 1)))", span="1803-1808"];
d1092 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="JObject o5 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1))", span="1812-1816"];
d1158 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="o.AddFirst(new JProperty(''foo'', ''bar''))", span="1918-1918"];
d22 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", label="var o = new JObject()", span="100-100"];
d31 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="var o = new JObject()", span="111-111"];
d38 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="JObject o = new JObject()", span="124-124"];
d56 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="JObject o = new JObject()", span="142-142"];
d73 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="JObject o = new JObject()", span="166-166"];
d84 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="JObject o = new JObject()", span="181-181"];
d100 [cluster="lambda expression", label="JObject o = new JObject()", span="198-198"];
d105 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="JObject o = new JObject()", span="207-207"];
d113 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", label="JObject o = new JObject()", span="221-221"];
d120 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="JObject o = new JObject()", span="231-231"];
d132 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="JObject o = new JObject()", span="247-247"];
d148 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="JObject o = new JObject()", span="270-270"];
d156 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="JObject o = new JObject()", span="281-281"];
d177 [cluster="lambda expression", label="JObject o = new JObject()", span="310-310"];
d184 [cluster="lambda expression", label="JObject o = new JObject()", span="321-321"];
d191 [cluster="lambda expression", label="JObject o = new JObject()", span="332-332"];
d198 [cluster="lambda expression", label="JObject o = new JObject()", span="342-342"];
d286 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="JObject o = new JObject()", span="478-478"];
d293 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="JObject o = new JObject()", span="493-493"];
d304 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="JObject o = new JObject()", span="512-512"];
d318 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="JObject o = new JObject()", span="534-534"];
d348 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="JObject o = new JObject()", span="617-617"];
d355 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="JObject moss = new JObject()", span="632-632"];
d362 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="JObject jen = new JObject()", span="649-649"];
d403 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="JObject o = new JObject()", span="708-708"];
d450 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="JObject o = new JObject()", span="766-766"];
d594 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", label="IList l = new JObject()", span="973-973"];
d746 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", label="IList<JToken> l = new JObject()", span="1207-1207"];
d770 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", label="IBindingList l = new JObject()", span="1246-1246"];
d774 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", label="IBindingList l = new JObject()", span="1253-1253"];
d778 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", label="IBindingList l = new JObject()", span="1260-1260"];
d782 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", label="IBindingList l = new JObject()", span="1267-1267"];
d786 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", label="IBindingList l = new JObject()", span="1274-1274"];
d790 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", label="IBindingList l = new JObject()", span="1281-1281"];
d794 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", label="IBindingList l = new JObject()", span="1288-1288"];
d798 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", label="IBindingList l = new JObject()", span="1295-1295"];
d802 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", label="IBindingList l = new JObject()", span="1302-1302"];
d810 [cluster="lambda expression", label="IBindingList l = new JObject()", span="1312-1312"];
d818 [cluster="lambda expression", label="IBindingList l = new JObject()", span="1322-1322"];
d823 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", label="IBindingList l = new JObject()", span="1330-1330"];
d831 [cluster="lambda expression", label="IBindingList l = new JObject()", span="1340-1340"];
d836 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", label="IBindingList l = new JObject()", span="1348-1348"];
d843 [cluster="lambda expression", label="IBindingList l = new JObject()", span="1357-1357"];
d848 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="JObject o = new JObject()", span="1365-1365"];
d941 [cluster="lambda expression", label="JObject o = new JObject()", span="1536-1536"];
d946 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", label="JObject o = new JObject()", span="1546-1546"];
d961 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="JObject o = new JObject()", span="1575-1575"];
d1113 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="Assert.IsTrue(JToken.DeepEquals(new JObject(), new JObject()))", span="1845-1845"];
d1114 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="JObject a = new JObject()", span="1847-1847"];
d1115 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="JObject b = new JObject()", span="1848-1848"];
d1130 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="JObject a = new JObject()", span="1878-1878"];
d234 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsFalse(reader.Read())", span="407-407"];
d558 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.IsFalse(l.Contains(p1))", span="920-920"];
d562 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.IsFalse(l.Contains(p2))", span="925-925"];
d595 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", label="Assert.IsFalse(l.IsFixedSize)", span="974-974"];
d638 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", label="Assert.IsFalse(l.IsSynchronized)", span="1038-1038"];
d715 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.IsFalse(l.Contains(p1))", span="1161-1161"];
d719 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.IsFalse(l.Contains(p2))", span="1166-1166"];
d711 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.IsFalse(l.Remove(p3))", span="1156-1156"];
d747 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", label="Assert.IsFalse(l.IsReadOnly)", span="1208-1208"];
d892 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1427-1427"];
d920 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1467-1467"];
d1089 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Assert.IsFalse(o1.DeepEquals(o3))", span="1801-1801"];
d1091 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Assert.IsFalse(o1.DeepEquals(o4))", span="1810-1810"];
d1093 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Assert.IsFalse(o1.DeepEquals(o5))", span="1818-1818"];
d1094 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Assert.IsFalse(o1.DeepEquals(null))", span="1820-1820"];
d1142 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.IsFalse(a.TryGetValue(''NAME'', StringComparison.Ordinal, out v))", span="1892-1892"];
d1144 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.IsFalse(a.TryGetValue(''NAME'', out v))", span="1895-1895"];
d1145 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.IsFalse(a.TryGetValue(''TITLE'', out v))", span="1896-1896"];
d1150 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.IsFalse(a.TryGetValue(null, StringComparison.Ordinal, out v))", span="1904-1904"];
d96 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', null);\r\n                o.Add(''PropertyNameValue'', null);\r\n            }, ''Can not add property PropertyNameValue to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="196-201"];
d174 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0);\r\n            }, @''Value cannot be null.\r\nParameter name: array'')", span="308-313"];
d181 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1);\r\n            }, @''arrayIndex is less than 0.\r\nParameter name: arrayIndex'')", span="319-324"];
d188 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1);\r\n            }, @''arrayIndex is equal to or greater than the length of array.'')", span="330-334"];
d195 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', new JValue(1));\r\n                o.Add(''PropertyNameValue2'', new JValue(2));\r\n                o.Add(''PropertyNameValue3'', new JValue(3));\r\n\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1);\r\n            }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="340-348"];
d253 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''[''''prop'''']'';\r\n                JObject.Parse(json);\r\n            }, ''Error reading JObject from JsonReader. Current JsonReader item is not an object: StartArray. Path '', line 1, position 1.'')", span="434-438"];
d280 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", label="ExceptionAssert.Throws<JsonReaderException>(() => { JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }''); }, ''Invalid property identifier character: ]. Path 'name', line 3, position 5.'')", span="469-472"];
d522 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="867-874"];
d531 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(''Bad!'');\r\n            }, ''Argument is not a JToken.'')", span="880-887"];
d540 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="893-902"];
d607 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="995-1005"];
d618 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l[0] = new JValue(true);\r\n            }, @''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1011-1018"];
d688 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                // string is implicitly converted to JValue\r\n                l.Add(''Bad!'');\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1120-1128"];
d697 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1134-1143"];
d759 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1229-1239"];
d807 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.ApplySort(null, ListSortDirection.Ascending);\r\n            }, ''Specified method is not supported.'')", span="1310-1314"];
d815 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.RemoveSort();\r\n            }, ''Specified method is not supported.'')", span="1320-1324"];
d828 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.Find(null, null);\r\n            }, ''Specified method is not supported.'')", span="1338-1342"];
d840 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", label="ExceptionAssert.Throws<JsonException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.AddNew();\r\n            }, ''Could not determine new value to add to 'Newtonsoft.Json.Linq.JObject'.'')", span="1355-1359"];
d938 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o[0] = new JValue(3);\r\n            }, ''Set JObject values with invalid key value: 0. Object property name expected.'')", span="1534-1538"];
d968 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o[''responseData''];\r\n            }, ''Can not convert Object to String.'')", span="1589-1600"];
d976 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o.Property(''responseData'');\r\n            }, ''Can not convert Object to String.'')", span="1606-1617"];
d985 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", label="ExceptionAssert.Throws<Exception>(() => { JObject.Parse(''{ foo:''); }, ''Unexpected end of content while loading JObject. Path 'foo', line 1, position 6.'')", span="1623-1623"];
d1007 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0'';\r\n\r\n                JsonReader reader = new JsonTextReader(new StringReader(jsonText));\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n\r\n                JToken.ReadFrom(reader);\r\n            }, ''Unexpected end of content while loading JObject. Path 'short.error.code', line 6, position 15.'')", span="1658-1675"];
d1077 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n            }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 10, position 2.'')", span="1756-1770"];
d2 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="var v = new JValue(s)", span="64-64"];
d315 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="JValue v = new JValue(s)", span="530-530"];
d350 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="o[''m''] = new JValue('''')", span="619-619"];
d351 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="o[''o''] = new JValue(@''<div class='s1'>'' + StringUtils.CarriageReturnLineFeed + @''</div>'')", span="620-620"];
d356 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="moss[''FirstName''] = new JValue(''Maurice'')", span="633-633"];
d357 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="moss[''LastName''] = new JValue(''Moss'')", span="634-634"];
d359 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="moss[''Department''] = new JValue(''IT'')", span="636-636"];
d360 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="moss[''JobTitle''] = new JValue(''Support'')", span="637-637"];
d528 [cluster="lambda expression", label="l.Add(new JValue(''Bad!''))", span="873-873"];
d114 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", label="((ICollection<KeyValuePair<string, JToken>>)o).Add(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="222-222"];
d674 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="l.Add(p3)", span="1098-1098"];
d694 [cluster="lambda expression", label="l.Add(''Bad!'')", span="1127-1127"];
d704 [cluster="lambda expression", label="l.Add(p3)", span="1142-1142"];
d375 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="JObject o = new JObject(p1, p2)", span="672-672"];
d504 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="IList l = new JObject(p1, p2)", span="839-839"];
d514 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="IList l = new JObject(p1, p2)", span="854-854"];
d527 [cluster="lambda expression", label="IList l = new JObject(p1, p2)", span="871-871"];
d536 [cluster="lambda expression", label="IList l = new JObject(p1, p2)", span="884-884"];
d545 [cluster="lambda expression", label="IList l = new JObject(p1, p2)", span="897-897"];
d552 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="IList l = new JObject(p1, p2)", span="910-910"];
d569 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="IList l = new JObject(p1, p2)", span="934-934"];
d600 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="IList l = new JObject(p1, p2)", span="982-982"];
d612 [cluster="lambda expression", label="IList l = new JObject(p1, p2)", span="999-999"];
d623 [cluster="lambda expression", label="IList l = new JObject(p1, p2)", span="1015-1015"];
d630 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", label="IList l = new JObject(p1, p2)", span="1026-1026"];
d637 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", label="IList l = new JObject(p1, p2)", span="1036-1036"];
d663 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="IList<JToken> l = new JObject(p1, p2)", span="1079-1079"];
d672 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="IList<JToken> l = new JObject(p1, p2)", span="1094-1094"];
d693 [cluster="lambda expression", label="IList<JToken> l = new JObject(p1, p2)", span="1124-1124"];
d702 [cluster="lambda expression", label="IList<JToken> l = new JObject(p1, p2)", span="1138-1138"];
d709 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="IList<JToken> l = new JObject(p1, p2)", span="1151-1151"];
d725 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="IList<JToken> l = new JObject(p1, p2)", span="1175-1175"];
d736 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="IList<JToken> l = new JObject(p1, p2)", span="1192-1192"];
d752 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="IList<JToken> l = new JObject(p1, p2)", span="1216-1216"];
d764 [cluster="lambda expression", label="IList<JToken> l = new JObject(p1, p2)", span="1233-1233"];
d863 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", label="ITypedList l = new JObject(p1, p2)", span="1382-1382"];
d870 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="ITypedList l = new JObject(p1, p2)", span="1392-1392"];
d878 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="JObject o = new JObject(p1, p2)", span="1403-1403"];
d906 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="JObject o = new JObject(p1, p2)", span="1443-1443"];
d5 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="69-71"];
d7 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="Assert.IsNull((string)o.title)", span="74-74"];
d17 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", label="JToken o = JToken.Parse(json)", span="92-92"];
d19 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="79-79"];
d32 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="var d = (IDictionary<string, JToken>)o", span="112-112"];
d34 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="o[''value''] = true", span="116-116"];
d36 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", span="109-109"];
d39 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="o.Add(''PropertyNameValue'', new JValue(1))", span="125-125"];
d41 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="JToken t", span="128-128"];
d51 [cluster="Newtonsoft.Json.Linq.JContainer.Children()", label="Entry Newtonsoft.Json.Linq.JContainer.Children()", span="251-251"];
d52 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
d53 [cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", span="514-514"];
d48 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", span="122-122"];
d49 [cluster="Newtonsoft.Json.Linq.JValue.JValue(long)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="70-70"];
d54 [cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="152-152"];
d57 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="o[''PropertyNameValue''] = new JValue(1)", span="143-143"];
d59 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="JToken t", span="146-146"];
d62 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="o[''PropertyNameValue''] = new JValue(2)", span="150-150"];
d66 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="o[''PropertyNameValue''] = null", span="156-156"];
d70 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", span="140-140"];
d71 [cluster="Newtonsoft.Json.Linq.JValue.CreateNull()", label="Entry Newtonsoft.Json.Linq.JValue.CreateNull()", span="547-547"];
d74 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="o.Add(''PropertyNameValue'', new JValue(1))", span="167-167"];
d81 [cluster="Newtonsoft.Json.Linq.JObject.Remove(string)", label="Entry Newtonsoft.Json.Linq.JObject.Remove(string)", span="498-498"];
d80 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="164-164"];
d83 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="JValue v = new JValue(1)", span="180-180"];
d93 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
d94 [cluster="System.Collections.Generic.ICollection<T>.Remove(T)", label="Entry System.Collections.Generic.ICollection<T>.Remove(T)", span="0-0"];
d85 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="o.Add(''PropertyNameValue'', v)", span="182-182"];
d92 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", span="178-178"];
d106 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="o.Add(''PropertyNameValue'', new JValue(1))", span="209-209"];
d108 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="o.Add(''PropertyNameValue1'', null)", span="212-212"];
d111 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", span="205-205"];
d117 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="219-219"];
d121 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="o.Add(''PropertyNameValue'', new JValue(1))", span="232-232"];
d123 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="JProperty p = (JProperty)o.Children().ElementAt(0)", span="235-235"];
d124 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="((ICollection<KeyValuePair<string, JToken>>)o).Clear()", span="237-237"];
d127 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", span="229-229"];
d133 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="o.Add(''PropertyNameValue'', v)", span="248-248"];
d135 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="bool contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="251-251"];
d137 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', v))", span="254-254"];
d139 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(2)))", span="257-257"];
d141 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue1'', new JValue(1)))", span="260-260"];
d143 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(default(KeyValuePair<string, JToken>))", span="263-263"];
d145 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="244-244"];
d149 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="o.Add(''PropertyNameValue'', new JValue(1))", span="271-271"];
d151 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="bool contains = ((IDictionary<string, JToken>)o).ContainsKey(''PropertyNameValue'')", span="274-274"];
d153 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="268-268"];
d159 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="o.Add(''PropertyNameValue3'', new JValue(3))", span="284-284"];
d161 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="KeyValuePair<string, JToken>[] a = new KeyValuePair<string, JToken>[5]", span="287-287"];
d162 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(a, 1)", span="289-289"];
d171 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="279-279"];
d206 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="JObject o = JObject.FromObject(raw)", span="361-361"];
d211 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="352-352"];
d217 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="JsonReader reader = new JTokenReader(o)", span="381-381"];
d218 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="383-383"];
d220 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="386-386"];
d222 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="389-389"];
d224 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="392-392"];
d226 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="395-395"];
d228 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="398-398"];
d230 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="401-401"];
d232 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Assert.IsTrue(reader.Read())", span="404-404"];
d245 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="raw = (PersonRaw)serializer.Deserialize(reader, typeof(PersonRaw))", span="424-424"];
d249 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="411-411"];
d263 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", label="JValue v = (JValue)a[0]", span="447-447"];
d265 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="442-442"];
d267 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", span="181-181"];
d271 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="bool? value = o.Value<bool?>(''foo'')", span="457-457"];
d273 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="json = @''{''''foo'''':null}''", span="460-460"];
d275 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="value = o.Value<bool?>(''foo'')", span="462-462"];
d277 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="453-453"];
d297 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="int i = 1", span="499-499"];
d298 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label=t, span="500-500"];
d301 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="i++", span="505-505"];
d308 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label=o, span="517-517"];
d307 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="int i = 1", span="516-516"];
d311 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="i++", span="522-522"];
d336 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Shortie shortie = new Shortie\r\n            {\r\n                Original = (string)json[''short''][''original''],\r\n                Short = (string)json[''short''][''short''],\r\n                Error = new ShortieException\r\n                {\r\n                    Code = (int)json[''short''][''error''][''code''],\r\n                    ErrorMessage = (string)json[''short''][''error''][''msg'']\r\n                }\r\n            }", span="590-599"];
d338 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Console.WriteLine(shortie.Error.ErrorMessage)", span="604-604"];
d344 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="573-573"];
d376 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="IList l = o", span="673-673"];
d380 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="p1.Replace(p3)", span="679-679"];
d388 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="p2.Replace(p4)", span="691-691"];
d397 [cluster="Newtonsoft.Json.Linq.JObject.Properties()", label="Entry Newtonsoft.Json.Linq.JObject.Properties()", span="229-229"];
d393 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="667-667"];
d406 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o[''StringValue''] = ''value1''", span="722-722"];
d439 [cluster="lambda expression", label="changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="712-712"];
d444 [cluster="lambda expression", label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="718-718"];
d440 [cluster="lambda expression", label="changingCount++", span="713-713"];
d445 [cluster="lambda expression", label="changedCount++", span="719-719"];
d412 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o[''StringValue''] = ''value1''", span="729-729"];
d415 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o[''StringValue''] = ''value2''", span="733-733"];
d421 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o[''StringValue''] = null", span="740-740"];
d427 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o[''NullValue''] = null", span="747-747"];
d433 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o[''NullValue''] = null", span="754-754"];
d436 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="701-701"];
d452 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o[''StringValue''] = ''value1''", span="774-774"];
d475 [cluster="lambda expression", label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="770-770"];
d476 [cluster="lambda expression", label="changedCount++", span="771-771"];
d456 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o[''StringValue''] = ''value1''", span="779-779"];
d458 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o[''StringValue''] = ''value2''", span="782-782"];
d462 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o[''StringValue''] = null", span="787-787"];
d466 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o[''NullValue''] = null", span="792-792"];
d470 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o[''NullValue''] = null", span="797-797"];
d472 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="761-761"];
d488 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", label="IList l = new JObject(p)", span="815-815"];
d492 [cluster="System.Collections.IList.IndexOf(object)", label="Entry System.Collections.IList.IndexOf(object)", span="0-0"];
d491 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="812-812"];
d495 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="IList l = new JObject(p)", span="825-825"];
d497 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="l.Clear()", span="829-829"];
d499 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="822-822"];
d505 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="object[] a = new object[l.Count]", span="841-841"];
d506 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="l.CopyTo(a, 0)", span="843-843"];
d509 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="835-835"];
d516 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="l.Add(p3)", span="858-858"];
d519 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="850-850"];
d564 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="906-906"];
d554 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="l.Remove(p3)", span="915-915"];
d556 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="l.Remove(p1)", span="918-918"];
d560 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="l.Remove(p2)", span="923-923"];
d571 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="l.Remove(p1)", span="939-939"];
d573 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="l.Remove(p2)", span="942-942"];
d575 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="930-930"];
d605 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="978-978"];
d602 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="l[0] = p3", span="986-986"];
d648 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", label="IList<JToken> l = new JObject(p)", span="1055-1055"];
d652 [cluster="System.Collections.Generic.IList<T>.IndexOf(T)", label="Entry System.Collections.Generic.IList<T>.IndexOf(T)", span="0-0"];
d651 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1052-1052"];
d655 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="IList<JToken> l = new JObject(p)", span="1065-1065"];
d657 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="l.Clear()", span="1069-1069"];
d659 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1062-1062"];
d664 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="JToken[] a = new JToken[l.Count]", span="1081-1081"];
d665 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="l.CopyTo(a, 0)", span="1083-1083"];
d668 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1075-1075"];
d677 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1090-1090"];
d721 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1147-1147"];
d713 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.IsTrue(l.Remove(p1))", span="1159-1159"];
d717 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.IsTrue(l.Remove(p2))", span="1164-1164"];
d727 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="l.Remove(p1)", span="1180-1180"];
d729 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="l.Remove(p2)", span="1183-1183"];
d731 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1171-1171"];
d743 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1188-1188"];
d738 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="l.Insert(1, p3)", span="1196-1196"];
d757 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1212-1212"];
d754 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="l[0] = p3", span="1220-1220"];
d772 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1244-1244"];
d776 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1251-1251"];
d780 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1258-1258"];
d784 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1265-1265"];
d788 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1272-1272"];
d792 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1279-1279"];
d796 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1286-1286"];
d800 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1293-1293"];
d838 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1346-1346"];
d853 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="JProperty p = (JProperty)newObject", span="1372-1372"];
d856 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1363-1363"];
d865 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1378-1378"];
d866 [cluster="System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", label="Entry System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", span="0-0"];
d901 [cluster="lambda expression", label="index = a.NewIndex", span="1411-1411"];
d898 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1399-1399"];
d883 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="o.Add(p3)", span="1416-1416"];
d900 [cluster="lambda expression", label="changedType = a.ListChangedType", span="1410-1410"];
d888 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="((IList<JToken>)o)[index.Value] = p4", span="1423-1423"];
d894 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="o[''Test1''] = 2", span="1430-1430"];
d929 [cluster="lambda expression", label="index = a.NewStartingIndex", span="1451-1451"];
d926 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1439-1439"];
d911 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="o.Add(p3)", span="1456-1456"];
d928 [cluster="lambda expression", label="changedType = a.Action", span="1450-1450"];
d916 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="((IList<JToken>)o)[index.Value] = p4", span="1463-1463"];
d922 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="o[''Test1''] = 2", span="1470-1470"];
d934 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", label="string searchAddress = (string)o[''Placemark''][0][''AddressDetails''][''Country''][''AdministrativeArea''][''SubAdministrativeArea''][''Locality''][''Thoroughfare''][''ThoroughfareName'']", span="1527-1527"];
d936 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1478-1478"];
d945 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", label="object key = ''TestKey''", span="1544-1544"];
d947 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", label="o[key] = new JValue(3)", span="1547-1547"];
d949 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1542-1542"];
d953 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", label="string value = (string)o[''Name'']", span="1561-1561"];
d955 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1553-1553"];
d958 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="JValue v = new JValue(dbNull)", span="1571-1571"];
d1020 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="JObject o = JObject.Parse(''{'prop1':12,'prop2':'hi!','prop3':null,'prop4':[1,2,3]}'')", span="1682-1682"];
d1024 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="PropertyDescriptor prop1 = properties[0]", span="1689-1689"];
d1050 [cluster="System.ComponentModel.PropertyDescriptor.CanResetValue(object)", label="Entry System.ComponentModel.PropertyDescriptor.CanResetValue(object)", span="0-0"];
d1030 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="PropertyDescriptor prop2 = properties[1]", span="1696-1696"];
d1051 [cluster="System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", label="Entry System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", span="0-0"];
d1036 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="PropertyDescriptor prop3 = properties[2]", span="1703-1703"];
d1042 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="PropertyDescriptor prop4 = properties[3]", span="1710-1710"];
d1048 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1680-1680"];
d1022 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="PropertyDescriptorCollection properties = descriptor.GetProperties()", span="1686-1686"];
d1053 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", label="JObject o = JObject.Parse(''{ /* A Comment */ }'')", span="1722-1722"];
d1055 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1720-1720"];
d1057 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", label="JValue v = (JValue)JToken.FromObject(TimeSpan.FromDays(1))", span="1729-1729"];
d1061 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
d1060 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1727-1727"];
d1063 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", label="Entry Newtonsoft.Json.Linq.JValue.ToString()", span="792-792"];
d1065 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", label="JValue v = (JValue)JToken.FromObject(new Uri(''http://www.stuff.co.nz''))", span="1738-1738"];
d1069 [cluster="System.Uri.Uri(string)", label="Entry System.Uri.Uri(string)", span="0-0"];
d1068 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1736-1736"];
d1071 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", label="JValue v = (JValue)JToken.FromObject(new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1747-1747"];
d1075 [cluster="System.Guid.Guid(string)", label="Entry System.Guid.Guid(string)", span="0-0"];
d1074 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1745-1745"];
d1101 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="IList<JToken> l1 = o.ToList<JToken>()", span="1827-1827"];
d1103 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="IList<KeyValuePair<string, JToken>> l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1830-1830"];
d1105 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="o = JObject.Parse(@''{'hi':null}'')", span="1833-1833"];
d1106 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="l1 = o.ToList<JToken>()", span="1835-1835"];
d1108 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1838-1838"];
d1110 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1824-1824"];
d1123 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="string exactMatch = (string)o.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase)", span="1865-1865"];
d1124 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="string ignoreCase = (string)o.GetValue(''Name'', StringComparison.OrdinalIgnoreCase)", span="1868-1868"];
d1127 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1858-1858"];
d1133 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="a[''title''] = ''Title!''", span="1881-1881"];
d1128 [cluster="Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", span="433-433"];
d1152 [cluster="Newtonsoft.Json.Linq.JObject.GetValue(string)", label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string)", span="420-420"];
d1141 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="JToken v", span="1891-1891"];
d1146 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.IsTrue(a.TryGetValue(''NAME'', StringComparison.OrdinalIgnoreCase, out v))", span="1898-1898"];
d1148 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Assert.IsTrue(a.TryGetValue(''name'', StringComparison.Ordinal, out v))", span="1901-1901"];
d1177 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", label="var json = JsonConvert.SerializeObject(p, settings)", span="1955-1955"];
d1179 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1942-1942"];
d372 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="667-667"];
d478 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="802-802"];
d480 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", label="IList l = new JObject(p)", span="805-805"];
d481 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", label="Assert.IsTrue(l.Contains(p))", span="807-807"];
d483 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="802-802"];
d485 [cluster="System.Collections.IList.Contains(object)", label="Entry System.Collections.IList.Contains(object)", span="0-0"];
d486 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="812-812"];
d493 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="822-822"];
d501 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="835-835"];
d511 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="850-850"];
d524 [cluster="lambda expression", label="Entry lambda expression", span="867-874"];
d533 [cluster="lambda expression", label="Entry lambda expression", span="880-887"];
d542 [cluster="lambda expression", label="Entry lambda expression", span="893-902"];
d547 [cluster="lambda expression", label="l.Add(p3)", span="901-901"];
d549 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="906-906"];
d559 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", label="Assert.IsTrue(l.Contains(p2))", span="921-921"];
d566 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="930-930"];
d597 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="978-978"];
d609 [cluster="lambda expression", label="Entry lambda expression", span="995-1005"];
d614 [cluster="lambda expression", label="l[0] = p3", span="1003-1003"];
d615 [cluster="lambda expression", label="l[1] = p3", span="1004-1004"];
d620 [cluster="lambda expression", label="Entry lambda expression", span="1011-1018"];
d627 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1022-1022"];
d634 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1032-1032"];
d640 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1042-1042"];
d642 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", label="IList<JToken> l = new JObject(p)", span="1045-1045"];
d643 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", label="Assert.IsTrue(l.Contains(p))", span="1047-1047"];
d645 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1042-1042"];
d146 [cluster="System.Collections.Generic.ICollection<T>.Contains(T)", label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0"];
d646 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1052-1052"];
d653 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1062-1062"];
d660 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1075-1075"];
d669 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1090-1090"];
d690 [cluster="lambda expression", label="Entry lambda expression", span="1120-1128"];
d699 [cluster="lambda expression", label="Entry lambda expression", span="1134-1143"];
d706 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1147-1147"];
d716 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", label="Assert.IsTrue(l.Contains(p2))", span="1162-1162"];
d722 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1171-1171"];
d733 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1188-1188"];
d749 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1212-1212"];
d761 [cluster="lambda expression", label="Entry lambda expression", span="1229-1239"];
d766 [cluster="lambda expression", label="l[0] = p3", span="1237-1237"];
d767 [cluster="lambda expression", label="l[1] = p3", span="1238-1238"];
d860 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1378-1378"];
d867 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1388-1388"];
d875 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1399-1399"];
d881 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="o.ListChanged += (s, a) =>\r\n            {\r\n                changedType = a.ListChangedType;\r\n                index = a.NewIndex;\r\n            }", span="1408-1412"];
d893 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1428-1428"];
d903 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1439-1439"];
d909 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="o._collectionChanged += (s, a) =>\r\n            {\r\n                changedType = a.Action;\r\n                index = a.NewStartingIndex;\r\n            }", span="1448-1452"];
d921 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1468-1468"];
d1083 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1774-1774"];
d1085 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Assert.IsTrue(o1.DeepEquals(o1))", span="1783-1783"];
d1096 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", span="283-283"];
d1097 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82"];
d1087 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Assert.IsTrue(o1.DeepEquals(o2))", span="1792-1792"];
d1157 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="var o = (JObject)token", span="1917-1917"];
d1159 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="o.WriteTo(writer)", span="1919-1919"];
d1164 [cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="566-566"];
d21 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="98-98"];
d23 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", label="o.Add(new JProperty(''novalue''))", span="101-101"];
d24 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", label="StringAssert.AreEqual(@''{\r\n  ''''novalue'''': null\r\n}'', o.ToString())", span="103-105"];
d30 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", span="109-109"];
d37 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", span="122-122"];
d55 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DictionaryItemShouldSet()", span="140-140"];
d72 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="164-164"];
d99 [cluster="lambda expression", label="Entry lambda expression", span="196-201"];
d101 [cluster="lambda expression", label="o.Add(''PropertyNameValue'', null)", span="199-199"];
d102 [cluster="lambda expression", label="o.Add(''PropertyNameValue'', null)", span="200-200"];
d104 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", span="205-205"];
d112 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="219-219"];
d119 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", span="229-229"];
d131 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="JValue v = new JValue(1)", span="246-246"];
d147 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="268-268"];
d155 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="279-279"];
d157 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="o.Add(''PropertyNameValue'', new JValue(1))", span="282-282"];
d158 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="283-283"];
d176 [cluster="lambda expression", label="Entry lambda expression", span="308-312"];
d178 [cluster="lambda expression", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0)", span="311-311"];
d183 [cluster="lambda expression", label="Entry lambda expression", span="319-323"];
d185 [cluster="lambda expression", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1)", span="322-322"];
d190 [cluster="lambda expression", label="Entry lambda expression", span="330-334"];
d192 [cluster="lambda expression", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1)", span="333-333"];
d197 [cluster="lambda expression", label="Entry lambda expression", span="340-348"];
d199 [cluster="lambda expression", label="o.Add(''PropertyNameValue'', new JValue(1))", span="343-343"];
d200 [cluster="lambda expression", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="344-344"];
d201 [cluster="lambda expression", label="o.Add(''PropertyNameValue3'', new JValue(3))", span="345-345"];
d202 [cluster="lambda expression", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1)", span="347-347"];
d285 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="476-476"];
d287 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="o[''val1''] = new JRaw(''1'')", span="479-479"];
d288 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="o[''val2''] = new JRaw(''1'')", span="480-480"];
d289 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="string json = o.ToString()", span="482-482"];
d292 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="491-491"];
d294 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="o.Add(''PropertyNameValue1'', new JValue(1))", span="494-494"];
d295 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="495-495"];
d296 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="JToken t = o", span="497-497"];
d303 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="510-510"];
d305 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="o.Add(''PropertyNameValue1'', new JValue(1))", span="513-513"];
d306 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="514-514"];
d319 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="o[''title''] = v", span="535-535"];
d320 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="string output = o.ToString()", span="537-537"];
d347 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="615-615"];
d349 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="o[''rc''] = new JValue(200)", span="618-618"];
d352 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="StringAssert.AreEqual(@''{\r\n  ''''rc'''': 200,\r\n  ''''m'''': '''''''',\r\n  ''''o'''': ''''<div class='s1'>\r\n</div>''''\r\n}'', o.ToString())", span="622-626"];
d354 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="630-630"];
d358 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="moss[''BirthDate''] = new JValue(new DateTime(1977, 12, 30))", span="635-635"];
d361 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="Console.WriteLine(moss.ToString())", span="639-639"];
d363 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="jen[''FirstName''] = ''Jen''", span="650-650"];
d364 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="jen[''LastName''] = ''Barber''", span="651-651"];
d365 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="jen[''BirthDate''] = new DateTime(1978, 3, 15)", span="652-652"];
d366 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="jen[''Department''] = ''IT''", span="653-653"];
d367 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="jen[''JobTitle''] = ''Manager''", span="654-654"];
d368 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="Console.WriteLine(jen.ToString())", span="656-656"];
d402 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="int changedCount = 0", span="706-706"];
d404 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o.PropertyChanging += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changingCount++;\r\n            }", span="709-714"];
d405 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="715-720"];
d449 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="int changedCount = 0", span="764-764"];
d451 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="767-772"];
d593 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="971-971"];
d745 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1205-1205"];
d769 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1244-1244"];
d773 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1251-1251"];
d777 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1258-1258"];
d781 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1265-1265"];
d785 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1272-1272"];
d789 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1279-1279"];
d793 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1286-1286"];
d797 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1293-1293"];
d801 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1300-1300"];
d803 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", label="l.AddIndex(null)", span="1304-1304"];
d809 [cluster="lambda expression", label="Entry lambda expression", span="1310-1314"];
d811 [cluster="lambda expression", label="l.ApplySort(null, ListSortDirection.Ascending)", span="1313-1313"];
d817 [cluster="lambda expression", label="Entry lambda expression", span="1320-1324"];
d819 [cluster="lambda expression", label="l.RemoveSort()", span="1323-1323"];
d822 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1328-1328"];
d824 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", label="l.RemoveIndex(null)", span="1332-1332"];
d830 [cluster="lambda expression", label="Entry lambda expression", span="1338-1342"];
d832 [cluster="lambda expression", label="l.Find(null, null)", span="1341-1341"];
d835 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1346-1346"];
d842 [cluster="lambda expression", label="Entry lambda expression", span="1355-1359"];
d844 [cluster="lambda expression", label="l.AddNew()", span="1358-1358"];
d847 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1363-1363"];
d849 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="o._addingNew += (s, e) => e.NewObject = new JProperty(''Property!'')", span="1366-1366"];
d850 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="IBindingList l = o", span="1368-1368"];
d940 [cluster="lambda expression", label="Entry lambda expression", span="1534-1538"];
d942 [cluster="lambda expression", label="o[0] = new JValue(3)", span="1537-1537"];
d962 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="o[''title''] = v", span="1576-1576"];
d963 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="string output = o.ToString()", span="1578-1578"];
d1112 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1843-1843"];
d238 [cluster="Unk.IsTrue", label="Entry Unk.IsTrue", span=""];
d1118 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="Assert.IsTrue(JToken.DeepEquals(a, b))", span="1853-1853"];
d1119 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="Assert.IsTrue(JToken.DeepEquals(b, a))", span="1854-1854"];
d1116 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="b.Add(''hi'', ''bye'')", span="1850-1850"];
d1117 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="b.Remove(''hi'')", span="1851-1851"];
d1129 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1876-1876"];
d1131 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="a[''Name''] = ''Name!''", span="1879-1879"];
d1132 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="a[''name''] = ''name!''", span="1880-1880"];
d235 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="370-370"];
d237 [cluster="Newtonsoft.Json.JsonReader.Read()", label="Entry Newtonsoft.Json.JsonReader.Read()", span="365-365"];
d596 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="971-971"];
d639 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1032-1032"];
d748 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1205-1205"];
d1098 [cluster="Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", span="118-118"];
d1095 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1774-1774"];
d1153 [cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", span="465-465"];
d1151 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1876-1876"];
d95 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="194-194"];
d97 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="194-194"];
d173 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="306-306"];
d175 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="306-306"];
d180 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="317-317"];
d182 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="317-317"];
d187 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="328-328"];
d189 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="328-328"];
d194 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="338-338"];
d196 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="338-338"];
d252 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="432-432"];
d254 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="432-432"];
d255 [cluster="lambda expression", label="Entry lambda expression", span="434-438"];
d279 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="467-467"];
d281 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="467-467"];
d282 [cluster="lambda expression", label="Entry lambda expression", span="469-472"];
d521 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="865-865"];
d523 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="865-865"];
d530 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="878-878"];
d532 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="878-878"];
d539 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="891-891"];
d541 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="891-891"];
d606 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="993-993"];
d608 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="993-993"];
d617 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1009-1009"];
d619 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1009-1009"];
d687 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1118-1118"];
d689 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1118-1118"];
d696 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1132-1132"];
d698 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1132-1132"];
d758 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1227-1227"];
d760 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1227-1227"];
d806 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1308-1308"];
d808 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1308-1308"];
d814 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1318-1318"];
d816 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1318-1318"];
d827 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1336-1336"];
d829 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1336-1336"];
d839 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1353-1353"];
d841 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1353-1353"];
d937 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1532-1532"];
d939 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1532-1532"];
d967 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1587-1587"];
d969 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1587-1587"];
d970 [cluster="lambda expression", label="Entry lambda expression", span="1589-1600"];
d975 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1604-1604"];
d977 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1604-1604"];
d978 [cluster="lambda expression", label="Entry lambda expression", span="1606-1617"];
d984 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1621-1621"];
d986 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1621-1621"];
d987 [cluster="lambda expression", label="Entry lambda expression", span="1623-1623"];
d1006 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1656-1656"];
d1008 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1656-1656"];
d1009 [cluster="lambda expression", label="Entry lambda expression", span="1658-1675"];
d1076 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1754-1754"];
d1078 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1754-1754"];
d1079 [cluster="lambda expression", label="Entry lambda expression", span="1756-1770"];
d1 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="string s = null", span="63-63"];
d3 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="dynamic o = JObject.FromObject(new { title = v })", span="65-65"];
d314 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="string s = null", span="529-529"];
d529 [cluster="lambda expression", label="Exit lambda expression", span="867-874"];
d520 [cluster="System.Collections.IList.Add(object)", label="Entry System.Collections.IList.Add(object)", span="0-0"];
d695 [cluster="lambda expression", label="Exit lambda expression", span="1120-1128"];
d705 [cluster="lambda expression", label="Exit lambda expression", span="1134-1143"];
d537 [cluster="lambda expression", label="l.Add(''Bad!'')", span="886-886"];
d570 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", label="l.RemoveAt(0)", span="937-937"];
d624 [cluster="lambda expression", label="l[0] = new JValue(true)", span="1017-1017"];
d631 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", label="Assert.IsNotNull(l.SyncRoot)", span="1028-1028"];
d726 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", label="l.RemoveAt(0)", span="1178-1178"];
d871 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="PropertyDescriptorCollection propertyDescriptors = l.GetItemProperties(null)", span="1394-1394"];
d879 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="ListChangedType? changedType = null", span="1405-1405"];
d907 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="NotifyCollectionChangedAction? changedType = null", span="1445-1445"];
d4 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="string output = o.ToString()", span="67-67"];
d12 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="184-184"];
d8 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="61-61"];
d14 [cluster="Unk.IsNull", label="Entry Unk.IsNull", span=""];
d16 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", label="string json = @''{ /*comment2*/\r\n        ''''Name'''': /*comment3*/ ''''Apple'''' /*comment4*/, /*comment5*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment6*/ [ /*comment7*/\r\n          ''''Small'''', /*comment8*/\r\n          ''''Medium'''' /*comment9*/,\r\n          /*comment10*/ ''''Large''''\r\n        /*comment11*/ ] /*comment12*/\r\n      } /*comment13*/''", span="81-90"];
d20 [cluster="Newtonsoft.Json.Linq.JToken.Parse(string)", label="Entry Newtonsoft.Json.Linq.JToken.Parse(string)", span="1896-1896"];
d15 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="79-79"];
d50 [cluster="Newtonsoft.Json.Linq.JObject.Add(string, Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JObject.Add(string, Newtonsoft.Json.Linq.JToken)", span="477-477"];
d82 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", span="178-178"];
d128 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
d129 [cluster="System.Collections.Generic.ICollection<T>.Clear()", label="Entry System.Collections.Generic.ICollection<T>.Clear()", span="0-0"];
d130 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="244-244"];
d154 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
d172 [cluster="System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", label="Entry System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", span="0-0"];
d205 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="354-359"];
d10 [cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="377-377"];
d204 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="352-352"];
d216 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="JObject o = JObject.FromObject(raw)", span="379-379"];
d236 [cluster="Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", span="44-44"];
d243 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="JsonReader reader = new JTokenReader(o)", span="422-422"];
d244 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="JsonSerializer serializer = new JsonSerializer()", span="423-423"];
d251 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="686-686"];
d240 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="411-411"];
d262 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", label="JArray a = (JArray)JsonConvert.DeserializeObject(json)", span="446-446"];
d260 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="442-442"];
d270 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="JObject o = (JObject)JsonConvert.DeserializeObject(json)", span="456-456"];
d278 [cluster="Newtonsoft.Json.Linq.JToken.Value<T>(object)", label="Entry Newtonsoft.Json.Linq.JToken.Value<T>(object)", span="313-313"];
d274 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="o = (JObject)JsonConvert.DeserializeObject(json)", span="461-461"];
d268 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="453-453"];
d302 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="491-491"];
d312 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="510-510"];
d335 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="JObject json = JObject.Parse(jsonText)", span="588-588"];
d337 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Console.WriteLine(shortie.Original)", span="601-601"];
d345 [cluster="Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", label="Entry Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", span="27-27"];
d346 [cluster="Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", label="Entry Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", span="35-35"];
d332 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
d333 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="573-573"];
d396 [cluster="Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", span="383-383"];
d438 [cluster="lambda expression", label="JObject s = (JObject)sender", span="711-711"];
d437 [cluster="lambda expression", label="Entry lambda expression", span="709-714"];
d441 [cluster="lambda expression", label="Exit lambda expression", span="709-714"];
d443 [cluster="lambda expression", label="JObject s = (JObject)sender", span="717-717"];
d442 [cluster="lambda expression", label="Entry lambda expression", span="715-720"];
d446 [cluster="lambda expression", label="Exit lambda expression", span="715-720"];
d1185 [label=changingCount, span=""];
d1186 [label=changedCount, span=""];
d398 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="701-701"];
d474 [cluster="lambda expression", label="JObject s = (JObject)sender", span="769-769"];
d473 [cluster="lambda expression", label="Entry lambda expression", span="767-772"];
d477 [cluster="lambda expression", label="Exit lambda expression", span="767-772"];
d1187 [label=changedCount, span=""];
d447 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="761-761"];
d484 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113"];
d500 [cluster="System.Collections.IList.Clear()", label="Entry System.Collections.IList.Clear()", span="0-0"];
d510 [cluster="System.Collections.ICollection.CopyTo(System.Array, int)", label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0"];
d565 [cluster="System.Collections.IList.Remove(object)", label="Entry System.Collections.IList.Remove(object)", span="0-0"];
d744 [cluster="System.Collections.Generic.IList<T>.Insert(int, T)", label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0"];
d851 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="object newObject = l.AddNew()", span="1369-1369"];
d852 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", label="Assert.IsNotNull(newObject)", span="1370-1370"];
d899 [cluster="lambda expression", label="Entry lambda expression", span="1408-1412"];
d902 [cluster="lambda expression", label="Exit lambda expression", span="1408-1412"];
d28 [cluster="Newtonsoft.Json.Linq.JContainer.Add(object)", label="Entry Newtonsoft.Json.Linq.JContainer.Add(object)", span="552-552"];
d927 [cluster="lambda expression", label="Entry lambda expression", span="1448-1452"];
d930 [cluster="lambda expression", label="Exit lambda expression", span="1448-1452"];
d933 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", label="JObject o = JObject.Parse(json)", span="1525-1525"];
d931 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1478-1478"];
d944 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1542-1542"];
d952 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", label="JObject o = JObject.Parse(json)", span="1560-1560"];
d950 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1553-1553"];
d957 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="DBNull dbNull = DBNull.Value", span="1570-1570"];
d966 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="190-190"];
d1019 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1680-1680"];
d1021 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", label="ICustomTypeDescriptor descriptor = o", span="1684-1684"];
d259 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="359-359"];
d1049 [cluster="System.ComponentModel.ICustomTypeDescriptor.GetProperties()", label="Entry System.ComponentModel.ICustomTypeDescriptor.GetProperties()", span="0-0"];
d1052 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1720-1720"];
d1056 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1727-1727"];
d1062 [cluster="Newtonsoft.Json.Linq.JToken.FromObject(object)", label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object)", span="1668-1668"];
d1064 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1736-1736"];
d1070 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1745-1745"];
d1100 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="JObject o = JObject.Parse(@''{}'')", span="1826-1826"];
d1111 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
d1099 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1824-1824"];
d1122 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="JObject o = JObject.Parse(@''{\r\n        'name': 'Lower',\r\n        'NAME': 'Upper'\r\n      }'')", span="1860-1863"];
d1121 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1858-1858"];
d1175 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", label="var p = new Person\r\n            {\r\n                Name = ''Daniel Wertheim'',\r\n            }", span="1944-1947"];
d1176 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", label="var settings = new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter> { new FooJsonConverter() },\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            }", span="1949-1953"];
d1184 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="570-570"];
d1174 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1942-1942"];
d538 [cluster="lambda expression", label="Exit lambda expression", span="880-887"];
d548 [cluster="lambda expression", label="Exit lambda expression", span="893-902"];
d616 [cluster="lambda expression", label="Exit lambda expression", span="995-1005"];
d625 [cluster="lambda expression", label="Exit lambda expression", span="1011-1018"];
d632 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1022-1022"];
d768 [cluster="lambda expression", label="Exit lambda expression", span="1229-1239"];
d873 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1388-1388"];
d880 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", label="int? index = null", span="1406-1406"];
d908 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", label="int? index = null", span="1446-1446"];
d1155 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="var token = JToken.FromObject(value, new JsonSerializer\r\n                {\r\n                    ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n                })", span="1911-1914"];
d1156 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="token.Type == JTokenType.Object", span="1915-1915"];
d1154 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1909-1909"];
d1161 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1909-1909"];
d1165 [cluster="Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", label="Entry Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="403-403"];
d25 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="98-98"];
d27 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string)", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string)", span="270-270"];
d29 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="404-404"];
d103 [cluster="lambda expression", label="Exit lambda expression", span="196-201"];
d179 [cluster="lambda expression", label="Exit lambda expression", span="308-312"];
d186 [cluster="lambda expression", label="Exit lambda expression", span="319-323"];
d193 [cluster="lambda expression", label="Exit lambda expression", span="330-334"];
d203 [cluster="lambda expression", label="Exit lambda expression", span="340-348"];
d291 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="476-476"];
d213 [cluster="Newtonsoft.Json.Linq.JRaw.JRaw(object)", label="Entry Newtonsoft.Json.Linq.JRaw.JRaw(object)", span="48-48"];
d290 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", label="StringAssert.AreEqual(@''{\r\n  ''''val1'''': 1,\r\n  ''''val2'''': 1\r\n}'', json)", span="484-487"];
d321 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="539-541"];
d353 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="615-615"];
d369 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="630-630"];
d370 [cluster="Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", span="125-125"];
d371 [cluster="System.DateTime.DateTime(int, int, int)", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
d401 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="int changingCount = 0", span="705-705"];
d448 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", label="object changed = null", span="763-763"];
d804 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1300-1300"];
d805 [cluster="System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", label="Entry System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", span="0-0"];
d812 [cluster="lambda expression", label="Exit lambda expression", span="1310-1314"];
d813 [cluster="System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", label="Entry System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", span="0-0"];
d820 [cluster="lambda expression", label="Exit lambda expression", span="1320-1324"];
d821 [cluster="System.ComponentModel.IBindingList.RemoveSort()", label="Entry System.ComponentModel.IBindingList.RemoveSort()", span="0-0"];
d825 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1328-1328"];
d826 [cluster="System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", label="Entry System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", span="0-0"];
d833 [cluster="lambda expression", label="Exit lambda expression", span="1338-1342"];
d834 [cluster="System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", label="Entry System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", span="0-0"];
d845 [cluster="lambda expression", label="Exit lambda expression", span="1355-1359"];
d846 [cluster="System.ComponentModel.IBindingList.AddNew()", label="Entry System.ComponentModel.IBindingList.AddNew()", span="0-0"];
d858 [cluster="lambda expression", label="e.NewObject = new JProperty(''Property!'')", span="1366-1366"];
d943 [cluster="lambda expression", label="Exit lambda expression", span="1534-1538"];
d964 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="1580-1582"];
d1120 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1843-1843"];
d214 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="370-370"];
d993 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="reader.Read()", span="1641-1641"];
d994 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="reader.Read()", span="1642-1642"];
d995 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="reader.Read()", span="1643-1643"];
d996 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="reader.Read()", span="1644-1644"];
d997 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="reader.Read()", span="1645-1645"];
d1012 [cluster="lambda expression", label="reader.Read()", span="1668-1668"];
d1013 [cluster="lambda expression", label="reader.Read()", span="1669-1669"];
d1014 [cluster="lambda expression", label="reader.Read()", span="1670-1670"];
d1015 [cluster="lambda expression", label="reader.Read()", span="1671-1671"];
d1016 [cluster="lambda expression", label="reader.Read()", span="1672-1672"];
d258 [cluster="lambda expression", label="Exit lambda expression", span="434-438"];
d256 [cluster="lambda expression", label="string json = @''[''''prop'''']''", span="436-436"];
d284 [cluster="lambda expression", label="Exit lambda expression", span="469-472"];
d283 [cluster="lambda expression", label="JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }'')", span="469-472"];
d974 [cluster="lambda expression", label="Exit lambda expression", span="1589-1600"];
d971 [cluster="lambda expression", label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1591-1595"];
d982 [cluster="lambda expression", label="Exit lambda expression", span="1606-1617"];
d979 [cluster="lambda expression", label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1608-1612"];
d989 [cluster="lambda expression", label="Exit lambda expression", span="1623-1623"];
d988 [cluster="lambda expression", label="JObject.Parse(''{ foo:'')", span="1623-1623"];
d1018 [cluster="lambda expression", label="Exit lambda expression", span="1658-1675"];
d1010 [cluster="lambda expression", label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0''", span="1660-1665"];
d1082 [cluster="lambda expression", label="Exit lambda expression", span="1756-1770"];
d1080 [cluster="lambda expression", label="string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987''", span="1758-1767"];
d0 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="61-61"];
d313 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="527-527"];
d576 [cluster="System.Collections.IList.RemoveAt(int)", label="Entry System.Collections.IList.RemoveAt(int)", span="0-0"];
d626 [cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(bool)", span="145-145"];
d633 [cluster="Unk.IsNotNull", label="Entry Unk.IsNotNull", span=""];
d732 [cluster="System.Collections.Generic.IList<T>.RemoveAt(int)", label="Entry System.Collections.Generic.IList<T>.RemoveAt(int)", span="0-0"];
d872 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", label="Assert.IsNull(propertyDescriptors)", span="1395-1395"];
d874 [cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0"];
d11 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
d1000 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="StringAssert.AreEqual(@''{\r\n  ''''code'''': 0,\r\n  ''''msg'''': ''''No action taken''''\r\n}'', o.ToString(Formatting.Indented))", span="1649-1652"];
d212 [cluster="Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", label="Entry Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", span="30-30"];
d242 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="JObject o = JObject.FromObject(raw)", span="420-420"];
d215 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="372-377"];
d250 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="433-433"];
d241 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="413-418"];
d261 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", label="string json = @''[new Date(1207285200000)]''", span="444-444"];
d266 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="703-703"];
d269 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", label="string json = @''{''''foo'''':true}''", span="455-455"];
d334 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''original'''':''''http://www.foo.com/'''',\r\n    ''''short'''':''''krehqk'''',\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="575-586"];
d329 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="Console.WriteLine(name)", span="568-568"];
d330 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="Console.WriteLine(smallest)", span="569-569"];
d399 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="object changing = null", span="703-703"];
d932 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", label="string json = @''{\r\n  ''''name'''': ''''Address: 435 North Mulford Road Rockford, IL 61107'''',\r\n  ''''Status'''': {\r\n    ''''code'''': 200,\r\n    ''''request'''': ''''geocode''''\r\n  },\r\n  ''''Placemark'''': [ {\r\n    ''''id'''': ''''p1'''',\r\n    ''''address'''': ''''435 N Mulford Rd, Rockford, IL 61107, USA'''',\r\n    ''''AddressDetails'''': {\r\n   ''''Accuracy'''' : 8,\r\n   ''''Country'''' : {\r\n      ''''AdministrativeArea'''' : {\r\n         ''''AdministrativeAreaName'''' : ''''IL'''',\r\n         ''''SubAdministrativeArea'''' : {\r\n            ''''Locality'''' : {\r\n               ''''LocalityName'''' : ''''Rockford'''',\r\n               ''''PostalCode'''' : {\r\n                  ''''PostalCodeNumber'''' : ''''61107''''\r\n               },\r\n               ''''Thoroughfare'''' : {\r\n                  ''''ThoroughfareName'''' : ''''435 N Mulford Rd''''\r\n               }\r\n            },\r\n            ''''SubAdministrativeAreaName'''' : ''''Winnebago''''\r\n         }\r\n      },\r\n      ''''CountryName'''' : ''''USA'''',\r\n      ''''CountryNameCode'''' : ''''US''''\r\n   }\r\n},\r\n    ''''ExtendedData'''': {\r\n      ''''LatLonBox'''': {\r\n        ''''north'''': 42.2753076,\r\n        ''''south'''': 42.2690124,\r\n        ''''east'''': -88.9964645,\r\n        ''''west'''': -89.0027597\r\n      }\r\n    },\r\n    ''''Point'''': {\r\n      ''''coordinates'''': [ -88.9995886, 42.2721596, 0 ]\r\n    }\r\n  } ]\r\n}''", span="1480-1523"];
d951 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", label="string json = @''{\r\n        ''''Name'''': ''''Name1'''',\r\n        ''''Name'''': ''''Name2''''\r\n      }''", span="1555-1558"];
d956 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1568-1568"];
d257 [cluster="lambda expression", label="JObject.Parse(json)", span="437-437"];
d325 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="JObject o = JObject.Parse(json)", span="558-558"];
d972 [cluster="lambda expression", label="JObject o = JObject.Parse(json)", span="1597-1597"];
d980 [cluster="lambda expression", label="JObject o = JObject.Parse(json)", span="1614-1614"];
d1081 [cluster="lambda expression", label="JObject o = JObject.Parse(json)", span="1769-1769"];
d1180 [cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="36-36"];
d1181 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="359-359"];
d1182 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d1183 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", span="1907-1907"];
d1162 [cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38"];
d1163 [cluster="Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", span="1679-1679"];
d1160 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", label="token.WriteTo(writer)", span="1922-1922"];
d322 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="527-527"];
d400 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", label="object changed = null", span="704-704"];
d857 [cluster="lambda expression", label="Entry lambda expression", span="1366-1366"];
d859 [cluster="lambda expression", label="Exit lambda expression", span="1366-1366"];
d965 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1568-1568"];
d992 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1640-1640"];
d998 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="JObject o = (JObject)JToken.ReadFrom(reader)", span="1647-1647"];
d1011 [cluster="lambda expression", label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1667-1667"];
d1017 [cluster="lambda expression", label="JToken.ReadFrom(reader)", span="1674-1674"];
d973 [cluster="lambda expression", label="string name = (string)o[''responseData'']", span="1599-1599"];
d981 [cluster="lambda expression", label="string name = (string)o.Property(''responseData'')", span="1616-1616"];
d999 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="Assert.IsNotNull(o)", span="1648-1648"];
d1001 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1627-1627"];
d1005 [cluster="Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", label="Entry Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="415-415"];
d326 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="string name = (string)o[''Name'']", span="560-560"];
d328 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="string smallest = (string)sizes[0]", span="565-565"];
d331 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="545-545"];
d324 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="string json = @''{\r\n        ''''Name'''': ''''Apple'''',\r\n        ''''Expiry'''': new Date(1230422400000),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': [\r\n          ''''Small'''',\r\n          ''''Medium'''',\r\n          ''''Large''''\r\n        ]\r\n      }''", span="547-556"];
d327 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="JArray sizes = (JArray)o[''Sizes'']", span="563-563"];
d1166 [cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="396-396"];
d991 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="1629-1638"];
d1002 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="72-72"];
d1003 [cluster="System.IO.StringReader.StringReader(string)", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
d1004 [cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1843-1843"];
d983 [cluster="Newtonsoft.Json.Linq.JObject.Property(string)", label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="239-239"];
d990 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1627-1627"];
d323 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="545-545"];
m0_14 [cluster="double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", file="ConvertUtilsTests.cs", label="Entry double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", span="0-0"];
m0_12 [cluster="string.ToCharArray()", file="ConvertUtilsTests.cs", label="Entry string.ToCharArray()", span="0-0"];
m0_91 [cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)", span="840-840"];
m0_178 [cluster="int.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)", file="ConvertUtilsTests.cs", label="Entry int.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)", span="0-0"];
m0_9 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=red, community=0, file="ConvertUtilsTests.cs", label="0: Assert.AreEqual(expectedValue.Value, d)", span="61-61"];
m0_13 [cluster="Newtonsoft.Json.Utilities.ConvertUtils.DoubleTryParse(char[], int, int, out double)", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Utilities.ConvertUtils.DoubleTryParse(char[], int, int, out double)", span="953-953"];
m0_133 [cluster="int.ToString(System.IFormatProvider)", file="ConvertUtilsTests.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m0_8 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", label="expectedValue != null", span="59-59"];
m0_134 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", span="216-216"];
m0_135 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''0000'')", span="218-218"];
m0_136 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''1234'')", span="219-219"];
m0_137 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''4321'')", span="220-220"];
m0_138 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''abcd'')", span="221-221"];
m0_139 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''dcba'')", span="222-222"];
m0_140 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''ffff'')", span="223-223"];
m0_141 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''ABCD'')", span="224-224"];
m0_142 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''DCBA'')", span="225-225"];
m0_143 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="HexParseSame(''FFFF'')", span="226-226"];
m0_144 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParse()", span="216-216"];
m0_132 [cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", span="746-746"];
m0_10 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=red, community=0, file="ConvertUtilsTests.cs", label="0: Assert.AreEqual(expectedValue, d2, ''DoubleTryParse result is not equal to double.Parse'')", span="63-63"];
m0_59 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", span="122-122"];
m0_60 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="long l", span="124-124"];
m0_61 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="char[] c = ''43443333222211111117''.ToCharArray()", span="125-125"];
m0_62 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="ParseResult result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="126-126"];
m0_63 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="127-127"];
m0_64 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="c = ''9223372036854775807''.ToCharArray()", span="129-129"];
m0_65 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="130-130"];
m0_66 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Success, result)", span="131-131"];
m0_67 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(9223372036854775807L, l)", span="132-132"];
m0_68 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="c = ''9223372036854775808''.ToCharArray()", span="134-134"];
m0_69 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="135-135"];
m0_70 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="136-136"];
m0_71 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="int i = 3", span="138-138"];
m0_72 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="i < 10", span="138-138"];
m0_73 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="c = (''9'' + i + ''23372036854775807'').ToCharArray()", span="140-140"];
m0_76 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="i++", span="138-138"];
m0_77 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="c = ''-9223372036854775808''.ToCharArray()", span="145-145"];
m0_74 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="141-141"];
m0_75 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="142-142"];
m0_78 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="146-146"];
m0_79 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Success, result)", span="147-147"];
m0_80 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(-9223372036854775808L, l)", span="148-148"];
m0_81 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="c = ''-9223372036854775809''.ToCharArray()", span="150-150"];
m0_82 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="151-151"];
m0_83 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="152-152"];
m0_84 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="int i = 3", span="154-154"];
m0_85 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="i < 10", span="154-154"];
m0_86 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="c = (''-9'' + i + ''23372036854775808'').ToCharArray()", span="156-156"];
m0_89 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="i++", span="154-154"];
m0_87 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="157-157"];
m0_88 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="158-158"];
m0_90 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", span="122-122"];
m0_0 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", span="45-45"];
m0_1 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=green, community=0, file="ConvertUtilsTests.cs", label="0: double d", span="47-47"];
m0_2 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=green, community=0, file="ConvertUtilsTests.cs", label="0: char[] c = s.ToCharArray()", span="48-48"];
m0_3 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", label="ParseResult result = ConvertUtils.DoubleTryParse(c, 0, c.Length, out d)", span="49-49"];
m0_4 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", color=green, community=0, file="ConvertUtilsTests.cs", label="0: double d2", span="51-51"];
m0_5 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", label="bool result2 = double.TryParse(s, NumberStyles.Float, CultureInfo.InvariantCulture, out d2)\r\n                && !s.StartsWith(''.'')\r\n                && s.IndexOf(''.e'', StringComparison.OrdinalIgnoreCase) == -1", span="52-54"];
m0_16 [cluster="string.IndexOf(string, System.StringComparison)", file="ConvertUtilsTests.cs", label="Entry string.IndexOf(string, System.StringComparison)", span="0-0"];
m0_17 [cluster="Unk.AreEqual", file="ConvertUtilsTests.cs", label="Entry Unk.AreEqual", span=""];
m0_92 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", span="163-163"];
m0_93 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="int i", span="165-165"];
m0_94 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="char[] c = ''43443333227''.ToCharArray()", span="166-166"];
m0_95 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="ParseResult result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="167-167"];
m0_96 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="168-168"];
m0_97 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="c = ''2147483647''.ToCharArray()", span="170-170"];
m0_98 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="171-171"];
m0_99 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Success, result)", span="172-172"];
m0_100 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(2147483647, i)", span="173-173"];
m0_101 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="c = ''2147483648''.ToCharArray()", span="175-175"];
m0_102 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="176-176"];
m0_103 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="177-177"];
m0_104 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="c = ''-2147483648''.ToCharArray()", span="179-179"];
m0_105 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="180-180"];
m0_106 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Success, result)", span="181-181"];
m0_107 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(-2147483648, i)", span="182-182"];
m0_108 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="c = ''-2147483649''.ToCharArray()", span="184-184"];
m0_109 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="185-185"];
m0_110 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="186-186"];
m0_111 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="int j = 2", span="188-188"];
m0_112 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="j < 10", span="188-188"];
m0_115 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="string t = j.ToString(CultureInfo.InvariantCulture) + k.ToString(CultureInfo.InvariantCulture) + ''47483647''", span="192-192"];
m0_120 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="j++", span="188-188"];
m0_113 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="int k = 2", span="190-190"];
m0_121 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="int j = 2", span="201-201"];
m0_114 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="k < 10", span="190-190"];
m0_119 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="k++", span="190-190"];
m0_116 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="c = t.ToCharArray()", span="194-194"];
m0_117 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="195-195"];
m0_118 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="197-197"];
m0_122 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="j < 10", span="201-201"];
m0_125 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="string t = ''-'' + j.ToString(CultureInfo.InvariantCulture) + k.ToString(CultureInfo.InvariantCulture) + ''47483648''", span="205-205"];
m0_130 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="j++", span="201-201"];
m0_123 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="int k = 2", span="203-203"];
m0_124 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="k < 10", span="203-203"];
m0_129 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="k++", span="203-203"];
m0_126 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="c = t.ToCharArray()", span="207-207"];
m0_127 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="208-208"];
m0_128 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(ParseResult.Overflow, result)", span="210-210"];
m0_131 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", span="163-163"];
m0_146 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", span="230-230"];
m0_147 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs", label="int value = ConvertUtils.HexTextToInt(''!0000''.ToCharArray(), 1, 5)", span="232-232"];
m0_148 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs", label="Assert.AreEqual(0, value)", span="233-233"];
m0_149 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseOffset()", span="230-230"];
m0_151 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", span="237-237"];
m0_152 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''-100''.ToCharArray(), 0, 4); }, ''Invalid hex character: -'')", span="239-239"];
m0_153 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''000g''.ToCharArray(), 0, 4); }, ''Invalid hex character: g'')", span="240-240"];
m0_154 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt('' ssd''.ToCharArray(), 0, 4); }, ''Invalid hex character:  '')", span="241-241"];
m0_155 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''000:''.ToCharArray(), 0, 4); }, ''Invalid hex character: :'')", span="242-242"];
m0_156 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="ExceptionAssert.Throws<FormatException>(() => { ConvertUtils.HexTextToInt(''000G''.ToCharArray(), 0, 4); }, ''Invalid hex character: G'')", span="243-243"];
m0_157 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseError()", span="237-237"];
m0_150 [cluster="Newtonsoft.Json.Utilities.ConvertUtils.HexTextToInt(char[], int, int)", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Utilities.ConvertUtils.HexTextToInt(char[], int, int)", span="1134-1134"];
m0_145 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", span="246-246"];
m0_174 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs", label="int v1 = int.Parse(text, NumberStyles.HexNumber, CultureInfo.InvariantCulture)", span="248-248"];
m0_175 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs", label="int v2 = ConvertUtils.HexTextToInt(text.ToCharArray(), 0, 4)", span="250-250"];
m0_176 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs", label="Assert.AreEqual(v1, v2, ''Invalid result when parsing hex text: '' + text)", span="252-252"];
m0_177 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.HexParseSame(string)", span="246-246"];
m0_6 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", label="Assert.AreEqual(expectedResult, result)", span="56-56"];
m0_7 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Post.Post()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.CreateJsonAnonymousObject.Post.Post()", span="38-38"];
m0_11 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.AssertDoubleTryParse(string, Newtonsoft.Json.Utilities.ParseResult, double?)", span="45-45"];
m0_18 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", span="68-68"];
m0_19 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''-123'', ParseResult.Success, -123)", span="70-70"];
m0_20 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''0'', ParseResult.Success, 0)", span="71-71"];
m0_21 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''123'', ParseResult.Success, 123)", span="72-72"];
m0_22 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''567.89'', ParseResult.Success, 567.89)", span="73-73"];
m0_23 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''-567.89'', ParseResult.Success, -567.89)", span="74-74"];
m0_24 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E23'', ParseResult.Success, 1E23)", span="75-75"];
m0_25 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1.1E23'', ParseResult.Success, 1.1E23)", span="76-76"];
m0_26 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E+23'', ParseResult.Success, 1E+23)", span="77-77"];
m0_27 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-1'', ParseResult.Success, 1E-1)", span="78-78"];
m0_28 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-2'', ParseResult.Success, 1E-2)", span="79-79"];
m0_29 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-3'', ParseResult.Success, 1E-3)", span="80-80"];
m0_30 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-4'', ParseResult.Success, 1E-4)", span="81-81"];
m0_31 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-5'', ParseResult.Success, 1E-5)", span="82-82"];
m0_32 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-10'', ParseResult.Success, 1E-10)", span="83-83"];
m0_33 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-20'', ParseResult.Success, 1E-20)", span="84-84"];
m0_34 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", color=red, community=0, file="ConvertUtilsTests.cs", label="0: AssertDoubleTryParse(''1'', ParseResult.Success, null)", span="85-85"];
m0_35 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-100'', ParseResult.Success, 1E-100)", span="91-91"];
m0_36 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-300'', ParseResult.Success, 1E-300)", span="92-92"];
m0_37 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E+309'', ParseResult.Overflow, null)", span="94-94"];
m0_38 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''-1E+5000'', ParseResult.Overflow, null)", span="95-95"];
m0_39 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''.1E23'', ParseResult.Invalid, null)", span="97-97"];
m0_40 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1..1E23'', ParseResult.Invalid, null)", span="98-98"];
m0_41 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1.E23'', ParseResult.Invalid, null)", span="99-99"];
m0_42 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E2.3'', ParseResult.Invalid, null)", span="100-100"];
m0_43 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1EE-10'', ParseResult.Invalid, null)", span="101-101"];
m0_44 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E-1-0'', ParseResult.Invalid, null)", span="102-102"];
m0_45 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1-E10'', ParseResult.Invalid, null)", span="103-103"];
m0_46 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse('''', ParseResult.Invalid, null)", span="104-104"];
m0_47 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''5.1231231E'', ParseResult.Invalid, null)", span="105-105"];
m0_48 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E+23i'', ParseResult.Invalid, null)", span="106-106"];
m0_49 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1EE+23'', ParseResult.Invalid, null)", span="107-107"];
m0_50 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1E++23'', ParseResult.Invalid, null)", span="108-108"];
m0_51 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''E23'', ParseResult.Invalid, null)", span="109-109"];
m0_52 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''4.94065645841247E-324'', ParseResult.Success, 4.94065645841247E-324)", span="111-111"];
m0_53 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''4.94065645841247E-342'', ParseResult.Success, 4.94065645841247E-342)", span="112-112"];
m0_54 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1.7976931348623157E+308'', ParseResult.Success, double.MaxValue)", span="114-114"];
m0_55 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''-1.7976931348623157E+308'', ParseResult.Success, double.MinValue)", span="115-115"];
m0_56 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''1.7976931348623159E+308'', ParseResult.Overflow, null)", span="117-117"];
m0_57 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="AssertDoubleTryParse(''-1.7976931348623159E+308'', ParseResult.Overflow, null)", span="118-118"];
m0_58 [cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", file="ConvertUtilsTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.DoubleTryParse()", span="68-68"];
m0_15 [cluster="string.StartsWith(string)", file="ConvertUtilsTests.cs", label="Entry string.StartsWith(string)", span="0-0"];
m0_171 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Entry lambda expression", span="243-243"];
m0_159 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Entry lambda expression", span="239-239"];
m0_162 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Entry lambda expression", span="240-240"];
m0_165 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Entry lambda expression", span="241-241"];
m0_168 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Entry lambda expression", span="242-242"];
m0_160 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="ConvertUtils.HexTextToInt(''-100''.ToCharArray(), 0, 4)", span="239-239"];
m0_161 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Exit lambda expression", span="239-239"];
m0_163 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="ConvertUtils.HexTextToInt(''000g''.ToCharArray(), 0, 4)", span="240-240"];
m0_164 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Exit lambda expression", span="240-240"];
m0_166 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="ConvertUtils.HexTextToInt('' ssd''.ToCharArray(), 0, 4)", span="241-241"];
m0_167 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Exit lambda expression", span="241-241"];
m0_169 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="ConvertUtils.HexTextToInt(''000:''.ToCharArray(), 0, 4)", span="242-242"];
m0_170 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Exit lambda expression", span="242-242"];
m0_172 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="ConvertUtils.HexTextToInt(''000G''.ToCharArray(), 0, 4)", span="243-243"];
m0_173 [cluster="lambda expression", file="ConvertUtilsTests.cs", label="Exit lambda expression", span="243-243"];
m0_158 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ConvertUtilsTests.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="369-369"];
m0_179 [file="ConvertUtilsTests.cs", label="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests", span=""];
m1_893 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="1449-1449"];
m1_894 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''true''))", span="1451-1451"];
m1_895 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsBytes(); }, ''Unexpected character encountered while parsing value: t. Path '', line 1, position 1.'')", span="1453-1453"];
m1_896 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="1449-1449"];
m1_1949 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", span="2991-2991"];
m1_1950 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(''{\''Test1\'':false}''))", span="2993-2993"];
m1_1951 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2995-2995"];
m1_1952 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2996-2996"];
m1_1955 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3001-3001"];
m1_1956 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(reader.Read())", span="3002-3002"];
m1_1954 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''false'', s)", span="2999-2999"];
m1_1953 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="string s = reader.ReadAsString()", span="2998-2998"];
m1_1957 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Boolean()", span="2991-2991"];
m1_1229 [cluster="System.Text.StringBuilder.StringBuilder()", file="JsonTextReaderTest.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m1_269 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", span="467-467"];
m1_271 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="473-473"];
m1_272 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="475-475"];
m1_274 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="478-478"];
m1_276 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="481-481"];
m1_279 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="485-485"];
m1_281 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(jsonTextReader.Read())", span="488-488"];
m1_273 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="476-476"];
m1_275 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="479-479"];
m1_277 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="482-482"];
m1_278 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(@''/Date(9467082_PIE_340000-0631)/'', jsonTextReader.Value)", span="483-483"];
m1_280 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="486-486"];
m1_270 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="string json = @''{\r\n    ChildId: '\/Date(9467082_PIE_340000-0631)\/'\r\n}''", span="469-471"];
m1_282 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadMSDateAsString()", span="467-467"];
m1_1244 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1923-1923"];
m1_1247 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="JsonReader jsonReader = new JsonTextReader(sr)", span="1933-1933"];
m1_1246 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="StringReader sr = new StringReader(input)", span="1931-1931"];
m1_1249 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="1936-1936"];
m1_1251 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1939-1939"];
m1_1252 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.Value, double.NaN)", span="1940-1940"];
m1_1254 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1943-1943"];
m1_1255 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.Value, double.PositiveInfinity)", span="1944-1944"];
m1_1257 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1947-1947"];
m1_1258 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.Value, double.NegativeInfinity)", span="1948-1948"];
m1_1260 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="1951-1951"];
m1_1248 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="1935-1935"];
m1_1250 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="1938-1938"];
m1_1253 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="1942-1942"];
m1_1256 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="1946-1946"];
m1_1259 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="1950-1950"];
m1_1245 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="string input = @''[\r\n  NaN,\r\n  Infinity,\r\n  -Infinity\r\n]''", span="1925-1929"];
m1_1261 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1923-1923"];
m1_728 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", span="1186-1186"];
m1_729 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(''n''))", span="1188-1188"];
m1_730 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => reader.Read(), ''Unexpected end when reading JSON. Path '', line 1, position 1.'')", span="1189-1189"];
m1_731 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndAfterReadingN()", span="1186-1186"];
m1_1624 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="2482-2482"];
m1_1626 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2486-2486"];
m1_1627 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2488-2488"];
m1_1629 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2491-2491"];
m1_1635 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2499-2499"];
m1_1628 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2489-2489"];
m1_1630 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2492-2492"];
m1_1632 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="2495-2495"];
m1_1633 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2496-2496"];
m1_1634 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(new DateTimeOffset(new DateTime(2011, 8, 1, 21, 25, 0, DateTimeKind.Utc), TimeSpan.Zero), reader.Value)", span="2497-2497"];
m1_1636 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2500-2500"];
m1_1625 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="string json = @''{''''Offset'''':''''2011-08-01T21:25Z''''}''", span="2484-2484"];
m1_1631 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="reader.ReadAsDateTimeOffset()", span="2494-2494"];
m1_1637 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="2482-2482"];
m1_13 [cluster="System.DateTime.ToUniversalTime()", file="JsonTextReaderTest.cs", label="Entry System.DateTime.ToUniversalTime()", span="0-0"];
m1_1622 [cluster="System.TimeSpan.FromMinutes(double)", file="JsonTextReaderTest.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m1_925 [cluster="Unk.IsNull", file="JsonTextReaderTest.cs", label="Entry Unk.IsNull", span=""];
m1_934 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="1495-1495"];
m1_941 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="1534-1534"];
m1_938 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="StringReader sr = new StringReader(newLinesText)", span="1528-1528"];
m1_942 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1535-1535"];
m1_944 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1538-1538"];
m1_947 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1542-1542"];
m1_949 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1545-1545"];
m1_953 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1550-1550"];
m1_956 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1554-1554"];
m1_959 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1558-1558"];
m1_962 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1562-1562"];
m1_964 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1565-1565"];
m1_966 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1568-1568"];
m1_968 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1571-1571"];
m1_971 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1575-1575"];
m1_973 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1578-1578"];
m1_975 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1581-1581"];
m1_946 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(newLinesText + ''name1'' + newLinesText, reader.Value)", span="1540-1540"];
m1_961 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(newLinesText + ''blah comment'' + newLinesText, reader.Value)", span="1560-1560"];
m1_943 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(7, reader.LineNumber)", span="1536-1536"];
m1_945 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(31, reader.LineNumber)", span="1539-1539"];
m1_948 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(37, reader.LineNumber)", span="1543-1543"];
m1_950 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(55, reader.LineNumber)", span="1546-1546"];
m1_951 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1547-1547"];
m1_952 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="1548-1548"];
m1_954 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(61, reader.LineNumber)", span="1551-1551"];
m1_955 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1L, reader.Value)", span="1552-1552"];
m1_957 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(73, reader.LineNumber)", span="1555-1555"];
m1_958 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(null, reader.Value)", span="1556-1556"];
m1_960 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(91, reader.LineNumber)", span="1559-1559"];
m1_963 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(97, reader.LineNumber)", span="1563-1563"];
m1_965 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(109, reader.LineNumber)", span="1566-1566"];
m1_967 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(115, reader.LineNumber)", span="1569-1569"];
m1_969 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(133, reader.LineNumber)", span="1572-1572"];
m1_970 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''name2'', reader.Value)", span="1573-1573"];
m1_972 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(139, reader.LineNumber)", span="1576-1576"];
m1_974 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(145, reader.LineNumber)", span="1579-1579"];
m1_976 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(151, reader.LineNumber)", span="1582-1582"];
m1_936 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="string json =\r\n                newLinesText\r\n                + ''{'' + newLinesText\r\n                + ''''' + newLinesText\r\n                + ''name1'' + newLinesText\r\n                + ''''' + newLinesText\r\n                + '':'' + newLinesText\r\n                + ''['' + newLinesText\r\n                + ''new'' + newLinesText\r\n                + ''Date'' + newLinesText\r\n                + ''('' + newLinesText\r\n                + ''1'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''null'' + newLinesText\r\n                + ''/*'' + newLinesText\r\n                + ''blah comment'' + newLinesText\r\n                + ''*/'' + newLinesText\r\n                + '')'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''1.1111'' + newLinesText\r\n                + '']'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''name2'' + newLinesText\r\n                + '':'' + newLinesText\r\n                + ''{'' + newLinesText\r\n                + ''}'' + newLinesText\r\n                + ''}'' + newLinesText", span="1499-1525"];
m1_939 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="sr.ReadLine() != null", span="1529-1529"];
m1_935 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="string newLinesText = StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed + StringUtils.LineFeed + StringUtils.CarriageReturnLineFeed + '' '' + StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed", span="1497-1497"];
m1_937 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="int count = 0", span="1527-1527"];
m1_940 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="count++", span="1531-1531"];
m1_977 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="1495-1495"];
m1_2870 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", span="4352-4352"];
m1_2874 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, UnmanagedResourceFakingJsonReader.DisposalCalls)", span="4357-4357"];
m1_2873 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs", label="GC.WaitForPendingFinalizers()", span="4356-4356"];
m1_2872 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs", label="GC.Collect()", span="4355-4355"];
m1_2871 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs", label="UnmanagedResourceFakingJsonReader.CreateAndDispose()", span="4354-4354"];
m1_2875 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.DisposeSupressesFinalization()", span="4352-4352"];
m1_2503 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", span="3843-3843"];
m1_2505 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3847-3847"];
m1_2506 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsString(); }, ''Unexpected end when reading JSON. Path '', line 1, position 3.'')", span="3849-3849"];
m1_2504 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="string json = @''tru''", span="3845-3845"];
m1_2507 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_UnexpectedEnd()", span="3843-3843"];
m1_1982 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="3040-3040"];
m1_1984 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3043-3043"];
m1_1983 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs", label="string json = ''new Date,()''", span="3042-3042"];
m1_1985 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { Assert.IsTrue(reader.Read()); }, ''Unexpected character while parsing constructor: ,. Path '', line 1, position 8.'')", span="3045-3045"];
m1_1986 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="3040-3040"];
m1_915 [cluster="System.Convert.ToBase64String(byte[])", file="JsonTextReaderTest.cs", label="Entry System.Convert.ToBase64String(byte[])", span="0-0"];
m1_192 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", span="348-348"];
m1_194 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="355-355"];
m1_195 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="357-357"];
m1_197 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="360-360"];
m1_199 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="363-363"];
m1_201 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="366-366"];
m1_203 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="369-369"];
m1_207 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="374-374"];
m1_209 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(jsonTextReader.Read())", span="377-377"];
m1_196 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="358-358"];
m1_198 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="361-361"];
m1_200 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonTextReader.TokenType)", span="364-364"];
m1_202 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="367-367"];
m1_204 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonTextReader.TokenType)", span="370-370"];
m1_205 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(BigInteger), jsonTextReader.ValueType)", span="371-371"];
m1_206 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(BigInteger.Parse(''333333333333333333333333333333333333333''), jsonTextReader.Value)", span="372-372"];
m1_208 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="375-375"];
m1_212 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(BigInteger.Parse(''333333333333333333333333333333333333333''), i)", span="381-381"];
m1_193 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="string json = @''{\r\n    ParentId: 1,\r\n    ChildId: 333333333333333333333333333333333333333,\r\n}''", span="350-353"];
m1_210 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="JObject o = JObject.Parse(json)", span="379-379"];
m1_211 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="var i = (BigInteger)((JValue)o[''ChildId'']).Value", span="380-380"];
m1_213 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBigInteger()", span="348-348"];
m1_1672 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="2555-2555"];
m1_1674 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2559-2559"];
m1_1675 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2561-2561"];
m1_1677 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2564-2564"];
m1_1676 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2562-2562"];
m1_1678 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2565-2565"];
m1_1680 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2568-2568"];
m1_1681 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="2569-2569"];
m1_1682 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1m, reader.Value)", span="2570-2570"];
m1_1673 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="string json = @''{''''Name'''':1}''", span="2557-2557"];
m1_1679 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="reader.ReadAsDecimal()", span="2567-2567"];
m1_1683 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="2555-2555"];
m1_1231 [cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="422-422"];
m1_427 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="698-698"];
m1_429 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs", label="JsonReader jsonReader = new JsonTextReader(new StringReader(input))", span="721-721"];
m1_428 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs", label="string input = @''{\r\n''''matches'''' : [\r\n{''''t'''':''''C'''', ''''n'''':''''Citigroup Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''662713''''}\r\n,{''''t'''':''''CHL'''', ''''n'''':''''China Mobile Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''660998''''}\r\n,{''''t'''':''''PTR'''', ''''n'''':''''PetroChina Company Limited (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''664536''''}\r\n,{''''t'''':''''RIO'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''671472''''}\r\n,{''''t'''':''''RIOPR'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''3512643''''}\r\n,{''''t'''':''''CSCO'''', ''''n'''':''''Cisco Systems, Inc.'''', ''''e'''':''''NASDAQ'''', ''''id'''':''''99624''''}\r\n,{''''t'''':''''CVX'''', ''''n'''':''''Chevron Corporation'''', ''''e'''':''''NYSE'''', ''''id'''':''''667226''''}\r\n,{''''t'''':''''TM'''', ''''n'''':''''Toyota Motor Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''655880''''}\r\n,{''''t'''':''''JPM'''', ''''n'''':''''JPMorgan Chase \\x26 Co.'''', ''''e'''':''''NYSE'''', ''''id'''':''''665639''''}\r\n,{''''t'''':''''COP'''', ''''n'''':''''ConocoPhillips'''', ''''e'''':''''NYSE'''', ''''id'''':''''1691168''''}\r\n,{''''t'''':''''LFC'''', ''''n'''':''''China Life Insurance Company Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''688679''''}\r\n,{''''t'''':''''NOK'''', ''''n'''':''''Nokia Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''657729''''}\r\n,{''''t'''':''''KO'''', ''''n'''':''''The Coca-Cola Company'''', ''''e'''':''''NYSE'''', ''''id'''':''''6550''''}\r\n,{''''t'''':''''VZ'''', ''''n'''':''''Verizon Communications Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''664887''''}\r\n,{''''t'''':''''AMX'''', ''''n'''':''''America Movil S.A.B de C.V. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''665834''''}],\r\n''''all'''' : false\r\n}\r\n''", span="700-719"];
m1_430 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="723-723"];
m1_431 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="698-698"];
m1_451 [cluster="System.Text.UTF8Encoding.UTF8Encoding(bool)", file="JsonTextReaderTest.cs", label="Entry System.Text.UTF8Encoding.UTF8Encoding(bool)", span="0-0"];
m1_2441 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", span="3762-3762"];
m1_2443 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3766-3766"];
m1_2444 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(true, reader.ReadAsBoolean())", span="3768-3768"];
m1_2445 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(null, reader.ReadAsBoolean())", span="3769-3769"];
m1_2442 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs", label="string json = '\0' + @''true'' + '\0' + '\0'", span="3764-3764"];
m1_2446 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_NullChar()", span="3762-3762"];
m1_1655 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JsonTextReaderTest.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m1_1623 [cluster="System.TimeSpan.Add(System.TimeSpan)", file="JsonTextReaderTest.cs", label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0"];
m1_14 [cluster="Newtonsoft.Json.JavaScriptConvert.ConvertDateTimeToJavaScriptTicks(System.DateTimeOffset)", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.JavaScriptConvert.ConvertDateTimeToJavaScriptTicks(System.DateTimeOffset)", span="138-138"];
m1_2581 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="3952-3952"];
m1_2583 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))\r\n            {\r\n                MaxDepth = 1\r\n            }", span="3956-3959"];
m1_2584 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3961-3961"];
m1_2582 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs", label="string json = ''[[]]''", span="3954-3954"];
m1_2585 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { Assert.IsTrue(reader.Read()); }, ''The reader's MaxDepth of 1 has been exceeded. Path '[0]', line 1, position 2.'')", span="3963-3963"];
m1_2586 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="3952-3952"];
m1_1237 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(decimal)", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(decimal)", span="1028-1028"];
m1_215 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409"];
m1_1290 [cluster="System.Convert.ToInt32(char)", file="JsonTextReaderTest.cs", label="Entry System.Convert.ToInt32(char)", span="0-0"];
m1_1516 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="2321-2321"];
m1_1517 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1.0]''))", span="2323-2323"];
m1_1518 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsBytes(); }, ''Unexpected token when reading bytes: Float. Path '[0]', line 1, position 4.'')", span="2325-2325"];
m1_1519 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="2321-2321"];
m1_1376 [cluster="System.Text.Encoding.GetString(byte[], int, int)", file="JsonTextReaderTest.cs", label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0"];
m1_2721 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="4145-4145"];
m1_2723 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(toggleReaderError)", span="4148-4148"];
m1_2722 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ToggleReaderError toggleReaderError = new ToggleReaderError(new StringReader(''{'first':1,'second':2,'third':3}''))", span="4147-4147"];
m1_2724 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="4150-4150"];
m1_2729 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="4159-4159"];
m1_2734 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="4168-4168"];
m1_2730 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''first'', jsonTextReader.Value)", span="4160-4160"];
m1_2735 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1L, jsonTextReader.Value)", span="4169-4169"];
m1_2726 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4154-4154"];
m1_2727 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4155-4155"];
m1_2732 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4164-4164"];
m1_2737 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4173-4173"];
m1_2738 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4174-4174"];
m1_2739 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<Exception>(() => jsonTextReader.Read(), ''Read error'')", span="4175-4175"];
m1_2725 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="toggleReaderError.Error = true", span="4152-4152"];
m1_2728 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="toggleReaderError.Error = false", span="4157-4157"];
m1_2731 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="toggleReaderError.Error = true", span="4162-4162"];
m1_2733 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="toggleReaderError.Error = false", span="4166-4166"];
m1_2736 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="toggleReaderError.Error = true", span="4171-4171"];
m1_2740 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="toggleReaderError.Error = false", span="4177-4177"];
m1_2741 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="4145-4145"];
m1_387 [cluster="object.ToString()", file="JsonTextReaderTest.cs", label="Entry object.ToString()", span="0-0"];
m1_34 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaNAndInifinity_ReadAsDouble()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="108-108"];
m1_1082 [cluster="int.ToString()", file="JsonTextReaderTest.cs", label="Entry int.ToString()", span="0-0"];
m1_2433 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", span="3752-3752"];
m1_2435 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3756-3756"];
m1_2436 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsBoolean(); }, ''Unexpected end when reading JSON. Path '', line 1, position 3.'')", span="3758-3758"];
m1_2434 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="string json = @''tru''", span="3754-3754"];
m1_2437 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBoolean_UnexpectedEnd()", span="3752-3752"];
m1_2579 [cluster="double.ToString(System.IFormatProvider)", file="JsonTextReaderTest.cs", label="Entry double.ToString(System.IFormatProvider)", span="0-0"];
m1_2862 [cluster="System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, int)", file="JsonTextReaderTest.cs", label="Entry System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, int)", span="0-0"];
m1_886 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="1441-1441"];
m1_887 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\''))", span="1443-1443"];
m1_888 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.Read(); }, ''Unterminated string. Expected delimiter: '. Path '', line 1, position 3.'')", span="1445-1445"];
m1_889 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="1441-1441"];
m1_1416 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="2181-2181"];
m1_1418 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonReader = new JsonTextReader(s)", span="2184-2184"];
m1_1417 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="2183-2183"];
m1_1419 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonReader.Read())", span="2186-2186"];
m1_1433 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonReader.Read())", span="2204-2204"];
m1_1435 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(jsonReader.Read())", span="2207-2207"];
m1_1420 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="2187-2187"];
m1_1422 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2190-2190"];
m1_1423 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="2191-2191"];
m1_1424 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(250, jsonReader.Value)", span="2192-2192"];
m1_1426 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2195-2195"];
m1_1427 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="2196-2196"];
m1_1428 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(250, jsonReader.Value)", span="2197-2197"];
m1_1430 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2200-2200"];
m1_1431 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="2201-2201"];
m1_1432 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(250, jsonReader.Value)", span="2202-2202"];
m1_1434 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="2205-2205"];
m1_1421 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="jsonReader.ReadAsInt32()", span="2189-2189"];
m1_1425 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="jsonReader.ReadAsInt32()", span="2194-2194"];
m1_1429 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="jsonReader.ReadAsInt32()", span="2199-2199"];
m1_1436 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="2181-2181"];
m1_1991 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="3049-3049"];
m1_1993 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="3052-3052"];
m1_1994 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3054-3054"];
m1_1996 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3057-3057"];
m1_1998 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3060-3060"];
m1_2000 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3063-3063"];
m1_2002 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3066-3066"];
m1_2004 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3069-3069"];
m1_2006 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3072-3072"];
m1_2008 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3075-3075"];
m1_2010 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3078-3078"];
m1_2012 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(reader.Read())", span="3081-3081"];
m1_1995 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="3055-3055"];
m1_1997 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="3058-3058"];
m1_1999 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="3061-3061"];
m1_2001 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="3064-3064"];
m1_2003 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="3067-3067"];
m1_2005 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="3070-3070"];
m1_2007 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="3073-3073"];
m1_2009 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="3076-3076"];
m1_2011 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="3079-3079"];
m1_1992 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="string json = ''\x00a0{\x00a0'h\x00a0i\x00a0'\x00a0:\x00a0[\x00a0true\x00a0,\x00a0new\x00a0Date\x00a0(\x00a0)\x00a0]\x00a0/*\x00a0comment\x00a0*/\x00a0}\x00a0''", span="3051-3051"];
m1_2013 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="3049-3049"];
m1_2742 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="4430-4430"];
m1_2915 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonTextReaderTest.cs", label="_inner = inner", span="4432-4432"];
m1_2916 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="4430-4430"];
m1_1770 [cluster="System.DateTime.DateTime(long)", file="JsonTextReaderTest.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m1_2067 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", span="3164-3164"];
m1_2068 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(''['',,'']''))", span="3166-3166"];
m1_2069 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="reader.Read()", span="3167-3167"];
m1_2073 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3176-3176"];
m1_2071 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                reader.ReadAsBytes();\r\n            }, ''Unexpected character encountered while parsing value: ,. Path '[1]', line 1, position 5.'')", span="3170-3173"];
m1_2070 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="CollectionAssert.AreEquivalent(new byte[0], reader.ReadAsBytes())", span="3168-3168"];
m1_2072 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="CollectionAssert.AreEquivalent(new byte[0], reader.ReadAsBytes())", span="3175-3175"];
m1_2074 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_CommaErrors_Multiple()", span="3164-3164"];
m1_62 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsString()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsString()", span="439-439"];
m1_214 [cluster="Unk.Parse", file="JsonTextReaderTest.cs", label="Entry Unk.Parse", span=""];
m1_2819 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", span="4289-4289"];
m1_2833 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var jsonTextReader = new JsonTextReader(sr)", span="4328-4328"];
m1_2834 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="jsonTextReader.Read()", span="4330-4330"];
m1_2832 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var sr = new StreamReader(stream, new UTF8Encoding(), false)", span="4327-4327"];
m1_2838 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="Console.WriteLine($''{i} - {jsonTextReader.TokenType} - {jsonTextReader.Value}'')", span="4339-4339"];
m1_2835 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="i++", span="4332-4332"];
m1_2839 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="clientReceivedEvent.Set()", span="4345-4345"];
m1_2829 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var stream = new NetworkStream(socket)", span="4323-4323"];
m1_2831 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="int i = 0", span="4326-4326"];
m1_2836 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="i == 193", span="4334-4334"];
m1_2837 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="string s = string.Empty", span="4336-4336"];
m1_2823 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var clientReceivedEvent = new ManualResetEvent(false)", span="4295-4295"];
m1_2840 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="Console.WriteLine(''Done'')", span="4347-4347"];
m1_2830 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var serializer = new JsonSerializer()", span="4324-4324"];
m1_2828 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="socket.Connect(''127.0.0.1'', port)", span="4321-4321"];
m1_2826 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)", span="4319-4319"];
m1_2822 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="var serverStartedEvent = new ManualResetEvent(false)", span="4294-4294"];
m1_2824 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="ThreadPool.QueueUserWorkItem(work =>\r\n            {\r\n                var server = new TcpListener(IPAddress.Parse(''0.0.0.0''), port);\r\n                server.Start();\r\n\r\n                serverStartedEvent.Set();\r\n\r\n                var serverSocket = server.AcceptSocket();\r\n\r\n                var jsonString = ''[\r\n'' + String.Join('','', Enumerable.Repeat(''  \''testdata\''\r\n'', jsonArrayElementsCount).ToArray()) + '']'';\r\n                var bytes = new UTF8Encoding().GetBytes(jsonString);\r\n                serverSocket.Send(bytes);\r\n                Console.WriteLine(''server send: '' + bytes.Length);\r\n\r\n\r\n                clientReceivedEvent.WaitOne();\r\n\r\n            })", span="4297-4314"];
m1_2820 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="int port = 11999", span="4291-4291"];
m1_2827 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="socket.Blocking = false", span="4320-4320"];
m1_2825 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="serverStartedEvent.WaitOne()", span="4316-4316"];
m1_2821 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="int jsonArrayElementsCount = 193", span="4292-4292"];
m1_2841 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFromNetworkStream()", span="4289-4289"];
m1_749 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", span="1207-1207"];
m1_751 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(i.ToString(CultureInfo.InvariantCulture)))", span="1211-1211"];
m1_752 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="reader.Read()", span="1212-1212"];
m1_753 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(long), reader.ValueType)", span="1213-1213"];
m1_757 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n                {\r\n                    reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)));\r\n                    reader.ReadAsInt32();\r\n                }, ''JSON integer '' + total + '' is too large or small for an Int32. Path '', line 1, position 10.'')", span="1218-1222"];
m1_750 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="long i = int.MaxValue", span="1209-1209"];
m1_756 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="long total = j + i", span="1217-1217"];
m1_754 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="int j = 1", span="1215-1215"];
m1_758 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="j++", span="1215-1215"];
m1_755 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="j < 1000", span="1215-1215"];
m1_759 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", span="1207-1207"];
m1_1481 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", span="2275-2275"];
m1_1482 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''\r\nnew Date()''))", span="2277-2278"];
m1_1483 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsDecimal(); }, ''Unexpected character encountered while parsing value: e. Path '', line 2, position 2.'')", span="2280-2280"];
m1_1484 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent_SecondLine()", span="2275-2275"];
m1_2719 [cluster="System.DateTime.DateTime(long, System.DateTimeKind)", file="JsonTextReaderTest.cs", label="Entry System.DateTime.DateTime(long, System.DateTimeKind)", span="0-0"];
m1_2850 [cluster="System.Threading.EventWaitHandle.Set()", file="JsonTextReaderTest.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m1_433 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="730-730"];
m1_435 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="JsonReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="734-734"];
m1_436 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="736-736"];
m1_437 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="737-737"];
m1_438 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="738-738"];
m1_441 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="742-742"];
m1_443 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="745-745"];
m1_445 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="748-748"];
m1_447 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="751-751"];
m1_439 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="739-739"];
m1_440 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="740-740"];
m1_442 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0L, reader.Value)", span="743-743"];
m1_444 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''hi'', reader.Value)", span="746-746"];
m1_446 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="749-749"];
m1_448 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''MemberConverter'', reader.Value)", span="752-752"];
m1_434 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="string json = @''{''''DefaultConverter'''':new Date(0, ''''hi''''),''''MemberConverter'''':''''1970-01-01T00:00:00Z''''}''", span="732-732"];
m1_449 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="730-730"];
m1_926 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="1486-1486"];
m1_927 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''{aww''))", span="1488-1488"];
m1_928 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1489-1489"];
m1_929 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.Read(); }, ''Unexpected end while parsing unquoted property name. Path '', line 1, position 4.'')", span="1491-1491"];
m1_930 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="1486-1486"];
m1_1262 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1956-1956"];
m1_1265 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1961-1961"];
m1_1266 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="reader.Read()", span="1963-1963"];
m1_1268 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="reader.Read()", span="1966-1966"];
m1_1272 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1971-1971"];
m1_1274 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(reader.Read())", span="1974-1974"];
m1_1267 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1964-1964"];
m1_1269 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1967-1967"];
m1_1270 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(string), reader.ValueType)", span="1968-1968"];
m1_1271 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(20000, reader.Value.ToString().Length)", span="1969-1969"];
m1_1273 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1972-1972"];
m1_1275 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1975-1975"];
m1_1264 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="string json = @''['''''' + new string(' ', length) + @'''''']''", span="1959-1959"];
m1_1263 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="int length = 20000", span="1958-1958"];
m1_1276 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1956-1956"];
m1_2117 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", span="3237-3237"];
m1_2119 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3241-3241"];
m1_2120 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.Read()", span="3243-3243"];
m1_2122 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[0]'', reader.Path)", span="3245-3245"];
m1_2124 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[1]'', reader.Path)", span="3247-3247"];
m1_2126 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[2]'', reader.Path)", span="3249-3249"];
m1_2128 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[3]'', reader.Path)", span="3251-3251"];
m1_2130 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[4]'', reader.Path)", span="3253-3253"];
m1_2132 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[5]'', reader.Path)", span="3255-3255"];
m1_2134 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''[6]'', reader.Path)", span="3257-3257"];
m1_2136 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="3260-3260"];
m1_2138 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="3263-3263"];
m1_2140 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="3266-3266"];
m1_2118 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="string json = @''['','','','','','','']''", span="3239-3239"];
m1_2121 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsInt32()", span="3244-3244"];
m1_2123 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsDecimal()", span="3246-3246"];
m1_2125 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsDateTime()", span="3248-3248"];
m1_2127 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsDateTimeOffset()", span="3250-3250"];
m1_2129 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsString()", span="3252-3252"];
m1_2131 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsBytes()", span="3254-3254"];
m1_2133 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="reader.ReadAsDouble()", span="3256-3256"];
m1_2135 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.IsNull(reader.ReadAsString())", span="3259-3259"];
m1_2137 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.IsNull(reader.ReadAsString())", span="3262-3262"];
m1_2139 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Assert.IsNull(reader.ReadAsBytes())", span="3265-3265"];
m1_2141 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadValue_EmptyString_Position()", span="3237-3237"];
m1_1935 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", span="2969-2969"];
m1_1936 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader('''1,112.34'''))", span="2971-2971"];
m1_1937 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1112.34d, reader.ReadAsDouble())", span="2972-2972"];
m1_1938 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDouble_AllowThousands()", span="2969-2969"];
m1_686 [cluster="System.IO.StringWriter.ToString()", file="JsonTextReaderTest.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m1_2409 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", span="3722-3722"];
m1_2411 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="3726-3726"];
m1_2412 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.ReadAsString(); }, ''Error parsing null value. Path '', line 1, position 4.'')", span="3728-3728"];
m1_2410 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs", label="string json = @''nullllll''", span="3724-3724"];
m1_2413 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsString_Null_AdditionalBadData()", span="3722-3722"];
m1_2779 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", span="4211-4211"];
m1_2781 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                () =>\r\n                {\r\n                    JsonTextReader reader = new JsonTextReader(new StringReader(json));\r\n                    while (reader.Read())\r\n                    {\r\n                    }\r\n                },\r\n                ''Unexpected character encountered while parsing value: !. Path 'frameworks.dnxcore50.dependencies['System.Xml.ReaderWriter'].source', line 6, position 20.'')", span="4225-4233"];
m1_2780 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs", label="string json = @''{\r\n  ''''frameworks'''': {\r\n    ''''dnxcore50'''': {\r\n      ''''dependencies'''': {\r\n        ''''System.Xml.ReaderWriter'''': {\r\n          ''''source'''': !!! !!!\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="4213-4223"];
m1_2782 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedPathInExceptionMessage()", span="4211-4211"];
m1_426 [cluster="Newtonsoft.Json.JsonTextReader.Close()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.Close()", span="2399-2399"];
m1_140 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", span="261-261"];
m1_142 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="271-271"];
m1_143 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="272-272"];
m1_145 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="275-275"];
m1_147 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="278-278"];
m1_149 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="281-281"];
m1_152 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="285-285"];
m1_155 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="289-289"];
m1_158 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="293-293"];
m1_160 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="296-296"];
m1_144 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="273-273"];
m1_146 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="276-276"];
m1_148 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonTextReader.TokenType)", span="279-279"];
m1_150 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="282-282"];
m1_151 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''src'', jsonTextReader.Value)", span="283-283"];
m1_153 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Comment, jsonTextReader.TokenType)", span="286-286"];
m1_154 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(@'''''''', jsonTextReader.Value)", span="287-287"];
m1_156 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="290-290"];
m1_157 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''test'', jsonTextReader.Value)", span="291-291"];
m1_159 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonTextReader.TokenType)", span="294-294"];
m1_161 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="297-297"];
m1_141 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="string json = @''{\r\n    ''''projects'''': [\r\n        ''''src'''',\r\n        //''''\r\n        ''''test''''\r\n    ]\r\n}''", span="263-269"];
m1_162 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadCommentInsideArray()", span="261-261"];
m1_45 [cluster="System.Type.IsAssignableFrom(System.Type)", file="JsonTextReaderTest.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m1_1055 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", span="1720-1720"];
m1_1057 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''1''))", span="1724-1724"];
m1_1059 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''-1''))", span="1727-1727"];
m1_1061 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''0''))", span="1730-1730"];
m1_1063 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''-0''))", span="1733-1733"];
m1_1065 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(int.MaxValue.ToString()))", span="1736-1736"];
m1_1067 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(int.MinValue.ToString()))", span="1739-1739"];
m1_1069 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(long.MaxValue.ToString()))", span="1742-1742"];
m1_1071 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''9999999999999999999999999999999999999999999999999999999999999999999999999999asdasdasd''))", span="1745-1745"];
m1_1073 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''1E-06''))", span="1748-1748"];
m1_1075 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''1.1''))", span="1751-1751"];
m1_1077 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''''))", span="1754-1754"];
m1_1079 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="reader = new JsonTextReader(new StringReader(''-''))", span="1757-1757"];
m1_1058 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, reader.ReadAsInt32())", span="1725-1725"];
m1_1060 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(-1, reader.ReadAsInt32())", span="1728-1728"];
m1_1062 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0, reader.ReadAsInt32())", span="1731-1731"];
m1_1064 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0, reader.ReadAsInt32())", span="1734-1734"];
m1_1066 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(int.MaxValue, reader.ReadAsInt32())", span="1737-1737"];
m1_1068 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(int.MinValue, reader.ReadAsInt32())", span="1740-1740"];
m1_1078 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(null, reader.ReadAsInt32())", span="1755-1755"];
m1_1070 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''JSON integer 9223372036854775807 is too large or small for an Int32. Path '', line 1, position 19.'')", span="1743-1743"];
m1_1072 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Unexpected character encountered while parsing number: s. Path '', line 1, position 77.'')", span="1746-1746"];
m1_1074 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Input string '1E-06' is not a valid integer. Path '', line 1, position 5.'')", span="1749-1749"];
m1_1076 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Input string '1.1' is not a valid integer. Path '', line 1, position 3.'')", span="1752-1752"];
m1_1080 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => reader.ReadAsInt32(), ''Input string '-' is not a valid integer. Path '', line 1, position 1.'')", span="1758-1758"];
m1_1056 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = null", span="1722-1722"];
m1_1081 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", span="1720-1720"];
m1_2526 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="3877-3877"];
m1_2527 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''{}}''))", span="3879-3879"];
m1_2528 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3880-3880"];
m1_2529 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="3881-3881"];
m1_2530 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { reader.Read(); }, ''Additional text encountered after finished reading JSON content: }. Path '', line 1, position 2.'')", span="3883-3883"];
m1_2531 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="3877-3877"];
m1_375 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="613-613"];
m1_377 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="617-617"];
m1_378 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="619-619"];
m1_379 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="620-620"];
m1_380 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="622-622"];
m1_381 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="623-623"];
m1_383 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, s.Length)", span="626-626"];
m1_385 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, stringInfo.LengthInTextElements)", span="629-629"];
m1_376 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="string json = @''{ ''''MATHEMATICAL ITALIC CAPITAL ALPHA'''': ''''\uD835\uDEE2'''' }''", span="615-615"];
m1_382 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="string s = reader.Value.ToString()", span="625-625"];
m1_384 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="StringInfo stringInfo = new StringInfo(s)", span="628-628"];
m1_386 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="613-613"];
m1_1395 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="2151-2151"];
m1_1397 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonReader = new JsonTextReader(s)", span="2154-2154"];
m1_1396 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="2153-2153"];
m1_1398 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonReader.Read())", span="2156-2156"];
m1_1400 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2159-2159"];
m1_1404 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2164-2164"];
m1_1408 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2169-2169"];
m1_1412 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonReader.Read())", span="2174-2174"];
m1_1414 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(jsonReader.Read())", span="2177-2177"];
m1_1399 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="2157-2157"];
m1_1401 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2160-2160"];
m1_1402 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="2161-2161"];
m1_1403 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="2162-2162"];
m1_1405 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2165-2165"];
m1_1406 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="2166-2166"];
m1_1407 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="2167-2167"];
m1_1409 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="2170-2170"];
m1_1410 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="2171-2171"];
m1_1411 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="2172-2172"];
m1_1413 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="2175-2175"];
m1_1415 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="2151-2151"];
m1_2049 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", span="3137-3137"];
m1_2050 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader('']''))", span="3139-3139"];
m1_2051 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                reader.ReadAsBytes();\r\n            }, ''Unexpected character encountered while parsing value: ]. Path '', line 1, position 1.'')", span="3141-3144"];
m1_2052 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytes_InvalidEndArray()", span="3137-3137"];
m1_173 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsBytes()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsBytes()", span="448-448"];
m1_1445 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="2221-2221"];
m1_1446 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="2223-2223"];
m1_1448 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="2226-2226"];
m1_1447 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs", label="Assert.IsNull(reader.ReadAsDecimal())", span="2225-2225"];
m1_1449 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="2221-2221"];
m1_17 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaN_ReadAsInt32()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaN_ReadAsInt32()", span="82-82"];
m1_810 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="1290-1290"];
m1_812 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1307-1307"];
m1_815 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1314-1314"];
m1_817 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="1317-1317"];
m1_818 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1318-1318"];
m1_819 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(''type'', reader.Value)", span="1319-1319"];
m1_811 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="string json = @''\r\n{\r\n  ''''description'''': ''''A person'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", span="1292-1305"];
m1_813 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="int i = 0", span="1312-1312"];
m1_814 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="i < 14", span="1312-1312"];
m1_816 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="i++", span="1312-1312"];
m1_820 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="1290-1290"];
m1_1291 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="2002-2002"];
m1_1293 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="JsonReader jsonReader = new JsonTextReader(new StringReader(json))", span="2007-2007"];
m1_1295 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="2010-2010"];
m1_1297 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2013-2013"];
m1_1298 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0.0, jsonReader.Value)", span="2014-2014"];
m1_1300 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2017-2017"];
m1_1301 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0.0, jsonReader.Value)", span="2018-2018"];
m1_1303 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2021-2021"];
m1_1304 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0.1, jsonReader.Value)", span="2022-2022"];
m1_1306 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2025-2025"];
m1_1307 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1.0, jsonReader.Value)", span="2026-2026"];
m1_1309 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2029-2029"];
m1_1310 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1.000001, jsonReader.Value)", span="2030-2030"];
m1_1312 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2033-2033"];
m1_1313 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1E-06, jsonReader.Value)", span="2034-2034"];
m1_1315 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2037-2037"];
m1_1316 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(4.94065645841247E-324, jsonReader.Value)", span="2038-2038"];
m1_1318 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2041-2041"];
m1_1319 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="2042-2042"];
m1_1321 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2045-2045"];
m1_1322 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="2046-2046"];
m1_1324 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2049-2049"];
m1_1325 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="2050-2050"];
m1_1327 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2053-2053"];
m1_1328 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.MaxValue, jsonReader.Value)", span="2054-2054"];
m1_1330 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2057-2057"];
m1_1331 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.MinValue, jsonReader.Value)", span="2058-2058"];
m1_1333 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2061-2061"];
m1_1334 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="2062-2062"];
m1_1336 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2065-2065"];
m1_1337 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="2066-2066"];
m1_1339 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2069-2069"];
m1_1340 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="2070-2070"];
m1_1342 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2073-2073"];
m1_1343 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0d, jsonReader.Value)", span="2074-2074"];
m1_1345 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2077-2077"];
m1_1346 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(0.0000025d, jsonReader.Value)", span="2078-2078"];
m1_1348 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="2081-2081"];
m1_1349 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(3000000000d, jsonReader.Value)", span="2082-2082"];
m1_1351 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="2085-2085"];
m1_1292 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="string json =\r\n                @''[0.0,0.0,0.1,1.0,1.000001,1E-06,4.94065645841247E-324,Infinity,-Infinity,NaN,1.7976931348623157E+308,-1.7976931348623157E+308,Infinity,-Infinity,NaN,0e-10,0.25e-5,0.3e10]''", span="2004-2005"];
m1_1294 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2009-2009"];
m1_1296 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2012-2012"];
m1_1299 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2016-2016"];
m1_1302 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2020-2020"];
m1_1305 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2024-2024"];
m1_1308 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2028-2028"];
m1_1311 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2032-2032"];
m1_1314 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2036-2036"];
m1_1317 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2040-2040"];
m1_1320 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2044-2044"];
m1_1323 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2048-2048"];
m1_1326 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2052-2052"];
m1_1329 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2056-2056"];
m1_1332 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2060-2060"];
m1_1335 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2064-2064"];
m1_1338 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2068-2068"];
m1_1341 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2072-2072"];
m1_1344 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2076-2076"];
m1_1347 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2080-2080"];
m1_1350 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="jsonReader.Read()", span="2084-2084"];
m1_1352 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="2002-2002"];
m1_1656 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="2529-2529"];
m1_1658 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2533-2533"];
m1_1660 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2536-2536"];
m1_1662 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2539-2539"];
m1_1669 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(reader.Read())", span="2549-2549"];
m1_1661 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2537-2537"];
m1_1663 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2540-2540"];
m1_1665 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="2543-2543"];
m1_1666 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2544-2544"];
m1_1670 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2550-2550"];
m1_1668 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="2547-2547"];
m1_1657 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="string json = @''{''''Offset'''':''''30/1/2011''''}''", span="2531-2531"];
m1_1659 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="reader.Culture = new CultureInfo(''en-NZ'')", span="2534-2534"];
m1_1664 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="reader.ReadAsDateTimeOffset()", span="2542-2542"];
m1_1667 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="2546-2546"];
m1_1671 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="2529-2529"];
m1_2865 [cluster="System.Net.Sockets.TcpListener.AcceptSocket()", file="JsonTextReaderTest.cs", label="Entry System.Net.Sockets.TcpListener.AcceptSocket()", span="0-0"];
m1_39 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaNAndInifinity_ReadAsDouble()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.NegativeInfinity, reader.ReadAsDouble())", span="115-115"];
m1_84 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", span="184-184"];
m1_86 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="188-188"];
m1_96 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="jsonTextReader = new JsonTextReader(new StringReader(json))", span="203-203"];
m1_114 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="jsonTextReader = new JsonTextReader(new StringReader(json))", span="227-227"];
m1_87 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="190-190"];
m1_91 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="195-195"];
m1_97 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="205-205"];
m1_101 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="210-210"];
m1_105 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="215-215"];
m1_109 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="220-220"];
m1_115 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="229-229"];
m1_119 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="234-234"];
m1_123 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="239-239"];
m1_127 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="244-244"];
m1_131 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="249-249"];
m1_135 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="254-254"];
m1_88 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="191-191"];
m1_89 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, jsonTextReader.LineNumber)", span="192-192"];
m1_90 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="193-193"];
m1_92 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="197-197"];
m1_93 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, jsonTextReader.LineNumber)", span="198-198"];
m1_94 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LinePosition)", span="199-199"];
m1_98 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="206-206"];
m1_99 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="207-207"];
m1_100 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="208-208"];
m1_102 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="211-211"];
m1_103 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="212-212"];
m1_104 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(5, jsonTextReader.LinePosition)", span="213-213"];
m1_106 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="216-216"];
m1_107 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="217-217"];
m1_108 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(9, jsonTextReader.LinePosition)", span="218-218"];
m1_110 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="221-221"];
m1_111 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="222-222"];
m1_112 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(10, jsonTextReader.LinePosition)", span="223-223"];
m1_116 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonTextReader.TokenType)", span="230-230"];
m1_117 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="231-231"];
m1_118 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="232-232"];
m1_120 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="235-235"];
m1_121 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(2, jsonTextReader.LineNumber)", span="236-236"];
m1_122 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(5, jsonTextReader.LinePosition)", span="237-237"];
m1_124 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.String, jsonTextReader.TokenType)", span="240-240"];
m1_125 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(3, jsonTextReader.LineNumber)", span="241-241"];
m1_126 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(4, jsonTextReader.LinePosition)", span="242-242"];
m1_128 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonTextReader.TokenType)", span="245-245"];
m1_129 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(3, jsonTextReader.LineNumber)", span="246-246"];
m1_130 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(9, jsonTextReader.LinePosition)", span="247-247"];
m1_132 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.Boolean, jsonTextReader.TokenType)", span="250-250"];
m1_133 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(3, jsonTextReader.LineNumber)", span="251-251"];
m1_134 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(13, jsonTextReader.LinePosition)", span="252-252"];
m1_136 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonTextReader.TokenType)", span="255-255"];
m1_137 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(4, jsonTextReader.LineNumber)", span="256-256"];
m1_138 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(1, jsonTextReader.LinePosition)", span="257-257"];
m1_85 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="string json = ''{}''", span="186-186"];
m1_95 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="json = ''\n{\''a\'':\''bc\''}''", span="201-201"];
m1_113 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="json = ''\n{\''a\'':\n\''bc\'',\''d\'':true\n}''", span="225-225"];
m1_139 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LineInfoAndNewLines()", span="184-184"];
m1_2922 [cluster="System.Exception.Exception(string)", file="JsonTextReaderTest.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m1_36 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Float_NaNAndInifinity_ReadAsDouble()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(double.PositiveInfinity, reader.ReadAsDouble())", span="111-111"];
m1_231 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", span="409-409"];
m1_233 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(new StringReader(json))", span="418-418"];
m1_234 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="420-420"];
m1_240 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="431-431"];
m1_242 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Assert.IsFalse(jsonTextReader.Read())", span="434-434"];
m1_235 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonTextReader.TokenType)", span="421-421"];
m1_241 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonTextReader.TokenType)", span="432-432"];
m1_236 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''JSON integer 333333333333333333333333333333333333333 is too large or small for an Int32. Path '[0]', line 2, position 41.'')", span="423-423"];
m1_237 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''Input string '3.3' is not a valid integer. Path '[1]', line 3, position 5.'')", span="425-425"];
m1_238 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''Unexpected character encountered while parsing value: ,. Path '[2]', line 4, position 3.'')", span="427-427"];
m1_239 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => jsonTextReader.ReadAsInt32(), ''Input string '0f' is not a valid integer. Path '[3]', line 5, position 4.'')", span="429-429"];
m1_232 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="string json = @''[\r\n  333333333333333333333333333333333333333,\r\n  3.3,\r\n  ,\r\n  0f\r\n]''", span="411-416"];
m1_243 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", file="JsonTextReaderTest.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadIntegerWithErrorInArray()", span="409-409"];
m1_1861 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonTextReaderTest.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="2860-2860"];
m1_1863 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonTextReaderTest.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2863-2863"];
}
