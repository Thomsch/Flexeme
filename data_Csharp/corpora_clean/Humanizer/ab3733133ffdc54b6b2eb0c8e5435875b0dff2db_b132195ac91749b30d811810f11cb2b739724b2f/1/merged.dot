digraph  {
n0 [label="Entry Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
n1 [label="number == 2", span="10-10", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
n2 [label="return resourceKey + DualPostfix;", span="11-11", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
n3 [label="number >= 3 && number <= 10", span="14-14", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
n4 [label="return resourceKey + PluralPostfix;", span="15-15", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
n5 [label="return resourceKey;", span="17-17", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
n6 [label="Exit Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)"];
m1_0 [label="Entry Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", span="6-6", cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs"];
m1_1 [label="number > 1 && number < 5", span="8-8", cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs"];
m1_2 [label="return resourceKey + PaucalPostfix;", span="9-9", cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs"];
m1_3 [label="return resourceKey;", span="11-11", cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs"];
m1_4 [label="Exit Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", span="6-6", cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs"];
m2_0 [label="Entry Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="15-15", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_1 [label=casing, span="17-17", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_3 [label="return input.Transform(To.TitleCase);", span="20-20", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", color=red, community=0, file="DateHumanizeTests.cs"];
m2_5 [label="return input.Transform(To.LowerCase);", span="23-23", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_7 [label="return input.Transform(To.UpperCase);", span="26-26", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_9 [label="return input.Transform(To.SentenceCase);", span="29-29", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", color=red, community=0, file="DateHumanizeTests.cs"];
m2_2 [label="LetterCasing.Title", span="19-19", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_4 [label="LetterCasing.LowerCase", span="22-22", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", color=red, community=0, file="DateHumanizeTests.cs"];
m2_6 [label="LetterCasing.AllCaps", span="25-25", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_8 [label="LetterCasing.Sentence", span="28-28", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", color=red, community=0, file="DateHumanizeTests.cs"];
m2_10 [label="throw new ArgumentOutOfRangeException(''casing'');", span="32-32", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", color=red, community=0, file="DateHumanizeTests.cs"];
m2_11 [label="Exit Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="15-15", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs"];
m2_12 [label="Entry string.Transform(params Humanizer.IStringTransformer[])", span="15-15", cluster="string.Transform(params Humanizer.IStringTransformer[])", file="DateHumanizeTests.cs"];
m2_13 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="DateHumanizeTests.cs"];
m3_8 [label="Entry Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="27-27", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs"];
m3_9 [label="Assert.Equal(plural, plural.Pluralize(Plurality.CouldBeEither))", span="29-29", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs"];
m3_10 [label="Assert.Equal(plural, singular.Pluralize(Plurality.CouldBeEither))", span="30-30", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs"];
m3_11 [label="Exit Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="27-27", cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs"];
m3_27 [label="Entry Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="73-73", cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="DefaultFormatter.cs"];
m3_28 [label="Assert.Equal(input.Dasherize(), expectedOutput)", span="75-75", cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="DefaultFormatter.cs"];
m3_29 [label="Exit Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="73-73", cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="DefaultFormatter.cs"];
m3_16 [label="Entry Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="42-42", cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="DefaultFormatter.cs"];
m3_17 [label="Assert.Equal(singular, singular.Singularize(Plurality.Singular))", span="44-44", cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="DefaultFormatter.cs"];
m3_18 [label="Exit Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="42-42", cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="DefaultFormatter.cs"];
m3_35 [label="Entry Humanizer.Tests.InflectorTests.Camelize(string, string)", span="100-100", cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="DefaultFormatter.cs"];
m3_36 [label="Assert.Equal(expectedOutput, input.Camelize())", span="102-102", cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="DefaultFormatter.cs"];
m3_37 [label="Exit Humanizer.Tests.InflectorTests.Camelize(string, string)", span="100-100", cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="DefaultFormatter.cs"];
m3_43 [label="Entry Humanizer.Tests.PluralTestSource.GetEnumerator()", span="121-121", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_44 [label="yield return new object[] {''search'', ''searches''};", span="123-123", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_45 [label="yield return new object[] {''switch'', ''switches''};", span="124-124", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_46 [label="yield return new object[] {''fix'', ''fixes''};", span="125-125", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_47 [label="yield return new object[] {''box'', ''boxes''};", span="126-126", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_48 [label="yield return new object[] {''process'', ''processes''};", span="127-127", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_49 [label="yield return new object[] {''address'', ''addresses''};", span="128-128", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_50 [label="yield return new object[] {''case'', ''cases''};", span="129-129", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_51 [label="yield return new object[] {''stack'', ''stacks''};", span="130-130", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_52 [label="yield return new object[] {''wish'', ''wishes''};", span="131-131", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_53 [label="yield return new object[] {''fish'', ''fish''};", span="132-132", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_54 [label="yield return new object[] {''category'', ''categories''};", span="134-134", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_55 [label="yield return new object[] {''query'', ''queries''};", span="135-135", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_56 [label="yield return new object[] {''ability'', ''abilities''};", span="136-136", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_57 [label="yield return new object[] {''agency'', ''agencies''};", span="137-137", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_58 [label="yield return new object[] {''movie'', ''movies''};", span="138-138", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_59 [label="yield return new object[] {''archive'', ''archives''};", span="140-140", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_60 [label="yield return new object[] {''index'', ''indices''};", span="142-142", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_61 [label="yield return new object[] {''wife'', ''wives''};", span="144-144", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_62 [label="yield return new object[] {''safe'', ''saves''};", span="145-145", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_63 [label="yield return new object[] {''half'', ''halves''};", span="146-146", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_64 [label="yield return new object[] {''move'', ''moves''};", span="148-148", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_65 [label="yield return new object[] {''salesperson'', ''salespeople''};", span="150-150", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_66 [label="yield return new object[] {''person'', ''people''};", span="151-151", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_67 [label="yield return new object[] {''spokesman'', ''spokesmen''};", span="153-153", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_68 [label="yield return new object[] {''man'', ''men''};", span="154-154", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_69 [label="yield return new object[] {''woman'', ''women''};", span="155-155", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_70 [label="yield return new object[] {''basis'', ''bases''};", span="157-157", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_71 [label="yield return new object[] {''diagnosis'', ''diagnoses''};", span="158-158", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_72 [label="yield return new object[] {''datum'', ''data''};", span="160-160", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_73 [label="yield return new object[] {''medium'', ''media''};", span="161-161", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_74 [label="yield return new object[] {''analysis'', ''analyses''};", span="162-162", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_75 [label="yield return new object[] {''node_child'', ''node_children''};", span="164-164", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_76 [label="yield return new object[] {''child'', ''children''};", span="165-165", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_77 [label="yield return new object[] {''experience'', ''experiences''};", span="167-167", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_78 [label="yield return new object[] {''day'', ''days''};", span="168-168", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_79 [label="yield return new object[] {''comment'', ''comments''};", span="170-170", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_80 [label="yield return new object[] {''foobar'', ''foobars''};", span="171-171", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_81 [label="yield return new object[] {''newsletter'', ''newsletters''};", span="172-172", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_82 [label="yield return new object[] {''old_news'', ''old_news''};", span="174-174", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_83 [label="yield return new object[] {''news'', ''news''};", span="175-175", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_84 [label="yield return new object[] {''series'', ''series''};", span="177-177", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_85 [label="yield return new object[] {''species'', ''species''};", span="178-178", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_86 [label="yield return new object[] {''quiz'', ''quizzes''};", span="180-180", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_87 [label="yield return new object[] {''perspective'', ''perspectives''};", span="182-182", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_88 [label="yield return new object[] {''ox'', ''oxen''};", span="184-184", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_89 [label="yield return new object[] {''photo'', ''photos''};", span="185-185", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_90 [label="yield return new object[] {''buffalo'', ''buffaloes''};", span="186-186", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_91 [label="yield return new object[] {''tomato'', ''tomatoes''};", span="187-187", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_92 [label="yield return new object[] {''dwarf'', ''dwarves''};", span="188-188", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_93 [label="yield return new object[] {''elf'', ''elves''};", span="189-189", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_94 [label="yield return new object[] {''information'', ''information''};", span="190-190", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_95 [label="yield return new object[] {''equipment'', ''equipment''};", span="191-191", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_96 [label="yield return new object[] {''bus'', ''buses''};", span="192-192", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_97 [label="yield return new object[] {''status'', ''statuses''};", span="193-193", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_98 [label="yield return new object[] {''status_code'', ''status_codes''};", span="194-194", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_99 [label="yield return new object[] {''mouse'', ''mice''};", span="195-195", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_100 [label="yield return new object[] {''louse'', ''lice''};", span="197-197", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_101 [label="yield return new object[] {''house'', ''houses''};", span="198-198", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_102 [label="yield return new object[] {''octopus'', ''octopi''};", span="199-199", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_103 [label="yield return new object[] {''virus'', ''viri''};", span="200-200", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_104 [label="yield return new object[] {''alias'', ''aliases''};", span="201-201", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_105 [label="yield return new object[] {''portfolio'', ''portfolios''};", span="202-202", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_106 [label="yield return new object[] {''vertex'', ''vertices''};", span="204-204", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_107 [label="yield return new object[] {''matrix'', ''matrices''};", span="205-205", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_108 [label="yield return new object[] {''axis'', ''axes''};", span="207-207", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_109 [label="yield return new object[] {''testis'', ''testes''};", span="208-208", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_110 [label="yield return new object[] {''crisis'', ''crises''};", span="209-209", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_111 [label="yield return new object[] {''rice'', ''rice''};", span="211-211", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_112 [label="yield return new object[] {''shoe'', ''shoes''};", span="212-212", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_113 [label="yield return new object[] {''horse'', ''horses''};", span="214-214", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_114 [label="yield return new object[] {''prize'', ''prizes''};", span="215-215", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_115 [label="yield return new object[] {''edge'', ''edges''};", span="216-216", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_116 [label="yield return new object[] {''goose'', ''geese''};", span="219-219", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_117 [label="yield return new object[] {''deer'', ''deer''};", span="220-220", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_118 [label="yield return new object[] {''sheep'', ''sheep''};", span="221-221", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_119 [label="yield return new object[] {''wolf'', ''wolves''};", span="222-222", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_120 [label="yield return new object[] {''volcano'', ''volcanoes''};", span="223-223", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_121 [label="yield return new object[] {''aircraft'', ''aircraft''};", span="224-224", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_122 [label="yield return new object[] {''alumna'', ''alumnae''};", span="225-225", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_123 [label="yield return new object[] {''alumnus'', ''alumni''};", span="226-226", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_124 [label="yield return new object[] {''fungus'', ''fungi''};", span="227-227", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_125 [label="Exit Humanizer.Tests.PluralTestSource.GetEnumerator()", span="121-121", cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs"];
m3_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="DefaultFormatter.cs"];
m3_19 [label="Entry Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="49-49", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs"];
m3_20 [label="Assert.Equal(singular, singular.Singularize(Plurality.CouldBeEither))", span="51-51", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs"];
m3_21 [label="Assert.Equal(singular, plural.Singularize(Plurality.CouldBeEither))", span="52-52", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs"];
m3_22 [label="Exit Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="49-49", cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs"];
m3_39 [label="Entry Humanizer.Tests.InflectorTests.Underscore(string, string)", span="113-113", cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="DefaultFormatter.cs"];
m3_40 [label="Assert.Equal(expectedOuput, input.Underscore())", span="115-115", cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="DefaultFormatter.cs"];
m3_41 [label="Exit Humanizer.Tests.InflectorTests.Underscore(string, string)", span="113-113", cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="DefaultFormatter.cs"];
m3_3 [label="Entry string.Pluralize(Humanizer.Plurality)", span="147-147", cluster="string.Pluralize(Humanizer.Plurality)", file="DefaultFormatter.cs"];
m3_34 [label="Entry string.Pascalize()", span="226-226", cluster="string.Pascalize()", file="DefaultFormatter.cs"];
m3_23 [label="Entry Humanizer.Tests.InflectorTests.Titleize(string, string)", span="63-63", cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="DefaultFormatter.cs"];
m3_24 [label="Assert.Equal(expectedOuput, input.Titleize())", span="65-65", cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="DefaultFormatter.cs"];
m3_25 [label="Exit Humanizer.Tests.InflectorTests.Titleize(string, string)", span="63-63", cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="DefaultFormatter.cs"];
m3_26 [label="Entry string.Titleize()", span="216-216", cluster="string.Titleize()", file="DefaultFormatter.cs"];
m3_0 [label="Entry Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="13-13", cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="DefaultFormatter.cs"];
m3_1 [label="Assert.Equal(plural, singular.Pluralize())", span="15-15", cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="DefaultFormatter.cs"];
m3_2 [label="Exit Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="13-13", cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="DefaultFormatter.cs"];
m3_30 [label="Entry string.Dasherize()", span="259-259", cluster="string.Dasherize()", file="DefaultFormatter.cs"];
m3_12 [label="Entry Humanizer.Tests.InflectorTests.Singularize(string, string)", span="35-35", cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="DefaultFormatter.cs"];
m3_13 [label="Assert.Equal(singular, plural.Singularize())", span="37-37", cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="DefaultFormatter.cs"];
m3_14 [label="Exit Humanizer.Tests.InflectorTests.Singularize(string, string)", span="35-35", cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="DefaultFormatter.cs"];
m3_31 [label="Entry Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="86-86", cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="DefaultFormatter.cs"];
m3_32 [label="Assert.Equal(expectedOutput, input.Pascalize())", span="88-88", cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="DefaultFormatter.cs"];
m3_33 [label="Exit Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="86-86", cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="DefaultFormatter.cs"];
m3_126 [label="Entry Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", span="230-230", cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="DefaultFormatter.cs"];
m3_127 [label="return GetEnumerator();", span="232-232", cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="DefaultFormatter.cs"];
m3_128 [label="Exit Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", span="230-230", cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="DefaultFormatter.cs"];
m3_38 [label="Entry string.Camelize()", span="236-236", cluster="string.Camelize()", file="DefaultFormatter.cs"];
m3_42 [label="Entry string.Underscore()", span="247-247", cluster="string.Underscore()", file="DefaultFormatter.cs"];
m3_5 [label="Entry Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="20-20", cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="DefaultFormatter.cs"];
m3_6 [label="Assert.Equal(plural, plural.Pluralize(Plurality.Plural))", span="22-22", cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="DefaultFormatter.cs"];
m3_7 [label="Exit Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="20-20", cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="DefaultFormatter.cs"];
m3_15 [label="Entry string.Singularize(Humanizer.Plurality)", span="171-171", cluster="string.Singularize(Humanizer.Plurality)", file="DefaultFormatter.cs"];
m3_129 [label="Humanizer.Tests.PluralTestSource", span="", file="DefaultFormatter.cs"];
m5_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="EnglishNumberToWordsConverter.cs"];
m5_3 [label="Entry string.ToQuantity(int)", span="17-17", cluster="string.ToQuantity(int)", file="EnglishNumberToWordsConverter.cs"];
m5_0 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="19-19", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="EnglishNumberToWordsConverter.cs"];
m5_1 [label="Assert.Equal(expected, word.ToQuantity(quatity))", span="21-21", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", color=red, community=0, file="EnglishNumberToWordsConverter.cs"];
m5_2 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="19-19", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="EnglishNumberToWordsConverter.cs"];
m7_2 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", span="19-19", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", file="INumberToWordsConverter.cs"];
m7_3 [label="Exit Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", span="19-19", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", file="INumberToWordsConverter.cs"];
m7_0 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs"];
m7_1 [label="Exit Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs"];
m8_6 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="NumberToWordsExtension.cs"];
m8_0 [label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", file="NumberToWordsExtension.cs"];
m8_1 [label="_culture = culture", span="14-14", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", color=red, community=0, file="NumberToWordsExtension.cs"];
m8_2 [label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", file="NumberToWordsExtension.cs"];
m8_3 [label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", span="22-22", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs"];
m8_4 [label="return number.ToString(_culture);", span="24-24", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs"];
m8_5 [label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", span="22-22", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs"];
m8_15 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs"];
m8_12 [label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_13 [label="return Converter.Convert(number);", span="27-27", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_14 [label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_7 [label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="32-32", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="NumberToWordsExtension.cs"];
m8_8 [label="return number.ToString(_culture);", span="34-34", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", color=red, community=0, file="NumberToWordsExtension.cs"];
m8_9 [label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="32-32", cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="NumberToWordsExtension.cs"];
m8_10 [label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter", span="", file="NumberToWordsExtension.cs"];
m9_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_77 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_392 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs"];
m9_393 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs"];
m9_394 [label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs"];
m9_395 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs"];
m9_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="NumberToWordsTests.cs"];
m9_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_254 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_335 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_336 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_337 [label="Assert.Throws<ApplicationException>(test)", span="816-816", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_338 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NumberToWordsTests.cs"];
m9_415 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs"];
m9_416 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs"];
m9_417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs"];
m9_418 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs"];
m9_419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs"];
m9_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="NumberToWordsTests.cs"];
m9_11 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="NumberToWordsTests.cs"];
m9_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="NumberToWordsTests.cs"];
m9_369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs"];
m9_370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs"];
m9_371 [label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs"];
m9_372 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs"];
m9_291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_294 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_427 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NumberToWordsTests.cs"];
m9_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs"];
m9_217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs"];
m9_218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs"];
m9_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs"];
m9_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs"];
m9_382 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs"];
m9_383 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs"];
m9_384 [label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs"];
m9_385 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs"];
m9_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs"];
m9_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs"];
m9_146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs"];
m9_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs"];
m9_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs"];
m9_209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs"];
m9_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs"];
m9_211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs"];
m9_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs"];
m9_275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NumberToWordsTests.cs"];
m9_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs"];
m9_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs"];
m9_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs"];
m9_202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs"];
m9_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs"];
m9_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_58 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="NumberToWordsTests.cs"];
m9_374 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="NumberToWordsTests.cs"];
m9_307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="NumberToWordsTests.cs"];
m9_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs"];
m9_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs"];
m9_103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs"];
m9_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs"];
m9_247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="NumberToWordsTests.cs"];
m9_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs"];
m9_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs"];
m9_18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs"];
m9_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs"];
m9_308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs"];
m9_309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs"];
m9_310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs"];
m9_311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs"];
m9_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="NumberToWordsTests.cs"];
m9_346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="NumberToWordsTests.cs"];
m9_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="NumberToWordsTests.cs"];
m9_378 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="NumberToWordsTests.cs"];
m9_347 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_348 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_349 [label="Assert.Throws<ApplicationException>(test)", span="830-830", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_350 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_122 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs"];
m9_316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs"];
m9_318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs"];
m9_319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs"];
m9_317 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs"];
m9_320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs"];
m9_414 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="NumberToWordsTests.cs"];
m9_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="NumberToWordsTests.cs"];
m9_271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="NumberToWordsTests.cs"];
m9_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs"];
m9_268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs"];
m9_269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs"];
m9_270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs"];
m9_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs"];
m9_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs"];
m9_162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs"];
m9_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs"];
m9_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_113 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs"];
m9_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_95 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs"];
m9_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="NumberToWordsTests.cs"];
m9_420 [label="Entry lambda expression", span="943-943", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_14 [label=fakeOptions, span="28-28", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_13 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_15 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_21 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_22 [label="new FakeOptions()", span="49-49", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_23 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_28 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_30 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_37 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_38 [label="new FakeOptionsWithSequence()", span="96-96", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_39 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_45 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_46 [label="new FakeOptions()", span="118-118", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_47 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_52 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_54 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_60 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_62 [label="Exit lambda expression", span="163-163", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_71 [label="Entry lambda expression", span="182-182", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_73 [label="Exit lambda expression", span="182-182", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_80 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_82 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_89 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_91 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_97 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_99 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_106 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_107 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_108 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_116 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_117 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_118 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_124 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_125 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_126 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_132 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_133 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_134 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_141 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_142 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_143 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_148 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_150 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_156 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_158 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_164 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_166 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_174 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_177 [label="Entry lambda expression", span="442-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_175 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_176 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_179 [label="Exit lambda expression", span="442-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_181 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_183 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_185 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_187 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_195 [label="Entry lambda expression", span="467-467", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_196 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_197 [label="Exit lambda expression", span="467-467", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_205 [label="Entry lambda expression", span="487-487", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_206 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_207 [label="Exit lambda expression", span="487-487", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_213 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_214 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_215 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_222 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_223 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_224 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_230 [label="Entry lambda expression", span="545-545", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_231 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_232 [label="Exit lambda expression", span="545-545", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_239 [label="Entry lambda expression", span="564-564", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_240 [label="new FakeOptions()", span="564-564", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_241 [label="Exit lambda expression", span="564-564", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_248 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_249 [label="new FakeOptions()", span="583-583", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_250 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_256 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_257 [label="new FakeOptions()", span="602-602", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_258 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_264 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_265 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_266 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_272 [label="Entry lambda expression", span="641-641", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_273 [label="new FakeOptions()", span="641-641", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_274 [label="Exit lambda expression", span="641-641", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_280 [label="Entry lambda expression", span="660-660", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_281 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_282 [label="Exit lambda expression", span="660-660", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_288 [label="Entry lambda expression", span="682-682", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_289 [label="new FakeOptions()", span="682-682", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_290 [label="Exit lambda expression", span="682-682", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_296 [label="Entry lambda expression", span="701-701", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_298 [label="Exit lambda expression", span="701-701", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_304 [label="Entry lambda expression", span="723-723", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_305 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_306 [label="Exit lambda expression", span="723-723", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_312 [label="Entry lambda expression", span="745-745", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_313 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_314 [label="Exit lambda expression", span="745-745", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_322 [label="Entry lambda expression", span="765-765", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_323 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_324 [label="Exit lambda expression", span="765-765", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_332 [label="Entry lambda expression", span="789-789", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_333 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_334 [label="Exit lambda expression", span="789-789", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_340 [label="Entry lambda expression", span="809-813", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_342 [label="Exit lambda expression", span="809-813", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_343 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_344 [label="new FakeOptionsWithMinZero()", span="810-810", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_345 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_351 [label="Entry lambda expression", span="823-827", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_353 [label="Exit lambda expression", span="823-827", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_354 [label="Entry lambda expression", span="824-824", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_355 [label="new FakeOptionsWithMaxZero()", span="824-824", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_356 [label="Exit lambda expression", span="824-824", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_362 [label="Entry lambda expression", span="837-841", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_364 [label="Exit lambda expression", span="837-841", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_365 [label="Entry lambda expression", span="838-838", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_366 [label="new FakeOptionsWithMinMaxZero()", span="838-838", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_367 [label="Exit lambda expression", span="838-838", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_380 [label="x == expected", span="863-863", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_375 [label="Entry lambda expression", span="857-857", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_379 [label="Entry lambda expression", span="863-863", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_376 [label="new FakeOptionsWithNamedAndEmptySets()", span="857-857", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_377 [label="Exit lambda expression", span="857-857", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_381 [label="Exit lambda expression", span="863-863", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_390 [label="x == expected", span="878-878", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_386 [label="Entry lambda expression", span="872-872", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_389 [label="Entry lambda expression", span="878-878", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_387 [label="new FakeOptions()", span="872-872", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_388 [label="Exit lambda expression", span="872-872", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_391 [label="Exit lambda expression", span="878-878", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_396 [label="Entry lambda expression", span="888-888", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_397 [label="new FakeInterfaceOptions()", span="888-888", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_398 [label="Exit lambda expression", span="888-888", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_404 [label="Entry lambda expression", span="905-905", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_405 [label="new FakeOptionsWithRequiredValue()", span="905-905", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_406 [label="Exit lambda expression", span="905-905", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_411 [label="Entry lambda expression", span="924-924", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_412 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_413 [label="Exit lambda expression", span="924-924", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_421 [label="new FakeOptions()", span="943-943", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_422 [label="Exit lambda expression", span="943-943", cluster="lambda expression", file="NumberToWordsTests.cs"];
m9_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs"];
m9_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs"];
m9_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs"];
m9_67 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs"];
m9_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs"];
m9_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="NumberToWordsTests.cs"];
m9_233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="NumberToWordsTests.cs"];
m9_321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="NumberToWordsTests.cs"];
m9_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="NumberToWordsTests.cs"];
m9_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NumberToWordsTests.cs"];
m9_407 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs"];
m9_408 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs"];
m9_409 [label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs"];
m9_410 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs"];
m9_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="NumberToWordsTests.cs"];
m9_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="NumberToWordsTests.cs"];
m9_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToWordsTests.cs"];
m9_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs"];
m9_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs"];
m9_154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs"];
m9_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs"];
m9_358 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_359 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_360 [label="Assert.Throws<ApplicationException>(test)", span="844-844", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_361 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs"];
m9_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="NumberToWordsTests.cs"];
m9_326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs"];
m9_327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs"];
m9_329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs"];
m9_330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs"];
m9_328 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs"];
m9_331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs"];
m9_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="NumberToWordsTests.cs"];
m9_399 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="NumberToWordsTests.cs"];
m9_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs"];
m9_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs"];
m9_26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs"];
m9_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs"];
m9_357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="NumberToWordsTests.cs"];
m9_283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="NumberToWordsTests.cs"];
m9_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs"];
m9_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs"];
m9_43 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs"];
m9_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs"];
m9_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="NumberToWordsTests.cs"];
m9_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToWordsTests.cs"];
m9_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="NumberToWordsTests.cs"];
m9_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="NumberToWordsTests.cs"];
m9_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs"];
m9_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs"];
m9_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs"];
m9_138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs"];
m9_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs"];
m9_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs"];
m9_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs"];
m9_286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs"];
m9_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs"];
m9_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs"];
m9_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs"];
m9_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs"];
m9_192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs"];
m9_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs"];
m9_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs"];
m9_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs"];
m9_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs"];
m9_171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs"];
m9_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs"];
m9_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs"];
m9_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="NumberToWordsTests.cs"];
m9_9 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NumberToWordsTests.cs"];
m9_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_262 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs"];
m9_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs"];
m9_302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs"];
m9_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs"];
m9_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs"];
m9_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs"];
m9_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs"];
m9_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs"];
m9_4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs"];
m9_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs"];
m9_368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="NumberToWordsTests.cs"];
m9_373 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="NumberToWordsTests.cs"];
m9_339 [label="Entry Unk.>", span="", cluster="Unk.>", file="NumberToWordsTests.cs"];
m9_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="NumberToWordsTests.cs"];
m9_242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_245 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs"];
m9_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs"];
m9_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs"];
m9_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="NumberToWordsTests.cs"];
m9_221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="NumberToWordsTests.cs"];
m9_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="NumberToWordsTests.cs"];
m9_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="NumberToWordsTests.cs"];
m9_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="NumberToWordsTests.cs"];
m9_325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="NumberToWordsTests.cs"];
m9_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs"];
m9_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs"];
m9_34 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs"];
m9_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs"];
m9_400 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs"];
m9_401 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs"];
m9_402 [label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs"];
m9_403 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs"];
m9_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="NumberToWordsTests.cs"];
m9_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="NumberToWordsTests.cs"];
m9_423 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs"];
m9_424 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs"];
m9_425 [label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs"];
m9_426 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs"];
m9_428 [label=fakeOptions, span="", file="NumberToWordsTests.cs"];
m9_429 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="NumberToWordsTests.cs"];
m9_430 [label=int, span="", file="NumberToWordsTests.cs"];
m9_431 [label=int, span="", file="NumberToWordsTests.cs"];
m10_0 [label="Entry Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", span="7-7", cluster="Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", file="RomanianFormatter.cs"];
m10_1 [label="Assert.Equal(\r\n                ''PascalCaseSentenceIsCamelized'',\r\n                ''Pascal case sentence is camelized''.Dehumanize())", span="9-11", cluster="Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", file="RomanianFormatter.cs"];
m10_2 [label="Exit Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", span="7-7", cluster="Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", file="RomanianFormatter.cs"];
m10_11 [label="Entry Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", span="31-31", cluster="Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", file="RomanianFormatter.cs"];
m10_12 [label="Assert.Equal(\r\n                ''LowerCaseSentenceIsCamelized'',\r\n                ''lower case sentence is camelized''.Dehumanize())", span="33-35", cluster="Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", file="RomanianFormatter.cs"];
m10_13 [label="Exit Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", span="31-31", cluster="Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", file="RomanianFormatter.cs"];
m10_5 [label="Entry Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", span="15-15", cluster="Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", file="RomanianFormatter.cs"];
m10_6 [label="Assert.Equal(\r\n                ''TitleCaseSentenceIsCamelized'',\r\n                ''Title Case Sentence Is Camelized''.Dehumanize())", span="17-19", cluster="Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", file="RomanianFormatter.cs"];
m10_7 [label="Exit Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", span="15-15", cluster="Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", file="RomanianFormatter.cs"];
m10_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RomanianFormatter.cs"];
m10_3 [label="Entry string.Dehumanize()", span="11-11", cluster="string.Dehumanize()", file="RomanianFormatter.cs"];
m10_14 [label="Entry Humanizer.Tests.StringDehumanizeTests.EmptySentence()", span="39-39", cluster="Humanizer.Tests.StringDehumanizeTests.EmptySentence()", file="RomanianFormatter.cs"];
m10_15 [label="Assert.Equal(\r\n                '''',\r\n                ''''.Dehumanize())", span="41-43", cluster="Humanizer.Tests.StringDehumanizeTests.EmptySentence()", file="RomanianFormatter.cs"];
m10_16 [label="Exit Humanizer.Tests.StringDehumanizeTests.EmptySentence()", span="39-39", cluster="Humanizer.Tests.StringDehumanizeTests.EmptySentence()", file="RomanianFormatter.cs"];
m10_8 [label="Entry Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", span="23-23", cluster="Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", file="RomanianFormatter.cs"];
m10_9 [label="Assert.Equal(\r\n                ''MixedCaseSentenceIsCamelized'',\r\n                ''Mixed case sentence Is Camelized''.Dehumanize())", span="25-27", cluster="Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", file="RomanianFormatter.cs"];
m10_10 [label="Exit Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", span="23-23", cluster="Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", file="RomanianFormatter.cs"];
m11_0 [label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_1 [label="var mod100 = number%100", span="9-9", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_3 [label="var mod10 = number%10", span="12-12", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_5 [label="return resourceKey + SingularPostfix;", span="15-15", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_7 [label="return resourceKey + PaucalPostfix;", span="18-18", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_8 [label="return resourceKey;", span="21-21", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_2 [label="mod100/10 != 1", span="10-10", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_4 [label="mod10 == 1", span="14-14", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_6 [label="mod10 > 1 && mod10 < 5", span="17-17", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m11_9 [label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m13_5 [label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="25-25", cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)", file="ToQuantityTests.cs"];
m13_0 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()", file="ToQuantityTests.cs"];
m13_1 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()", file="ToQuantityTests.cs"];
m13_2 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="ToQuantityTests.cs"];
m13_3 [label="Assert.Equal(expected, word.ToQuantity(quatity))", span="26-26", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="ToQuantityTests.cs"];
m13_4 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="ToQuantityTests.cs"];
m13_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ToQuantityTests.cs"];
m13_13 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="ToQuantityTests.cs"];
m13_14 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="79-79", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="ToQuantityTests.cs"];
m13_15 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="ToQuantityTests.cs"];
m13_7 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="ToQuantityTests.cs"];
m13_8 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="43-43", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="ToQuantityTests.cs"];
m13_9 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="ToQuantityTests.cs"];
m13_10 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="ToQuantityTests.cs"];
m13_11 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="61-61", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="ToQuantityTests.cs"];
m13_12 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="ToQuantityTests.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label=int];
n0 -> n4  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n0  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResourceKey"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n2 -> n6  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=0, style=solid];
n4 -> n6  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n0  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_0 -> m1_0  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResourceKey"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_3  [key=1, style=dashed, color=red, label=string];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_9  [key=1, style=dashed, color=red, label=string];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=0, style=solid, color=red];
m2_1 -> m2_6  [key=0, style=solid];
m2_1 -> m2_8  [key=0, style=solid, color=red];
m2_1 -> m2_10  [key=0, style=solid, color=red];
m2_3 -> m2_11  [key=0, style=solid, color=red];
m2_3 -> m2_12  [key=2, style=dotted, color=red];
m2_5 -> m2_11  [key=0, style=solid];
m2_5 -> m2_12  [key=2, style=dotted];
m2_7 -> m2_11  [key=0, style=solid];
m2_7 -> m2_12  [key=2, style=dotted];
m2_9 -> m2_11  [key=0, style=solid, color=red];
m2_9 -> m2_12  [key=2, style=dotted, color=red];
m2_2 -> m2_3  [key=0, style=solid, color=red];
m2_4 -> m2_5  [key=0, style=solid, color=red];
m2_6 -> m2_7  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid, color=red];
m2_10 -> m2_11  [key=0, style=solid, color=red];
m2_10 -> m2_13  [key=2, style=dotted, color=red];
m2_11 -> m2_0  [key=0, style=bold, color=blue];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_3  [key=2, style=dotted];
m3_9 -> m3_4  [key=2, style=dotted];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_3  [key=2, style=dotted];
m3_10 -> m3_4  [key=2, style=dotted];
m3_11 -> m3_8  [key=0, style=bold, color=blue];
m3_27 -> m3_28  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_30  [key=2, style=dotted];
m3_28 -> m3_4  [key=2, style=dotted];
m3_29 -> m3_27  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_15  [key=2, style=dotted];
m3_17 -> m3_4  [key=2, style=dotted];
m3_18 -> m3_16  [key=0, style=bold, color=blue];
m3_35 -> m3_36  [key=0, style=solid];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_38  [key=2, style=dotted];
m3_36 -> m3_4  [key=2, style=dotted];
m3_37 -> m3_35  [key=0, style=bold, color=blue];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=0, style=bold, color=crimson];
m3_43 -> m3_46  [key=0, style=bold, color=crimson];
m3_43 -> m3_47  [key=0, style=bold, color=crimson];
m3_43 -> m3_48  [key=0, style=bold, color=crimson];
m3_43 -> m3_49  [key=0, style=bold, color=crimson];
m3_43 -> m3_50  [key=0, style=bold, color=crimson];
m3_43 -> m3_51  [key=0, style=bold, color=crimson];
m3_43 -> m3_52  [key=0, style=bold, color=crimson];
m3_43 -> m3_53  [key=0, style=bold, color=crimson];
m3_43 -> m3_54  [key=0, style=bold, color=crimson];
m3_43 -> m3_55  [key=0, style=bold, color=crimson];
m3_43 -> m3_56  [key=0, style=bold, color=crimson];
m3_43 -> m3_57  [key=0, style=bold, color=crimson];
m3_43 -> m3_58  [key=0, style=bold, color=crimson];
m3_43 -> m3_59  [key=0, style=bold, color=crimson];
m3_43 -> m3_60  [key=0, style=bold, color=crimson];
m3_43 -> m3_61  [key=0, style=bold, color=crimson];
m3_43 -> m3_62  [key=0, style=bold, color=crimson];
m3_43 -> m3_63  [key=0, style=bold, color=crimson];
m3_43 -> m3_64  [key=0, style=bold, color=crimson];
m3_43 -> m3_65  [key=0, style=bold, color=crimson];
m3_43 -> m3_66  [key=0, style=bold, color=crimson];
m3_43 -> m3_67  [key=0, style=bold, color=crimson];
m3_43 -> m3_68  [key=0, style=bold, color=crimson];
m3_43 -> m3_69  [key=0, style=bold, color=crimson];
m3_43 -> m3_70  [key=0, style=bold, color=crimson];
m3_43 -> m3_71  [key=0, style=bold, color=crimson];
m3_43 -> m3_72  [key=0, style=bold, color=crimson];
m3_43 -> m3_73  [key=0, style=bold, color=crimson];
m3_43 -> m3_74  [key=0, style=bold, color=crimson];
m3_43 -> m3_75  [key=0, style=bold, color=crimson];
m3_43 -> m3_76  [key=0, style=bold, color=crimson];
m3_43 -> m3_77  [key=0, style=bold, color=crimson];
m3_43 -> m3_78  [key=0, style=bold, color=crimson];
m3_43 -> m3_79  [key=0, style=bold, color=crimson];
m3_43 -> m3_80  [key=0, style=bold, color=crimson];
m3_43 -> m3_81  [key=0, style=bold, color=crimson];
m3_43 -> m3_82  [key=0, style=bold, color=crimson];
m3_43 -> m3_83  [key=0, style=bold, color=crimson];
m3_43 -> m3_84  [key=0, style=bold, color=crimson];
m3_43 -> m3_85  [key=0, style=bold, color=crimson];
m3_43 -> m3_86  [key=0, style=bold, color=crimson];
m3_43 -> m3_87  [key=0, style=bold, color=crimson];
m3_43 -> m3_88  [key=0, style=bold, color=crimson];
m3_43 -> m3_89  [key=0, style=bold, color=crimson];
m3_43 -> m3_90  [key=0, style=bold, color=crimson];
m3_43 -> m3_91  [key=0, style=bold, color=crimson];
m3_43 -> m3_92  [key=0, style=bold, color=crimson];
m3_43 -> m3_93  [key=0, style=bold, color=crimson];
m3_43 -> m3_94  [key=0, style=bold, color=crimson];
m3_43 -> m3_95  [key=0, style=bold, color=crimson];
m3_43 -> m3_96  [key=0, style=bold, color=crimson];
m3_43 -> m3_97  [key=0, style=bold, color=crimson];
m3_43 -> m3_98  [key=0, style=bold, color=crimson];
m3_43 -> m3_99  [key=0, style=bold, color=crimson];
m3_43 -> m3_100  [key=0, style=bold, color=crimson];
m3_43 -> m3_101  [key=0, style=bold, color=crimson];
m3_43 -> m3_102  [key=0, style=bold, color=crimson];
m3_43 -> m3_103  [key=0, style=bold, color=crimson];
m3_43 -> m3_104  [key=0, style=bold, color=crimson];
m3_43 -> m3_105  [key=0, style=bold, color=crimson];
m3_43 -> m3_106  [key=0, style=bold, color=crimson];
m3_43 -> m3_107  [key=0, style=bold, color=crimson];
m3_43 -> m3_108  [key=0, style=bold, color=crimson];
m3_43 -> m3_109  [key=0, style=bold, color=crimson];
m3_43 -> m3_110  [key=0, style=bold, color=crimson];
m3_43 -> m3_111  [key=0, style=bold, color=crimson];
m3_43 -> m3_112  [key=0, style=bold, color=crimson];
m3_43 -> m3_113  [key=0, style=bold, color=crimson];
m3_43 -> m3_114  [key=0, style=bold, color=crimson];
m3_43 -> m3_115  [key=0, style=bold, color=crimson];
m3_43 -> m3_116  [key=0, style=bold, color=crimson];
m3_43 -> m3_117  [key=0, style=bold, color=crimson];
m3_43 -> m3_118  [key=0, style=bold, color=crimson];
m3_43 -> m3_119  [key=0, style=bold, color=crimson];
m3_43 -> m3_120  [key=0, style=bold, color=crimson];
m3_43 -> m3_121  [key=0, style=bold, color=crimson];
m3_43 -> m3_122  [key=0, style=bold, color=crimson];
m3_43 -> m3_123  [key=0, style=bold, color=crimson];
m3_43 -> m3_124  [key=0, style=bold, color=crimson];
m3_44 -> m3_45  [key=0, style=solid];
m3_45 -> m3_46  [key=0, style=solid];
m3_46 -> m3_47  [key=0, style=solid];
m3_47 -> m3_48  [key=0, style=solid];
m3_48 -> m3_49  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_50 -> m3_51  [key=0, style=solid];
m3_51 -> m3_52  [key=0, style=solid];
m3_52 -> m3_53  [key=0, style=solid];
m3_53 -> m3_54  [key=0, style=solid];
m3_54 -> m3_55  [key=0, style=solid];
m3_55 -> m3_56  [key=0, style=solid];
m3_56 -> m3_57  [key=0, style=solid];
m3_57 -> m3_58  [key=0, style=solid];
m3_58 -> m3_59  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_60 -> m3_61  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_62 -> m3_63  [key=0, style=solid];
m3_63 -> m3_64  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid];
m3_65 -> m3_66  [key=0, style=solid];
m3_66 -> m3_67  [key=0, style=solid];
m3_67 -> m3_68  [key=0, style=solid];
m3_68 -> m3_69  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_70 -> m3_71  [key=0, style=solid];
m3_71 -> m3_72  [key=0, style=solid];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_74 -> m3_75  [key=0, style=solid];
m3_75 -> m3_76  [key=0, style=solid];
m3_76 -> m3_77  [key=0, style=solid];
m3_77 -> m3_78  [key=0, style=solid];
m3_78 -> m3_79  [key=0, style=solid];
m3_79 -> m3_80  [key=0, style=solid];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_82 -> m3_83  [key=0, style=solid];
m3_83 -> m3_84  [key=0, style=solid];
m3_84 -> m3_85  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_86 -> m3_87  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_88 -> m3_89  [key=0, style=solid];
m3_89 -> m3_90  [key=0, style=solid];
m3_90 -> m3_91  [key=0, style=solid];
m3_91 -> m3_92  [key=0, style=solid];
m3_92 -> m3_93  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_94 -> m3_95  [key=0, style=solid];
m3_95 -> m3_96  [key=0, style=solid];
m3_96 -> m3_97  [key=0, style=solid];
m3_97 -> m3_98  [key=0, style=solid];
m3_98 -> m3_99  [key=0, style=solid];
m3_99 -> m3_100  [key=0, style=solid];
m3_100 -> m3_101  [key=0, style=solid];
m3_101 -> m3_102  [key=0, style=solid];
m3_102 -> m3_103  [key=0, style=solid];
m3_103 -> m3_104  [key=0, style=solid];
m3_104 -> m3_105  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_106 -> m3_107  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_108 -> m3_109  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_110 -> m3_111  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_112 -> m3_113  [key=0, style=solid];
m3_113 -> m3_114  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_115 -> m3_116  [key=0, style=solid];
m3_116 -> m3_117  [key=0, style=solid];
m3_117 -> m3_118  [key=0, style=solid];
m3_118 -> m3_119  [key=0, style=solid];
m3_119 -> m3_120  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_121 -> m3_122  [key=0, style=solid];
m3_122 -> m3_123  [key=0, style=solid];
m3_123 -> m3_124  [key=0, style=solid];
m3_124 -> m3_125  [key=0, style=solid];
m3_125 -> m3_43  [key=0, style=bold, color=blue];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_15  [key=2, style=dotted];
m3_20 -> m3_4  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_15  [key=2, style=dotted];
m3_21 -> m3_4  [key=2, style=dotted];
m3_22 -> m3_19  [key=0, style=bold, color=blue];
m3_39 -> m3_40  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_42  [key=2, style=dotted];
m3_40 -> m3_4  [key=2, style=dotted];
m3_41 -> m3_39  [key=0, style=bold, color=blue];
m3_23 -> m3_24  [key=0, style=solid];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_26  [key=2, style=dotted];
m3_24 -> m3_4  [key=2, style=dotted];
m3_25 -> m3_23  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_15  [key=2, style=dotted];
m3_13 -> m3_4  [key=2, style=dotted];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_31 -> m3_32  [key=0, style=solid];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [key=2, style=dotted];
m3_32 -> m3_4  [key=2, style=dotted];
m3_33 -> m3_31  [key=0, style=bold, color=blue];
m3_126 -> m3_127  [key=0, style=solid];
m3_127 -> m3_128  [key=0, style=solid];
m3_127 -> m3_43  [key=2, style=dotted];
m3_128 -> m3_126  [key=0, style=bold, color=blue];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_3  [key=2, style=dotted];
m3_6 -> m3_4  [key=2, style=dotted];
m3_7 -> m3_5  [key=0, style=bold, color=blue];
m3_129 -> m3_127  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Tests.PluralTestSource"];
m5_0 -> m5_1  [key=0, style=solid, color=red];
m5_1 -> m5_2  [key=0, style=solid, color=red];
m5_1 -> m5_3  [key=2, style=dotted, color=red];
m5_1 -> m5_4  [key=2, style=dotted, color=red];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m7_2 -> m7_3  [key=0, style=solid];
m7_3 -> m7_2  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_0  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid, color=red];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_2 -> m8_0  [key=0, style=bold, color=blue];
m8_3 -> m8_4  [key=0, style=solid];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_6  [key=2, style=dotted];
m8_5 -> m8_3  [key=0, style=bold, color=blue];
m8_12 -> m8_13  [key=0, style=solid, color=green];
m8_13 -> m8_14  [key=0, style=solid, color=green];
m8_13 -> m8_15  [key=2, style=dotted, color=green];
m8_14 -> m8_12  [key=0, style=bold, color=blue];
m8_7 -> m8_8  [key=0, style=solid, color=red];
m8_8 -> m8_9  [key=0, style=solid, color=red];
m8_8 -> m8_6  [key=2, style=dotted, color=red];
m8_9 -> m8_7  [key=0, style=bold, color=blue];
m8_10 -> m8_1  [key=1, style=dashed, color=red, label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter"];
m8_10 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter"];
m8_10 -> m8_8  [key=1, style=dashed, color=red, label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter"];
m9_74 -> m9_75  [key=0, style=solid];
m9_75 -> m9_76  [key=0, style=solid];
m9_75 -> m9_79  [key=2, style=dotted];
m9_75 -> m9_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_76 -> m9_77  [key=0, style=solid];
m9_76 -> m9_9  [key=2, style=dotted];
m9_76 -> m9_10  [key=2, style=dotted];
m9_76 -> m9_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_77 -> m9_78  [key=0, style=solid];
m9_77 -> m9_36  [key=2, style=dotted];
m9_77 -> m9_12  [key=2, style=dotted];
m9_78 -> m9_74  [key=0, style=bold, color=blue];
m9_392 -> m9_393  [key=0, style=solid];
m9_392 -> m9_394  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_393 -> m9_394  [key=0, style=solid];
m9_393 -> m9_9  [key=2, style=dotted];
m9_393 -> m9_10  [key=2, style=dotted];
m9_393 -> m9_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_394 -> m9_395  [key=0, style=solid];
m9_394 -> m9_105  [key=2, style=dotted];
m9_395 -> m9_392  [key=0, style=bold, color=blue];
m9_251 -> m9_252  [key=0, style=solid];
m9_252 -> m9_253  [key=0, style=solid];
m9_252 -> m9_247  [key=2, style=dotted];
m9_252 -> m9_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_253 -> m9_254  [key=0, style=solid];
m9_253 -> m9_9  [key=2, style=dotted];
m9_253 -> m9_10  [key=2, style=dotted];
m9_253 -> m9_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_254 -> m9_255  [key=0, style=solid];
m9_254 -> m9_36  [key=2, style=dotted];
m9_254 -> m9_12  [key=2, style=dotted];
m9_255 -> m9_251  [key=0, style=bold, color=blue];
m9_335 -> m9_336  [key=0, style=solid];
m9_336 -> m9_337  [key=0, style=solid];
m9_337 -> m9_338  [key=0, style=solid];
m9_337 -> m9_339  [key=2, style=dotted];
m9_338 -> m9_335  [key=0, style=bold, color=blue];
m9_415 -> m9_416  [key=0, style=solid];
m9_416 -> m9_417  [key=0, style=solid];
m9_416 -> m9_6  [key=2, style=dotted];
m9_416 -> m9_418  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_417 -> m9_418  [key=0, style=solid];
m9_417 -> m9_9  [key=2, style=dotted];
m9_417 -> m9_10  [key=2, style=dotted];
m9_417 -> m9_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_418 -> m9_419  [key=0, style=solid];
m9_418 -> m9_105  [key=2, style=dotted];
m9_419 -> m9_415  [key=0, style=bold, color=blue];
m9_369 -> m9_370  [key=0, style=solid];
m9_369 -> m9_371  [key=1, style=dashed, color=darkseagreen4, label=int];
m9_369 -> m9_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m9_370 -> m9_371  [key=0, style=solid];
m9_370 -> m9_9  [key=2, style=dotted];
m9_370 -> m9_10  [key=2, style=dotted];
m9_370 -> m9_375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_371 -> m9_372  [key=0, style=solid];
m9_371 -> m9_373  [key=2, style=dotted];
m9_371 -> m9_374  [key=2, style=dotted];
m9_371 -> m9_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_372 -> m9_369  [key=0, style=bold, color=blue];
m9_291 -> m9_292  [key=0, style=solid];
m9_292 -> m9_293  [key=0, style=solid];
m9_292 -> m9_79  [key=2, style=dotted];
m9_292 -> m9_294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_293 -> m9_294  [key=0, style=solid];
m9_293 -> m9_9  [key=2, style=dotted];
m9_293 -> m9_10  [key=2, style=dotted];
m9_293 -> m9_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_294 -> m9_295  [key=0, style=solid];
m9_294 -> m9_36  [key=2, style=dotted];
m9_294 -> m9_12  [key=2, style=dotted];
m9_295 -> m9_291  [key=0, style=bold, color=blue];
m9_216 -> m9_217  [key=0, style=solid];
m9_217 -> m9_218  [key=0, style=solid];
m9_217 -> m9_221  [key=2, style=dotted];
m9_217 -> m9_70  [key=2, style=dotted];
m9_217 -> m9_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_218 -> m9_219  [key=0, style=solid];
m9_218 -> m9_9  [key=2, style=dotted];
m9_218 -> m9_10  [key=2, style=dotted];
m9_218 -> m9_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_219 -> m9_220  [key=0, style=solid];
m9_219 -> m9_36  [key=2, style=dotted];
m9_219 -> m9_12  [key=2, style=dotted];
m9_220 -> m9_216  [key=0, style=bold, color=blue];
m9_382 -> m9_383  [key=0, style=solid];
m9_382 -> m9_384  [key=1, style=dashed, color=darkseagreen4, label=int];
m9_382 -> m9_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m9_383 -> m9_384  [key=0, style=solid];
m9_383 -> m9_9  [key=2, style=dotted];
m9_383 -> m9_10  [key=2, style=dotted];
m9_383 -> m9_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_384 -> m9_385  [key=0, style=solid];
m9_384 -> m9_373  [key=2, style=dotted];
m9_384 -> m9_374  [key=2, style=dotted];
m9_384 -> m9_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_385 -> m9_382  [key=0, style=bold, color=blue];
m9_144 -> m9_145  [key=0, style=solid];
m9_144 -> m9_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m9_145 -> m9_146  [key=0, style=solid];
m9_145 -> m9_9  [key=2, style=dotted];
m9_145 -> m9_10  [key=2, style=dotted];
m9_145 -> m9_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_146 -> m9_147  [key=0, style=solid];
m9_146 -> m9_105  [key=2, style=dotted];
m9_147 -> m9_144  [key=0, style=bold, color=blue];
m9_208 -> m9_209  [key=0, style=solid];
m9_209 -> m9_210  [key=0, style=solid];
m9_209 -> m9_204  [key=2, style=dotted];
m9_209 -> m9_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_210 -> m9_211  [key=0, style=solid];
m9_210 -> m9_9  [key=2, style=dotted];
m9_210 -> m9_10  [key=2, style=dotted];
m9_210 -> m9_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_211 -> m9_212  [key=0, style=solid];
m9_211 -> m9_105  [key=2, style=dotted];
m9_212 -> m9_208  [key=0, style=bold, color=blue];
m9_275 -> m9_276  [key=0, style=solid];
m9_276 -> m9_277  [key=0, style=solid];
m9_276 -> m9_221  [key=2, style=dotted];
m9_276 -> m9_278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_277 -> m9_278  [key=0, style=solid];
m9_277 -> m9_9  [key=2, style=dotted];
m9_277 -> m9_10  [key=2, style=dotted];
m9_277 -> m9_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_278 -> m9_279  [key=0, style=solid];
m9_278 -> m9_36  [key=2, style=dotted];
m9_278 -> m9_12  [key=2, style=dotted];
m9_279 -> m9_275  [key=0, style=bold, color=blue];
m9_199 -> m9_200  [key=0, style=solid];
m9_200 -> m9_201  [key=0, style=solid];
m9_200 -> m9_204  [key=2, style=dotted];
m9_200 -> m9_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_201 -> m9_202  [key=0, style=solid];
m9_201 -> m9_9  [key=2, style=dotted];
m9_201 -> m9_10  [key=2, style=dotted];
m9_201 -> m9_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_202 -> m9_203  [key=0, style=solid];
m9_202 -> m9_105  [key=2, style=dotted];
m9_203 -> m9_199  [key=0, style=bold, color=blue];
m9_56 -> m9_57  [key=0, style=solid];
m9_56 -> m9_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m9_57 -> m9_58  [key=0, style=solid];
m9_57 -> m9_9  [key=2, style=dotted];
m9_57 -> m9_10  [key=2, style=dotted];
m9_57 -> m9_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_58 -> m9_59  [key=0, style=solid];
m9_58 -> m9_36  [key=2, style=dotted];
m9_58 -> m9_12  [key=2, style=dotted];
m9_59 -> m9_56  [key=0, style=bold, color=blue];
m9_101 -> m9_102  [key=0, style=solid];
m9_101 -> m9_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m9_102 -> m9_103  [key=0, style=solid];
m9_102 -> m9_9  [key=2, style=dotted];
m9_102 -> m9_10  [key=2, style=dotted];
m9_102 -> m9_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_103 -> m9_104  [key=0, style=solid];
m9_103 -> m9_105  [key=2, style=dotted];
m9_103 -> m9_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m9_104 -> m9_101  [key=0, style=bold, color=blue];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m9_17 -> m9_18  [key=0, style=solid];
m9_17 -> m9_9  [key=2, style=dotted];
m9_17 -> m9_10  [key=2, style=dotted];
m9_17 -> m9_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_18 -> m9_19  [key=0, style=solid];
m9_18 -> m9_20  [key=2, style=dotted];
m9_19 -> m9_16  [key=0, style=bold, color=blue];
m9_308 -> m9_309  [key=0, style=solid];
m9_308 -> m9_310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m9_309 -> m9_310  [key=0, style=solid];
m9_309 -> m9_9  [key=2, style=dotted];
m9_309 -> m9_10  [key=2, style=dotted];
m9_309 -> m9_312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_310 -> m9_311  [key=0, style=solid];
m9_310 -> m9_105  [key=2, style=dotted];
m9_311 -> m9_308  [key=0, style=bold, color=blue];
m9_347 -> m9_348  [key=0, style=solid];
m9_348 -> m9_349  [key=0, style=solid];
m9_349 -> m9_350  [key=0, style=solid];
m9_349 -> m9_339  [key=2, style=dotted];
m9_350 -> m9_347  [key=0, style=bold, color=blue];
m9_119 -> m9_120  [key=0, style=solid];
m9_120 -> m9_121  [key=0, style=solid];
m9_120 -> m9_115  [key=2, style=dotted];
m9_120 -> m9_70  [key=2, style=dotted];
m9_120 -> m9_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_121 -> m9_122  [key=0, style=solid];
m9_121 -> m9_9  [key=2, style=dotted];
m9_121 -> m9_10  [key=2, style=dotted];
m9_121 -> m9_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_122 -> m9_123  [key=0, style=solid];
m9_122 -> m9_36  [key=2, style=dotted];
m9_122 -> m9_12  [key=2, style=dotted];
m9_123 -> m9_119  [key=0, style=bold, color=blue];
m9_315 -> m9_316  [key=0, style=solid];
m9_315 -> m9_318  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_315 -> m9_319  [key=1, style=dashed, color=darkseagreen4, label=bool];
m9_316 -> m9_317  [key=0, style=solid];
m9_316 -> m9_9  [key=2, style=dotted];
m9_316 -> m9_10  [key=2, style=dotted];
m9_316 -> m9_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_316 -> m9_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_316 -> m9_319  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_318 -> m9_319  [key=0, style=solid];
m9_318 -> m9_105  [key=2, style=dotted];
m9_319 -> m9_320  [key=0, style=solid];
m9_319 -> m9_321  [key=2, style=dotted];
m9_319 -> m9_105  [key=2, style=dotted];
m9_317 -> m9_318  [key=0, style=solid];
m9_317 -> m9_319  [key=0, style=solid];
m9_320 -> m9_315  [key=0, style=bold, color=blue];
m9_267 -> m9_268  [key=0, style=solid];
m9_267 -> m9_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_268 -> m9_269  [key=0, style=solid];
m9_268 -> m9_9  [key=2, style=dotted];
m9_268 -> m9_10  [key=2, style=dotted];
m9_268 -> m9_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_269 -> m9_270  [key=0, style=solid];
m9_269 -> m9_271  [key=2, style=dotted];
m9_269 -> m9_12  [key=2, style=dotted];
m9_270 -> m9_267  [key=0, style=bold, color=blue];
m9_127 -> m9_128  [key=0, style=solid];
m9_128 -> m9_129  [key=0, style=solid];
m9_128 -> m9_115  [key=2, style=dotted];
m9_128 -> m9_70  [key=2, style=dotted];
m9_128 -> m9_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_129 -> m9_130  [key=0, style=solid];
m9_129 -> m9_9  [key=2, style=dotted];
m9_129 -> m9_10  [key=2, style=dotted];
m9_129 -> m9_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_130 -> m9_131  [key=0, style=solid];
m9_130 -> m9_36  [key=2, style=dotted];
m9_130 -> m9_12  [key=2, style=dotted];
m9_131 -> m9_127  [key=0, style=bold, color=blue];
m9_160 -> m9_161  [key=0, style=solid];
m9_160 -> m9_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m9_161 -> m9_162  [key=0, style=solid];
m9_161 -> m9_9  [key=2, style=dotted];
m9_161 -> m9_10  [key=2, style=dotted];
m9_161 -> m9_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_162 -> m9_163  [key=0, style=solid];
m9_162 -> m9_105  [key=2, style=dotted];
m9_163 -> m9_160  [key=0, style=bold, color=blue];
m9_110 -> m9_111  [key=0, style=solid];
m9_111 -> m9_112  [key=0, style=solid];
m9_111 -> m9_115  [key=2, style=dotted];
m9_111 -> m9_70  [key=2, style=dotted];
m9_111 -> m9_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_112 -> m9_113  [key=0, style=solid];
m9_112 -> m9_9  [key=2, style=dotted];
m9_112 -> m9_10  [key=2, style=dotted];
m9_112 -> m9_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_113 -> m9_114  [key=0, style=solid];
m9_113 -> m9_36  [key=2, style=dotted];
m9_113 -> m9_12  [key=2, style=dotted];
m9_114 -> m9_110  [key=0, style=bold, color=blue];
m9_92 -> m9_93  [key=0, style=solid];
m9_93 -> m9_94  [key=0, style=solid];
m9_93 -> m9_79  [key=2, style=dotted];
m9_93 -> m9_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_94 -> m9_95  [key=0, style=solid];
m9_94 -> m9_9  [key=2, style=dotted];
m9_94 -> m9_10  [key=2, style=dotted];
m9_94 -> m9_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_95 -> m9_96  [key=0, style=solid];
m9_95 -> m9_36  [key=2, style=dotted];
m9_95 -> m9_12  [key=2, style=dotted];
m9_96 -> m9_92  [key=0, style=bold, color=blue];
m9_48 -> m9_49  [key=0, style=solid];
m9_48 -> m9_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m9_49 -> m9_50  [key=0, style=solid];
m9_49 -> m9_9  [key=2, style=dotted];
m9_49 -> m9_10  [key=2, style=dotted];
m9_49 -> m9_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_50 -> m9_51  [key=0, style=solid];
m9_50 -> m9_36  [key=2, style=dotted];
m9_50 -> m9_12  [key=2, style=dotted];
m9_51 -> m9_48  [key=0, style=bold, color=blue];
m9_420 -> m9_421  [key=0, style=solid];
m9_14 -> m9_15  [key=0, style=solid];
m9_13 -> m9_14  [key=0, style=solid];
m9_15 -> m9_13  [key=0, style=bold, color=blue];
m9_21 -> m9_22  [key=0, style=solid];
m9_22 -> m9_23  [key=0, style=solid];
m9_22 -> m9_6  [key=2, style=dotted];
m9_23 -> m9_21  [key=0, style=bold, color=blue];
m9_28 -> m9_29  [key=0, style=solid];
m9_29 -> m9_30  [key=0, style=solid];
m9_29 -> m9_31  [key=2, style=dotted];
m9_30 -> m9_28  [key=0, style=bold, color=blue];
m9_37 -> m9_38  [key=0, style=solid];
m9_38 -> m9_39  [key=0, style=solid];
m9_38 -> m9_40  [key=2, style=dotted];
m9_39 -> m9_37  [key=0, style=bold, color=blue];
m9_45 -> m9_46  [key=0, style=solid];
m9_46 -> m9_47  [key=0, style=solid];
m9_46 -> m9_6  [key=2, style=dotted];
m9_47 -> m9_45  [key=0, style=bold, color=blue];
m9_52 -> m9_53  [key=0, style=solid];
m9_53 -> m9_54  [key=0, style=solid];
m9_53 -> m9_55  [key=2, style=dotted];
m9_54 -> m9_52  [key=0, style=bold, color=blue];
m9_60 -> m9_61  [key=0, style=solid];
m9_61 -> m9_62  [key=0, style=solid];
m9_61 -> m9_63  [key=2, style=dotted];
m9_62 -> m9_60  [key=0, style=bold, color=blue];
m9_71 -> m9_72  [key=0, style=solid];
m9_72 -> m9_73  [key=0, style=solid];
m9_72 -> m9_55  [key=2, style=dotted];
m9_73 -> m9_71  [key=0, style=bold, color=blue];
m9_80 -> m9_81  [key=0, style=solid];
m9_81 -> m9_82  [key=0, style=solid];
m9_81 -> m9_83  [key=2, style=dotted];
m9_82 -> m9_80  [key=0, style=bold, color=blue];
m9_89 -> m9_90  [key=0, style=solid];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_63  [key=2, style=dotted];
m9_91 -> m9_89  [key=0, style=bold, color=blue];
m9_97 -> m9_98  [key=0, style=solid];
m9_98 -> m9_99  [key=0, style=solid];
m9_98 -> m9_100  [key=2, style=dotted];
m9_99 -> m9_97  [key=0, style=bold, color=blue];
m9_106 -> m9_107  [key=0, style=solid];
m9_107 -> m9_108  [key=0, style=solid];
m9_107 -> m9_109  [key=2, style=dotted];
m9_108 -> m9_106  [key=0, style=bold, color=blue];
m9_116 -> m9_117  [key=0, style=solid];
m9_117 -> m9_118  [key=0, style=solid];
m9_117 -> m9_109  [key=2, style=dotted];
m9_118 -> m9_116  [key=0, style=bold, color=blue];
m9_124 -> m9_125  [key=0, style=solid];
m9_125 -> m9_126  [key=0, style=solid];
m9_125 -> m9_109  [key=2, style=dotted];
m9_126 -> m9_124  [key=0, style=bold, color=blue];
m9_132 -> m9_133  [key=0, style=solid];
m9_133 -> m9_134  [key=0, style=solid];
m9_133 -> m9_109  [key=2, style=dotted];
m9_134 -> m9_132  [key=0, style=bold, color=blue];
m9_141 -> m9_142  [key=0, style=solid];
m9_142 -> m9_143  [key=0, style=solid];
m9_142 -> m9_140  [key=2, style=dotted];
m9_143 -> m9_141  [key=0, style=bold, color=blue];
m9_148 -> m9_149  [key=0, style=solid];
m9_149 -> m9_150  [key=0, style=solid];
m9_149 -> m9_151  [key=2, style=dotted];
m9_150 -> m9_148  [key=0, style=bold, color=blue];
m9_156 -> m9_157  [key=0, style=solid];
m9_157 -> m9_158  [key=0, style=solid];
m9_157 -> m9_159  [key=2, style=dotted];
m9_158 -> m9_156  [key=0, style=bold, color=blue];
m9_164 -> m9_165  [key=0, style=solid];
m9_165 -> m9_166  [key=0, style=solid];
m9_165 -> m9_159  [key=2, style=dotted];
m9_166 -> m9_164  [key=0, style=bold, color=blue];
m9_174 -> m9_175  [key=0, style=solid];
m9_177 -> m9_178  [key=0, style=solid];
m9_177 -> m9_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m9_177 -> m9_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m9_175 -> m9_176  [key=0, style=solid];
m9_175 -> m9_140  [key=2, style=dotted];
m9_176 -> m9_174  [key=0, style=bold, color=blue];
m9_178 -> m9_179  [key=0, style=solid];
m9_178 -> m9_180  [key=2, style=dotted];
m9_178 -> m9_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_182 -> m9_183  [key=0, style=solid];
m9_182 -> m9_184  [key=2, style=dotted];
m9_182 -> m9_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_186 -> m9_187  [key=0, style=solid];
m9_186 -> m9_188  [key=2, style=dotted];
m9_179 -> m9_177  [key=0, style=bold, color=blue];
m9_181 -> m9_182  [key=0, style=solid];
m9_183 -> m9_181  [key=0, style=bold, color=blue];
m9_185 -> m9_186  [key=0, style=solid];
m9_187 -> m9_185  [key=0, style=bold, color=blue];
m9_195 -> m9_196  [key=0, style=solid];
m9_196 -> m9_197  [key=0, style=solid];
m9_196 -> m9_198  [key=2, style=dotted];
m9_197 -> m9_195  [key=0, style=bold, color=blue];
m9_205 -> m9_206  [key=0, style=solid];
m9_206 -> m9_207  [key=0, style=solid];
m9_206 -> m9_204  [key=2, style=dotted];
m9_207 -> m9_205  [key=0, style=bold, color=blue];
m9_213 -> m9_214  [key=0, style=solid];
m9_214 -> m9_215  [key=0, style=solid];
m9_214 -> m9_204  [key=2, style=dotted];
m9_215 -> m9_213  [key=0, style=bold, color=blue];
m9_222 -> m9_223  [key=0, style=solid];
m9_223 -> m9_224  [key=0, style=solid];
m9_223 -> m9_204  [key=2, style=dotted];
m9_224 -> m9_222  [key=0, style=bold, color=blue];
m9_230 -> m9_231  [key=0, style=solid];
m9_231 -> m9_232  [key=0, style=solid];
m9_231 -> m9_233  [key=2, style=dotted];
m9_232 -> m9_230  [key=0, style=bold, color=blue];
m9_239 -> m9_240  [key=0, style=solid];
m9_240 -> m9_241  [key=0, style=solid];
m9_240 -> m9_6  [key=2, style=dotted];
m9_241 -> m9_239  [key=0, style=bold, color=blue];
m9_248 -> m9_249  [key=0, style=solid];
m9_249 -> m9_250  [key=0, style=solid];
m9_249 -> m9_6  [key=2, style=dotted];
m9_250 -> m9_248  [key=0, style=bold, color=blue];
m9_256 -> m9_257  [key=0, style=solid];
m9_257 -> m9_258  [key=0, style=solid];
m9_257 -> m9_6  [key=2, style=dotted];
m9_258 -> m9_256  [key=0, style=bold, color=blue];
m9_264 -> m9_265  [key=0, style=solid];
m9_265 -> m9_266  [key=0, style=solid];
m9_265 -> m9_6  [key=2, style=dotted];
m9_266 -> m9_264  [key=0, style=bold, color=blue];
m9_272 -> m9_273  [key=0, style=solid];
m9_273 -> m9_274  [key=0, style=solid];
m9_273 -> m9_6  [key=2, style=dotted];
m9_274 -> m9_272  [key=0, style=bold, color=blue];
m9_280 -> m9_281  [key=0, style=solid];
m9_281 -> m9_282  [key=0, style=solid];
m9_281 -> m9_283  [key=2, style=dotted];
m9_282 -> m9_280  [key=0, style=bold, color=blue];
m9_288 -> m9_289  [key=0, style=solid];
m9_289 -> m9_290  [key=0, style=solid];
m9_289 -> m9_6  [key=2, style=dotted];
m9_290 -> m9_288  [key=0, style=bold, color=blue];
m9_296 -> m9_297  [key=0, style=solid];
m9_297 -> m9_298  [key=0, style=solid];
m9_297 -> m9_299  [key=2, style=dotted];
m9_298 -> m9_296  [key=0, style=bold, color=blue];
m9_304 -> m9_305  [key=0, style=solid];
m9_305 -> m9_306  [key=0, style=solid];
m9_305 -> m9_307  [key=2, style=dotted];
m9_306 -> m9_304  [key=0, style=bold, color=blue];
m9_312 -> m9_313  [key=0, style=solid];
m9_313 -> m9_314  [key=0, style=solid];
m9_313 -> m9_307  [key=2, style=dotted];
m9_314 -> m9_312  [key=0, style=bold, color=blue];
m9_322 -> m9_323  [key=0, style=solid];
m9_323 -> m9_324  [key=0, style=solid];
m9_323 -> m9_325  [key=2, style=dotted];
m9_324 -> m9_322  [key=0, style=bold, color=blue];
m9_332 -> m9_333  [key=0, style=solid];
m9_333 -> m9_334  [key=0, style=solid];
m9_333 -> m9_325  [key=2, style=dotted];
m9_334 -> m9_332  [key=0, style=bold, color=blue];
m9_340 -> m9_341  [key=0, style=solid];
m9_341 -> m9_342  [key=0, style=solid];
m9_341 -> m9_9  [key=2, style=dotted];
m9_341 -> m9_10  [key=2, style=dotted];
m9_341 -> m9_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_342 -> m9_340  [key=0, style=bold, color=blue];
m9_343 -> m9_344  [key=0, style=solid];
m9_344 -> m9_345  [key=0, style=solid];
m9_344 -> m9_346  [key=2, style=dotted];
m9_345 -> m9_343  [key=0, style=bold, color=blue];
m9_351 -> m9_352  [key=0, style=solid];
m9_352 -> m9_353  [key=0, style=solid];
m9_352 -> m9_9  [key=2, style=dotted];
m9_352 -> m9_10  [key=2, style=dotted];
m9_352 -> m9_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_353 -> m9_351  [key=0, style=bold, color=blue];
m9_354 -> m9_355  [key=0, style=solid];
m9_355 -> m9_356  [key=0, style=solid];
m9_355 -> m9_357  [key=2, style=dotted];
m9_356 -> m9_354  [key=0, style=bold, color=blue];
m9_362 -> m9_363  [key=0, style=solid];
m9_363 -> m9_364  [key=0, style=solid];
m9_363 -> m9_9  [key=2, style=dotted];
m9_363 -> m9_10  [key=2, style=dotted];
m9_363 -> m9_365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_364 -> m9_362  [key=0, style=bold, color=blue];
m9_365 -> m9_366  [key=0, style=solid];
m9_366 -> m9_367  [key=0, style=solid];
m9_366 -> m9_368  [key=2, style=dotted];
m9_367 -> m9_365  [key=0, style=bold, color=blue];
m9_380 -> m9_381  [key=0, style=solid];
m9_375 -> m9_376  [key=0, style=solid];
m9_379 -> m9_380  [key=0, style=solid];
m9_376 -> m9_377  [key=0, style=solid];
m9_376 -> m9_378  [key=2, style=dotted];
m9_377 -> m9_375  [key=0, style=bold, color=blue];
m9_381 -> m9_379  [key=0, style=bold, color=blue];
m9_390 -> m9_391  [key=0, style=solid];
m9_386 -> m9_387  [key=0, style=solid];
m9_389 -> m9_390  [key=0, style=solid];
m9_387 -> m9_388  [key=0, style=solid];
m9_387 -> m9_6  [key=2, style=dotted];
m9_388 -> m9_386  [key=0, style=bold, color=blue];
m9_391 -> m9_389  [key=0, style=bold, color=blue];
m9_396 -> m9_397  [key=0, style=solid];
m9_397 -> m9_398  [key=0, style=solid];
m9_397 -> m9_399  [key=2, style=dotted];
m9_398 -> m9_396  [key=0, style=bold, color=blue];
m9_404 -> m9_405  [key=0, style=solid];
m9_405 -> m9_406  [key=0, style=solid];
m9_405 -> m9_283  [key=2, style=dotted];
m9_406 -> m9_404  [key=0, style=bold, color=blue];
m9_411 -> m9_412  [key=0, style=solid];
m9_412 -> m9_413  [key=0, style=solid];
m9_412 -> m9_414  [key=2, style=dotted];
m9_413 -> m9_411  [key=0, style=bold, color=blue];
m9_421 -> m9_422  [key=0, style=solid];
m9_421 -> m9_6  [key=2, style=dotted];
m9_422 -> m9_420  [key=0, style=bold, color=blue];
m9_64 -> m9_65  [key=0, style=solid];
m9_65 -> m9_66  [key=0, style=solid];
m9_65 -> m9_69  [key=2, style=dotted];
m9_65 -> m9_70  [key=2, style=dotted];
m9_65 -> m9_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_66 -> m9_67  [key=0, style=solid];
m9_66 -> m9_9  [key=2, style=dotted];
m9_66 -> m9_10  [key=2, style=dotted];
m9_66 -> m9_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_67 -> m9_68  [key=0, style=solid];
m9_67 -> m9_36  [key=2, style=dotted];
m9_67 -> m9_12  [key=2, style=dotted];
m9_68 -> m9_64  [key=0, style=bold, color=blue];
m9_407 -> m9_408  [key=0, style=solid];
m9_407 -> m9_409  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m9_408 -> m9_409  [key=0, style=solid];
m9_408 -> m9_9  [key=2, style=dotted];
m9_408 -> m9_10  [key=2, style=dotted];
m9_408 -> m9_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_409 -> m9_410  [key=0, style=solid];
m9_409 -> m9_105  [key=2, style=dotted];
m9_410 -> m9_407  [key=0, style=bold, color=blue];
m9_152 -> m9_153  [key=0, style=solid];
m9_152 -> m9_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m9_153 -> m9_154  [key=0, style=solid];
m9_153 -> m9_9  [key=2, style=dotted];
m9_153 -> m9_10  [key=2, style=dotted];
m9_153 -> m9_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_154 -> m9_155  [key=0, style=solid];
m9_154 -> m9_105  [key=2, style=dotted];
m9_155 -> m9_152  [key=0, style=bold, color=blue];
m9_358 -> m9_359  [key=0, style=solid];
m9_359 -> m9_360  [key=0, style=solid];
m9_360 -> m9_361  [key=0, style=solid];
m9_360 -> m9_339  [key=2, style=dotted];
m9_361 -> m9_358  [key=0, style=bold, color=blue];
m9_326 -> m9_327  [key=0, style=solid];
m9_326 -> m9_329  [key=1, style=dashed, color=darkseagreen4, label=int];
m9_326 -> m9_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m9_327 -> m9_328  [key=0, style=solid];
m9_327 -> m9_9  [key=2, style=dotted];
m9_327 -> m9_10  [key=2, style=dotted];
m9_327 -> m9_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_327 -> m9_329  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_327 -> m9_330  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_329 -> m9_330  [key=0, style=solid];
m9_329 -> m9_105  [key=2, style=dotted];
m9_330 -> m9_331  [key=0, style=solid];
m9_330 -> m9_321  [key=2, style=dotted];
m9_330 -> m9_105  [key=2, style=dotted];
m9_328 -> m9_329  [key=0, style=solid];
m9_328 -> m9_330  [key=0, style=solid];
m9_331 -> m9_326  [key=0, style=bold, color=blue];
m9_24 -> m9_25  [key=0, style=solid];
m9_24 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m9_25 -> m9_26  [key=0, style=solid];
m9_25 -> m9_9  [key=2, style=dotted];
m9_25 -> m9_10  [key=2, style=dotted];
m9_25 -> m9_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_20  [key=2, style=dotted];
m9_27 -> m9_24  [key=0, style=bold, color=blue];
m9_41 -> m9_42  [key=0, style=solid];
m9_41 -> m9_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m9_42 -> m9_43  [key=0, style=solid];
m9_42 -> m9_9  [key=2, style=dotted];
m9_42 -> m9_10  [key=2, style=dotted];
m9_42 -> m9_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_43 -> m9_44  [key=0, style=solid];
m9_43 -> m9_36  [key=2, style=dotted];
m9_43 -> m9_12  [key=2, style=dotted];
m9_44 -> m9_41  [key=0, style=bold, color=blue];
m9_135 -> m9_136  [key=0, style=solid];
m9_136 -> m9_137  [key=0, style=solid];
m9_136 -> m9_140  [key=2, style=dotted];
m9_136 -> m9_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_137 -> m9_138  [key=0, style=solid];
m9_137 -> m9_9  [key=2, style=dotted];
m9_137 -> m9_10  [key=2, style=dotted];
m9_137 -> m9_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_138 -> m9_139  [key=0, style=solid];
m9_138 -> m9_105  [key=2, style=dotted];
m9_139 -> m9_135  [key=0, style=bold, color=blue];
m9_234 -> m9_235  [key=0, style=solid];
m9_235 -> m9_236  [key=0, style=solid];
m9_235 -> m9_79  [key=2, style=dotted];
m9_235 -> m9_70  [key=2, style=dotted];
m9_235 -> m9_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_236 -> m9_237  [key=0, style=solid];
m9_236 -> m9_9  [key=2, style=dotted];
m9_236 -> m9_10  [key=2, style=dotted];
m9_236 -> m9_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_237 -> m9_238  [key=0, style=solid];
m9_237 -> m9_36  [key=2, style=dotted];
m9_237 -> m9_12  [key=2, style=dotted];
m9_238 -> m9_234  [key=0, style=bold, color=blue];
m9_284 -> m9_285  [key=0, style=solid];
m9_284 -> m9_286  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_285 -> m9_286  [key=0, style=solid];
m9_285 -> m9_9  [key=2, style=dotted];
m9_285 -> m9_10  [key=2, style=dotted];
m9_285 -> m9_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_286 -> m9_287  [key=0, style=solid];
m9_286 -> m9_105  [key=2, style=dotted];
m9_287 -> m9_284  [key=0, style=bold, color=blue];
m9_189 -> m9_190  [key=0, style=solid];
m9_190 -> m9_191  [key=0, style=solid];
m9_190 -> m9_194  [key=2, style=dotted];
m9_190 -> m9_70  [key=2, style=dotted];
m9_190 -> m9_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_191 -> m9_192  [key=0, style=solid];
m9_191 -> m9_9  [key=2, style=dotted];
m9_191 -> m9_10  [key=2, style=dotted];
m9_191 -> m9_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_192 -> m9_193  [key=0, style=solid];
m9_192 -> m9_36  [key=2, style=dotted];
m9_192 -> m9_12  [key=2, style=dotted];
m9_193 -> m9_189  [key=0, style=bold, color=blue];
m9_167 -> m9_168  [key=0, style=solid];
m9_168 -> m9_169  [key=0, style=solid];
m9_168 -> m9_140  [key=2, style=dotted];
m9_168 -> m9_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_169 -> m9_170  [key=0, style=solid];
m9_171 -> m9_172  [key=0, style=solid];
m9_171 -> m9_105  [key=2, style=dotted];
m9_170 -> m9_171  [key=0, style=solid];
m9_170 -> m9_9  [key=2, style=dotted];
m9_170 -> m9_173  [key=2, style=dotted];
m9_170 -> m9_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_170 -> m9_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_172 -> m9_167  [key=0, style=bold, color=blue];
m9_259 -> m9_260  [key=0, style=solid];
m9_260 -> m9_261  [key=0, style=solid];
m9_260 -> m9_247  [key=2, style=dotted];
m9_260 -> m9_262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_261 -> m9_262  [key=0, style=solid];
m9_261 -> m9_9  [key=2, style=dotted];
m9_261 -> m9_10  [key=2, style=dotted];
m9_261 -> m9_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_262 -> m9_263  [key=0, style=solid];
m9_262 -> m9_36  [key=2, style=dotted];
m9_262 -> m9_12  [key=2, style=dotted];
m9_263 -> m9_259  [key=0, style=bold, color=blue];
m9_300 -> m9_301  [key=0, style=solid];
m9_300 -> m9_302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m9_301 -> m9_302  [key=0, style=solid];
m9_301 -> m9_9  [key=2, style=dotted];
m9_301 -> m9_10  [key=2, style=dotted];
m9_301 -> m9_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_302 -> m9_303  [key=0, style=solid];
m9_302 -> m9_105  [key=2, style=dotted];
m9_303 -> m9_300  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_6  [key=2, style=dotted];
m9_1 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m9_1 -> m9_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_7  [key=2, style=dotted];
m9_2 -> m9_8  [key=2, style=dotted];
m9_2 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_9  [key=2, style=dotted];
m9_3 -> m9_10  [key=2, style=dotted];
m9_3 -> m9_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_11  [key=2, style=dotted];
m9_4 -> m9_12  [key=2, style=dotted];
m9_5 -> m9_0  [key=0, style=bold, color=blue];
m9_242 -> m9_243  [key=0, style=solid];
m9_243 -> m9_244  [key=0, style=solid];
m9_243 -> m9_247  [key=2, style=dotted];
m9_243 -> m9_245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_244 -> m9_245  [key=0, style=solid];
m9_244 -> m9_9  [key=2, style=dotted];
m9_244 -> m9_10  [key=2, style=dotted];
m9_244 -> m9_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_245 -> m9_246  [key=0, style=solid];
m9_245 -> m9_36  [key=2, style=dotted];
m9_245 -> m9_12  [key=2, style=dotted];
m9_246 -> m9_242  [key=0, style=bold, color=blue];
m9_84 -> m9_85  [key=0, style=solid];
m9_85 -> m9_86  [key=0, style=solid];
m9_85 -> m9_79  [key=2, style=dotted];
m9_85 -> m9_70  [key=2, style=dotted];
m9_85 -> m9_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_86 -> m9_87  [key=0, style=solid];
m9_86 -> m9_9  [key=2, style=dotted];
m9_86 -> m9_10  [key=2, style=dotted];
m9_86 -> m9_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_87 -> m9_88  [key=0, style=solid];
m9_87 -> m9_36  [key=2, style=dotted];
m9_87 -> m9_12  [key=2, style=dotted];
m9_88 -> m9_84  [key=0, style=bold, color=blue];
m9_225 -> m9_226  [key=0, style=solid];
m9_226 -> m9_227  [key=0, style=solid];
m9_226 -> m9_221  [key=2, style=dotted];
m9_226 -> m9_70  [key=2, style=dotted];
m9_226 -> m9_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m9_227 -> m9_228  [key=0, style=solid];
m9_227 -> m9_9  [key=2, style=dotted];
m9_227 -> m9_10  [key=2, style=dotted];
m9_227 -> m9_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_228 -> m9_229  [key=0, style=solid];
m9_228 -> m9_36  [key=2, style=dotted];
m9_228 -> m9_12  [key=2, style=dotted];
m9_229 -> m9_225  [key=0, style=bold, color=blue];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> m9_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m9_33 -> m9_34  [key=0, style=solid];
m9_33 -> m9_9  [key=2, style=dotted];
m9_33 -> m9_10  [key=2, style=dotted];
m9_33 -> m9_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_34 -> m9_35  [key=0, style=solid];
m9_34 -> m9_36  [key=2, style=dotted];
m9_34 -> m9_12  [key=2, style=dotted];
m9_35 -> m9_32  [key=0, style=bold, color=blue];
m9_400 -> m9_401  [key=0, style=solid];
m9_400 -> m9_402  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m9_401 -> m9_402  [key=0, style=solid];
m9_401 -> m9_9  [key=2, style=dotted];
m9_401 -> m9_10  [key=2, style=dotted];
m9_401 -> m9_404  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_402 -> m9_403  [key=0, style=solid];
m9_402 -> m9_105  [key=2, style=dotted];
m9_403 -> m9_400  [key=0, style=bold, color=blue];
m9_423 -> m9_424  [key=0, style=solid];
m9_423 -> m9_425  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m9_424 -> m9_425  [key=0, style=solid];
m9_424 -> m9_427  [key=2, style=dotted];
m9_424 -> m9_10  [key=2, style=dotted];
m9_425 -> m9_426  [key=0, style=solid];
m9_425 -> m9_105  [key=2, style=dotted];
m9_426 -> m9_423  [key=0, style=bold, color=blue];
m9_428 -> m9_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m9_429 -> m9_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m9_429 -> m9_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m9_430 -> m9_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m9_431 -> m9_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=2, style=dotted];
m10_1 -> m10_4  [key=2, style=dotted];
m10_2 -> m10_0  [key=0, style=bold, color=blue];
m10_11 -> m10_12  [key=0, style=solid];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_3  [key=2, style=dotted];
m10_12 -> m10_4  [key=2, style=dotted];
m10_13 -> m10_11  [key=0, style=bold, color=blue];
m10_5 -> m10_6  [key=0, style=solid];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_3  [key=2, style=dotted];
m10_6 -> m10_4  [key=2, style=dotted];
m10_7 -> m10_5  [key=0, style=bold, color=blue];
m10_14 -> m10_15  [key=0, style=solid];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_3  [key=2, style=dotted];
m10_15 -> m10_4  [key=2, style=dotted];
m10_16 -> m10_14  [key=0, style=bold, color=blue];
m10_8 -> m10_9  [key=0, style=solid];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_3  [key=2, style=dotted];
m10_9 -> m10_4  [key=2, style=dotted];
m10_10 -> m10_8  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m11_0 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_0 -> m11_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_0 -> m11_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_0 -> m11_0  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResourceKey"];
m11_1 -> m11_2  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label=mod10];
m11_5 -> m11_9  [key=0, style=solid];
m11_7 -> m11_9  [key=0, style=solid];
m11_8 -> m11_9  [key=0, style=solid];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_8  [key=0, style=solid];
m11_4 -> m11_5  [key=0, style=solid];
m11_4 -> m11_6  [key=0, style=solid];
m11_6 -> m11_7  [key=0, style=solid];
m11_6 -> m11_8  [key=0, style=solid];
m11_9 -> m11_0  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_0  [key=0, style=bold, color=blue];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_5  [key=2, style=dotted];
m13_3 -> m13_6  [key=2, style=dotted];
m13_4 -> m13_2  [key=0, style=bold, color=blue];
m13_13 -> m13_14  [key=0, style=solid];
m13_14 -> m13_15  [key=0, style=solid];
m13_14 -> m13_5  [key=2, style=dotted];
m13_14 -> m13_6  [key=2, style=dotted];
m13_15 -> m13_13  [key=0, style=bold, color=blue];
m13_7 -> m13_8  [key=0, style=solid];
m13_8 -> m13_9  [key=0, style=solid];
m13_8 -> m13_5  [key=2, style=dotted];
m13_8 -> m13_6  [key=2, style=dotted];
m13_9 -> m13_7  [key=0, style=bold, color=blue];
m13_10 -> m13_11  [key=0, style=solid];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_5  [key=2, style=dotted];
m13_11 -> m13_6  [key=2, style=dotted];
m13_12 -> m13_10  [key=0, style=bold, color=blue];
}
