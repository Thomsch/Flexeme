digraph  {
n0 [label="Entry Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", span="6-6", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)"];
n1 [label="return ''not implemented'';", span="8-8", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=red, community=0];
n2 [label="Exit Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", span="6-6", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)"];
d1 [label="number == 0", span="14-14", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d2 [label="return ''zero'';", span="15-15", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d3 [label="number < 0", span="17-17", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d4 [label="return string.Format(''menos {0}'', Convert(Math.Abs(number)));", span="18-18", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d5 [label="var parts = new List<string>()", span="20-20", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d45 [label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter", span=""];
d39 [label="Entry System.Math.Abs(int)", span="0-0", cluster="System.Math.Abs(int)"];
d40 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
d6 [label="(number / 1000000000) > 0", span="22-22", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d7 [label="number / 1000000000 > 2", span="24-24", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d11 [label="(number / 1000000) > 0", span="35-35", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d8 [label="parts.Add(string.Format(''{0} bilh천es'', Convert(number / 1000000000)))", span="26-26", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d9 [label="parts.Add(string.Format(''{0} bilh찾o'', Convert(number / 1000000000)))", span="30-30", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d10 [label="number %= 1000000000", span="32-32", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d42 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
d12 [label="number / 1000000 > 2", span="37-37", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d13 [label="parts.Add(string.Format(''{0} milh천es'', Convert(number / 1000000)))", span="39-39", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d14 [label="parts.Add(string.Format(''{0} milh찾o'', Convert(number / 1000000)))", span="43-43", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d15 [label="number %= 1000000", span="45-45", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d16 [label="(number / 1000) > 0", span="48-48", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d17 [label="number / 1000 == 1", span="50-50", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d19 [label="parts.Add(string.Format(''{0} mil'', Convert(number / 1000)))", span="53-53", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d20 [label="number %= 1000", span="55-55", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d21 [label="(number / 100) > 0", span="58-58", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d22 [label="number == 100", span="60-60", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d26 [label="parts.Add(portugueseHundredsMap[(number / 100)])", span="73-73", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d27 [label="number %= 100", span="76-76", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d28 [label="number > 0", span="79-79", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d31 [label="number < 20", span="84-84", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d32 [label="parts.Add(portugueseUnitsMap[number])", span="85-85", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d33 [label="var lastPart = portugueseTensMap[number / 10]", span="88-88", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d34 [label="(number % 10) > 0", span="89-89", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d35 [label="lastPart += string.Format('' e {0}'', portugueseUnitsMap[number % 10])", span="90-90", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d18 [label="parts.Add(''mil'')", span="51-51", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d23 [label="parts.Count > 0", span="62-62", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d24 [label="parts.Add(''e cem'')", span="64-64", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d25 [label="parts.Add(''cem'')", span="68-68", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d29 [label="parts.Count != 0", span="81-81", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d37 [label="return string.Join('' '', parts.ToArray());", span="96-96", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d30 [label="parts.Add(''e'')", span="82-82", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d36 [label="parts.Add(lastPart)", span="92-92", cluster="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter.Convert(int)", color=green, community=0];
d41 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d43 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()"];
d44 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])"];
m0_73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="195-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="198-202", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="205-205", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="192-192", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToWordsExtension.cs"];
m0_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="NumberToWordsExtension.cs"];
m0_139 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="NumberToWordsExtension.cs"];
m0_150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="NumberToWordsExtension.cs"];
m0_258 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_259 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="616-616", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_260 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="619-623", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_261 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="626-626", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="613-613", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_250 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_251 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="597-597", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_252 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="600-604", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_253 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_254 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="594-594", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="NumberToWordsExtension.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsExtension.cs"];
m0_1 [label="var fakeOptions = new FakeOptions()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsExtension.cs"];
m0_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsExtension.cs"];
m0_3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="25-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsExtension.cs"];
m0_4 [label="Assert.True(expectedResult.Equals(result))", span="32-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsExtension.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsExtension.cs"];
m0_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NumberToWordsExtension.cs"];
m0_118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_119 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_120 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_121 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="306-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_122 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_313 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="NumberToWordsExtension.cs"];
m0_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="NumberToWordsExtension.cs"];
m0_151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsExtension.cs"];
m0_152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsExtension.cs"];
m0_153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsExtension.cs"];
m0_154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsExtension.cs"];
m0_10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="NumberToWordsExtension.cs"];
m0_172 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToWordsExtension.cs"];
m0_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="NumberToWordsExtension.cs"];
m0_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="NumberToWordsExtension.cs"];
m0_197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="NumberToWordsExtension.cs"];
m0_270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="NumberToWordsExtension.cs"];
m0_290 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_291 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="696-696", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_292 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="699-703", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_293 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="706-706", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_294 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="693-693", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="NumberToWordsExtension.cs"];
m0_266 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsExtension.cs"];
m0_267 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="639-643", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsExtension.cs"];
m0_268 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="646-646", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsExtension.cs"];
m0_269 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="634-634", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsExtension.cs"];
m0_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsExtension.cs"];
m0_216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsExtension.cs"];
m0_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsExtension.cs"];
m0_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="532-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsExtension.cs"];
m0_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsExtension.cs"];
m0_203 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="NumberToWordsExtension.cs"];
m0_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_242 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="588-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="575-575", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsExtension.cs"];
m0_83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="225-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsExtension.cs"];
m0_144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsExtension.cs"];
m0_145 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsExtension.cs"];
m0_146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsExtension.cs"];
m0_159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsExtension.cs"];
m0_160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsExtension.cs"];
m0_161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsExtension.cs"];
m0_162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsExtension.cs"];
m0_224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="550-550", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="537-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="NumberToWordsExtension.cs"];
m0_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsExtension.cs"];
m0_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="69-73", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsExtension.cs"];
m0_25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="76-76", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsExtension.cs"];
m0_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="64-64", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsExtension.cs"];
m0_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="NumberToWordsExtension.cs"];
m0_109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_110 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_112 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="287-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsExtension.cs"];
m0_220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="NumberToWordsExtension.cs"];
m0_207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsExtension.cs"];
m0_208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsExtension.cs"];
m0_209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsExtension.cs"];
m0_210 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="512-512", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsExtension.cs"];
m0_211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsExtension.cs"];
m0_193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="NumberToWordsExtension.cs"];
m0_306 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsExtension.cs"];
m0_307 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="737-741", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsExtension.cs"];
m0_308 [label="expected.ShouldBeEquivalentTo(result.Value)", span="744-744", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsExtension.cs"];
m0_309 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="732-732", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsExtension.cs"];
m0_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="NumberToWordsExtension.cs"];
m0_274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_275 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="658-662", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="665-665", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="652-652", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsExtension.cs"];
m0_187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NumberToWordsExtension.cs"];
m0_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsExtension.cs"];
m0_199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsExtension.cs"];
m0_200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsExtension.cs"];
m0_201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsExtension.cs"];
m0_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsExtension.cs"];
m0_55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="160-164", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="167-167", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="155-155", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsExtension.cs"];
m0_32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="93-97", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsExtension.cs"];
m0_33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="100-100", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsExtension.cs"];
m0_34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="88-88", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsExtension.cs"];
m0_47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="138-142", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="145-145", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="133-133", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsExtension.cs"];
m0_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="244-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="NumberToWordsExtension.cs"];
m0_158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="NumberToWordsExtension.cs"];
m0_282 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="NumberToWordsExtension.cs"];
m0_310 [label="Entry lambda expression", span="738-738", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_13 [label=fakeOptions, span="26-26", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_12 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_14 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_20 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_21 [label="new FakeOptions()", span="47-47", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_22 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_27 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_28 [label="new FakeOptionsWithDouble()", span="70-70", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_29 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_36 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_37 [label="new FakeOptionsWithSequence()", span="94-94", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_38 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_44 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_45 [label="new FakeOptions()", span="116-116", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_46 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_51 [label="Entry lambda expression", span="139-139", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="139-139", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_53 [label="Exit lambda expression", span="139-139", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_59 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="161-161", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_61 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_70 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="180-180", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_72 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_79 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="199-199", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_81 [label="Exit lambda expression", span="199-199", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_88 [label="Entry lambda expression", span="219-219", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_90 [label="Exit lambda expression", span="219-219", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_96 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_98 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_105 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_106 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_107 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_115 [label="Entry lambda expression", span="281-281", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_116 [label="new FakeOptionsWithEnum()", span="281-281", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_117 [label="Exit lambda expression", span="281-281", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_123 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_124 [label="new FakeOptionsWithEnum()", span="300-300", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_125 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_131 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_132 [label="new FakeOptionsWithEnum()", span="319-319", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_133 [label="Exit lambda expression", span="319-319", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_140 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_141 [label="new FakeOptionsWithValues()", span="344-344", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_142 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_147 [label="Entry lambda expression", span="367-367", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_148 [label="new FakeOptionsWithSequenceWithoutRange()", span="367-367", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_149 [label="Exit lambda expression", span="367-367", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_155 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_156 [label="new FakeOptionsWithSequenceAndSeparator()", span="389-389", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_157 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_163 [label="Entry lambda expression", span="411-411", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_164 [label="new FakeOptionsWithSequenceAndSeparator()", span="411-411", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_165 [label="Exit lambda expression", span="411-411", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_173 [label="Entry lambda expression", span="440-440", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_176 [label="Entry lambda expression", span="441-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_174 [label="new FakeOptionsWithValues()", span="440-440", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_175 [label="Exit lambda expression", span="440-440", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_177 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_185 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_178 [label="Exit lambda expression", span="441-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_180 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_182 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_184 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_186 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_194 [label="Entry lambda expression", span="466-466", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_195 [label="new FakeOptionsWithSets()", span="466-466", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_196 [label="Exit lambda expression", span="466-466", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_204 [label="Entry lambda expression", span="486-486", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_205 [label="new FakeOptionWithRequiredAndSet()", span="486-486", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_206 [label="Exit lambda expression", span="486-486", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_212 [label="Entry lambda expression", span="506-506", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_213 [label="new FakeOptionWithRequiredAndSet()", span="506-506", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_214 [label="Exit lambda expression", span="506-506", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_221 [label="Entry lambda expression", span="526-526", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_222 [label="new FakeOptionWithRequiredAndSet()", span="526-526", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_223 [label="Exit lambda expression", span="526-526", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_229 [label="Entry lambda expression", span="544-544", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_230 [label="new FakeOptionWithRequired()", span="544-544", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_231 [label="Exit lambda expression", span="544-544", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_238 [label="Entry lambda expression", span="563-563", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_239 [label="new FakeOptions()", span="563-563", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_240 [label="Exit lambda expression", span="563-563", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_247 [label="Entry lambda expression", span="582-582", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_248 [label="new FakeOptions()", span="582-582", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_249 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_255 [label="Entry lambda expression", span="601-601", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_256 [label="new FakeOptions()", span="601-601", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_257 [label="Exit lambda expression", span="601-601", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_263 [label="Entry lambda expression", span="620-620", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_264 [label="new FakeOptions()", span="620-620", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_265 [label="Exit lambda expression", span="620-620", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_271 [label="Entry lambda expression", span="640-640", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_272 [label="new FakeOptions()", span="640-640", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_273 [label="Exit lambda expression", span="640-640", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_279 [label="Entry lambda expression", span="659-659", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_280 [label="new FakeOptionsWithRequiredValue()", span="659-659", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_281 [label="Exit lambda expression", span="659-659", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_287 [label="Entry lambda expression", span="681-681", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_288 [label="new FakeOptions()", span="681-681", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_289 [label="Exit lambda expression", span="681-681", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_295 [label="Entry lambda expression", span="700-700", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_296 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="700-700", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_297 [label="Exit lambda expression", span="700-700", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_303 [label="Entry lambda expression", span="719-719", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_304 [label="new FakeOptionsWithRequiredValue()", span="719-719", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_305 [label="Exit lambda expression", span="719-719", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_311 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="738-738", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_312 [label="Exit lambda expression", span="738-738", cluster="lambda expression", file="NumberToWordsExtension.cs"];
m0_299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsExtension.cs"];
m0_300 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="718-722", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsExtension.cs"];
m0_301 [label="expected.ShouldBeEquivalentTo(result.Value)", span="725-725", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsExtension.cs"];
m0_302 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="713-713", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsExtension.cs"];
m0_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsExtension.cs"];
m0_64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="176-176", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsExtension.cs"];
m0_65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="179-183", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsExtension.cs"];
m0_66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="186-186", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsExtension.cs"];
m0_67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="173-173", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsExtension.cs"];
m0_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsExtension.cs"];
m0_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsExtension.cs"];
m0_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsExtension.cs"];
m0_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsExtension.cs"];
m0_298 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="NumberToWordsExtension.cs"];
m0_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="110-110", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsExtension.cs"];
m0_41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="115-119", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsExtension.cs"];
m0_42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="122-122", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsExtension.cs"];
m0_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="110-110", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsExtension.cs"];
m0_232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="NumberToWordsExtension.cs"];
m0_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="NumberToWordsExtension.cs"];
m0_246 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="NumberToWordsExtension.cs"];
m0_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="NumberToWordsExtension.cs"];
m0_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NumberToWordsExtension.cs"];
m0_183 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="NumberToWordsExtension.cs"];
m0_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="NumberToWordsExtension.cs"];
m0_30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="NumberToWordsExtension.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsExtension.cs"];
m0_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="46-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsExtension.cs"];
m0_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="53-53", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsExtension.cs"];
m0_18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsExtension.cs"];
m0_62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="NumberToWordsExtension.cs"];
m0_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsExtension.cs"];
m0_135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsExtension.cs"];
m0_136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsExtension.cs"];
m0_137 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsExtension.cs"];
m0_138 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsExtension.cs"];
m0_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="569-569", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="556-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsExtension.cs"];
m0_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsExtension.cs"];
m0_284 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="680-684", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsExtension.cs"];
m0_285 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="687-687", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsExtension.cs"];
m0_286 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="675-675", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsExtension.cs"];
m0_188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsExtension.cs"];
m0_189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsExtension.cs"];
m0_190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsExtension.cs"];
m0_191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="472-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsExtension.cs"];
m0_192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsExtension.cs"];
m0_166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsExtension.cs"];
m0_167 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsExtension.cs"];
m0_168 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsExtension.cs"];
m0_170 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="449-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsExtension.cs"];
m0_169 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsExtension.cs"];
m0_171 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsExtension.cs"];
m0_54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="NumberToWordsExtension.cs"];
m0_179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="NumberToWordsExtension.cs"];
m0_314 [label=fakeOptions, span="", file="NumberToWordsExtension.cs"];
m0_315 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="NumberToWordsExtension.cs"];
m2_2 [label="Entry Humanizer.Tests.Localisation.ptBR.NumberToWordsTests.ToWordsPortuguese(int, string)", span="41-41", cluster="Humanizer.Tests.Localisation.ptBR.NumberToWordsTests.ToWordsPortuguese(int, string)", file="NumberToWordsTests.cs"];
m2_3 [label="Assert.Equal(expected, number.ToWords())", span="43-43", cluster="Humanizer.Tests.Localisation.ptBR.NumberToWordsTests.ToWordsPortuguese(int, string)", color=green, community=0, file="NumberToWordsTests.cs"];
m2_4 [label="Exit Humanizer.Tests.Localisation.ptBR.NumberToWordsTests.ToWordsPortuguese(int, string)", span="41-41", cluster="Humanizer.Tests.Localisation.ptBR.NumberToWordsTests.ToWordsPortuguese(int, string)", file="NumberToWordsTests.cs"];
m2_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="NumberToWordsTests.cs"];
m2_5 [label="Entry int.ToWords()", span="23-23", cluster="int.ToWords()", file="NumberToWordsTests.cs"];
m3_7 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="38-38", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_8 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="40-40", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_9 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="38-38", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_5 [label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="46-46", cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)", file="NumerToWordsFactoryTests.cs"];
m3_2 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", span="21-21", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_3 [label="Assert.Equal(expected, word.ToQuantity(quatity))", span="23-23", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", color=red, community=0, file="NumerToWordsFactoryTests.cs"];
m3_4 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", span="21-21", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="NumerToWordsFactoryTests.cs"];
m3_0 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityTests()", span="7-7", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityTests()", file="NumerToWordsFactoryTests.cs"];
m3_1 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityTests()", span="7-7", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityTests()", file="NumerToWordsFactoryTests.cs"];
m3_10 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="55-55", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_11 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="58-58", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_12 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="55-55", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_13 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", span="74-74", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_14 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="76-76", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", file="NumerToWordsFactoryTests.cs"];
m3_15 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", span="74-74", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", file="NumerToWordsFactoryTests.cs"];
n0 -> n1  [key=0, style=solid, color=red];
n0 -> d1  [key=0, style=solid, color=green];
n0 -> d3  [key=1, style=dashed, color=green, label=int];
n0 -> d4  [key=1, style=dashed, color=green, label=int];
n0 -> d6  [key=1, style=dashed, color=green, label=int];
n0 -> d7  [key=1, style=dashed, color=green, label=int];
n0 -> d8  [key=1, style=dashed, color=green, label=int];
n0 -> d9  [key=1, style=dashed, color=green, label=int];
n0 -> d10  [key=1, style=dashed, color=green, label=int];
n0 -> d11  [key=1, style=dashed, color=green, label=int];
n0 -> d12  [key=1, style=dashed, color=green, label=int];
n0 -> d13  [key=1, style=dashed, color=green, label=int];
n0 -> d14  [key=1, style=dashed, color=green, label=int];
n0 -> d15  [key=1, style=dashed, color=green, label=int];
n0 -> d16  [key=1, style=dashed, color=green, label=int];
n0 -> d17  [key=1, style=dashed, color=green, label=int];
n0 -> d19  [key=1, style=dashed, color=green, label=int];
n0 -> d20  [key=1, style=dashed, color=green, label=int];
n0 -> d21  [key=1, style=dashed, color=green, label=int];
n0 -> d22  [key=1, style=dashed, color=green, label=int];
n0 -> d26  [key=1, style=dashed, color=green, label=int];
n0 -> d27  [key=1, style=dashed, color=green, label=int];
n0 -> d28  [key=1, style=dashed, color=green, label=int];
n0 -> d31  [key=1, style=dashed, color=green, label=int];
n0 -> d32  [key=1, style=dashed, color=green, label=int];
n0 -> d33  [key=1, style=dashed, color=green, label=int];
n0 -> d34  [key=1, style=dashed, color=green, label=int];
n0 -> d35  [key=1, style=dashed, color=green, label=int];
n0 -> d2  [key=3, color=green, style=bold, label="method methodReturn string Convert"];
n1 -> n2  [key=0, style=solid, color=red];
n2 -> n0  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=0, style=solid, color=green];
d2 -> n2  [key=0, style=solid, color=green];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d5  [key=0, style=solid, color=green];
d4 -> n2  [key=0, style=solid, color=green];
d4 -> d39  [key=2, style=dotted, color=green];
d4 -> n0  [key=2, style=dotted, color=green];
d4 -> d40  [key=2, style=dotted, color=green];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d8  [key=1, style=dashed, color=green, label=parts];
d5 -> d9  [key=1, style=dashed, color=green, label=parts];
d5 -> d13  [key=1, style=dashed, color=green, label=parts];
d5 -> d14  [key=1, style=dashed, color=green, label=parts];
d5 -> d19  [key=1, style=dashed, color=green, label=parts];
d5 -> d26  [key=1, style=dashed, color=green, label=parts];
d5 -> d32  [key=1, style=dashed, color=green, label=parts];
d5 -> d41  [key=2, style=dotted, color=green];
d5 -> d18  [key=1, style=dashed, color=green, label=parts];
d5 -> d23  [key=1, style=dashed, color=green, label=parts];
d5 -> d24  [key=1, style=dashed, color=green, label=parts];
d5 -> d25  [key=1, style=dashed, color=green, label=parts];
d5 -> d29  [key=1, style=dashed, color=green, label=parts];
d5 -> d30  [key=1, style=dashed, color=green, label=parts];
d5 -> d36  [key=1, style=dashed, color=green, label=parts];
d5 -> d37  [key=1, style=dashed, color=green, label=parts];
d45 -> d4  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter"];
d45 -> d8  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter"];
d45 -> d9  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter"];
d45 -> d13  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter"];
d45 -> d14  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter"];
d45 -> d19  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.BrazilianPortugueseNumberToWordsConverter"];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d11  [key=0, style=solid, color=green];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d9  [key=0, style=solid, color=green];
d11 -> d12  [key=0, style=solid, color=green];
d11 -> d16  [key=0, style=solid, color=green];
d8 -> d10  [key=0, style=solid, color=green];
d8 -> n0  [key=2, style=dotted, color=green];
d8 -> d40  [key=2, style=dotted, color=green];
d8 -> d42  [key=2, style=dotted, color=green];
d9 -> d10  [key=0, style=solid, color=green];
d9 -> n0  [key=2, style=dotted, color=green];
d9 -> d40  [key=2, style=dotted, color=green];
d9 -> d42  [key=2, style=dotted, color=green];
d10 -> d10  [key=1, style=dashed, color=green, label=int];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d12  [key=1, style=dashed, color=green, label=int];
d10 -> d13  [key=1, style=dashed, color=green, label=int];
d10 -> d14  [key=1, style=dashed, color=green, label=int];
d10 -> d15  [key=1, style=dashed, color=green, label=int];
d10 -> d16  [key=1, style=dashed, color=green, label=int];
d10 -> d17  [key=1, style=dashed, color=green, label=int];
d10 -> d19  [key=1, style=dashed, color=green, label=int];
d10 -> d20  [key=1, style=dashed, color=green, label=int];
d10 -> d21  [key=1, style=dashed, color=green, label=int];
d10 -> d22  [key=1, style=dashed, color=green, label=int];
d10 -> d26  [key=1, style=dashed, color=green, label=int];
d10 -> d27  [key=1, style=dashed, color=green, label=int];
d10 -> d28  [key=1, style=dashed, color=green, label=int];
d10 -> d31  [key=1, style=dashed, color=green, label=int];
d10 -> d32  [key=1, style=dashed, color=green, label=int];
d10 -> d33  [key=1, style=dashed, color=green, label=int];
d10 -> d34  [key=1, style=dashed, color=green, label=int];
d10 -> d35  [key=1, style=dashed, color=green, label=int];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d14  [key=0, style=solid, color=green];
d13 -> d15  [key=0, style=solid, color=green];
d13 -> n0  [key=2, style=dotted, color=green];
d13 -> d40  [key=2, style=dotted, color=green];
d13 -> d42  [key=2, style=dotted, color=green];
d14 -> d15  [key=0, style=solid, color=green];
d14 -> n0  [key=2, style=dotted, color=green];
d14 -> d40  [key=2, style=dotted, color=green];
d14 -> d42  [key=2, style=dotted, color=green];
d15 -> d15  [key=1, style=dashed, color=green, label=int];
d15 -> d16  [key=0, style=solid, color=green];
d15 -> d17  [key=1, style=dashed, color=green, label=int];
d15 -> d19  [key=1, style=dashed, color=green, label=int];
d15 -> d20  [key=1, style=dashed, color=green, label=int];
d15 -> d21  [key=1, style=dashed, color=green, label=int];
d15 -> d22  [key=1, style=dashed, color=green, label=int];
d15 -> d26  [key=1, style=dashed, color=green, label=int];
d15 -> d27  [key=1, style=dashed, color=green, label=int];
d15 -> d28  [key=1, style=dashed, color=green, label=int];
d15 -> d31  [key=1, style=dashed, color=green, label=int];
d15 -> d32  [key=1, style=dashed, color=green, label=int];
d15 -> d33  [key=1, style=dashed, color=green, label=int];
d15 -> d34  [key=1, style=dashed, color=green, label=int];
d15 -> d35  [key=1, style=dashed, color=green, label=int];
d16 -> d17  [key=0, style=solid, color=green];
d16 -> d21  [key=0, style=solid, color=green];
d17 -> d18  [key=0, style=solid, color=green];
d17 -> d19  [key=0, style=solid, color=green];
d19 -> d20  [key=0, style=solid, color=green];
d19 -> n0  [key=2, style=dotted, color=green];
d19 -> d40  [key=2, style=dotted, color=green];
d19 -> d42  [key=2, style=dotted, color=green];
d20 -> d20  [key=1, style=dashed, color=green, label=int];
d20 -> d21  [key=0, style=solid, color=green];
d20 -> d22  [key=1, style=dashed, color=green, label=int];
d20 -> d26  [key=1, style=dashed, color=green, label=int];
d20 -> d27  [key=1, style=dashed, color=green, label=int];
d20 -> d28  [key=1, style=dashed, color=green, label=int];
d20 -> d31  [key=1, style=dashed, color=green, label=int];
d20 -> d32  [key=1, style=dashed, color=green, label=int];
d20 -> d33  [key=1, style=dashed, color=green, label=int];
d20 -> d34  [key=1, style=dashed, color=green, label=int];
d20 -> d35  [key=1, style=dashed, color=green, label=int];
d21 -> d22  [key=0, style=solid, color=green];
d21 -> d28  [key=0, style=solid, color=green];
d22 -> d23  [key=0, style=solid, color=green];
d22 -> d26  [key=0, style=solid, color=green];
d26 -> d27  [key=0, style=solid, color=green];
d26 -> d42  [key=2, style=dotted, color=green];
d27 -> d27  [key=1, style=dashed, color=green, label=int];
d27 -> d28  [key=0, style=solid, color=green];
d27 -> d31  [key=1, style=dashed, color=green, label=int];
d27 -> d32  [key=1, style=dashed, color=green, label=int];
d27 -> d33  [key=1, style=dashed, color=green, label=int];
d27 -> d34  [key=1, style=dashed, color=green, label=int];
d27 -> d35  [key=1, style=dashed, color=green, label=int];
d28 -> d29  [key=0, style=solid, color=green];
d28 -> d37  [key=0, style=solid, color=green];
d31 -> d32  [key=0, style=solid, color=green];
d31 -> d33  [key=0, style=solid, color=green];
d32 -> d37  [key=0, style=solid, color=green];
d32 -> d42  [key=2, style=dotted, color=green];
d33 -> d34  [key=0, style=solid, color=green];
d33 -> d35  [key=1, style=dashed, color=green, label=lastPart];
d33 -> d36  [key=1, style=dashed, color=green, label=lastPart];
d34 -> d35  [key=0, style=solid, color=green];
d34 -> d36  [key=0, style=solid, color=green];
d35 -> d35  [key=1, style=dashed, color=green, label=lastPart];
d35 -> d36  [key=0, style=solid, color=green];
d35 -> d40  [key=2, style=dotted, color=green];
d18 -> d20  [key=0, style=solid, color=green];
d18 -> d42  [key=2, style=dotted, color=green];
d23 -> d24  [key=0, style=solid, color=green];
d23 -> d25  [key=0, style=solid, color=green];
d24 -> d27  [key=0, style=solid, color=green];
d24 -> d42  [key=2, style=dotted, color=green];
d25 -> d27  [key=0, style=solid, color=green];
d25 -> d42  [key=2, style=dotted, color=green];
d29 -> d31  [key=0, style=solid, color=green];
d29 -> d30  [key=0, style=solid, color=green];
d37 -> n2  [key=0, style=solid, color=green];
d37 -> d43  [key=2, style=dotted, color=green];
d37 -> d44  [key=2, style=dotted, color=green];
d30 -> d31  [key=0, style=solid, color=green];
d30 -> d42  [key=2, style=dotted, color=green];
d36 -> d37  [key=0, style=solid, color=green];
d36 -> d42  [key=2, style=dotted, color=green];
m0_73 -> m0_74  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_9  [key=2, style=dotted];
m0_75 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_35  [key=2, style=dotted];
m0_76 -> m0_11  [key=2, style=dotted];
m0_77 -> m0_73  [key=0, style=bold, color=blue];
m0_258 -> m0_259  [key=0, style=solid];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_246  [key=2, style=dotted];
m0_259 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_35  [key=2, style=dotted];
m0_261 -> m0_11  [key=2, style=dotted];
m0_262 -> m0_258  [key=0, style=bold, color=blue];
m0_250 -> m0_251  [key=0, style=solid];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_246  [key=2, style=dotted];
m0_251 -> m0_253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_9  [key=2, style=dotted];
m0_252 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_35  [key=2, style=dotted];
m0_253 -> m0_11  [key=2, style=dotted];
m0_254 -> m0_250  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_114  [key=2, style=dotted];
m0_119 -> m0_69  [key=2, style=dotted];
m0_119 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_9  [key=2, style=dotted];
m0_120 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_35  [key=2, style=dotted];
m0_121 -> m0_11  [key=2, style=dotted];
m0_122 -> m0_118  [key=0, style=bold, color=blue];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_9  [key=2, style=dotted];
m0_152 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_104  [key=2, style=dotted];
m0_154 -> m0_151  [key=0, style=bold, color=blue];
m0_290 -> m0_291  [key=0, style=solid];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_78  [key=2, style=dotted];
m0_291 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_9  [key=2, style=dotted];
m0_292 -> m0_295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_35  [key=2, style=dotted];
m0_293 -> m0_11  [key=2, style=dotted];
m0_294 -> m0_290  [key=0, style=bold, color=blue];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_268  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_9  [key=2, style=dotted];
m0_267 -> m0_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_270  [key=2, style=dotted];
m0_268 -> m0_11  [key=2, style=dotted];
m0_269 -> m0_266  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_114  [key=2, style=dotted];
m0_127 -> m0_69  [key=2, style=dotted];
m0_127 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_9  [key=2, style=dotted];
m0_128 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_35  [key=2, style=dotted];
m0_129 -> m0_11  [key=2, style=dotted];
m0_130 -> m0_126  [key=0, style=bold, color=blue];
m0_215 -> m0_216  [key=0, style=solid];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_220  [key=2, style=dotted];
m0_216 -> m0_69  [key=2, style=dotted];
m0_216 -> m0_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_9  [key=2, style=dotted];
m0_217 -> m0_221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_35  [key=2, style=dotted];
m0_218 -> m0_11  [key=2, style=dotted];
m0_219 -> m0_215  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_246  [key=2, style=dotted];
m0_242 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_9  [key=2, style=dotted];
m0_243 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_35  [key=2, style=dotted];
m0_244 -> m0_11  [key=2, style=dotted];
m0_245 -> m0_241  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_78  [key=2, style=dotted];
m0_84 -> m0_69  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_9  [key=2, style=dotted];
m0_85 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_35  [key=2, style=dotted];
m0_86 -> m0_11  [key=2, style=dotted];
m0_87 -> m0_83  [key=0, style=bold, color=blue];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_9  [key=2, style=dotted];
m0_144 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_104  [key=2, style=dotted];
m0_146 -> m0_143  [key=0, style=bold, color=blue];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_9  [key=2, style=dotted];
m0_160 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_104  [key=2, style=dotted];
m0_162 -> m0_159  [key=0, style=bold, color=blue];
m0_224 -> m0_225  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_220  [key=2, style=dotted];
m0_225 -> m0_69  [key=2, style=dotted];
m0_225 -> m0_227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_9  [key=2, style=dotted];
m0_226 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_35  [key=2, style=dotted];
m0_227 -> m0_11  [key=2, style=dotted];
m0_228 -> m0_224  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_9  [key=2, style=dotted];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_19  [key=2, style=dotted];
m0_26 -> m0_23  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_114  [key=2, style=dotted];
m0_110 -> m0_69  [key=2, style=dotted];
m0_110 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_9  [key=2, style=dotted];
m0_111 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_35  [key=2, style=dotted];
m0_112 -> m0_11  [key=2, style=dotted];
m0_113 -> m0_109  [key=0, style=bold, color=blue];
m0_207 -> m0_208  [key=0, style=solid];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_203  [key=2, style=dotted];
m0_208 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_9  [key=2, style=dotted];
m0_209 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_104  [key=2, style=dotted];
m0_211 -> m0_207  [key=0, style=bold, color=blue];
m0_306 -> m0_307  [key=0, style=solid];
m0_306 -> m0_308  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_9  [key=2, style=dotted];
m0_307 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_104  [key=2, style=dotted];
m0_309 -> m0_306  [key=0, style=bold, color=blue];
m0_274 -> m0_275  [key=0, style=solid];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_220  [key=2, style=dotted];
m0_275 -> m0_277  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_9  [key=2, style=dotted];
m0_276 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_35  [key=2, style=dotted];
m0_277 -> m0_11  [key=2, style=dotted];
m0_278 -> m0_274  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_203  [key=2, style=dotted];
m0_199 -> m0_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_9  [key=2, style=dotted];
m0_200 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_104  [key=2, style=dotted];
m0_202 -> m0_198  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_11  [key=2, style=dotted];
m0_58 -> m0_55  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_9  [key=2, style=dotted];
m0_32 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_11  [key=2, style=dotted];
m0_34 -> m0_31  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_9  [key=2, style=dotted];
m0_48 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_35  [key=2, style=dotted];
m0_49 -> m0_11  [key=2, style=dotted];
m0_50 -> m0_47  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_78  [key=2, style=dotted];
m0_92 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_9  [key=2, style=dotted];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_35  [key=2, style=dotted];
m0_94 -> m0_11  [key=2, style=dotted];
m0_95 -> m0_91  [key=0, style=bold, color=blue];
m0_310 -> m0_311  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_6  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_6  [key=2, style=dotted];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=2, style=dotted];
m0_53 -> m0_51  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_70 -> m0_71  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_54  [key=2, style=dotted];
m0_72 -> m0_70  [key=0, style=bold, color=blue];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_81 -> m0_79  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_62  [key=2, style=dotted];
m0_90 -> m0_88  [key=0, style=bold, color=blue];
m0_96 -> m0_97  [key=0, style=solid];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=2, style=dotted];
m0_98 -> m0_96  [key=0, style=bold, color=blue];
m0_105 -> m0_106  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_108  [key=2, style=dotted];
m0_117 -> m0_115  [key=0, style=bold, color=blue];
m0_123 -> m0_124  [key=0, style=solid];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_108  [key=2, style=dotted];
m0_125 -> m0_123  [key=0, style=bold, color=blue];
m0_131 -> m0_132  [key=0, style=solid];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_108  [key=2, style=dotted];
m0_133 -> m0_131  [key=0, style=bold, color=blue];
m0_140 -> m0_141  [key=0, style=solid];
m0_141 -> m0_142  [key=0, style=solid];
m0_141 -> m0_139  [key=2, style=dotted];
m0_142 -> m0_140  [key=0, style=bold, color=blue];
m0_147 -> m0_148  [key=0, style=solid];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_150  [key=2, style=dotted];
m0_149 -> m0_147  [key=0, style=bold, color=blue];
m0_155 -> m0_156  [key=0, style=solid];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_157 -> m0_155  [key=0, style=bold, color=blue];
m0_163 -> m0_164  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_158  [key=2, style=dotted];
m0_165 -> m0_163  [key=0, style=bold, color=blue];
m0_173 -> m0_174  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_176 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_139  [key=2, style=dotted];
m0_175 -> m0_173  [key=0, style=bold, color=blue];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_179  [key=2, style=dotted];
m0_177 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_183  [key=2, style=dotted];
m0_181 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=2, style=dotted];
m0_178 -> m0_176  [key=0, style=bold, color=blue];
m0_180 -> m0_181  [key=0, style=solid];
m0_182 -> m0_180  [key=0, style=bold, color=blue];
m0_184 -> m0_185  [key=0, style=solid];
m0_186 -> m0_184  [key=0, style=bold, color=blue];
m0_194 -> m0_195  [key=0, style=solid];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_197  [key=2, style=dotted];
m0_196 -> m0_194  [key=0, style=bold, color=blue];
m0_204 -> m0_205  [key=0, style=solid];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_203  [key=2, style=dotted];
m0_206 -> m0_204  [key=0, style=bold, color=blue];
m0_212 -> m0_213  [key=0, style=solid];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_203  [key=2, style=dotted];
m0_214 -> m0_212  [key=0, style=bold, color=blue];
m0_221 -> m0_222  [key=0, style=solid];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_203  [key=2, style=dotted];
m0_223 -> m0_221  [key=0, style=bold, color=blue];
m0_229 -> m0_230  [key=0, style=solid];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=2, style=dotted];
m0_231 -> m0_229  [key=0, style=bold, color=blue];
m0_238 -> m0_239  [key=0, style=solid];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_6  [key=2, style=dotted];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_247 -> m0_248  [key=0, style=solid];
m0_248 -> m0_249  [key=0, style=solid];
m0_248 -> m0_6  [key=2, style=dotted];
m0_249 -> m0_247  [key=0, style=bold, color=blue];
m0_255 -> m0_256  [key=0, style=solid];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_6  [key=2, style=dotted];
m0_257 -> m0_255  [key=0, style=bold, color=blue];
m0_263 -> m0_264  [key=0, style=solid];
m0_264 -> m0_265  [key=0, style=solid];
m0_264 -> m0_6  [key=2, style=dotted];
m0_265 -> m0_263  [key=0, style=bold, color=blue];
m0_271 -> m0_272  [key=0, style=solid];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_6  [key=2, style=dotted];
m0_273 -> m0_271  [key=0, style=bold, color=blue];
m0_279 -> m0_280  [key=0, style=solid];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_282  [key=2, style=dotted];
m0_281 -> m0_279  [key=0, style=bold, color=blue];
m0_287 -> m0_288  [key=0, style=solid];
m0_288 -> m0_289  [key=0, style=solid];
m0_288 -> m0_6  [key=2, style=dotted];
m0_289 -> m0_287  [key=0, style=bold, color=blue];
m0_295 -> m0_296  [key=0, style=solid];
m0_296 -> m0_297  [key=0, style=solid];
m0_296 -> m0_298  [key=2, style=dotted];
m0_297 -> m0_295  [key=0, style=bold, color=blue];
m0_303 -> m0_304  [key=0, style=solid];
m0_304 -> m0_305  [key=0, style=solid];
m0_304 -> m0_282  [key=2, style=dotted];
m0_305 -> m0_303  [key=0, style=bold, color=blue];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_313  [key=2, style=dotted];
m0_312 -> m0_310  [key=0, style=bold, color=blue];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_9  [key=2, style=dotted];
m0_300 -> m0_303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_104  [key=2, style=dotted];
m0_302 -> m0_299  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_35  [key=2, style=dotted];
m0_66 -> m0_11  [key=2, style=dotted];
m0_67 -> m0_63  [key=0, style=bold, color=blue];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_9  [key=2, style=dotted];
m0_101 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_102 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_103 -> m0_100  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_35  [key=2, style=dotted];
m0_42 -> m0_11  [key=2, style=dotted];
m0_43 -> m0_40  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_9  [key=2, style=dotted];
m0_16 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_15  [key=0, style=bold, color=blue];
m0_134 -> m0_135  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_139  [key=2, style=dotted];
m0_135 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_9  [key=2, style=dotted];
m0_136 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_104  [key=2, style=dotted];
m0_138 -> m0_134  [key=0, style=bold, color=blue];
m0_233 -> m0_234  [key=0, style=solid];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_78  [key=2, style=dotted];
m0_234 -> m0_69  [key=2, style=dotted];
m0_234 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_9  [key=2, style=dotted];
m0_235 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_35  [key=2, style=dotted];
m0_236 -> m0_11  [key=2, style=dotted];
m0_237 -> m0_233  [key=0, style=bold, color=blue];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_285  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_9  [key=2, style=dotted];
m0_284 -> m0_287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_104  [key=2, style=dotted];
m0_286 -> m0_283  [key=0, style=bold, color=blue];
m0_188 -> m0_189  [key=0, style=solid];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_193  [key=2, style=dotted];
m0_189 -> m0_69  [key=2, style=dotted];
m0_189 -> m0_191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_9  [key=2, style=dotted];
m0_190 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_35  [key=2, style=dotted];
m0_191 -> m0_11  [key=2, style=dotted];
m0_192 -> m0_188  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_139  [key=2, style=dotted];
m0_167 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_168 -> m0_169  [key=0, style=solid];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_104  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_172  [key=2, style=dotted];
m0_169 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_169 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_171 -> m0_166  [key=0, style=bold, color=blue];
m0_314 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_315 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_315 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_5  [key=2, style=dotted, color=green];
m2_3 -> m2_6  [key=2, style=dotted, color=green];
m2_4 -> m2_2  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_5  [key=2, style=dotted];
m3_8 -> m3_6  [key=2, style=dotted];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_2 -> m3_3  [key=0, style=solid, color=red];
m3_3 -> m3_4  [key=0, style=solid, color=red];
m3_3 -> m3_5  [key=2, style=dotted, color=red];
m3_3 -> m3_6  [key=2, style=dotted, color=red];
m3_4 -> m3_2  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_0  [key=0, style=bold, color=blue];
m3_10 -> m3_11  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_5  [key=2, style=dotted];
m3_11 -> m3_6  [key=2, style=dotted];
m3_12 -> m3_10  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_5  [key=2, style=dotted];
m3_14 -> m3_6  [key=2, style=dotted];
m3_15 -> m3_13  [key=0, style=bold, color=blue];
}
