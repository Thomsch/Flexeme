digraph  {
n0 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", span="8-8", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()"];
n1 [label="var twoWeeks = TimeSpan.FromDays(14)", span="10-10", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()"];
n2 [label="var actual = twoWeeks.Humanize()", span="11-11", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()"];
n5 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
n3 [label="Assert.Equal(''2 weeks'', actual)", span="12-12", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()"];
n6 [label="Entry System.TimeSpan.Humanize()", span="22-22", cluster="System.TimeSpan.Humanize()"];
n4 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", span="8-8", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()"];
n7 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n8 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", span="16-16", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()"];
n9 [label="var oneWeek = TimeSpan.FromDays(7)", span="18-18", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()"];
n10 [label="var actual = oneWeek.Humanize()", span="19-19", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()"];
n11 [label="Assert.Equal(''1 week'', actual)", span="20-20", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()"];
n12 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", span="16-16", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()"];
n13 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", span="24-24", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()"];
n14 [label="var sixDays = TimeSpan.FromDays(6)", span="26-26", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()"];
n15 [label="var actual = sixDays.Humanize()", span="27-27", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()"];
n16 [label="Assert.Equal(''6 days'', actual)", span="28-28", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()"];
n17 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", span="24-24", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()"];
n18 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", span="32-32", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()"];
n19 [label="var twoDays = TimeSpan.FromDays(2)", span="34-34", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()"];
n20 [label="var actual = twoDays.Humanize()", span="35-35", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()"];
n21 [label="Assert.Equal(''2 days'', actual)", span="36-36", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()"];
n22 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", span="32-32", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()"];
n23 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", span="40-40", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()"];
n24 [label="var oneDay = TimeSpan.FromDays(1)", span="42-42", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()"];
n25 [label="var actual = oneDay.Humanize()", span="43-43", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()"];
n26 [label="Assert.Equal(''1 day'', actual)", span="44-44", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()"];
n27 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", span="40-40", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()"];
n28 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", span="48-48", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()"];
n29 [label="var twoHours = TimeSpan.FromHours(2)", span="50-50", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()"];
n30 [label="var actual = twoHours.Humanize()", span="51-51", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()"];
n33 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)"];
n31 [label="Assert.Equal(''2 hours'', actual)", span="52-52", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()"];
n32 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", span="48-48", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()"];
n34 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", span="56-56", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()"];
n35 [label="var oneHour = TimeSpan.FromHours(1)", span="58-58", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()"];
n36 [label="var actual = oneHour.Humanize()", span="59-59", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()"];
n37 [label="Assert.Equal(''1 hour'', actual)", span="60-60", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()"];
n38 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", span="56-56", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()"];
n39 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", span="64-64", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()"];
n40 [label="var twoMinutes = TimeSpan.FromMinutes(2)", span="66-66", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()"];
n41 [label="var actual = twoMinutes.Humanize()", span="67-67", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()"];
n44 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)"];
n42 [label="Assert.Equal(''2 minutes'', actual)", span="68-68", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()"];
n43 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", span="64-64", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()"];
n45 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", span="72-72", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()"];
n46 [label="var oneMinute = TimeSpan.FromMinutes(1)", span="74-74", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()"];
n47 [label="var actual = oneMinute.Humanize()", span="75-75", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()"];
n48 [label="Assert.Equal(''1 minute'', actual)", span="76-76", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()"];
n49 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", span="72-72", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()"];
n50 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", span="80-80", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()"];
n51 [label="var twoSeconds = TimeSpan.FromSeconds(2)", span="82-82", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()"];
n52 [label="var actual = twoSeconds.Humanize()", span="83-83", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()"];
n55 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)"];
n53 [label="Assert.Equal(''2 seconds'', actual)", span="84-84", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()"];
n54 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", span="80-80", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()"];
n56 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", span="88-88", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()"];
n57 [label="var oneSecond = TimeSpan.FromSeconds(1)", span="90-90", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()"];
n58 [label="var actual = oneSecond.Humanize()", span="91-91", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()"];
n59 [label="Assert.Equal(''1 second'', actual)", span="92-92", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()"];
n60 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", span="88-88", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()"];
n61 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", span="96-96", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()"];
n62 [label="var twoMilliseconds = TimeSpan.FromMilliseconds(2)", span="98-98", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()"];
n63 [label="var actual = twoMilliseconds.Humanize()", span="99-99", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()"];
n66 [label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0", cluster="System.TimeSpan.FromMilliseconds(double)"];
n64 [label="Assert.Equal(''2 milliseconds'', actual)", span="100-100", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()"];
n65 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", span="96-96", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()"];
n67 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", span="104-104", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()"];
n68 [label="var oneMillisecond = TimeSpan.FromMilliseconds(1)", span="106-106", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()"];
n69 [label="var actual = oneMillisecond.Humanize()", span="107-107", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()"];
n70 [label="Assert.Equal(''1 millisecond'', actual)", span="108-108", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()"];
n71 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", span="104-104", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()"];
n72 [label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", span="112-112", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()"];
n73 [label="var noTime = TimeSpan.Zero", span="114-114", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()"];
n74 [label="var actual = noTime.Humanize()", span="115-115", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()"];
n75 [label="Assert.Equal(''no time'', actual)", span="116-116", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()"];
n76 [label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", span="112-112", cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()"];
d1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0];
d0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0];
d6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
d3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d14 [label=fakeOptions, span="28-28", cluster="lambda expression"];
d7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
d8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d22 [label="new FakeOptions()", span="49-49", cluster="lambda expression"];
d46 [label="new FakeOptions()", span="118-118", cluster="lambda expression"];
d240 [label="new FakeOptions()", span="564-564", cluster="lambda expression"];
d249 [label="new FakeOptions()", span="583-583", cluster="lambda expression"];
d257 [label="new FakeOptions()", span="602-602", cluster="lambda expression"];
d265 [label="new FakeOptions()", span="621-621", cluster="lambda expression"];
d273 [label="new FakeOptions()", span="641-641", cluster="lambda expression"];
d289 [label="new FakeOptions()", span="682-682", cluster="lambda expression"];
d387 [label="new FakeOptions()", span="872-872", cluster="lambda expression"];
d416 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
d421 [label="new FakeOptions()", span="943-943", cluster="lambda expression"];
d9 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
d10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d13 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
d428 [label=fakeOptions, span=""];
d15 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
d11 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
d12 [label="Entry Unk.True", span="", cluster="Unk.True"];
d21 [label="Entry lambda expression", span="49-49", cluster="lambda expression"];
d23 [label="Exit lambda expression", span="49-49", cluster="lambda expression"];
d45 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
d47 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
d239 [label="Entry lambda expression", span="564-564", cluster="lambda expression"];
d241 [label="Exit lambda expression", span="564-564", cluster="lambda expression"];
d248 [label="Entry lambda expression", span="583-583", cluster="lambda expression"];
d250 [label="Exit lambda expression", span="583-583", cluster="lambda expression"];
d256 [label="Entry lambda expression", span="602-602", cluster="lambda expression"];
d258 [label="Exit lambda expression", span="602-602", cluster="lambda expression"];
d264 [label="Entry lambda expression", span="621-621", cluster="lambda expression"];
d266 [label="Exit lambda expression", span="621-621", cluster="lambda expression"];
d272 [label="Entry lambda expression", span="641-641", cluster="lambda expression"];
d274 [label="Exit lambda expression", span="641-641", cluster="lambda expression"];
d288 [label="Entry lambda expression", span="682-682", cluster="lambda expression"];
d290 [label="Exit lambda expression", span="682-682", cluster="lambda expression"];
d386 [label="Entry lambda expression", span="872-872", cluster="lambda expression"];
d388 [label="Exit lambda expression", span="872-872", cluster="lambda expression"];
d415 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
d417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
d418 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
d420 [label="Entry lambda expression", span="943-943", cluster="lambda expression"];
d422 [label="Exit lambda expression", span="943-943", cluster="lambda expression"];
d17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="lambda expression"];
d352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="lambda expression"];
d363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="lambda expression"];
d370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)"];
d383 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
d393 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
d401 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d408 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d424 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
d34 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d43 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d58 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d67 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d77 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d95 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d113 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d122 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d245 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d254 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d262 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d294 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
d105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
d16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d28 [label="Entry lambda expression", span="72-72", cluster="lambda expression"];
d32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d37 [label="Entry lambda expression", span="96-96", cluster="lambda expression"];
d41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d52 [label="Entry lambda expression", span="141-141", cluster="lambda expression"];
d56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d60 [label="Entry lambda expression", span="163-163", cluster="lambda expression"];
d65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d71 [label="Entry lambda expression", span="182-182", cluster="lambda expression"];
d75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d80 [label="Entry lambda expression", span="201-201", cluster="lambda expression"];
d85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d89 [label="Entry lambda expression", span="220-220", cluster="lambda expression"];
d93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d97 [label="Entry lambda expression", span="239-239", cluster="lambda expression"];
d101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d106 [label="Entry lambda expression", span="263-263", cluster="lambda expression"];
d111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d116 [label="Entry lambda expression", span="282-282", cluster="lambda expression"];
d120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d124 [label="Entry lambda expression", span="301-301", cluster="lambda expression"];
d128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d132 [label="Entry lambda expression", span="320-320", cluster="lambda expression"];
d136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d141 [label="Entry lambda expression", span="345-345", cluster="lambda expression"];
d144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d148 [label="Entry lambda expression", span="368-368", cluster="lambda expression"];
d152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d156 [label="Entry lambda expression", span="390-390", cluster="lambda expression"];
d160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d164 [label="Entry lambda expression", span="412-412", cluster="lambda expression"];
d169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d174 [label="Entry lambda expression", span="441-441", cluster="lambda expression"];
d177 [label="Entry lambda expression", span="442-444", cluster="lambda expression"];
d190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d195 [label="Entry lambda expression", span="467-467", cluster="lambda expression"];
d200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d205 [label="Entry lambda expression", span="487-487", cluster="lambda expression"];
d209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d213 [label="Entry lambda expression", span="507-507", cluster="lambda expression"];
d217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d222 [label="Entry lambda expression", span="527-527", cluster="lambda expression"];
d226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d230 [label="Entry lambda expression", span="545-545", cluster="lambda expression"];
d235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d280 [label="Entry lambda expression", span="660-660", cluster="lambda expression"];
d284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d296 [label="Entry lambda expression", span="701-701", cluster="lambda expression"];
d300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d304 [label="Entry lambda expression", span="723-723", cluster="lambda expression"];
d308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d312 [label="Entry lambda expression", span="745-745", cluster="lambda expression"];
d315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d317 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d322 [label="Entry lambda expression", span="765-765", cluster="lambda expression"];
d318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d328 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d332 [label="Entry lambda expression", span="789-789", cluster="lambda expression"];
d329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d340 [label="Entry lambda expression", span="809-813", cluster="lambda expression"];
d342 [label="Exit lambda expression", span="809-813", cluster="lambda expression"];
d343 [label="Entry lambda expression", span="810-810", cluster="lambda expression"];
d351 [label="Entry lambda expression", span="823-827", cluster="lambda expression"];
d353 [label="Exit lambda expression", span="823-827", cluster="lambda expression"];
d354 [label="Entry lambda expression", span="824-824", cluster="lambda expression"];
d362 [label="Entry lambda expression", span="837-841", cluster="lambda expression"];
d364 [label="Exit lambda expression", span="837-841", cluster="lambda expression"];
d365 [label="Entry lambda expression", span="838-838", cluster="lambda expression"];
d369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)"];
d371 [label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)"];
d375 [label="Entry lambda expression", span="857-857", cluster="lambda expression"];
d382 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
d384 [label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
d392 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
d394 [label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
d396 [label="Entry lambda expression", span="888-888", cluster="lambda expression"];
d400 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d402 [label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d404 [label="Entry lambda expression", span="905-905", cluster="lambda expression"];
d407 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d409 [label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d411 [label="Entry lambda expression", span="924-924", cluster="lambda expression"];
d423 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
d425 [label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
d427 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
d35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
d44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
d279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d30 [label="Exit lambda expression", span="72-72", cluster="lambda expression"];
d29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression"];
d39 [label="Exit lambda expression", span="96-96", cluster="lambda expression"];
d38 [label="new FakeOptionsWithSequence()", span="96-96", cluster="lambda expression"];
d54 [label="Exit lambda expression", span="141-141", cluster="lambda expression"];
d53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141", cluster="lambda expression"];
d62 [label="Exit lambda expression", span="163-163", cluster="lambda expression"];
d61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression"];
d64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
d73 [label="Exit lambda expression", span="182-182", cluster="lambda expression"];
d72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression"];
d74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d82 [label="Exit lambda expression", span="201-201", cluster="lambda expression"];
d81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression"];
d84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d91 [label="Exit lambda expression", span="220-220", cluster="lambda expression"];
d90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression"];
d92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d99 [label="Exit lambda expression", span="239-239", cluster="lambda expression"];
d98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression"];
d104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d108 [label="Exit lambda expression", span="263-263", cluster="lambda expression"];
d107 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression"];
d110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
d118 [label="Exit lambda expression", span="282-282", cluster="lambda expression"];
d117 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression"];
d119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d126 [label="Exit lambda expression", span="301-301", cluster="lambda expression"];
d125 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression"];
d127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d134 [label="Exit lambda expression", span="320-320", cluster="lambda expression"];
d133 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression"];
d135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
d139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d143 [label="Exit lambda expression", span="345-345", cluster="lambda expression"];
d142 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression"];
d147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d150 [label="Exit lambda expression", span="368-368", cluster="lambda expression"];
d149 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression"];
d155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d158 [label="Exit lambda expression", span="390-390", cluster="lambda expression"];
d157 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression"];
d163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d166 [label="Exit lambda expression", span="412-412", cluster="lambda expression"];
d165 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression"];
d168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d176 [label="Exit lambda expression", span="441-441", cluster="lambda expression"];
d175 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression"];
d179 [label="Exit lambda expression", span="442-444", cluster="lambda expression"];
d178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression"];
d182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression"];
d186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression"];
d189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
d197 [label="Exit lambda expression", span="467-467", cluster="lambda expression"];
d196 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression"];
d199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
d203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d207 [label="Exit lambda expression", span="487-487", cluster="lambda expression"];
d206 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression"];
d208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d215 [label="Exit lambda expression", span="507-507", cluster="lambda expression"];
d214 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression"];
d216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
d224 [label="Exit lambda expression", span="527-527", cluster="lambda expression"];
d223 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression"];
d225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d232 [label="Exit lambda expression", span="545-545", cluster="lambda expression"];
d231 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression"];
d234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
d251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d282 [label="Exit lambda expression", span="660-660", cluster="lambda expression"];
d281 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression"];
d287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d298 [label="Exit lambda expression", span="701-701", cluster="lambda expression"];
d297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression"];
d303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d306 [label="Exit lambda expression", span="723-723", cluster="lambda expression"];
d305 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression"];
d311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d314 [label="Exit lambda expression", span="745-745", cluster="lambda expression"];
d313 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression"];
d320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d324 [label="Exit lambda expression", span="765-765", cluster="lambda expression"];
d323 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression"];
d321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome"];
d331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d334 [label="Exit lambda expression", span="789-789", cluster="lambda expression"];
d333 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression"];
d345 [label="Exit lambda expression", span="810-810", cluster="lambda expression"];
d344 [label="new FakeOptionsWithMinZero()", span="810-810", cluster="lambda expression"];
d356 [label="Exit lambda expression", span="824-824", cluster="lambda expression"];
d355 [label="new FakeOptionsWithMaxZero()", span="824-824", cluster="lambda expression"];
d367 [label="Exit lambda expression", span="838-838", cluster="lambda expression"];
d366 [label="new FakeOptionsWithMinMaxZero()", span="838-838", cluster="lambda expression"];
d372 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)"];
d380 [label="x == expected", span="863-863", cluster="lambda expression"];
d373 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
d374 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount"];
d379 [label="Entry lambda expression", span="863-863", cluster="lambda expression"];
d377 [label="Exit lambda expression", span="857-857", cluster="lambda expression"];
d376 [label="new FakeOptionsWithNamedAndEmptySets()", span="857-857", cluster="lambda expression"];
d385 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
d390 [label="x == expected", span="878-878", cluster="lambda expression"];
d389 [label="Entry lambda expression", span="878-878", cluster="lambda expression"];
d395 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
d398 [label="Exit lambda expression", span="888-888", cluster="lambda expression"];
d397 [label="new FakeInterfaceOptions()", span="888-888", cluster="lambda expression"];
d403 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d406 [label="Exit lambda expression", span="905-905", cluster="lambda expression"];
d405 [label="new FakeOptionsWithRequiredValue()", span="905-905", cluster="lambda expression"];
d410 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d413 [label="Exit lambda expression", span="924-924", cluster="lambda expression"];
d412 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924", cluster="lambda expression"];
d426 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
d31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
d40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
d55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
d63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
d83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
d100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
d109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
d151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
d159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
d167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d181 [label="Entry lambda expression", span="444-444", cluster="lambda expression"];
d429 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d183 [label="Exit lambda expression", span="444-444", cluster="lambda expression"];
d184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d185 [label="Entry lambda expression", span="444-444", cluster="lambda expression"];
d187 [label="Exit lambda expression", span="444-444", cluster="lambda expression"];
d188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
d233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
d283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()"];
d299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()"];
d307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()"];
d325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()"];
d346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()"];
d357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()"];
d368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()"];
d430 [label=int, span=""];
d381 [label="Exit lambda expression", span="863-863", cluster="lambda expression"];
d378 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()"];
d431 [label=int, span=""];
d391 [label="Exit lambda expression", span="878-878", cluster="lambda expression"];
d399 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()"];
d414 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()"];
m1_4 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="StringDehumanizeExtensions.cs"];
m1_0 [label="Entry Humanizer.StringDehumanizeExtensions.Duhumanize(string)", span="6-6", cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", file="StringDehumanizeExtensions.cs"];
m1_1 [label="var titlizedWords = from word in input.Split(' ')\r\n                           select word.Humanize(LetterCasing.Title)", span="8-9", cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", color=green, community=0, file="StringDehumanizeExtensions.cs"];
m1_2 [label="return string.Join('''', titlizedWords);", span="11-11", cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", file="StringDehumanizeExtensions.cs"];
m1_3 [label="Exit Humanizer.StringDehumanizeExtensions.Duhumanize(string)", span="6-6", cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", file="StringDehumanizeExtensions.cs"];
m1_6 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="StringDehumanizeExtensions.cs"];
m1_5 [label="Entry string.Humanize(Humanizer.LetterCasing)", span="61-61", cluster="string.Humanize(Humanizer.LetterCasing)", file="StringDehumanizeExtensions.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n7  [key=2, style=dotted];
n4 -> n0  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n5  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n6  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n7  [key=2, style=dotted];
n12 -> n8  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n14 -> n5  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n6  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n7  [key=2, style=dotted];
n17 -> n13  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n5  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n6  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n7  [key=2, style=dotted];
n22 -> n18  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n5  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n6  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n7  [key=2, style=dotted];
n27 -> n23  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n33  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n6  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n7  [key=2, style=dotted];
n32 -> n28  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n35 -> n33  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n6  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n7  [key=2, style=dotted];
n38 -> n34  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n44  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n6  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n7  [key=2, style=dotted];
n43 -> n39  [key=0, style=bold, color=blue];
n45 -> n46  [key=0, style=solid];
n46 -> n47  [key=0, style=solid];
n46 -> n44  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n6  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n7  [key=2, style=dotted];
n49 -> n45  [key=0, style=bold, color=blue];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n55  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n6  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n7  [key=2, style=dotted];
n54 -> n50  [key=0, style=bold, color=blue];
n56 -> n57  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n55  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n6  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n7  [key=2, style=dotted];
n60 -> n56  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n66  [key=2, style=dotted];
n63 -> n64  [key=0, style=solid];
n63 -> n6  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n7  [key=2, style=dotted];
n65 -> n61  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n66  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n69 -> n6  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n7  [key=2, style=dotted];
n71 -> n67  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n6  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n7  [key=2, style=dotted];
n76 -> n72  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d6  [key=2, style=dotted, color=green];
d1 -> d3  [key=1, style=dashed, color=green, label=fakeOptions];
d1 -> d14  [key=1, style=dashed, color=green, label=fakeOptions];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d3  [key=0, style=solid, color=green];
d2 -> d7  [key=2, style=dotted, color=green];
d2 -> d8  [key=2, style=dotted, color=green];
d2 -> d4  [key=1, style=dashed, color=green, label=expectedResult];
d3 -> d4  [key=0, style=solid];
d3 -> d9  [key=2, style=dotted];
d3 -> d10  [key=2, style=dotted];
d3 -> d13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d14 -> d15  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d11  [key=2, style=dotted];
d4 -> d12  [key=2, style=dotted];
d5 -> d0  [key=0, style=bold, color=blue];
d22 -> d6  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d46 -> d6  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d240 -> d6  [key=2, style=dotted];
d240 -> d241  [key=0, style=solid];
d249 -> d6  [key=2, style=dotted];
d249 -> d250  [key=0, style=solid];
d257 -> d6  [key=2, style=dotted];
d257 -> d258  [key=0, style=solid];
d265 -> d6  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d273 -> d6  [key=2, style=dotted];
d273 -> d274  [key=0, style=solid];
d289 -> d6  [key=2, style=dotted];
d289 -> d290  [key=0, style=solid];
d387 -> d6  [key=2, style=dotted];
d387 -> d388  [key=0, style=solid];
d416 -> d6  [key=2, style=dotted];
d416 -> d417  [key=0, style=solid];
d416 -> d418  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d421 -> d6  [key=2, style=dotted];
d421 -> d422  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d428 -> d14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d15 -> d13  [key=0, style=bold, color=blue];
d21 -> d22  [key=0, style=solid];
d23 -> d21  [key=0, style=bold, color=blue];
d45 -> d46  [key=0, style=solid];
d47 -> d45  [key=0, style=bold, color=blue];
d239 -> d240  [key=0, style=solid];
d241 -> d239  [key=0, style=bold, color=blue];
d248 -> d249  [key=0, style=solid];
d250 -> d248  [key=0, style=bold, color=blue];
d256 -> d257  [key=0, style=solid];
d258 -> d256  [key=0, style=bold, color=blue];
d264 -> d265  [key=0, style=solid];
d266 -> d264  [key=0, style=bold, color=blue];
d272 -> d273  [key=0, style=solid];
d274 -> d272  [key=0, style=bold, color=blue];
d288 -> d289  [key=0, style=solid];
d290 -> d288  [key=0, style=bold, color=blue];
d386 -> d387  [key=0, style=solid];
d388 -> d386  [key=0, style=bold, color=blue];
d415 -> d416  [key=0, style=solid];
d417 -> d9  [key=2, style=dotted];
d417 -> d10  [key=2, style=dotted];
d417 -> d418  [key=0, style=solid];
d417 -> d420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d418 -> d419  [key=0, style=solid];
d418 -> d105  [key=2, style=dotted];
d420 -> d421  [key=0, style=solid];
d422 -> d420  [key=0, style=bold, color=blue];
d17 -> d9  [key=2, style=dotted];
d17 -> d10  [key=2, style=dotted];
d17 -> d21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d17 -> d18  [key=0, style=solid];
d25 -> d9  [key=2, style=dotted];
d25 -> d10  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d33 -> d9  [key=2, style=dotted];
d33 -> d10  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d9  [key=2, style=dotted];
d42 -> d10  [key=2, style=dotted];
d42 -> d45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d43  [key=0, style=solid];
d49 -> d9  [key=2, style=dotted];
d49 -> d10  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d57 -> d9  [key=2, style=dotted];
d57 -> d10  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d57 -> d60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d66 -> d9  [key=2, style=dotted];
d66 -> d10  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d66 -> d71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d76 -> d9  [key=2, style=dotted];
d76 -> d10  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d76 -> d80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d86 -> d9  [key=2, style=dotted];
d86 -> d10  [key=2, style=dotted];
d86 -> d87  [key=0, style=solid];
d86 -> d89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d94 -> d9  [key=2, style=dotted];
d94 -> d10  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d102 -> d9  [key=2, style=dotted];
d102 -> d10  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d102 -> d106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d112 -> d9  [key=2, style=dotted];
d112 -> d10  [key=2, style=dotted];
d112 -> d113  [key=0, style=solid];
d112 -> d116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d121 -> d9  [key=2, style=dotted];
d121 -> d10  [key=2, style=dotted];
d121 -> d122  [key=0, style=solid];
d121 -> d124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d129 -> d9  [key=2, style=dotted];
d129 -> d10  [key=2, style=dotted];
d129 -> d130  [key=0, style=solid];
d129 -> d132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d137 -> d9  [key=2, style=dotted];
d137 -> d10  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d137 -> d141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d145 -> d9  [key=2, style=dotted];
d145 -> d10  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d145 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d153 -> d9  [key=2, style=dotted];
d153 -> d10  [key=2, style=dotted];
d153 -> d154  [key=0, style=solid];
d153 -> d156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d161 -> d9  [key=2, style=dotted];
d161 -> d10  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d161 -> d164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d170 -> d9  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d170 -> d173  [key=2, style=dotted];
d170 -> d174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d170 -> d177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d191 -> d9  [key=2, style=dotted];
d191 -> d10  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d191 -> d195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d201 -> d9  [key=2, style=dotted];
d201 -> d10  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d210 -> d9  [key=2, style=dotted];
d210 -> d10  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d210 -> d213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d218 -> d9  [key=2, style=dotted];
d218 -> d10  [key=2, style=dotted];
d218 -> d219  [key=0, style=solid];
d218 -> d222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d227 -> d9  [key=2, style=dotted];
d227 -> d10  [key=2, style=dotted];
d227 -> d228  [key=0, style=solid];
d227 -> d230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d236 -> d9  [key=2, style=dotted];
d236 -> d10  [key=2, style=dotted];
d236 -> d239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d236 -> d237  [key=0, style=solid];
d244 -> d9  [key=2, style=dotted];
d244 -> d10  [key=2, style=dotted];
d244 -> d248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d244 -> d245  [key=0, style=solid];
d253 -> d9  [key=2, style=dotted];
d253 -> d10  [key=2, style=dotted];
d253 -> d256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d253 -> d254  [key=0, style=solid];
d261 -> d9  [key=2, style=dotted];
d261 -> d10  [key=2, style=dotted];
d261 -> d264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d261 -> d262  [key=0, style=solid];
d268 -> d9  [key=2, style=dotted];
d268 -> d10  [key=2, style=dotted];
d268 -> d272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d268 -> d269  [key=0, style=solid];
d277 -> d9  [key=2, style=dotted];
d277 -> d10  [key=2, style=dotted];
d277 -> d278  [key=0, style=solid];
d277 -> d280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d285 -> d9  [key=2, style=dotted];
d285 -> d10  [key=2, style=dotted];
d285 -> d288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d285 -> d286  [key=0, style=solid];
d293 -> d9  [key=2, style=dotted];
d293 -> d10  [key=2, style=dotted];
d293 -> d294  [key=0, style=solid];
d293 -> d296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d301 -> d9  [key=2, style=dotted];
d301 -> d10  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d301 -> d304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d309 -> d9  [key=2, style=dotted];
d309 -> d10  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d309 -> d312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d316 -> d9  [key=2, style=dotted];
d316 -> d10  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d316 -> d322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d316 -> d318  [key=1, style=dashed, color=darkseagreen4, label=result];
d316 -> d319  [key=1, style=dashed, color=darkseagreen4, label=result];
d327 -> d9  [key=2, style=dotted];
d327 -> d10  [key=2, style=dotted];
d327 -> d328  [key=0, style=solid];
d327 -> d332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d327 -> d329  [key=1, style=dashed, color=darkseagreen4, label=result];
d327 -> d330  [key=1, style=dashed, color=darkseagreen4, label=result];
d341 -> d9  [key=2, style=dotted];
d341 -> d10  [key=2, style=dotted];
d341 -> d342  [key=0, style=solid];
d341 -> d343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d352 -> d9  [key=2, style=dotted];
d352 -> d10  [key=2, style=dotted];
d352 -> d353  [key=0, style=solid];
d352 -> d354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d363 -> d9  [key=2, style=dotted];
d363 -> d10  [key=2, style=dotted];
d363 -> d364  [key=0, style=solid];
d363 -> d365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d370 -> d9  [key=2, style=dotted];
d370 -> d10  [key=2, style=dotted];
d370 -> d371  [key=0, style=solid];
d370 -> d375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d383 -> d9  [key=2, style=dotted];
d383 -> d10  [key=2, style=dotted];
d383 -> d386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d383 -> d384  [key=0, style=solid];
d393 -> d9  [key=2, style=dotted];
d393 -> d10  [key=2, style=dotted];
d393 -> d394  [key=0, style=solid];
d393 -> d396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d401 -> d9  [key=2, style=dotted];
d401 -> d10  [key=2, style=dotted];
d401 -> d402  [key=0, style=solid];
d401 -> d404  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d408 -> d9  [key=2, style=dotted];
d408 -> d10  [key=2, style=dotted];
d408 -> d409  [key=0, style=solid];
d408 -> d411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d424 -> d10  [key=2, style=dotted];
d424 -> d425  [key=0, style=solid];
d424 -> d427  [key=2, style=dotted];
d34 -> d12  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d36  [key=2, style=dotted];
d43 -> d12  [key=2, style=dotted];
d43 -> d44  [key=0, style=solid];
d43 -> d36  [key=2, style=dotted];
d50 -> d12  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d50 -> d36  [key=2, style=dotted];
d58 -> d12  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d58 -> d36  [key=2, style=dotted];
d67 -> d12  [key=2, style=dotted];
d67 -> d68  [key=0, style=solid];
d67 -> d36  [key=2, style=dotted];
d77 -> d12  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d36  [key=2, style=dotted];
d87 -> d12  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d87 -> d36  [key=2, style=dotted];
d95 -> d12  [key=2, style=dotted];
d95 -> d96  [key=0, style=solid];
d95 -> d36  [key=2, style=dotted];
d113 -> d12  [key=2, style=dotted];
d113 -> d114  [key=0, style=solid];
d113 -> d36  [key=2, style=dotted];
d122 -> d12  [key=2, style=dotted];
d122 -> d123  [key=0, style=solid];
d122 -> d36  [key=2, style=dotted];
d130 -> d12  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d36  [key=2, style=dotted];
d192 -> d12  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d36  [key=2, style=dotted];
d219 -> d12  [key=2, style=dotted];
d219 -> d220  [key=0, style=solid];
d219 -> d36  [key=2, style=dotted];
d228 -> d12  [key=2, style=dotted];
d228 -> d229  [key=0, style=solid];
d228 -> d36  [key=2, style=dotted];
d237 -> d12  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d237 -> d36  [key=2, style=dotted];
d245 -> d12  [key=2, style=dotted];
d245 -> d246  [key=0, style=solid];
d245 -> d36  [key=2, style=dotted];
d254 -> d12  [key=2, style=dotted];
d254 -> d255  [key=0, style=solid];
d254 -> d36  [key=2, style=dotted];
d262 -> d12  [key=2, style=dotted];
d262 -> d263  [key=0, style=solid];
d262 -> d36  [key=2, style=dotted];
d269 -> d12  [key=2, style=dotted];
d269 -> d270  [key=0, style=solid];
d269 -> d271  [key=2, style=dotted];
d278 -> d12  [key=2, style=dotted];
d278 -> d279  [key=0, style=solid];
d278 -> d36  [key=2, style=dotted];
d294 -> d12  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d294 -> d36  [key=2, style=dotted];
d419 -> d415  [key=0, style=bold, color=blue];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=1, style=dashed, color=darkseagreen4, label=long];
d18 -> d19  [key=0, style=solid];
d18 -> d20  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d26  [key=1, style=dashed, color=darkseagreen4, label=double];
d26 -> d27  [key=0, style=solid];
d26 -> d20  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d32 -> d34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d37 -> d38  [key=0, style=solid];
d41 -> d42  [key=0, style=solid];
d41 -> d43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d48 -> d49  [key=0, style=solid];
d48 -> d50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d52 -> d53  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d56 -> d58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d60 -> d61  [key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d65 -> d67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d65 -> d69  [key=2, style=dotted];
d65 -> d70  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d75 -> d76  [key=0, style=solid];
d75 -> d77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d75 -> d79  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d85 -> d79  [key=2, style=dotted];
d85 -> d70  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d93 -> d95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d93 -> d79  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d101 -> d102  [key=0, style=solid];
d101 -> d103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
d103 -> d105  [key=2, style=dotted];
d103 -> d103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
d103 -> d104  [key=0, style=solid];
d106 -> d107  [key=0, style=solid];
d111 -> d112  [key=0, style=solid];
d111 -> d113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d111 -> d115  [key=2, style=dotted];
d111 -> d70  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d120 -> d121  [key=0, style=solid];
d120 -> d122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d120 -> d115  [key=2, style=dotted];
d120 -> d70  [key=2, style=dotted];
d124 -> d125  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d128 -> d115  [key=2, style=dotted];
d128 -> d70  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d136 -> d137  [key=0, style=solid];
d136 -> d140  [key=2, style=dotted];
d136 -> d138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d138 -> d105  [key=2, style=dotted];
d138 -> d139  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d144 -> d145  [key=0, style=solid];
d144 -> d146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
d146 -> d105  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d152 -> d153  [key=0, style=solid];
d152 -> d154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
d154 -> d105  [key=2, style=dotted];
d154 -> d155  [key=0, style=solid];
d156 -> d157  [key=0, style=solid];
d160 -> d161  [key=0, style=solid];
d160 -> d162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d162 -> d105  [key=2, style=dotted];
d162 -> d163  [key=0, style=solid];
d164 -> d165  [key=0, style=solid];
d169 -> d170  [key=0, style=solid];
d171 -> d105  [key=2, style=dotted];
d171 -> d172  [key=0, style=solid];
d174 -> d175  [key=0, style=solid];
d177 -> d178  [key=0, style=solid];
d177 -> d182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d177 -> d186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d190 -> d191  [key=0, style=solid];
d190 -> d192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d190 -> d194  [key=2, style=dotted];
d190 -> d70  [key=2, style=dotted];
d195 -> d196  [key=0, style=solid];
d200 -> d201  [key=0, style=solid];
d200 -> d204  [key=2, style=dotted];
d200 -> d202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d202 -> d105  [key=2, style=dotted];
d202 -> d203  [key=0, style=solid];
d205 -> d206  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d209 -> d204  [key=2, style=dotted];
d209 -> d211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d211 -> d105  [key=2, style=dotted];
d211 -> d212  [key=0, style=solid];
d213 -> d214  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d217 -> d219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d217 -> d221  [key=2, style=dotted];
d217 -> d70  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d226 -> d227  [key=0, style=solid];
d226 -> d228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d226 -> d221  [key=2, style=dotted];
d226 -> d70  [key=2, style=dotted];
d230 -> d231  [key=0, style=solid];
d235 -> d236  [key=0, style=solid];
d235 -> d237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d235 -> d79  [key=2, style=dotted];
d235 -> d70  [key=2, style=dotted];
d243 -> d244  [key=0, style=solid];
d243 -> d245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d243 -> d247  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d252 -> d254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d252 -> d247  [key=2, style=dotted];
d260 -> d261  [key=0, style=solid];
d260 -> d262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d260 -> d247  [key=2, style=dotted];
d267 -> d268  [key=0, style=solid];
d267 -> d269  [key=1, style=dashed, color=darkseagreen4, label=string];
d276 -> d277  [key=0, style=solid];
d276 -> d278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d276 -> d221  [key=2, style=dotted];
d280 -> d281  [key=0, style=solid];
d284 -> d285  [key=0, style=solid];
d284 -> d286  [key=1, style=dashed, color=darkseagreen4, label=string];
d286 -> d105  [key=2, style=dotted];
d286 -> d287  [key=0, style=solid];
d292 -> d293  [key=0, style=solid];
d292 -> d294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d292 -> d79  [key=2, style=dotted];
d296 -> d297  [key=0, style=solid];
d300 -> d301  [key=0, style=solid];
d300 -> d302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
d302 -> d105  [key=2, style=dotted];
d302 -> d303  [key=0, style=solid];
d304 -> d305  [key=0, style=solid];
d308 -> d309  [key=0, style=solid];
d308 -> d310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
d310 -> d105  [key=2, style=dotted];
d310 -> d311  [key=0, style=solid];
d312 -> d313  [key=0, style=solid];
d315 -> d316  [key=0, style=solid];
d315 -> d318  [key=1, style=dashed, color=darkseagreen4, label=string];
d315 -> d319  [key=1, style=dashed, color=darkseagreen4, label=bool];
d317 -> d318  [key=0, style=solid];
d317 -> d319  [key=0, style=solid];
d322 -> d323  [key=0, style=solid];
d318 -> d105  [key=2, style=dotted];
d318 -> d319  [key=0, style=solid];
d319 -> d105  [key=2, style=dotted];
d319 -> d320  [key=0, style=solid];
d319 -> d321  [key=2, style=dotted];
d326 -> d327  [key=0, style=solid];
d326 -> d329  [key=1, style=dashed, color=darkseagreen4, label=int];
d326 -> d330  [key=1, style=dashed, color=darkseagreen4, label=bool];
d328 -> d329  [key=0, style=solid];
d328 -> d330  [key=0, style=solid];
d332 -> d333  [key=0, style=solid];
d329 -> d105  [key=2, style=dotted];
d329 -> d330  [key=0, style=solid];
d330 -> d105  [key=2, style=dotted];
d330 -> d331  [key=0, style=solid];
d330 -> d321  [key=2, style=dotted];
d340 -> d341  [key=0, style=solid];
d342 -> d340  [key=0, style=bold, color=blue];
d343 -> d344  [key=0, style=solid];
d351 -> d352  [key=0, style=solid];
d353 -> d351  [key=0, style=bold, color=blue];
d354 -> d355  [key=0, style=solid];
d362 -> d363  [key=0, style=solid];
d364 -> d362  [key=0, style=bold, color=blue];
d365 -> d366  [key=0, style=solid];
d369 -> d370  [key=0, style=solid];
d369 -> d371  [key=1, style=dashed, color=darkseagreen4, label=int];
d369 -> d380  [key=1, style=dashed, color=darkseagreen4, label=int];
d371 -> d372  [key=0, style=solid];
d371 -> d373  [key=2, style=dotted];
d371 -> d374  [key=2, style=dotted];
d371 -> d379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d375 -> d376  [key=0, style=solid];
d382 -> d383  [key=0, style=solid];
d382 -> d384  [key=1, style=dashed, color=darkseagreen4, label=int];
d382 -> d390  [key=1, style=dashed, color=darkseagreen4, label=int];
d384 -> d385  [key=0, style=solid];
d384 -> d373  [key=2, style=dotted];
d384 -> d374  [key=2, style=dotted];
d384 -> d389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d392 -> d393  [key=0, style=solid];
d392 -> d394  [key=1, style=dashed, color=darkseagreen4, label=string];
d394 -> d105  [key=2, style=dotted];
d394 -> d395  [key=0, style=solid];
d396 -> d397  [key=0, style=solid];
d400 -> d401  [key=0, style=solid];
d400 -> d402  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
d402 -> d105  [key=2, style=dotted];
d402 -> d403  [key=0, style=solid];
d404 -> d405  [key=0, style=solid];
d407 -> d408  [key=0, style=solid];
d407 -> d409  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
d409 -> d105  [key=2, style=dotted];
d409 -> d410  [key=0, style=solid];
d411 -> d412  [key=0, style=solid];
d423 -> d424  [key=0, style=solid];
d423 -> d425  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
d425 -> d105  [key=2, style=dotted];
d425 -> d426  [key=0, style=solid];
d35 -> d32  [key=0, style=bold, color=blue];
d44 -> d41  [key=0, style=bold, color=blue];
d51 -> d48  [key=0, style=bold, color=blue];
d59 -> d56  [key=0, style=bold, color=blue];
d68 -> d64  [key=0, style=bold, color=blue];
d78 -> d74  [key=0, style=bold, color=blue];
d88 -> d84  [key=0, style=bold, color=blue];
d96 -> d92  [key=0, style=bold, color=blue];
d114 -> d110  [key=0, style=bold, color=blue];
d123 -> d119  [key=0, style=bold, color=blue];
d131 -> d127  [key=0, style=bold, color=blue];
d193 -> d189  [key=0, style=bold, color=blue];
d220 -> d216  [key=0, style=bold, color=blue];
d229 -> d225  [key=0, style=bold, color=blue];
d238 -> d234  [key=0, style=bold, color=blue];
d246 -> d242  [key=0, style=bold, color=blue];
d255 -> d251  [key=0, style=bold, color=blue];
d263 -> d259  [key=0, style=bold, color=blue];
d270 -> d267  [key=0, style=bold, color=blue];
d279 -> d275  [key=0, style=bold, color=blue];
d295 -> d291  [key=0, style=bold, color=blue];
d19 -> d16  [key=0, style=bold, color=blue];
d27 -> d24  [key=0, style=bold, color=blue];
d30 -> d28  [key=0, style=bold, color=blue];
d29 -> d30  [key=0, style=solid];
d29 -> d31  [key=2, style=dotted];
d39 -> d37  [key=0, style=bold, color=blue];
d38 -> d39  [key=0, style=solid];
d38 -> d40  [key=2, style=dotted];
d54 -> d52  [key=0, style=bold, color=blue];
d53 -> d54  [key=0, style=solid];
d53 -> d55  [key=2, style=dotted];
d62 -> d60  [key=0, style=bold, color=blue];
d61 -> d62  [key=0, style=solid];
d61 -> d63  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d73 -> d71  [key=0, style=bold, color=blue];
d72 -> d73  [key=0, style=solid];
d72 -> d55  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d82 -> d80  [key=0, style=bold, color=blue];
d81 -> d82  [key=0, style=solid];
d81 -> d83  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d91 -> d89  [key=0, style=bold, color=blue];
d90 -> d91  [key=0, style=solid];
d90 -> d63  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d99 -> d97  [key=0, style=bold, color=blue];
d98 -> d99  [key=0, style=solid];
d98 -> d100  [key=2, style=dotted];
d104 -> d101  [key=0, style=bold, color=blue];
d108 -> d106  [key=0, style=bold, color=blue];
d107 -> d108  [key=0, style=solid];
d107 -> d109  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d118 -> d116  [key=0, style=bold, color=blue];
d117 -> d118  [key=0, style=solid];
d117 -> d109  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d126 -> d124  [key=0, style=bold, color=blue];
d125 -> d126  [key=0, style=solid];
d125 -> d109  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d134 -> d132  [key=0, style=bold, color=blue];
d133 -> d134  [key=0, style=solid];
d133 -> d109  [key=2, style=dotted];
d135 -> d136  [key=0, style=solid];
d139 -> d135  [key=0, style=bold, color=blue];
d143 -> d141  [key=0, style=bold, color=blue];
d142 -> d140  [key=2, style=dotted];
d142 -> d143  [key=0, style=solid];
d147 -> d144  [key=0, style=bold, color=blue];
d150 -> d148  [key=0, style=bold, color=blue];
d149 -> d150  [key=0, style=solid];
d149 -> d151  [key=2, style=dotted];
d155 -> d152  [key=0, style=bold, color=blue];
d158 -> d156  [key=0, style=bold, color=blue];
d157 -> d158  [key=0, style=solid];
d157 -> d159  [key=2, style=dotted];
d163 -> d160  [key=0, style=bold, color=blue];
d166 -> d164  [key=0, style=bold, color=blue];
d165 -> d166  [key=0, style=solid];
d165 -> d159  [key=2, style=dotted];
d168 -> d169  [key=0, style=solid];
d168 -> d171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d168 -> d140  [key=2, style=dotted];
d172 -> d167  [key=0, style=bold, color=blue];
d176 -> d174  [key=0, style=bold, color=blue];
d175 -> d140  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d179 -> d177  [key=0, style=bold, color=blue];
d178 -> d179  [key=0, style=solid];
d178 -> d180  [key=2, style=dotted];
d178 -> d181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d182 -> d183  [key=0, style=solid];
d182 -> d184  [key=2, style=dotted];
d182 -> d185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d186 -> d187  [key=0, style=solid];
d186 -> d188  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d197 -> d195  [key=0, style=bold, color=blue];
d196 -> d197  [key=0, style=solid];
d196 -> d198  [key=2, style=dotted];
d199 -> d200  [key=0, style=solid];
d203 -> d199  [key=0, style=bold, color=blue];
d207 -> d205  [key=0, style=bold, color=blue];
d206 -> d204  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d208 -> d209  [key=0, style=solid];
d212 -> d208  [key=0, style=bold, color=blue];
d215 -> d213  [key=0, style=bold, color=blue];
d214 -> d204  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d224 -> d222  [key=0, style=bold, color=blue];
d223 -> d204  [key=2, style=dotted];
d223 -> d224  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d232 -> d230  [key=0, style=bold, color=blue];
d231 -> d232  [key=0, style=solid];
d231 -> d233  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d242 -> d243  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d259 -> d260  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d282 -> d280  [key=0, style=bold, color=blue];
d281 -> d282  [key=0, style=solid];
d281 -> d283  [key=2, style=dotted];
d287 -> d284  [key=0, style=bold, color=blue];
d291 -> d292  [key=0, style=solid];
d298 -> d296  [key=0, style=bold, color=blue];
d297 -> d298  [key=0, style=solid];
d297 -> d299  [key=2, style=dotted];
d303 -> d300  [key=0, style=bold, color=blue];
d306 -> d304  [key=0, style=bold, color=blue];
d305 -> d306  [key=0, style=solid];
d305 -> d307  [key=2, style=dotted];
d311 -> d308  [key=0, style=bold, color=blue];
d314 -> d312  [key=0, style=bold, color=blue];
d313 -> d314  [key=0, style=solid];
d313 -> d307  [key=2, style=dotted];
d320 -> d315  [key=0, style=bold, color=blue];
d324 -> d322  [key=0, style=bold, color=blue];
d323 -> d324  [key=0, style=solid];
d323 -> d325  [key=2, style=dotted];
d331 -> d326  [key=0, style=bold, color=blue];
d334 -> d332  [key=0, style=bold, color=blue];
d333 -> d334  [key=0, style=solid];
d333 -> d325  [key=2, style=dotted];
d345 -> d343  [key=0, style=bold, color=blue];
d344 -> d345  [key=0, style=solid];
d344 -> d346  [key=2, style=dotted];
d356 -> d354  [key=0, style=bold, color=blue];
d355 -> d356  [key=0, style=solid];
d355 -> d357  [key=2, style=dotted];
d367 -> d365  [key=0, style=bold, color=blue];
d366 -> d367  [key=0, style=solid];
d366 -> d368  [key=2, style=dotted];
d372 -> d369  [key=0, style=bold, color=blue];
d380 -> d381  [key=0, style=solid];
d379 -> d380  [key=0, style=solid];
d377 -> d375  [key=0, style=bold, color=blue];
d376 -> d377  [key=0, style=solid];
d376 -> d378  [key=2, style=dotted];
d385 -> d382  [key=0, style=bold, color=blue];
d390 -> d391  [key=0, style=solid];
d389 -> d390  [key=0, style=solid];
d395 -> d392  [key=0, style=bold, color=blue];
d398 -> d396  [key=0, style=bold, color=blue];
d397 -> d398  [key=0, style=solid];
d397 -> d399  [key=2, style=dotted];
d403 -> d400  [key=0, style=bold, color=blue];
d406 -> d404  [key=0, style=bold, color=blue];
d405 -> d406  [key=0, style=solid];
d405 -> d283  [key=2, style=dotted];
d410 -> d407  [key=0, style=bold, color=blue];
d413 -> d411  [key=0, style=bold, color=blue];
d412 -> d413  [key=0, style=solid];
d412 -> d414  [key=2, style=dotted];
d426 -> d423  [key=0, style=bold, color=blue];
d167 -> d168  [key=0, style=solid];
d181 -> d182  [key=0, style=solid];
d429 -> d182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d429 -> d186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d183 -> d181  [key=0, style=bold, color=blue];
d185 -> d186  [key=0, style=solid];
d187 -> d185  [key=0, style=bold, color=blue];
d430 -> d380  [key=1, style=dashed, color=darkseagreen4, label=int];
d381 -> d379  [key=0, style=bold, color=blue];
d431 -> d390  [key=1, style=dashed, color=darkseagreen4, label=int];
d391 -> d389  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_4  [key=2, style=dotted, color=green];
m1_1 -> m1_5  [key=2, style=dotted, color=green];
m1_1 -> m1_1  [key=1, style=dashed, color=green, label=word];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
}
