digraph  {
n108 [label=char, span=""];
n109 [label=double, span=""];
n0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="76-76"];
n1 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="input = CleanRepresentation(input)", span="78-78"];
n2 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="return BuildNumber(input, input[input.Length - 1]);", span="79-79"];
n4 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="Entry Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138"];
n3 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="76-76"];
n5 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="Entry Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157"];
n6 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="100-100"];
n8 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="100-100"];
n9 [cluster="System.Convert.ToDouble(int)", label="Entry System.Convert.ToDouble(int)", span="0-0"];
n10 [cluster="double.ToMetric(bool, bool)", label="Entry double.ToMetric(bool, bool)", span="123-123"];
n11 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="123-123"];
n12 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="input.Equals(0)", span="125-125"];
n13 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="return input.ToString();", span="126-126"];
n14 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="input.IsOutOfRange()", span="127-127"];
n16 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="return BuildRepresentation(input, hasSpace, useSymbol);", span="130-130"];
n18 [cluster="double.Equals(double)", label="Entry double.Equals(double)", span="0-0"];
n15 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="throw new ArgumentOutOfRangeException(''input'');", span="128-128"];
n20 [cluster="double.IsOutOfRange()", label="Entry double.IsOutOfRange()", span="241-241"];
n17 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="123-123"];
n22 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198"];
n19 [cluster="double.ToString()", label="Entry double.ToString()", span="0-0"];
n21 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n23 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="input == null", span="140-140"];
n25 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="input = input.Trim()", span="143-143"];
n24 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="throw new ArgumentNullException(''input'');", span="141-141"];
n26 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="input = ReplaceNameBySymbol(input)", span="144-144"];
n32 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
n27 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="input.Length == 0 || input.IsInvalidMetricNumeral()", span="145-145"];
n33 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="185-185"];
n29 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="return input.Replace('' '', String.Empty);", span="148-148"];
n28 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="146-146"];
n34 [cluster="string.IsInvalidMetricNumeral()", label="Entry string.IsInvalidMetricNumeral()", span="261-261"];
n30 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="Exit Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138"];
n36 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n31 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n35 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n37 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="return Char.IsLetter(last)\r\n				? BuildMetricNumber(input, last)\r\n				: Double.Parse(input);", span="159-161"];
n38 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="Exit Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157"];
n39 [cluster="char.IsLetter(char)", label="Entry char.IsLetter(char)", span="0-0"];
n40 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="Entry Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170"];
n41 [cluster="double.Parse(string)", label="Entry double.Parse(string)", span="0-0"];
n43 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="var number = Double.Parse(input.Remove(input.Length - 1))", span="173-173"];
n47 [cluster="string.Remove(int)", label="Entry string.Remove(int)", span="0-0"];
n45 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="return number * exponent;", span="177-177"];
n48 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
n49 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n50 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
n46 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="Exit Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170"];
n51 [cluster="lambda expression", label="Entry lambda expression", span="172-172"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="172-172"];
n54 [cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)", label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="279-279"];
n55 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="return Names.Aggregate(input, (current, name) =>\r\n				current.Replace(name.Value, name.Key.ToString()));", span="187-188"];
n56 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Exit Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="185-185"];
n57 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n58 [cluster="lambda expression", label="Entry lambda expression", span="187-188"];
n59 [cluster="lambda expression", label="current.Replace(name.Value, name.Key.ToString())", span="188-188"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="187-188"];
n61 [cluster="char.ToString()", label="Entry char.ToString()", span="0-0"];
n62 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="200-200"];
n63 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="return exponent.Equals(0)\r\n				? input.ToString()\r\n				: BuildMetricRepresentation(input, exponent, hasSpace, useSymbol);", span="201-203"];
n65 [cluster="System.Math.Abs(double)", label="Entry System.Math.Abs(double)", span="0-0"];
n66 [cluster="System.Math.Log10(double)", label="Entry System.Math.Log10(double)", span="0-0"];
n67 [cluster="System.Math.Floor(double)", label="Entry System.Math.Floor(double)", span="0-0"];
n64 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198"];
n68 [cluster="int.Equals(int)", label="Entry int.Equals(int)", span="0-0"];
n69 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214"];
n70 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="var number = input * Math.Pow(1000, -exponent)", span="216-216"];
n71 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="var symbol = Math.Sign(exponent) == 1\r\n				? Symbols[0][exponent - 1]\r\n				: Symbols[1][-exponent - 1]", span="217-219"];
n72 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="return number\r\n				+ (hasSpace ? '' '' : String.Empty)\r\n				+ GetUnit(symbol, useSymbol);", span="220-222"];
n74 [cluster="System.Math.Sign(int)", label="Entry System.Math.Sign(int)", span="0-0"];
n73 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214"];
n75 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="231-231"];
n76 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="return useSymbol ? symbol.ToString() : Names[symbol];", span="233-233"];
n77 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Exit Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="231-231"];
n78 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="241-241"];
n82 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="246-246"];
n88 [cluster="lambda expression", label="!(max > input && input > min)", span="246-246"];
n84 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="241-241"];
n85 [cluster="System.Math.Sign(double)", label="Entry System.Math.Sign(double)", span="0-0"];
n86 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n87 [cluster="lambda expression", label="Entry lambda expression", span="246-246"];
n89 [cluster="lambda expression", label="Exit lambda expression", span="246-246"];
n90 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="261-261"];
n91 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="double number", span="263-263"];
n92 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="var index = input.Length - 1", span="264-264"];
n93 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="var last = input[index]", span="265-265"];
n95 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="267-267"];
n94 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="266-266"];
n96 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="261-261"];
n97 [cluster="double.TryParse(string, out double)", label="Entry double.TryParse(string, out double)", span="0-0"];
n98 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="279-279"];
n106 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
n107 [cluster="char.Equals(char)", label="Entry char.Equals(char)", span="0-0"];
n105 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="279-279"];
d12 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="input.Equals(0)", prediction=0, span="125-125"];
d13 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="return input.ToString();", prediction=1, span="126-126"];
d14 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="input.IsOutOfRange()", prediction=1, span="127-127"];
d15 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="throw new ArgumentOutOfRangeException(''input'');", prediction=3, span="128-128"];
d16 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="return BuildRepresentation(input, hasSpace, useSymbol);", prediction=1, span="130-130"];
m0_46 [cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs", label="Entry System.Diagnostics.Debugger.Break()", span="0-0"];
m0_22 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64"];
m0_24 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64"];
m0_15 [cluster="string.FromMetric()", file="MetricNumeralTests.cs", label="Entry string.FromMetric()", span="76-76"];
m0_29 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72"];
m0_42 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72"];
m0_55 [cluster="System.Convert.ToInt32(double)", file="MetricNumeralTests.cs", label="Entry System.Convert.ToInt32(double)", span="0-0"];
m0_4 [cluster="Unk.Equal", file="MetricNumeralTests.cs", label="Entry Unk.Equal", span=""];
m0_5 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30"];
m0_7 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30"];
m0_57 [cluster="int.ToMetric(bool, bool)", file="MetricNumeralTests.cs", label="Entry int.ToMetric(bool, bool)", span="100-100"];
m0_8 [cluster="Unk.>", file="MetricNumeralTests.cs", label="Entry Unk.>", span=""];
m0_28 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="76-76"];
m0_56 [cluster="int.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry int.ToString(string, System.IFormatProvider)", span="0-0"];
m0_12 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43"];
m0_14 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43"];
m0_25 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="66-67"];
m0_9 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="32-32"];
m0_11 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="32-32"];
m0_19 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="60-60"];
m0_21 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="60-60"];
m0_27 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="66-67"];
m0_48 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102"];
m0_54 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102"];
m0_44 [cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry double.ToString(string, System.IFormatProvider)", span="0-0"];
m0_3 [cluster="double.ToMetric(bool, bool)", file="MetricNumeralTests.cs", label="Entry double.ToMetric(bool, bool)", span="123-123"];
m0_47 [cluster="Unk.True", file="MetricNumeralTests.cs", label="Entry Unk.True", span=""];
m0_45 [cluster="object.Equals(object, object)", file="MetricNumeralTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_0 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19"];
m0_2 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19"];
m0_16 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58"];
m0_18 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58"];
m0_58 [file="MetricNumeralTests.cs", label=double, span=""];
m0_59 [file="MetricNumeralTests.cs", label=string, span=""];
n109 -> n88  [color=darkseagreen4, key=1, label=double, style=dashed];
n11 -> n13  [color=darkseagreen4, key=1, label=double, style=dashed];
n11 -> n14  [color=darkseagreen4, key=1, label=double, style=dashed];
n11 -> n16  [color=darkseagreen4, key=1, label=double, style=dashed];
n11 -> d13  [color=green, key=1, label=double, style=dashed];
n11 -> d14  [color=green, key=1, label=double, style=dashed];
n11 -> d16  [color=green, key=1, label=double, style=dashed];
n22 -> n63  [color=darkseagreen4, key=1, label=double, style=dashed];
n26 -> n29  [color=darkseagreen4, key=1, label=string, style=dashed];
n43 -> n45  [color=darkseagreen4, key=1, label=number, style=dashed];
n55 -> n58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n59 -> n59  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<char, string>", style=dashed];
n69 -> n72  [color=darkseagreen4, key=1, label=bool, style=dashed];
n70 -> n72  [color=darkseagreen4, key=1, label=number, style=dashed];
n78 -> n88  [color=darkseagreen4, key=1, label=double, style=dashed];
n82 -> n88  [color=darkseagreen4, key=1, label=double, style=dashed];
n90 -> n95  [color=darkseagreen4, key=1, label=string, style=dashed];
n92 -> n95  [color=darkseagreen4, key=1, label=index, style=dashed];
}
