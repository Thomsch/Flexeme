digraph  {
n66 [label="System.Globalization.CultureInfo", span=""];
n67 [label=type, span=""];
n68 [label="System.Type", span=""];
n69 [label=string, span=""];
n70 [label="System.Globalization.CultureInfo", span=""];
n0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n1 [label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="14-16", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n2 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
n4 [label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n5 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n6 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="21-26", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n7 [label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="28-28", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n21 [label="ChangeType(value, type, conversionCulture)", span="28-28", cluster="lambda expression"];
n10 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()"];
n12 [label="Entry T.ToMaybe<T>()", span="79-79", cluster="T.ToMaybe<T>()"];
n13 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)"];
n14 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
n8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="30-32", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n15 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n20 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
n9 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n16 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n17 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n18 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n19 [label="Entry Unk.Just", span="", cluster="Unk.Just"];
n23 [label="Entry lambda expression", span="30-30", cluster="lambda expression"];
n27 [label="Entry lambda expression", span="32-32", cluster="lambda expression"];
n22 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
n24 [label="a.MatchNothing()", span="30-30", cluster="lambda expression"];
n25 [label="Exit lambda expression", span="30-30", cluster="lambda expression"];
n26 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing"];
n28 [label="((Just<object>)c).Value", span="32-32", cluster="lambda expression"];
n29 [label="Exit lambda expression", span="32-32", cluster="lambda expression"];
n30 [label="Func<object> safeChangeType = () =>\r\n                    {\r\n                        var t = Nullable.GetUnderlyingType(conversionType) ?? conversionType;\r\n                        return (value == null) ? null : Convert.ChangeType(value, t, conversionCulture);\r\n                    }", span="39-43", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=red, community=0];
n45 [label="var t = Nullable.GetUnderlyingType(conversionType) ?? conversionType", span="41-41", cluster="lambda expression", color=red, community=0];
n46 [label="return (value == null) ? null : Convert.ChangeType(value, t, conversionCulture);", span="42-42", cluster="lambda expression", color=red, community=0];
n31 [label="return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? ConvertEnumString(value, conversionType)\r\n                            : safeChangeType());", span="45-50", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=red, community=0];
n32 [label=InvalidCastException, span="52-52", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n33 [label="return Maybe.Nothing<object>();", span="54-54", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n34 [label=FormatException, span="56-56", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n35 [label="return Maybe.Nothing<object>();", span="58-58", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n36 [label=OverflowException, span="60-60", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n37 [label="return Maybe.Nothing<object>();", span="62-62", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n38 [label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n39 [label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="66-66", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)"];
n40 [label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="72-72", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)"];
n41 [label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="77-77", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n42 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n43 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n44 [label="Entry lambda expression", span="39-43", cluster="lambda expression"];
n48 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)"];
n47 [label="Exit lambda expression", span="39-43", cluster="lambda expression"];
n49 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)"];
n50 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="68-69", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)"];
n51 [label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="66-66", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)"];
n52 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)"];
n53 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="74-74", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)"];
n54 [label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="72-72", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)"];
n55 [label="object parsedValue", span="79-79", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n56 [label="parsedValue = Enum.Parse(conversionType, value)", span="82-82", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n59 [label="Enum.IsDefined(conversionType, parsedValue)", span="88-88", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n57 [label=ArgumentException, span="84-84", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n63 [label="Entry System.Enum.Parse(System.Type, string)", span="0-0", cluster="System.Enum.Parse(System.Type, string)"];
n60 [label="return parsedValue;", span="90-90", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n58 [label="throw new FormatException();", span="86-86", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n61 [label="throw new FormatException();", span="92-92", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n65 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)"];
n62 [label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="77-77", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n64 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()"];
n66 -> n21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n67 -> n21  [key=1, style=dashed, color=darkseagreen4, label=type];
n68 -> n45  [key=1, style=dashed, color=red, label="System.Type"];
n69 -> n46  [key=1, style=dashed, color=red, label=string];
n70 -> n46  [key=1, style=dashed, color=red, label="System.Globalization.CultureInfo"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n30  [key=0, style=solid, color=red];
n4 -> n45  [key=1, style=dashed, color=red, label="System.Type"];
n4 -> n46  [key=1, style=dashed, color=red, label=string];
n4 -> n31  [key=1, style=dashed, color=red, label=string];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n5 -> n21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n6 -> n7  [key=0, style=solid];
n6 -> n10  [key=2, style=dotted];
n6 -> n11  [key=2, style=dotted];
n6 -> n12  [key=2, style=dotted];
n6 -> n13  [key=2, style=dotted];
n6 -> n14  [key=2, style=dotted];
n6 -> n21  [key=1, style=dashed, color=darkseagreen4, label=type];
n6 -> n8  [key=1, style=dashed, color=darkseagreen4, label=type];
n7 -> n8  [key=0, style=solid];
n7 -> n15  [key=2, style=dotted];
n7 -> n20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n21 -> n22  [key=0, style=solid];
n21 -> n4  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid];
n8 -> n16  [key=2, style=dotted];
n8 -> n17  [key=2, style=dotted];
n8 -> n15  [key=2, style=dotted];
n8 -> n18  [key=2, style=dotted];
n8 -> n19  [key=2, style=dotted];
n8 -> n23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n8 -> n27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n21  [key=0, style=solid];
n9 -> n5  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n22 -> n20  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=2, style=dotted];
n25 -> n23  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n29 -> n27  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid, color=red];
n45 -> n46  [key=0, style=solid, color=red];
n45 -> n48  [key=2, style=dotted, color=red];
n46 -> n47  [key=0, style=solid, color=red];
n46 -> n49  [key=2, style=dotted, color=red];
n31 -> n38  [key=0, style=solid, color=red];
n31 -> n39  [key=2, style=dotted, color=red];
n31 -> n40  [key=2, style=dotted, color=red];
n31 -> n41  [key=2, style=dotted, color=red];
n31 -> n42  [key=2, style=dotted, color=red];
n31 -> n43  [key=2, style=dotted, color=red];
n32 -> n33  [key=0, style=solid];
n33 -> n38  [key=0, style=solid];
n33 -> n17  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n35 -> n38  [key=0, style=solid];
n35 -> n17  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n17  [key=2, style=dotted];
n38 -> n4  [key=0, style=bold, color=blue];
n39 -> n50  [key=0, style=solid];
n40 -> n53  [key=0, style=solid];
n41 -> n55  [key=0, style=solid];
n41 -> n56  [key=1, style=dashed, color=darkseagreen4, label=string];
n41 -> n59  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n44 -> n45  [key=0, style=solid, color=red];
n47 -> n44  [key=0, style=bold, color=blue];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=2, style=dotted];
n51 -> n39  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n53 -> n52  [key=2, style=dotted];
n54 -> n40  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n59  [key=0, style=solid];
n56 -> n63  [key=2, style=dotted];
n56 -> n60  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=0, style=solid];
n59 -> n65  [key=2, style=dotted];
n57 -> n58  [key=0, style=solid];
n60 -> n62  [key=0, style=solid];
n58 -> n62  [key=0, style=solid];
n58 -> n64  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid];
n61 -> n64  [key=2, style=dotted];
n62 -> n41  [key=0, style=bold, color=blue];
}
