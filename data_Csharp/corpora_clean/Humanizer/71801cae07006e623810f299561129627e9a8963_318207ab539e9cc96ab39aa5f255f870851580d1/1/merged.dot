digraph  {
n58 [label=guard, span=""];
n0 [label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)"];
n1 [label="return specification.Tag == SpecificationType.Option;", span="13-13", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)"];
n2 [label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)"];
n3 [label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)"];
n4 [label="return specification.Tag == SpecificationType.Value;", span="18-18", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", color=red, community=0];
n5 [label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)"];
n6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)"];
n7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="23-35", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)"];
n8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)"];
n9 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)"];
n10 [label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)"];
n11 [label=guardsLookup, span="40-40", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)"];
n12 [label="specifications.Any(spec => guard.Item1(spec))", span="42-42", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)"];
n14 [label="return specifications;", span="48-48", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)"];
n19 [label="guard.Item1(spec)", span="42-42", cluster="lambda expression"];
n13 [label="throw new ApplicationException(guard.Item2);", span="44-44", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)"];
n16 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n18 [label="Entry lambda expression", span="42-42", cluster="lambda expression"];
n15 [label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)"];
n17 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)"];
n20 [label="Exit lambda expression", span="42-42", cluster="lambda expression"];
n21 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n22 [label="Entry CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="51-51", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n23 [label="specification.ConversionType.ToDescriptorKind()", span="53-53", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n29 [label="specification.Min.MatchJust(out min)\r\n                        && specification.Max.MatchJust(out max)", span="60-61", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n24 [label="TypeDescriptorKind.Scalar", span="55-55", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n26 [label="TypeDescriptorKind.Sequence", span="57-57", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n34 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()"];
n25 [label="return Maybe.Just(1);", span="56-56", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n27 [label="int min", span="58-58", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n28 [label="int max", span="59-59", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n30 [label="min >= 0 && max >= 0", span="63-63", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n32 [label="return Maybe.Nothing<int>();", span="71-71", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n36 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)"];
n31 [label="return Maybe.Just(max);", span="65-65", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n33 [label="Exit CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="51-51", cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n35 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n37 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n38 [label="Entry CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="74-74", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n39 [label="int min", span="76-76", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n41 [label="specification.Min.MatchJust(out min) && specification.Max.MatchJust(out max)", span="78-78", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n42 [label="return predicate(min, max);", span="80-80", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n40 [label="int max", span="77-77", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n43 [label="return false;", span="82-82", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n44 [label="Exit CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="74-74", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)"];
n45 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n46 [label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="85-85", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)"];
n47 [label="int min", span="87-87", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)"];
n48 [label="specification.Min.MatchJust(out min)", span="88-88", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)"];
n49 [label="return predicate(min);", span="90-90", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)"];
n50 [label="return false;", span="92-92", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)"];
n51 [label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="85-85", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)"];
n52 [label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="95-95", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)"];
n53 [label="int max", span="97-97", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)"];
n54 [label="specification.Max.MatchJust(out max)", span="98-98", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)"];
n55 [label="return predicate(max);", span="100-100", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)"];
n56 [label="return false;", span="102-102", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)"];
n57 [label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="95-95", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)"];
m1_32 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs"];
m1_33 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="78-81", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs", color=green, community=0];
m1_34 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="83-91", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs", color=green, community=0];
m1_35 [label="expected.ShouldAllBeEquivalentTo(result)", span="93-93", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs", color=green, community=0];
m1_36 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs"];
m1_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="DateHumanizeTests.cs"];
m1_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="DateHumanizeTests.cs"];
m1_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="DateHumanizeTests.cs"];
m1_5 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DateHumanizeTests.cs"];
m1_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="DateHumanizeTests.cs"];
m1_14 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs"];
m1_15 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="30-33", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs", color=green, community=0];
m1_16 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="35-45", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs", color=green, community=0];
m1_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="47-47", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs", color=green, community=0];
m1_18 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs"];
m1_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs", color=green, community=0];
m1_2 [label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs", color=green, community=0];
m1_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs", color=green, community=0];
m1_4 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs"];
m1_24 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs"];
m1_25 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="53-57", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs", color=green, community=0];
m1_26 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="59-70", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs", color=green, community=0];
m1_27 [label="expected.ShouldAllBeEquivalentTo(result)", span="72-72", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs", color=green, community=0];
m1_28 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs"];
m1_37 [label="Entry lambda expression", span="88-91", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_7 [label="Entry lambda expression", span="19-22", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_8 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", file="DateHumanizeTests.cs", color=green, community=0];
m1_9 [label="Exit lambda expression", span="19-22", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_21 [label="Entry lambda expression", span="42-45", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_22 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="43-45", cluster="lambda expression", file="DateHumanizeTests.cs", color=green, community=0];
m1_23 [label="Exit lambda expression", span="42-45", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_29 [label="Entry lambda expression", span="67-70", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_30 [label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="68-70", cluster="lambda expression", file="DateHumanizeTests.cs", color=green, community=0];
m1_31 [label="Exit lambda expression", span="67-70", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_38 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="89-91", cluster="lambda expression", file="DateHumanizeTests.cs", color=green, community=0];
m1_39 [label="Exit lambda expression", span="88-91", cluster="lambda expression", file="DateHumanizeTests.cs"];
m1_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="DateHumanizeTests.cs"];
m1_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="DateHumanizeTests.cs"];
m2_16 [label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", span="60-60", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_17 [label="Assert.Equal(expected, TimeSpan.FromHours(number).Humanize())", span="62-62", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs"];
m2_18 [label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", span="60-60", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_23 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="TimeSpanHumanizeTests.cs"];
m2_6 [label="Entry System.TimeSpan.Humanize(int)", span="18-18", cluster="System.TimeSpan.Humanize(int)", file="TimeSpanHumanizeTests.cs"];
m2_15 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="TimeSpanHumanizeTests.cs"];
m2_5 [label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0", cluster="System.TimeSpan.FromMilliseconds(double)", file="TimeSpanHumanizeTests.cs"];
m2_7 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="TimeSpanHumanizeTests.cs"];
m2_11 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="TimeSpanHumanizeTests.cs"];
m2_19 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="TimeSpanHumanizeTests.cs"];
m2_20 [label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", span="72-72", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_21 [label="Assert.Equal(expected, TimeSpan.FromDays(number).Humanize())", span="74-74", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs"];
m2_22 [label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", span="72-72", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_2 [label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", span="21-21", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_3 [label="Assert.Equal(expected, TimeSpan.FromMilliseconds(number).Humanize())", span="23-23", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs"];
m2_4 [label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", span="21-21", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_8 [label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", span="34-34", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_9 [label="Assert.Equal(expected, TimeSpan.FromSeconds(number).Humanize())", span="36-36", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs"];
m2_10 [label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", span="34-34", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_12 [label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", span="47-47", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_13 [label="Assert.Equal(expected, TimeSpan.FromMinutes(number).Humanize())", span="49-49", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs"];
m2_14 [label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", span="47-47", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_24 [label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", span="84-84", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", file="TimeSpanHumanizeTests.cs"];
m2_25 [label="Assert.Equal(expected, TimeSpan.FromDays(number * 7).Humanize())", span="86-86", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs"];
m2_26 [label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", span="84-84", cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", file="TimeSpanHumanizeTests.cs"];
n58 -> n19  [key=1, style=dashed, color=darkseagreen4, label=guard];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n4  [key=0, style=solid, color=red];
n4 -> n5  [key=0, style=solid, color=red];
n5 -> n3  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=2, style=dotted];
n8 -> n6  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
n10 -> n14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
n11 -> n12  [key=0, style=solid];
n11 -> n14  [key=0, style=solid];
n11 -> n19  [key=1, style=dashed, color=darkseagreen4, label=guard];
n11 -> n13  [key=1, style=dashed, color=darkseagreen4, label=guard];
n12 -> n13  [key=0, style=solid];
n12 -> n11  [key=0, style=solid];
n12 -> n16  [key=2, style=dotted];
n12 -> n18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n14 -> n15  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=2, style=dotted];
n13 -> n15  [key=0, style=solid];
n13 -> n17  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n15 -> n10  [key=0, style=bold, color=blue];
n20 -> n18  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n22 -> n29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n23 -> n24  [key=0, style=solid];
n23 -> n26  [key=0, style=solid];
n23 -> n34  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n32  [key=0, style=solid];
n29 -> n36  [key=2, style=dotted];
n29 -> n31  [key=1, style=dashed, color=darkseagreen4, label=max];
n24 -> n25  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n25 -> n33  [key=0, style=solid];
n25 -> n35  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n37  [key=2, style=dotted];
n31 -> n33  [key=0, style=solid];
n31 -> n35  [key=2, style=dotted];
n33 -> n22  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid];
n38 -> n41  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n38 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, int, bool>"];
n39 -> n40  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n41 -> n43  [key=0, style=solid];
n41 -> n36  [key=2, style=dotted];
n42 -> n44  [key=0, style=solid];
n42 -> n45  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n43 -> n44  [key=0, style=solid];
n44 -> n38  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n46 -> n49  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
n47 -> n48  [key=0, style=solid];
n48 -> n49  [key=0, style=solid];
n48 -> n50  [key=0, style=solid];
n48 -> n36  [key=2, style=dotted];
n49 -> n51  [key=0, style=solid];
n49 -> n21  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n51 -> n46  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n52 -> n55  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
n53 -> n54  [key=0, style=solid];
n54 -> n55  [key=0, style=solid];
n54 -> n56  [key=0, style=solid];
n54 -> n36  [key=2, style=dotted];
n55 -> n57  [key=0, style=solid];
n55 -> n21  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n57 -> n52  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid, color=green];
m1_33 -> m1_34  [key=0, style=solid, color=green];
m1_33 -> m1_19  [key=2, style=dotted, color=green];
m1_33 -> m1_20  [key=2, style=dotted, color=green];
m1_33 -> m1_35  [key=1, style=dashed, color=green, label=expected];
m1_34 -> m1_35  [key=0, style=solid, color=green];
m1_34 -> m1_19  [key=2, style=dotted, color=green];
m1_34 -> m1_20  [key=2, style=dotted, color=green];
m1_34 -> m1_5  [key=2, style=dotted, color=green];
m1_34 -> m1_37  [key=1, style=dashed, color=green, label="lambda expression"];
m1_35 -> m1_36  [key=0, style=solid, color=green];
m1_35 -> m1_6  [key=2, style=dotted, color=green];
m1_36 -> m1_32  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid, color=green];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_15 -> m1_19  [key=2, style=dotted, color=green];
m1_15 -> m1_20  [key=2, style=dotted, color=green];
m1_15 -> m1_17  [key=1, style=dashed, color=green, label=expected];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_16 -> m1_19  [key=2, style=dotted, color=green];
m1_16 -> m1_20  [key=2, style=dotted, color=green];
m1_16 -> m1_5  [key=2, style=dotted, color=green];
m1_16 -> m1_21  [key=1, style=dashed, color=green, label="lambda expression"];
m1_17 -> m1_18  [key=0, style=solid, color=green];
m1_17 -> m1_6  [key=2, style=dotted, color=green];
m1_18 -> m1_14  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=1, style=dashed, color=green, label=expected];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_5  [key=2, style=dotted, color=green];
m1_2 -> m1_7  [key=1, style=dashed, color=green, label="lambda expression"];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_6  [key=2, style=dotted, color=green];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_25 -> m1_26  [key=0, style=solid, color=green];
m1_25 -> m1_19  [key=2, style=dotted, color=green];
m1_25 -> m1_20  [key=2, style=dotted, color=green];
m1_25 -> m1_27  [key=1, style=dashed, color=green, label=expected];
m1_26 -> m1_27  [key=0, style=solid, color=green];
m1_26 -> m1_19  [key=2, style=dotted, color=green];
m1_26 -> m1_20  [key=2, style=dotted, color=green];
m1_26 -> m1_5  [key=2, style=dotted, color=green];
m1_26 -> m1_29  [key=1, style=dashed, color=green, label="lambda expression"];
m1_27 -> m1_28  [key=0, style=solid, color=green];
m1_27 -> m1_6  [key=2, style=dotted, color=green];
m1_28 -> m1_24  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid, color=green];
m1_7 -> m1_8  [key=0, style=solid, color=green];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_10  [key=2, style=dotted, color=green];
m1_8 -> m1_11  [key=2, style=dotted, color=green];
m1_8 -> m1_12  [key=2, style=dotted, color=green];
m1_8 -> n35  [key=2, style=dotted, color=green];
m1_9 -> m1_7  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid, color=green];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_22 -> m1_10  [key=2, style=dotted, color=green];
m1_22 -> m1_11  [key=2, style=dotted, color=green];
m1_22 -> m1_12  [key=2, style=dotted, color=green];
m1_22 -> n35  [key=2, style=dotted, color=green];
m1_23 -> m1_21  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid, color=green];
m1_30 -> m1_31  [key=0, style=solid, color=green];
m1_30 -> m1_10  [key=2, style=dotted, color=green];
m1_30 -> m1_11  [key=2, style=dotted, color=green];
m1_30 -> m1_12  [key=2, style=dotted, color=green];
m1_30 -> n35  [key=2, style=dotted, color=green];
m1_31 -> m1_29  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid, color=green];
m1_38 -> m1_10  [key=2, style=dotted, color=green];
m1_38 -> m1_11  [key=2, style=dotted, color=green];
m1_38 -> m1_12  [key=2, style=dotted, color=green];
m1_38 -> n35  [key=2, style=dotted, color=green];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
m2_16 -> m2_17  [key=0, style=solid, color=green];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_17 -> m2_19  [key=2, style=dotted, color=green];
m2_17 -> m2_6  [key=2, style=dotted, color=green];
m2_17 -> m2_7  [key=2, style=dotted, color=green];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_21 -> m2_22  [key=0, style=solid, color=green];
m2_21 -> m2_23  [key=2, style=dotted, color=green];
m2_21 -> m2_6  [key=2, style=dotted, color=green];
m2_21 -> m2_7  [key=2, style=dotted, color=green];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_5  [key=2, style=dotted, color=green];
m2_3 -> m2_6  [key=2, style=dotted, color=green];
m2_3 -> m2_7  [key=2, style=dotted, color=green];
m2_4 -> m2_2  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid, color=green];
m2_9 -> m2_10  [key=0, style=solid, color=green];
m2_9 -> m2_11  [key=2, style=dotted, color=green];
m2_9 -> m2_6  [key=2, style=dotted, color=green];
m2_9 -> m2_7  [key=2, style=dotted, color=green];
m2_10 -> m2_8  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid, color=green];
m2_13 -> m2_14  [key=0, style=solid, color=green];
m2_13 -> m2_15  [key=2, style=dotted, color=green];
m2_13 -> m2_6  [key=2, style=dotted, color=green];
m2_13 -> m2_7  [key=2, style=dotted, color=green];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid, color=green];
m2_25 -> m2_26  [key=0, style=solid, color=green];
m2_25 -> m2_23  [key=2, style=dotted, color=green];
m2_25 -> m2_6  [key=2, style=dotted, color=green];
m2_25 -> m2_7  [key=2, style=dotted, color=green];
m2_26 -> m2_24  [key=0, style=bold, color=blue];
}
