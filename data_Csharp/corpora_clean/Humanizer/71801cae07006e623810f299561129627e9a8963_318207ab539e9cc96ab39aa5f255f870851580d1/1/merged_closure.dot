digraph  {
n58 [label=guard, span=""];
n0 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
n1 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", label="return specification.Tag == SpecificationType.Option;", span="13-13"];
n2 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
n3 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16"];
n5 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16"];
n6 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21"];
n7 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="23-35"];
n8 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="21-21"];
n9 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
n10 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38"];
n11 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", label=guardsLookup, span="40-40"];
n12 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", label="specifications.Any(spec => guard.Item1(spec))", span="42-42"];
n14 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", label="return specifications;", span="48-48"];
n19 [cluster="lambda expression", label="guard.Item1(spec)", span="42-42"];
n13 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", label="throw new ApplicationException(guard.Item2);", span="44-44"];
n16 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n18 [cluster="lambda expression", label="Entry lambda expression", span="42-42"];
n15 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38"];
n17 [cluster="System.ApplicationException.ApplicationException(string)", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
n20 [cluster="lambda expression", label="Exit lambda expression", span="42-42"];
n21 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n22 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Entry CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="51-51"];
n23 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.ConversionType.ToDescriptorKind()", span="53-53"];
n29 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.Min.MatchJust(out min)\r\n                        && specification.Max.MatchJust(out max)", span="60-61"];
n24 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TypeDescriptorKind.Scalar", span="55-55"];
n26 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TypeDescriptorKind.Sequence", span="57-57"];
n34 [cluster="System.Type.ToDescriptorKind()", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
n25 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(1);", span="56-56"];
n27 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="int min", span="58-58"];
n28 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="int max", span="59-59"];
n30 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="min >= 0 && max >= 0", span="63-63"];
n32 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Nothing<int>();", span="71-71"];
n36 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
n31 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(max);", span="65-65"];
n33 [cluster="CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Exit CommandLine.Core.SpecificationExtensions.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="51-51"];
n35 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
n37 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
n38 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="Entry CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="74-74"];
n39 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="int min", span="76-76"];
n41 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="specification.Min.MatchJust(out min) && specification.Max.MatchJust(out max)", span="78-78"];
n42 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="return predicate(min, max);", span="80-80"];
n40 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="int max", span="77-77"];
n43 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="return false;", span="82-82"];
n44 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", label="Exit CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="74-74"];
n45 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n46 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="85-85"];
n47 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", label="int min", span="87-87"];
n48 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", label="specification.Min.MatchJust(out min)", span="88-88"];
n49 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", label="return predicate(min);", span="90-90"];
n50 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", label="return false;", span="92-92"];
n51 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="85-85"];
n52 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="95-95"];
n53 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", label="int max", span="97-97"];
n54 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", label="specification.Max.MatchJust(out max)", span="98-98"];
n55 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", label="return predicate(max);", span="100-100"];
n56 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", label="return false;", span="102-102"];
n57 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="95-95"];
m1_32 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
m1_33 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", color=green, community=0, file="DateHumanizeTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", prediction=0, span="78-81"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", color=green, community=0, file="DateHumanizeTests.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", prediction=1, span="83-91"];
m1_35 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", color=green, community=0, file="DateHumanizeTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", prediction=0, span="93-93"];
m1_36 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="DateHumanizeTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
m1_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="DateHumanizeTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m1_19 [cluster="CommandLine.Core.Token.Name(string)", file="DateHumanizeTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m1_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="DateHumanizeTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m1_5 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DateHumanizeTests.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m1_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="DateHumanizeTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_14 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
m1_15 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", color=green, community=0, file="DateHumanizeTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", prediction=3, span="30-33"];
m1_16 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", color=green, community=0, file="DateHumanizeTests.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", prediction=4, span="35-45"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", color=green, community=0, file="DateHumanizeTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", prediction=3, span="47-47"];
m1_18 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="DateHumanizeTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", color=green, community=0, file="DateHumanizeTests.cs", label="var expected = new Token[] { }", prediction=6, span="15-15"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", color=green, community=0, file="DateHumanizeTests.cs", label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", prediction=7, span="17-22"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", color=green, community=0, file="DateHumanizeTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", prediction=6, span="24-24"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="DateHumanizeTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
m1_25 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", color=green, community=0, file="DateHumanizeTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", prediction=9, span="53-57"];
m1_26 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", color=green, community=0, file="DateHumanizeTests.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", prediction=10, span="59-70"];
m1_27 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", color=green, community=0, file="DateHumanizeTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", prediction=9, span="72-72"];
m1_28 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="DateHumanizeTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
m1_37 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Entry lambda expression", span="88-91"];
m1_7 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Entry lambda expression", span="19-22"];
m1_8 [cluster="lambda expression", color=green, community=0, file="DateHumanizeTests.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", prediction=12, span="20-22"];
m1_9 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Exit lambda expression", span="19-22"];
m1_21 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Entry lambda expression", span="42-45"];
m1_22 [cluster="lambda expression", color=green, community=0, file="DateHumanizeTests.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", prediction=13, span="43-45"];
m1_23 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Exit lambda expression", span="42-45"];
m1_29 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Entry lambda expression", span="67-70"];
m1_30 [cluster="lambda expression", color=green, community=0, file="DateHumanizeTests.cs", label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", prediction=14, span="68-70"];
m1_31 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Exit lambda expression", span="67-70"];
m1_38 [cluster="lambda expression", color=green, community=0, file="DateHumanizeTests.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", prediction=15, span="89-91"];
m1_39 [cluster="lambda expression", file="DateHumanizeTests.cs", label="Exit lambda expression", span="88-91"];
m1_20 [cluster="CommandLine.Core.Token.Value(string)", file="DateHumanizeTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m1_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="DateHumanizeTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m2_16 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", file="TimeSpanHumanizeTests.cs", label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", span="60-60"];
m2_17 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs", label="Assert.Equal(expected, TimeSpan.FromHours(number).Humanize())", prediction=16, span="62-62"];
m2_18 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", file="TimeSpanHumanizeTests.cs", label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Hours(int, string)", span="60-60"];
m2_23 [cluster="System.TimeSpan.FromDays(double)", file="TimeSpanHumanizeTests.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m2_6 [cluster="System.TimeSpan.Humanize(int)", file="TimeSpanHumanizeTests.cs", label="Entry System.TimeSpan.Humanize(int)", span="18-18"];
m2_15 [cluster="System.TimeSpan.FromMinutes(double)", file="TimeSpanHumanizeTests.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m2_5 [cluster="System.TimeSpan.FromMilliseconds(double)", file="TimeSpanHumanizeTests.cs", label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0"];
m2_7 [cluster="Unk.Equal", file="TimeSpanHumanizeTests.cs", label="Entry Unk.Equal", span=""];
m2_11 [cluster="System.TimeSpan.FromSeconds(double)", file="TimeSpanHumanizeTests.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m2_19 [cluster="System.TimeSpan.FromHours(double)", file="TimeSpanHumanizeTests.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m2_20 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", file="TimeSpanHumanizeTests.cs", label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", span="72-72"];
m2_21 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs", label="Assert.Equal(expected, TimeSpan.FromDays(number).Humanize())", prediction=17, span="74-74"];
m2_22 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", file="TimeSpanHumanizeTests.cs", label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Days(int, string)", span="72-72"];
m2_2 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", file="TimeSpanHumanizeTests.cs", label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", span="21-21"];
m2_3 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs", label="Assert.Equal(expected, TimeSpan.FromMilliseconds(number).Humanize())", prediction=18, span="23-23"];
m2_4 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", file="TimeSpanHumanizeTests.cs", label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Miliseconds(int, string)", span="21-21"];
m2_8 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", file="TimeSpanHumanizeTests.cs", label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", span="34-34"];
m2_9 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs", label="Assert.Equal(expected, TimeSpan.FromSeconds(number).Humanize())", prediction=19, span="36-36"];
m2_10 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", file="TimeSpanHumanizeTests.cs", label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Seconds(int, string)", span="34-34"];
m2_12 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", file="TimeSpanHumanizeTests.cs", label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", span="47-47"];
m2_13 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs", label="Assert.Equal(expected, TimeSpan.FromMinutes(number).Humanize())", prediction=20, span="49-49"];
m2_14 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", file="TimeSpanHumanizeTests.cs", label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Minutes(int, string)", span="47-47"];
m2_24 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", file="TimeSpanHumanizeTests.cs", label="Entry Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", span="84-84"];
m2_25 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", color=green, community=0, file="TimeSpanHumanizeTests.cs", label="Assert.Equal(expected, TimeSpan.FromDays(number * 7).Humanize())", prediction=21, span="86-86"];
m2_26 [cluster="Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", file="TimeSpanHumanizeTests.cs", label="Exit Humanizer.Tests.Localisation.cs.TimeSpanHumanizeTests.Weeks(int, string)", span="84-84"];
n58 -> n19  [color=darkseagreen4, key=1, label=guard, style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
n10 -> n14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
n11 -> n19  [color=darkseagreen4, key=1, label=guard, style=dashed];
n11 -> n13  [color=darkseagreen4, key=1, label=guard, style=dashed];
n12 -> n18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n22 -> n29  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n29 -> n31  [color=darkseagreen4, key=1, label=max, style=dashed];
n38 -> n41  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n38 -> n42  [color=darkseagreen4, key=1, label="System.Func<int, int, bool>", style=dashed];
n46 -> n48  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n46 -> n49  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
n52 -> n54  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n52 -> n55  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m1_33 -> m1_35  [color=green, key=1, label=expected, style=dashed];
m1_34 -> m1_37  [color=green, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_17  [color=green, key=1, label=expected, style=dashed];
m1_16 -> m1_21  [color=green, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_3  [color=green, key=1, label=expected, style=dashed];
m1_2 -> m1_7  [color=green, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_27  [color=green, key=1, label=expected, style=dashed];
m1_26 -> m1_29  [color=green, key=1, label="lambda expression", style=dashed];
}
