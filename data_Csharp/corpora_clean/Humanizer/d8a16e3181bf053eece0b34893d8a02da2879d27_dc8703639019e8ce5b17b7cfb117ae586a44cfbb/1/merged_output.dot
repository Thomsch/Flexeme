digraph  {
n0 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16"];
n1 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0);", span="18-18"];
n2 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16"];
n4 [cluster="lambda expression", label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0)", span="18-18"];
n3 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
n5 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
n6 [cluster="System.Type.ToDescriptorKind()", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
n7 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21"];
n8 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max;", span="23-24"];
n9 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21"];
n11 [cluster="lambda expression", label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max", span="23-24"];
n10 [cluster="lambda expression", label="Entry lambda expression", span="23-24"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="23-24"];
n13 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70"];
n14 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
n15 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27"];
n16 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", color=red, community=0, label="7: return spec => spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1;", span="29-29"];
n17 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27"];
n19 [cluster="lambda expression", color=red, community=0, label="3: spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1", span="29-29"];
n18 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
n20 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
n21 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n5 -> n3  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n9 -> n7  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n11 -> n6  [key=2, style=dotted];
n11 -> n13  [key=2, style=dotted];
n11 -> n14  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n12 -> n10  [color=blue, key=0, style=bold];
n15 -> n16  [color=red, key=0, style=solid];
n16 -> n17  [color=red, key=0, style=solid];
n16 -> n19  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
n17 -> n15  [color=blue, key=0, style=bold];
n19 -> n20  [color=red, key=0, style=solid];
n19 -> n21  [color=red, key=2, style=dotted];
n18 -> n19  [color=red, key=0, style=solid];
n20 -> n18  [color=blue, key=0, style=bold];
}
