digraph  {
d1 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="1: input == null", span="82-82"];
d0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80"];
d2 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="11: throw new ArgumentNullException(''input'');", span="82-82"];
d3 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: input = input.Trim()", span="83-83"];
d4 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: input.Length == 0 || input.IsInvalidMetricNumeral()", span="84-84"];
d16 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
d6 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="3: input = input.Replace('' '', String.Empty)", span="86-86"];
d14 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80"];
d15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d5 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="2: throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="85-85"];
d17 [cluster="string.IsInvalidMetricNumeral()", label="Entry string.IsInvalidMetricNumeral()", span="146-146"];
d7 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="5: var last = input[input.Length - 1]", span="87-87"];
d19 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
d9 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="9: return Double.Parse(input);", span="88-88"];
d11 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: var number = Double.Parse(input.Remove(input.Length - 1))", span="90-90"];
d18 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
d29 [cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)", label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="164-164"];
d8 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: !Char.IsLetter(last)", span="88-88"];
d10 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="5: Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", span="89-89"];
d27 [cluster="lambda expression", color=green, community=0, label="19: (symbols.IndexOf(last) + 1) * 3", span="89-89"];
d12 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: var exponent = Math.Pow(10, Symbols[0].Contains(last) ? getExponent(Symbols[0]) : -getExponent(Symbols[1]))", span="91-91"];
d21 [cluster="double.Parse(string)", label="Entry double.Parse(string)", span="0-0"];
d22 [cluster="string.Remove(int)", label="Entry string.Remove(int)", span="0-0"];
d13 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="9: return number * exponent;", span="92-92"];
d20 [cluster="char.IsLetter(char)", label="Entry char.IsLetter(char)", span="0-0"];
d78 [label=last, span=""];
d26 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
d23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
d24 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
d25 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
d31 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="17: input.Equals(0)", span="112-112"];
d30 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", span="110-110"];
d32 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="3: return input.ToString();", span="112-112"];
d33 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="2: input.IsOutOfRange()", span="113-113"];
d40 [cluster="double.Equals(double)", label="Entry double.Equals(double)", span="0-0"];
d39 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", span="110-110"];
d41 [cluster="double.ToString()", label="Entry double.ToString()", span="0-0"];
d34 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="2: throw new ArgumentOutOfRangeException(''input'');", span="113-113"];
d35 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="11: var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="114-114"];
d42 [cluster="double.IsOutOfRange()", label="Entry double.IsOutOfRange()", span="126-126"];
d36 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="12: exponent == 0", span="115-115"];
d44 [cluster="System.Math.Abs(double)", label="Entry System.Math.Abs(double)", span="0-0"];
d45 [cluster="System.Math.Log10(double)", label="Entry System.Math.Log10(double)", span="0-0"];
d46 [cluster="System.Math.Floor(double)", label="Entry System.Math.Floor(double)", span="0-0"];
d38 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="2: return input * Math.Pow(1000, -exponent)\r\n                                + (isSplitedBySpace ? '' '' : String.Empty)\r\n                                + (Math.Sign(exponent) == 1 ? Symbols[0][exponent - 1] : Symbols[1][-exponent - 1]);", span="116-118"];
d37 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="3: return input.ToString();", span="115-115"];
d47 [cluster="System.Math.Sign(int)", label="Entry System.Math.Sign(int)", span="0-0"];
d43 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
d49 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="14: int limit = 27", span="128-128"];
d48 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="126-126"];
d50 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="14: var bigLimit = Math.Pow(10, limit)", span="129-129"];
d51 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="14: var smallLimit = Math.Pow(10, -limit)", span="130-130"];
d52 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="14: Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="131-131"];
d53 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="14: return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n                               || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", span="132-133"];
d58 [cluster="lambda expression", color=green, community=0, label="10: !(max > input && input > min)", span="131-131"];
d79 [label=double, span=""];
d57 [cluster="lambda expression", label="Entry lambda expression", span="131-131"];
d59 [cluster="lambda expression", label="Exit lambda expression", span="131-131"];
d54 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="126-126"];
d55 [cluster="System.Math.Sign(double)", label="Entry System.Math.Sign(double)", span="0-0"];
d56 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d61 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="12: double number", span="148-148"];
d60 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="146-146"];
d62 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="16: var index = input.Length - 1", span="149-149"];
d63 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="10: var last = input[index]", span="150-150"];
d65 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="11: return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="152-152"];
d64 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="12: var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="151-151"];
d66 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="146-146"];
d67 [cluster="double.TryParse(string, out double)", label="Entry double.TryParse(string, out double)", span="0-0"];
d69 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="18: var i = 0", span="166-166"];
d68 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="164-164"];
d70 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="18: i < chars.Count", span="166-166"];
d71 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="18: chars.ElementAt(i).Equals(value)", span="167-167"];
d72 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="4: return i;", span="168-168"];
d73 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="4: i++", span="166-166"];
d74 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="4: return -1;", span="169-169"];
d76 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
d77 [cluster="char.Equals(char)", label="Entry char.Equals(char)", span="0-0"];
d75 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="164-164"];
m0_26 [cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs", label="Entry System.Diagnostics.Debugger.Break()", span="0-0"];
m0_0 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", span="16-16"];
m0_1 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", color=green, community=0, file="MetricNumeralTests.cs", label="16: Assert.Equal(expected, input.ToMetric(isSplitedBySpace))", span="18-18"];
m0_2 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", span="16-16"];
m0_24 [cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry double.ToString(string, System.IFormatProvider)", span="0-0"];
m0_8 [cluster="string.FromMetric()", file="MetricNumeralTests.cs", label="Entry string.FromMetric()", span="80-80"];
m0_27 [cluster="Unk.True", file="MetricNumeralTests.cs", label="Entry Unk.True", span=""];
m0_9 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="33-33"];
m0_10 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: var b = true", span="35-35"];
m0_11 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: var i = -24", span="36-36"];
m0_19 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: b &= c", span="48-48"];
m0_21 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="9: Assert.True(b)", span="50-50"];
m0_16 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: var c = Equals(\r\n                                        origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                        from.ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="42-44"];
m0_12 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: i < 27", span="36-36"];
m0_13 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="13: var origin = Math.Pow(10, i)", span="38-38"];
m0_20 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: i++", span="36-36"];
m0_17 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="8: !c", span="45-45"];
m0_18 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="9: Debugger.Break()", span="46-46"];
m0_14 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="9: var to = origin.ToMetric()", span="39-39"];
m0_15 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="11: var from = to.FromMetric()", span="40-40"];
m0_22 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="33-33"];
m0_25 [cluster="object.Equals(object, object)", file="MetricNumeralTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_4 [cluster="Unk.Equal", file="MetricNumeralTests.cs", label="Entry Unk.Equal", span=""];
m0_3 [cluster="double.ToMetric(bool)", file="MetricNumeralTests.cs", label="Entry double.ToMetric(bool)", span="110-110"];
m0_5 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="27-27"];
m0_6 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", color=green, community=0, file="MetricNumeralTests.cs", label="7: Assert.Equal(expected, input.FromMetric())", span="29-29"];
m0_7 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="27-27"];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=0, style=solid];
d0 -> d1  [color=green, key=0, style=solid];
d0 -> d3  [color=green, key=1, label=string, style=dashed];
d2 -> d14  [color=green, key=0, style=solid];
d2 -> d15  [color=green, key=2, style=dotted];
d3 -> d3  [color=green, key=1, label=string, style=dashed];
d3 -> d4  [color=green, key=0, style=solid];
d3 -> d16  [color=green, key=2, style=dotted];
d3 -> d6  [color=green, key=1, label=string, style=dashed];
d4 -> d5  [color=green, key=0, style=solid];
d4 -> d6  [color=green, key=0, style=solid];
d4 -> d17  [color=green, key=2, style=dotted];
d6 -> d6  [color=green, key=1, label=string, style=dashed];
d6 -> d7  [color=green, key=0, style=solid];
d6 -> d19  [color=green, key=2, style=dotted];
d6 -> d9  [color=green, key=1, label=string, style=dashed];
d6 -> d11  [color=green, key=1, label=string, style=dashed];
d14 -> d0  [color=blue, key=0, style=bold];
d5 -> d14  [color=green, key=0, style=solid];
d5 -> d18  [color=green, key=2, style=dotted];
d7 -> d8  [color=green, key=0, style=solid];
d7 -> d10  [color=green, key=1, label=last, style=dashed];
d7 -> d27  [color=green, key=1, label=last, style=dashed];
d7 -> d12  [color=green, key=1, label=last, style=dashed];
d9 -> d14  [color=green, key=0, style=solid];
d9 -> d21  [color=green, key=2, style=dotted];
d11 -> d12  [color=green, key=0, style=solid];
d11 -> d22  [color=green, key=2, style=dotted];
d11 -> d21  [color=green, key=2, style=dotted];
d11 -> d13  [color=green, key=1, label=number, style=dashed];
d29 -> d7  [color=green, key=3, label="Parameter variable char value", style=bold];
d29 -> d69  [color=green, key=3, label="method methodReturn int IndexOf", style=bold];
d29 -> d74  [color=green, key=3, label="method methodReturn int IndexOf", style=bold];
d8 -> d9  [color=green, key=0, style=solid];
d8 -> d10  [color=green, key=0, style=solid];
d8 -> d20  [color=green, key=2, style=dotted];
d10 -> d11  [color=green, key=0, style=solid];
d10 -> d10  [color=green, key=3, label="Local variable System.Func<char[], double> getExponent", style=bold];
d10 -> d27  [color=green, key=1, label="char[]", style=dashed];
d10 -> d12  [color=green, key=1, label=getExponent, style=dashed];
d27 -> d28  [color=green, key=0, style=solid];
d27 -> d29  [color=green, key=2, style=dotted];
d12 -> d13  [color=green, key=0, style=solid];
d12 -> d23  [color=green, key=2, style=dotted];
d12 -> d24  [color=green, key=2, style=dotted];
d12 -> d25  [color=green, key=2, style=dotted];
d13 -> d14  [color=green, key=0, style=solid];
d78 -> d27  [color=green, key=1, label=last, style=dashed];
d26 -> d27  [color=green, key=0, style=solid];
d28 -> d26  [color=blue, key=0, style=bold];
d31 -> d32  [color=green, key=0, style=solid];
d31 -> d33  [color=green, key=0, style=solid];
d31 -> d40  [color=green, key=2, style=dotted];
d30 -> d31  [color=green, key=0, style=solid];
d30 -> d32  [color=green, key=1, label=double, style=dashed];
d30 -> d33  [color=green, key=1, label=double, style=dashed];
d30 -> d35  [color=green, key=1, label=double, style=dashed];
d30 -> d37  [color=green, key=1, label=double, style=dashed];
d30 -> d38  [color=green, key=1, label=double, style=dashed];
d32 -> d39  [color=green, key=0, style=solid];
d32 -> d41  [color=green, key=2, style=dotted];
d33 -> d34  [color=green, key=0, style=solid];
d33 -> d35  [color=green, key=0, style=solid];
d33 -> d42  [color=green, key=2, style=dotted];
d39 -> d30  [color=blue, key=0, style=bold];
d34 -> d39  [color=green, key=0, style=solid];
d34 -> d43  [color=green, key=2, style=dotted];
d35 -> d36  [color=green, key=0, style=solid];
d35 -> d44  [color=green, key=2, style=dotted];
d35 -> d45  [color=green, key=2, style=dotted];
d35 -> d46  [color=green, key=2, style=dotted];
d35 -> d38  [color=green, key=1, label=exponent, style=dashed];
d36 -> d37  [color=green, key=0, style=solid];
d36 -> d38  [color=green, key=0, style=solid];
d38 -> d39  [color=green, key=0, style=solid];
d38 -> d25  [color=green, key=2, style=dotted];
d38 -> d47  [color=green, key=2, style=dotted];
d37 -> d39  [color=green, key=0, style=solid];
d37 -> d41  [color=green, key=2, style=dotted];
d49 -> d49  [color=green, key=3, label="Local variable int limit", style=bold];
d49 -> d50  [color=green, key=0, style=solid];
d49 -> d51  [color=green, key=1, label=limit, style=dashed];
d48 -> d49  [color=green, key=0, style=solid];
d48 -> d52  [color=green, key=1, label=double, style=dashed];
d48 -> d58  [color=green, key=1, label=double, style=dashed];
d48 -> d53  [color=green, key=1, label=double, style=dashed];
d50 -> d53  [color=green, key=1, label=bigLimit, style=dashed];
d50 -> d51  [color=green, key=0, style=solid];
d50 -> d25  [color=green, key=2, style=dotted];
d51 -> d52  [color=green, key=0, style=solid];
d51 -> d53  [color=green, key=1, label=smallLimit, style=dashed];
d51 -> d25  [color=green, key=2, style=dotted];
d52 -> d52  [color=green, key=3, label="Local variable System.Func<double, double, bool> outside", style=bold];
d52 -> d53  [color=green, key=0, style=solid];
d52 -> d58  [color=green, key=1, label=double, style=dashed];
d53 -> d54  [color=green, key=0, style=solid];
d53 -> d55  [color=green, key=2, style=dotted];
d53 -> d56  [color=green, key=2, style=dotted];
d58 -> d59  [color=green, key=0, style=solid];
d79 -> d58  [color=green, key=1, label=double, style=dashed];
d57 -> d58  [color=green, key=0, style=solid];
d59 -> d57  [color=blue, key=0, style=bold];
d54 -> d48  [color=blue, key=0, style=bold];
d61 -> d62  [color=green, key=0, style=solid];
d60 -> d61  [color=green, key=0, style=solid];
d60 -> d62  [color=green, key=1, label=string, style=dashed];
d60 -> d63  [color=green, key=1, label=string, style=dashed];
d60 -> d65  [color=green, key=1, label=string, style=dashed];
d62 -> d63  [color=green, key=0, style=solid];
d62 -> d65  [color=green, key=1, label=index, style=dashed];
d63 -> d64  [color=green, key=0, style=solid];
d65 -> d66  [color=green, key=0, style=solid];
d65 -> d22  [color=green, key=2, style=dotted];
d65 -> d67  [color=green, key=2, style=dotted];
d64 -> d65  [color=green, key=0, style=solid];
d64 -> d23  [color=green, key=2, style=dotted];
d66 -> d60  [color=blue, key=0, style=bold];
d69 -> d69  [color=green, key=3, label="Local variable int i", style=bold];
d69 -> d70  [color=green, key=0, style=solid];
d69 -> d71  [color=green, key=1, label=i, style=dashed];
d69 -> d72  [color=green, key=1, label=i, style=dashed];
d69 -> d73  [color=green, key=1, label=i, style=dashed];
d68 -> d69  [color=green, key=0, style=solid];
d68 -> d70  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
d68 -> d71  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
d70 -> d71  [color=green, key=0, style=solid];
d70 -> d74  [color=green, key=0, style=solid];
d71 -> d72  [color=green, key=0, style=solid];
d71 -> d73  [color=green, key=0, style=solid];
d71 -> d76  [color=green, key=2, style=dotted];
d71 -> d77  [color=green, key=2, style=dotted];
d72 -> d75  [color=green, key=0, style=solid];
d73 -> d70  [color=green, key=0, style=solid];
d73 -> d73  [color=green, key=1, label=i, style=dashed];
d74 -> d75  [color=green, key=0, style=solid];
d75 -> d68  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=2, style=dotted];
m0_1 -> m0_4  [color=green, key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_9 -> m0_10  [color=green, key=0, style=solid];
m0_10 -> m0_10  [color=green, key=3, label="Local variable bool b", style=bold];
m0_10 -> m0_11  [color=green, key=0, style=solid];
m0_10 -> m0_19  [color=green, key=1, label=b, style=dashed];
m0_10 -> m0_21  [color=green, key=1, label=b, style=dashed];
m0_10 -> m0_16  [color=green, key=3, label="Local variable bool b", style=bold];
m0_11 -> m0_11  [color=green, key=3, label="Local variable int i", style=bold];
m0_11 -> m0_12  [color=green, key=0, style=solid];
m0_11 -> m0_13  [color=green, key=1, label=i, style=dashed];
m0_11 -> m0_20  [color=green, key=1, label=i, style=dashed];
m0_19 -> m0_19  [color=green, key=1, label=b, style=dashed];
m0_19 -> m0_20  [color=green, key=0, style=solid];
m0_19 -> m0_21  [color=green, key=1, label=b, style=dashed];
m0_21 -> m0_22  [color=green, key=0, style=solid];
m0_21 -> m0_27  [color=green, key=2, style=dotted];
m0_16 -> m0_19  [color=green, key=1, label=c, style=dashed];
m0_16 -> m0_17  [color=green, key=0, style=solid];
m0_16 -> m0_24  [color=green, key=2, style=dotted];
m0_16 -> m0_25  [color=green, key=2, style=dotted];
m0_12 -> m0_21  [color=green, key=0, style=solid];
m0_12 -> m0_13  [color=green, key=0, style=solid];
m0_13 -> m0_14  [color=green, key=0, style=solid];
m0_13 -> d25  [color=green, key=2, style=dotted];
m0_13 -> m0_16  [color=green, key=1, label=origin, style=dashed];
m0_20 -> m0_12  [color=green, key=0, style=solid];
m0_20 -> m0_20  [color=green, key=1, label=i, style=dashed];
m0_17 -> m0_19  [color=green, key=0, style=solid];
m0_17 -> m0_18  [color=green, key=0, style=solid];
m0_18 -> m0_19  [color=green, key=0, style=solid];
m0_18 -> m0_26  [color=green, key=2, style=dotted];
m0_14 -> m0_15  [color=green, key=0, style=solid];
m0_14 -> m0_3  [color=green, key=2, style=dotted];
m0_15 -> m0_16  [color=green, key=0, style=solid];
m0_15 -> m0_8  [color=green, key=2, style=dotted];
m0_22 -> m0_9  [color=blue, key=0, style=bold];
m0_5 -> m0_6  [color=green, key=0, style=solid];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_6 -> m0_8  [color=green, key=2, style=dotted];
m0_6 -> m0_4  [color=green, key=2, style=dotted];
m0_7 -> m0_5  [color=blue, key=0, style=bold];
}
