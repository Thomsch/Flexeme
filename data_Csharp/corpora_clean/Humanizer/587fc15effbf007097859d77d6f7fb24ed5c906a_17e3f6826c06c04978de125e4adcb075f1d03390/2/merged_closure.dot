digraph  {
d1 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="input == null", prediction=0, span="82-82"];
d0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80"];
d2 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="throw new ArgumentNullException(''input'');", prediction=1, span="82-82"];
d3 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="input = input.Trim()", prediction=2, span="83-83"];
d4 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="input.Length == 0 || input.IsInvalidMetricNumeral()", prediction=3, span="84-84"];
d16 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
d6 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="input = input.Replace('' '', String.Empty)", prediction=4, span="86-86"];
d14 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80"];
d15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d5 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", prediction=5, span="85-85"];
d17 [cluster="string.IsInvalidMetricNumeral()", label="Entry string.IsInvalidMetricNumeral()", span="146-146"];
d7 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="var last = input[input.Length - 1]", prediction=6, span="87-87"];
d19 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
d9 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="return Double.Parse(input);", prediction=4, span="88-88"];
d11 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="var number = Double.Parse(input.Remove(input.Length - 1))", prediction=8, span="90-90"];
d18 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
d29 [cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)", label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="164-164"];
d8 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="!Char.IsLetter(last)", prediction=9, span="88-88"];
d10 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", prediction=6, span="89-89"];
d27 [cluster="lambda expression", color=green, community=0, label="(symbols.IndexOf(last) + 1) * 3", prediction=6, span="89-89"];
d12 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="var exponent = Math.Pow(10, Symbols[0].Contains(last) ? getExponent(Symbols[0]) : -getExponent(Symbols[1]))", prediction=12, span="91-91"];
d21 [cluster="double.Parse(string)", label="Entry double.Parse(string)", span="0-0"];
d22 [cluster="string.Remove(int)", label="Entry string.Remove(int)", span="0-0"];
d13 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="return number * exponent;", prediction=8, span="92-92"];
d20 [cluster="char.IsLetter(char)", label="Entry char.IsLetter(char)", span="0-0"];
d78 [label=last, span=""];
d26 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
d23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
d24 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
d25 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
d31 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="input.Equals(0)", prediction=14, span="112-112"];
d30 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", span="110-110"];
d32 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="return input.ToString();", prediction=15, span="112-112"];
d33 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="input.IsOutOfRange()", prediction=15, span="113-113"];
d40 [cluster="double.Equals(double)", label="Entry double.Equals(double)", span="0-0"];
d39 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", span="110-110"];
d41 [cluster="double.ToString()", label="Entry double.ToString()", span="0-0"];
d34 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="throw new ArgumentOutOfRangeException(''input'');", prediction=17, span="113-113"];
d35 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", prediction=15, span="114-114"];
d42 [cluster="double.IsOutOfRange()", label="Entry double.IsOutOfRange()", span="126-126"];
d36 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="exponent == 0", prediction=19, span="115-115"];
d44 [cluster="System.Math.Abs(double)", label="Entry System.Math.Abs(double)", span="0-0"];
d45 [cluster="System.Math.Log10(double)", label="Entry System.Math.Log10(double)", span="0-0"];
d46 [cluster="System.Math.Floor(double)", label="Entry System.Math.Floor(double)", span="0-0"];
d38 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="return input * Math.Pow(1000, -exponent)\r\n                                + (isSplitedBySpace ? '' '' : String.Empty)\r\n                                + (Math.Sign(exponent) == 1 ? Symbols[0][exponent - 1] : Symbols[1][-exponent - 1]);", prediction=15, span="116-118"];
d37 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0, label="return input.ToString();", prediction=15, span="115-115"];
d47 [cluster="System.Math.Sign(int)", label="Entry System.Math.Sign(int)", span="0-0"];
d43 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
d49 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="int limit = 27", prediction=22, span="128-128"];
d48 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="126-126"];
d50 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="var bigLimit = Math.Pow(10, limit)", prediction=23, span="129-129"];
d51 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="var smallLimit = Math.Pow(10, -limit)", prediction=23, span="130-130"];
d52 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", prediction=23, span="131-131"];
d53 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n                               || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", prediction=23, span="132-133"];
d58 [cluster="lambda expression", color=green, community=0, label="!(max > input && input > min)", prediction=23, span="131-131"];
d79 [label=double, span=""];
d57 [cluster="lambda expression", label="Entry lambda expression", span="131-131"];
d59 [cluster="lambda expression", label="Exit lambda expression", span="131-131"];
d54 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="126-126"];
d55 [cluster="System.Math.Sign(double)", label="Entry System.Math.Sign(double)", span="0-0"];
d56 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d61 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="double number", prediction=28, span="148-148"];
d60 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="146-146"];
d62 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="var index = input.Length - 1", prediction=29, span="149-149"];
d63 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="var last = input[index]", prediction=30, span="150-150"];
d65 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", prediction=29, span="152-152"];
d64 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", prediction=32, span="151-151"];
d66 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="146-146"];
d67 [cluster="double.TryParse(string, out double)", label="Entry double.TryParse(string, out double)", span="0-0"];
d69 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="var i = 0", prediction=33, span="166-166"];
d68 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="164-164"];
d70 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="i < chars.Count", prediction=33, span="166-166"];
d71 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="chars.ElementAt(i).Equals(value)", prediction=33, span="167-167"];
d72 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="return i;", prediction=33, span="168-168"];
d73 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="i++", prediction=33, span="166-166"];
d74 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="return -1;", prediction=38, span="169-169"];
d76 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
d77 [cluster="char.Equals(char)", label="Entry char.Equals(char)", span="0-0"];
d75 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="164-164"];
m0_46 [cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs", label="Entry System.Diagnostics.Debugger.Break()", span="0-0"];
m0_0 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", span="16-16"];
m0_1 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", color=green, community=0, file="MetricNumeralTests.cs", label="Assert.Equal(expected, input.ToMetric(isSplitedBySpace))", prediction=39, span="18-18"];
m0_2 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", span="16-16"];
m0_22 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="56-56"];
m0_23 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", color=green, community=1, file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentNullException>(() =>\r\n                                MetricNumeralExtensions.FromMetric(null))", prediction=40, span="58-59"];
m0_24 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="56-56"];
m0_8 [cluster="Unk.>", file="MetricNumeralTests.cs", label="Entry Unk.>", span=""];
m0_44 [cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry double.ToString(string, System.IFormatProvider)", span="0-0"];
m0_15 [cluster="string.FromMetric()", file="MetricNumeralTests.cs", label="Entry string.FromMetric()", span="80-80"];
m0_47 [cluster="Unk.True", file="MetricNumeralTests.cs", label="Entry Unk.True", span=""];
m0_29 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="64-64"];
m0_30 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="var b = true", prediction=41, span="66-66"];
m0_31 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="var i = -24", prediction=42, span="67-67"];
m0_39 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="b &= c", prediction=41, span="79-79"];
m0_41 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="Assert.True(b)", prediction=41, span="81-81"];
m0_36 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="var c = Equals(\r\n                                        origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                        from.ToString(''0.##E+0'', CultureInfo.InvariantCulture))", prediction=45, span="73-75"];
m0_32 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="i < 27", prediction=46, span="67-67"];
m0_33 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="var origin = Math.Pow(10, i)", prediction=47, span="69-69"];
m0_40 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="i++", prediction=42, span="67-67"];
m0_37 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="!c", prediction=49, span="76-76"];
m0_38 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="Debugger.Break()", prediction=50, span="77-77"];
m0_34 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="var to = origin.ToMetric()", prediction=51, span="70-70"];
m0_35 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs", label="var from = to.FromMetric()", prediction=52, span="71-71"];
m0_42 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="64-64"];
m0_45 [cluster="object.Equals(object, object)", file="MetricNumeralTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_4 [cluster="Unk.Equal", file="MetricNumeralTests.cs", label="Entry Unk.Equal", span=""];
m0_3 [cluster="double.ToMetric(bool)", file="MetricNumeralTests.cs", label="Entry double.ToMetric(bool)", span="110-110"];
m0_5 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="26-26"];
m0_6 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", color=green, community=0, file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentOutOfRangeException>(() => input.ToMetric())", prediction=53, span="28-28"];
m0_7 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="26-26"];
m0_16 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="50-50"];
m0_17 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", color=green, community=0, file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentException>(() => input.FromMetric())", prediction=54, span="52-52"];
m0_18 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="50-50"];
m0_12 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="37-37"];
m0_13 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", color=green, community=0, file="MetricNumeralTests.cs", label="Assert.Equal(expected, input.FromMetric())", prediction=55, span="39-39"];
m0_14 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="37-37"];
m0_25 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="58-59"];
m0_9 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="28-28"];
m0_10 [cluster="lambda expression", color=green, community=0, file="MetricNumeralTests.cs", label="input.ToMetric()", prediction=56, span="28-28"];
m0_11 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="28-28"];
m0_19 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="52-52"];
m0_20 [cluster="lambda expression", color=green, community=0, file="MetricNumeralTests.cs", label="input.FromMetric()", prediction=57, span="52-52"];
m0_21 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="52-52"];
m0_26 [cluster="lambda expression", color=green, community=0, file="MetricNumeralTests.cs", label="MetricNumeralExtensions.FromMetric(null)", prediction=58, span="59-59"];
m0_27 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="58-59"];
m0_28 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80"];
m0_48 [file="MetricNumeralTests.cs", label=double, span=""];
m0_49 [file="MetricNumeralTests.cs", label=string, span=""];
d6 -> d9  [color=green, key=1, label=string, style=dashed];
d7 -> d27  [color=green, key=1, label=last, style=dashed];
d11 -> d13  [color=green, key=1, label=number, style=dashed];
d10 -> d27  [color=green, key=1, label="char[]", style=dashed];
d78 -> d27  [color=green, key=1, label=last, style=dashed];
d30 -> d32  [color=green, key=1, label=double, style=dashed];
d30 -> d33  [color=green, key=1, label=double, style=dashed];
d30 -> d37  [color=green, key=1, label=double, style=dashed];
d30 -> d38  [color=green, key=1, label=double, style=dashed];
d35 -> d38  [color=green, key=1, label=exponent, style=dashed];
d48 -> d58  [color=green, key=1, label=double, style=dashed];
d48 -> d53  [color=green, key=1, label=double, style=dashed];
d50 -> d53  [color=green, key=1, label=bigLimit, style=dashed];
d51 -> d53  [color=green, key=1, label=smallLimit, style=dashed];
d52 -> d58  [color=green, key=1, label=double, style=dashed];
d79 -> d58  [color=green, key=1, label=double, style=dashed];
d60 -> d65  [color=green, key=1, label=string, style=dashed];
d62 -> d65  [color=green, key=1, label=index, style=dashed];
d69 -> d71  [color=green, key=1, label=i, style=dashed];
d69 -> d72  [color=green, key=1, label=i, style=dashed];
d69 -> d73  [color=green, key=1, label=i, style=dashed];
d68 -> d70  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
d68 -> d71  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
d73 -> d73  [color=green, key=1, label=i, style=dashed];
m0_23 -> m0_25  [color=green, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_41  [color=green, key=1, label=b, style=dashed];
m0_31 -> m0_40  [color=green, key=1, label=i, style=dashed];
m0_39 -> m0_41  [color=green, key=1, label=b, style=dashed];
m0_40 -> m0_40  [color=green, key=1, label=i, style=dashed];
m0_5 -> m0_10  [color=green, key=1, label=double, style=dashed];
m0_6 -> m0_9  [color=green, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_20  [color=green, key=1, label=string, style=dashed];
m0_17 -> m0_19  [color=green, key=1, label="lambda expression", style=dashed];
m0_48 -> m0_10  [color=green, key=1, label=double, style=dashed];
m0_49 -> m0_20  [color=green, key=1, label=string, style=dashed];
}
