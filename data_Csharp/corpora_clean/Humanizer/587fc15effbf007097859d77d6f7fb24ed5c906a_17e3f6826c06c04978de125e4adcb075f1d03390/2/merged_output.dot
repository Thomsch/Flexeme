digraph  {
m2_0 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="Entry Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m2_1 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="var mod100 = number%100", span="9-9"];
m2_3 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="var mod10 = number%10", span="12-12"];
m2_5 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", color=red, community=0, file="EnglishNumberToWordsConverter.cs", label="0: return resourceKey + SingularPostfix;", span="15-15"];
m2_7 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="return resourceKey + PaucalPostfix;", span="18-18"];
m2_8 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="return resourceKey;", span="21-21"];
m2_2 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="mod100/10 != 1", span="10-10"];
m2_4 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="mod10 == 1", span="14-14"];
m2_6 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="mod10 > 1 && mod10 < 5", span="17-17"];
m2_9 [cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs", label="Exit Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m5_2 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="return null;", span="13-13"];
m5_3 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs", label="0: value.Length == 0", span="15-15"];
m5_0 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
m5_1 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs", label="Exit Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
m5_4 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs", label="0: return value;", span="16-16"];
m5_5 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs", label="1: truncationString == null || truncationString.Length > length", span="18-18"];
m5_6 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs", label="0: return value.Substring(0, length);", span="19-19"];
m5_7 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs", label="0: var alphaNumericalCharactersProcessed = 0", span="21-21"];
m5_8 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs", label="1: var numberOfCharactersEqualToTruncateLength = value.ToCharArray().Count(Char.IsLetterOrDigit) == length", span="23-23"];
m5_9 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="var i = 0", span="25-25"];
m5_13 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="numberOfCharactersEqualToTruncateLength && alphaNumericalCharactersProcessed == length", span="30-30"];
m5_15 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="!numberOfCharactersEqualToTruncateLength && alphaNumericalCharactersProcessed + truncationString.Length == length", span="33-33"];
m5_12 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="alphaNumericalCharactersProcessed++", span="28-28"];
m5_10 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="i < value.Length - truncationString.Length", span="25-25"];
m5_11 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="Char.IsLetterOrDigit(value[i])", span="27-27"];
m5_14 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="return value;", span="31-31"];
m5_16 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="return value.Substring(0, i + 1) + truncationString;", span="34-34"];
m5_18 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="return value;", span="37-37"];
m5_17 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="i++", span="25-25"];
m5_19 [cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", label="Exit Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", span="10-10"];
m5_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", file="INumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0"];
m5_23 [cluster="char.IsLetterOrDigit(char)", file="INumberToWordsConverter.cs", label="Entry char.IsLetterOrDigit(char)", span="0-0"];
m5_20 [cluster="string.Substring(int, int)", file="INumberToWordsConverter.cs", label="Entry string.Substring(int, int)", span="0-0"];
m5_21 [cluster="string.ToCharArray()", file="INumberToWordsConverter.cs", label="Entry string.ToCharArray()", span="0-0"];
m6_0 [cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="NumberToOrdinalWordsExtension.cs", label="Entry Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14"];
m6_1 [cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", color=red, community=0, file="NumberToOrdinalWordsExtension.cs", label="1: return new EnglishNumberToWordsConverter().ConvertToOrdinal(number);", span="16-16"];
m6_2 [cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="NumberToOrdinalWordsExtension.cs", label="Exit Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14"];
m6_3 [cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", file="NumberToOrdinalWordsExtension.cs", label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5"];
m6_4 [cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", file="NumberToOrdinalWordsExtension.cs", label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", span="76-76"];
m7_4 [cluster="Unk.Equal", file="NumberToOrdinalWordsTests.cs", label="Entry Unk.Equal", span=""];
m7_0 [cluster="Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="NumberToOrdinalWordsTests.cs", label="Entry Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="50-50"];
m7_1 [cluster="Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="NumberToOrdinalWordsTests.cs", label="Assert.Equal(words, number.ToOrdinalWords())", span="52-52"];
m7_2 [cluster="Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="NumberToOrdinalWordsTests.cs", label="Exit Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="50-50"];
m7_3 [cluster="int.ToOrdinalWords()", file="NumberToOrdinalWordsTests.cs", label="Entry int.ToOrdinalWords()", span="14-14"];
m8_28 [cluster="System.Math.Abs(int)", file="NumberToWordsExtension.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m8_30 [cluster="System.Collections.Generic.List<T>.List()", file="NumberToWordsExtension.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_32 [cluster="System.Collections.Generic.List<T>.ToArray()", file="NumberToWordsExtension.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m8_31 [cluster="System.Collections.Generic.List<T>.Add(T)", file="NumberToWordsExtension.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_33 [cluster="string.Join(string, params string[])", file="NumberToWordsExtension.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m8_0 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14"];
m8_3 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: number < 0", span="19-19"];
m8_1 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="number == 0", span="16-16"];
m8_4 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: return string.Format(''minus {0}'', ToWords(Math.Abs(number)));", span="20-20"];
m8_5 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="var parts = new List<string>()", span="22-22"];
m8_12 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: (number / 100) > 0", span="36-36"];
m8_8 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="number %= 1000000", span="27-27"];
m8_9 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="(number / 1000) > 0", span="30-30"];
m8_11 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="number %= 1000", span="33-33"];
m8_13 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: parts.Add(string.Format(''{0} hundred'', ToWords(number / 100)))", span="38-38"];
m8_15 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: number > 0", span="42-42"];
m8_14 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="1: number %= 100", span="39-39"];
m8_20 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="1: number < 20", span="50-50"];
m8_21 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: parts.Add(unitsMap[number])", span="51-51"];
m8_22 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: var lastPart = tensMap[number / 10]", span="54-54"];
m8_23 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="1: (number % 10) > 0", span="55-55"];
m8_24 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: lastPart += string.Format(''-{0}'', unitsMap[number % 10])", span="56-56"];
m8_16 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: parts.Count != 0", span="44-44"];
m8_26 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="return string.Join('' '', parts.ToArray());", span="61-61"];
m8_19 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="1: var tensMap = new[] { ''zero'', ''ten'', ''twenty'', ''thirty'', ''forty'', ''fifty'', ''sixty'', ''seventy'', ''eighty'', ''ninety'' }", span="48-48"];
m8_18 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="1: var unitsMap = new[] { ''zero'', ''one'', ''two'', ''three'', ''four'', ''five'', ''six'', ''seven'', ''eight'', ''nine'', ''ten'', ''eleven'', ''twelve'', ''thirteen'', ''fourteen'', ''fifteen'', ''sixteen'', ''seventeen'', ''eighteen'', ''nineteen'' }", span="47-47"];
m8_25 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="parts.Add(lastPart)", span="57-57"];
m8_17 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="0: parts.Add(''and'')", span="45-45"];
m8_7 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="parts.Add(string.Format(''{0} million'', ToWords(number / 1000000)))", span="26-26"];
m8_10 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="parts.Add(string.Format(''{0} thousand'', ToWords(number / 1000)))", span="32-32"];
m8_6 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="(number / 1000000) > 0", span="24-24"];
m8_2 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="return ''zero'';", span="17-17"];
m8_27 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14"];
m8_29 [cluster="string.Format(string, object)", file="NumberToWordsExtension.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_0 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m10_1 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs", label="0: var mod100 = number%100", span="9-9"];
m10_3 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=red, community=0, file="RussianFormatter.cs", label="0: var mod10 = number%10", span="12-12"];
m10_5 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs", label="0: return resourceKey + SingularPostfix;", span="15-15"];
m10_7 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs", label="0: return resourceKey + PaucalPostfix;", span="18-18"];
m10_8 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=red, community=0, file="RussianFormatter.cs", label="0: return resourceKey;", span="21-21"];
m10_2 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs", label="0: mod100/10 != 1", span="10-10"];
m10_4 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs", label="0: mod10 == 1", span="14-14"];
m10_6 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs", label="0: mod10 > 1 && mod10 < 5", span="17-17"];
m10_9 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m12_76 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m12_49 [cluster="System.Type.IsPrimitiveEx()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Type.IsPrimitiveEx()", span="228-228"];
m12_17 [cluster="Unk.Any", file="RussianGrammaticalNumberDetector.cs", label="Entry Unk.Any", span=""];
m12_44 [cluster="System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
m12_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="110-110"];
m12_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="object parsedValue", span="112-112"];
m12_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="parsedValue = Enum.Parse(conversionType, value, ignoreValueCase)", span="115-115"];
m12_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="121-121"];
m12_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label=ArgumentException, span="117-117"];
m12_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="return parsedValue;", span="123-123"];
m12_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="throw new FormatException();", span="119-119"];
m12_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="throw new FormatException();", span="125-125"];
m12_99 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="110-110"];
m12_102 [cluster="System.Enum.IsDefined(System.Type, object)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m12_18 [cluster="CSharpx.Maybe.Nothing<T>()", file="RussianGrammaticalNumberDetector.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m12_100 [cluster="System.Enum.Parse(System.Type, string, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0"];
m12_72 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m12_13 [cluster="T.ToMaybe<T>()", file="RussianGrammaticalNumberDetector.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m12_27 [cluster="Unk.MatchNothing", file="RussianGrammaticalNumberDetector.cs", label="Entry Unk.MatchNothing", span=""];
m12_77 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="21-21"];
m12_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m12_37 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", file="RussianGrammaticalNumberDetector.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", span="25-25"];
m12_35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51"];
m12_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Func<object> changeType = () =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture);\r\n\r\n#if !SKIP_FSHARP\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n#else\r\n                    Func<object> empty = () => null;\r\n#endif\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                };\r\n\r\n                return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();\r\n            }", span="53-89"];
m12_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Func<object> makeType = () =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { value });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="91-102"];
m12_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="return Result.Try(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType);", span="104-107"];
m12_48 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51"];
m12_15 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="RussianGrammaticalNumberDetector.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m12_14 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m12_20 [cluster="CSharpx.Maybe.Just<T>(T)", file="RussianGrammaticalNumberDetector.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m12_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
m12_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture, ignoreValueCase)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture, ignoreValueCase);", span="20-22"];
m12_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
m12_90 [cluster="System.FormatException.FormatException(string)", file="RussianGrammaticalNumberDetector.cs", label="Entry System.FormatException.FormatException(string)", span="0-0"];
m12_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m12_101 [cluster="System.FormatException.FormatException()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m12_71 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="12-12"];
m12_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25"];
m12_6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="var type =\r\n                conversionType.GetTypeInfo()\r\n                              .GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJustOrFail(\r\n                                  new InvalidOperationException(''Non scalar properties should be sequence of type IEnumerable<T>.'')\r\n                    )", span="27-34"];
m12_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase))", span="36-36"];
m12_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="38-40"];
m12_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25"];
m12_11 [cluster="System.Type.GetGenericArguments()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m12_43 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m12_36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="RussianGrammaticalNumberDetector.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", span="495-495"];
m12_10 [cluster="System.Type.GetTypeInfo()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m12_82 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="91-102"];
m12_22 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase)", span="36-36"];
m12_21 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="36-36"];
m12_24 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="38-38"];
m12_28 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="40-40"];
m12_23 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="36-36"];
m12_25 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="a.MatchNothing()", span="38-38"];
m12_26 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="38-38"];
m12_29 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="((Just<object>)c).Value", span="40-40"];
m12_30 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="40-40"];
m12_38 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="46-46"];
m12_40 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="46-47"];
m12_39 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="46-46"];
m12_41 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="46-47"];
m12_42 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="46-47"];
m12_53 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture);\r\n\r\n#if !SKIP_FSHARP\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n#else\r\n                    Func<object> empty = () => null;\r\n#endif\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                }", span="55-84"];
m12_61 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="57-57"];
m12_62 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType)", span="59-65"];
m12_69 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType)", span="62-65"];
m12_63 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="var type = getUnderlyingType() ?? conversionType", span="67-67"];
m12_64 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Func<object> withValue =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture)", span="69-75"];
m12_74 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture)", span="72-75"];
m12_66 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="return (value == null) ? empty() : withValue();", span="83-83"];
m12_54 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();", span="86-88"];
m12_83 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) })", span="95-95"];
m12_84 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="return ctor.Invoke(new object[] { value });", span="96-96"];
m12_52 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="53-89"];
m12_55 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="53-89"];
m12_60 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="55-84"];
m12_65 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="78-78"];
m12_79 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="78-78"];
m12_67 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="55-84"];
m12_68 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="60-65"];
m12_70 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="60-65"];
m12_73 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="70-75"];
m12_75 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="70-75"];
m12_78 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Entry lambda expression", span="78-78"];
m12_80 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="78-78"];
m12_85 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label=Exception, span="98-98"];
m12_86 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="100-100"];
m12_87 [cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs", label="Exit lambda expression", span="91-102"];
m12_4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43"];
m12_31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture, ignoreValueCase)", span="45-45"];
m12_32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="result.Match((_,__) => { }, e => e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="46-47"];
m12_33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="return result.ToMaybe();", span="48-48"];
m12_34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43"];
m12_16 [cluster="Unk.Select", file="RussianGrammaticalNumberDetector.cs", label="Entry Unk.Select", span=""];
m12_57 [cluster="string.ToBoolean()", file="RussianGrammaticalNumberDetector.cs", label="Entry string.ToBoolean()", span="71-71"];
m12_51 [cluster="RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", file="RussianGrammaticalNumberDetector.cs", label="Entry RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", span="210-210"];
m12_89 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m12_56 [cluster="string.IsBooleanString()", file="RussianGrammaticalNumberDetector.cs", label="Entry string.IsBooleanString()", span="65-65"];
m12_58 [cluster="string.ToEnum(System.Type, bool)", file="RussianGrammaticalNumberDetector.cs", label="Entry string.ToEnum(System.Type, bool)", span="110-110"];
m12_88 [cluster="System.Type.GetConstructor(System.Type[])", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m12_19 [cluster="Unk.ToUntypedArray", file="RussianGrammaticalNumberDetector.cs", label="Entry Unk.ToUntypedArray", span=""];
m12_50 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="79-79"];
m12_81 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="RussianGrammaticalNumberDetector.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="29-29"];
m12_59 [cluster="System.Func<TResult>.Invoke()", file="RussianGrammaticalNumberDetector.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m12_103 [file="RussianGrammaticalNumberDetector.cs", label="System.Globalization.CultureInfo", span=""];
m12_104 [file="RussianGrammaticalNumberDetector.cs", label=bool, span=""];
m12_105 [file="RussianGrammaticalNumberDetector.cs", label=type, span=""];
m12_106 [file="RussianGrammaticalNumberDetector.cs", label=string, span=""];
m12_107 [file="RussianGrammaticalNumberDetector.cs", label="System.Type", span=""];
m12_108 [file="RussianGrammaticalNumberDetector.cs", label="System.Globalization.CultureInfo", span=""];
m12_109 [file="RussianGrammaticalNumberDetector.cs", label=bool, span=""];
m12_110 [file="RussianGrammaticalNumberDetector.cs", label=isFsOption, span=""];
m12_111 [file="RussianGrammaticalNumberDetector.cs", label=type, span=""];
m13_11 [cluster="Unk.BeTrue", file="RussianNumberToWordsConverter.cs", label="Entry Unk.BeTrue", span=""];
m13_0 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", file="RussianNumberToWordsConverter.cs", label="Entry CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", span="19-19"];
m13_1 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs", label="0: Maybe<object> result = TypeConverter.ChangeType(new[] {testValue}, destinationType, true, CultureInfo.InvariantCulture, true)", span="21-21"];
m13_2 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs", label="1: expectFail", span="23-23"];
m13_3 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs", label="1: result.MatchNothing().Should().BeTrue(''should fail parsing'')", span="25-25"];
m13_5 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs", label="1: result.MatchJust(out matchedValue).Should().BeTrue(''should parse successfully'')", span="31-31"];
m13_4 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs", label="0: object matchedValue", span="29-29"];
m13_6 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs", label="0: Assert.Equal(matchedValue, expectedResult)", span="32-32"];
m13_7 [cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", file="RussianNumberToWordsConverter.cs", label="Exit CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", span="19-19"];
m13_13 [cluster="Unk.Equal", file="RussianNumberToWordsConverter.cs", label="Entry Unk.Equal", span=""];
m13_12 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="RussianNumberToWordsConverter.cs", label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="48-48"];
m13_9 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="RussianNumberToWordsConverter.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m13_10 [cluster="Unk.Should", file="RussianNumberToWordsConverter.cs", label="Entry Unk.Should", span=""];
m13_8 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianNumberToWordsConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_5  [color=red, key=1, label=string, style=dashed];
m2_0 -> m2_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_6  [color=darkseagreen4, key=1, label=mod10, style=dashed];
m2_5 -> m2_9  [color=red, key=0, style=solid];
m2_7 -> m2_9  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_8  [key=0, style=solid];
m2_4 -> m2_5  [color=red, key=0, style=solid];
m2_4 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_8  [key=0, style=solid];
m2_9 -> m2_0  [color=blue, key=0, style=bold];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_19  [key=0, style=solid];
m5_3 -> m5_2  [color=blue, key=0, style=bold];
m5_3 -> m5_4  [color=green, key=0, style=solid];
m5_3 -> m5_5  [color=green, key=0, style=solid];
m5_0 -> m5_3  [color=green, key=1, label=string, style=dashed];
m5_0 -> m5_4  [color=green, key=1, label=string, style=dashed];
m5_0 -> m5_5  [color=green, key=1, label=int, style=dashed];
m5_0 -> m5_6  [color=green, key=1, label=string, style=dashed];
m5_0 -> m5_8  [color=green, key=1, label=string, style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_11  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_0 -> m5_14  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_0 -> m5_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_1 -> m5_3  [color=green, key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_0  [color=blue, key=0, style=bold];
m5_4 -> m5_19  [color=green, key=0, style=solid];
m5_5 -> m5_6  [color=green, key=0, style=solid];
m5_5 -> m5_7  [color=green, key=0, style=solid];
m5_6 -> m5_19  [color=green, key=0, style=solid];
m5_6 -> m5_20  [color=green, key=2, style=dotted];
m5_7 -> m5_8  [color=green, key=0, style=solid];
m5_7 -> m5_12  [color=green, key=1, label=alphaNumericalCharactersProcessed, style=dashed];
m5_7 -> m5_13  [color=green, key=1, label=alphaNumericalCharactersProcessed, style=dashed];
m5_7 -> m5_15  [color=green, key=1, label=alphaNumericalCharactersProcessed, style=dashed];
m5_8 -> m5_9  [color=green, key=0, style=solid];
m5_8 -> m5_21  [color=green, key=2, style=dotted];
m5_8 -> m5_22  [color=green, key=2, style=dotted];
m5_8 -> m5_13  [color=green, key=1, label=numberOfCharactersEqualToTruncateLength, style=dashed];
m5_8 -> m5_15  [color=green, key=1, label=numberOfCharactersEqualToTruncateLength, style=dashed];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_11  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_9 -> m5_16  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_9 -> m5_17  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_15  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_17  [key=0, style=solid];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_15  [color=darkseagreen4, key=1, label=alphaNumericalCharactersProcessed, style=dashed];
m5_12 -> m5_12  [color=darkseagreen4, key=1, label=alphaNumericalCharactersProcessed, style=dashed];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_18  [key=0, style=solid];
m5_11 -> m5_13  [key=0, style=solid];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_23  [key=2, style=dotted];
m5_14 -> m5_19  [key=0, style=solid];
m5_16 -> m5_19  [key=0, style=solid];
m5_16 -> m5_20  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_17 -> m5_10  [key=0, style=solid];
m5_17 -> m5_17  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_19 -> m5_0  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [color=red, key=0, style=solid];
m6_1 -> m6_2  [color=red, key=0, style=solid];
m6_1 -> m6_3  [color=red, key=2, style=dotted];
m6_1 -> m6_4  [color=red, key=2, style=dotted];
m6_2 -> m6_0  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=2, style=dotted];
m7_1 -> m7_4  [key=2, style=dotted];
m7_2 -> m7_0  [color=blue, key=0, style=bold];
m8_0 -> m8_3  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_4  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_12  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_13  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_14  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_15  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_20  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_21  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_22  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_23  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_24  [color=green, key=1, label=int, style=dashed];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_6  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_0 -> m8_7  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_0 -> m8_8  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_0 -> m8_9  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_0 -> m8_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_0 -> m8_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_3 -> m8_4  [color=green, key=0, style=solid];
m8_3 -> m8_5  [color=green, key=0, style=solid];
m8_1 -> m8_3  [color=green, key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_4 -> m8_27  [color=green, key=0, style=solid];
m8_4 -> m8_28  [color=green, key=2, style=dotted];
m8_4 -> m8_0  [color=green, key=2, style=dotted];
m8_4 -> m8_29  [color=green, key=2, style=dotted];
m8_5 -> m8_13  [color=green, key=1, label=parts, style=dashed];
m8_5 -> m8_21  [color=green, key=1, label=parts, style=dashed];
m8_5 -> m8_16  [color=green, key=1, label=parts, style=dashed];
m8_5 -> m8_17  [color=green, key=1, label=parts, style=dashed];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_30  [key=2, style=dotted];
m8_5 -> m8_7  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_5 -> m8_10  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_5 -> m8_25  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_5 -> m8_26  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_12 -> m8_13  [color=green, key=0, style=solid];
m8_12 -> m8_15  [color=green, key=0, style=solid];
m8_8 -> m8_12  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_13  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_14  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_15  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_20  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_21  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_22  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_23  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_24  [color=green, key=1, label=int, style=dashed];
m8_8 -> m8_8  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> m8_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_8 -> m8_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_9 -> m8_12  [color=green, key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_11 -> m8_12  [color=green, key=0, style=solid];
m8_11 -> m8_13  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_14  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_15  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_20  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_21  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_22  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_23  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_24  [color=green, key=1, label=int, style=dashed];
m8_11 -> m8_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_13 -> m8_14  [color=green, key=0, style=solid];
m8_13 -> m8_0  [color=green, key=2, style=dotted];
m8_13 -> m8_29  [color=green, key=2, style=dotted];
m8_13 -> m8_31  [color=green, key=2, style=dotted];
m8_15 -> m8_16  [color=green, key=0, style=solid];
m8_15 -> m8_26  [color=green, key=0, style=solid];
m8_14 -> m8_14  [color=green, key=1, label=int, style=dashed];
m8_14 -> m8_15  [color=green, key=0, style=solid];
m8_14 -> m8_20  [color=green, key=1, label=int, style=dashed];
m8_14 -> m8_21  [color=green, key=1, label=int, style=dashed];
m8_14 -> m8_22  [color=green, key=1, label=int, style=dashed];
m8_14 -> m8_23  [color=green, key=1, label=int, style=dashed];
m8_14 -> m8_24  [color=green, key=1, label=int, style=dashed];
m8_20 -> m8_21  [color=green, key=0, style=solid];
m8_20 -> m8_22  [color=green, key=0, style=solid];
m8_21 -> m8_26  [color=green, key=0, style=solid];
m8_21 -> m8_31  [color=green, key=2, style=dotted];
m8_22 -> m8_23  [color=green, key=0, style=solid];
m8_22 -> m8_24  [color=green, key=1, label=lastPart, style=dashed];
m8_22 -> m8_25  [color=green, key=1, label=lastPart, style=dashed];
m8_23 -> m8_24  [color=green, key=0, style=solid];
m8_23 -> m8_25  [color=green, key=0, style=solid];
m8_24 -> m8_24  [color=green, key=1, label=lastPart, style=dashed];
m8_24 -> m8_25  [color=green, key=0, style=solid];
m8_24 -> m8_29  [color=green, key=2, style=dotted];
m8_16 -> m8_17  [color=green, key=0, style=solid];
m8_16 -> m8_18  [color=green, key=0, style=solid];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_32  [key=2, style=dotted];
m8_26 -> m8_33  [key=2, style=dotted];
m8_19 -> m8_20  [color=green, key=0, style=solid];
m8_19 -> m8_22  [color=green, key=1, label=tensMap, style=dashed];
m8_18 -> m8_21  [color=green, key=1, label=unitsMap, style=dashed];
m8_18 -> m8_24  [color=green, key=1, label=unitsMap, style=dashed];
m8_18 -> m8_19  [color=green, key=0, style=solid];
m8_25 -> m8_31  [key=2, style=dotted];
m8_25 -> m8_26  [key=0, style=solid];
m8_17 -> m8_18  [color=green, key=0, style=solid];
m8_17 -> m8_31  [color=green, key=2, style=dotted];
m8_7 -> m8_0  [key=2, style=dotted];
m8_7 -> m8_29  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_31  [key=2, style=dotted];
m8_10 -> m8_0  [key=2, style=dotted];
m8_10 -> m8_29  [key=2, style=dotted];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_31  [key=2, style=dotted];
m8_6 -> m8_9  [key=0, style=solid];
m8_6 -> m8_7  [key=0, style=solid];
m8_2 -> m8_27  [key=0, style=solid];
m8_27 -> m8_0  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [color=green, key=0, style=solid];
m10_0 -> m10_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m10_0 -> m10_5  [color=green, key=1, label=string, style=dashed];
m10_0 -> m10_7  [color=green, key=1, label=string, style=dashed];
m10_0 -> m10_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_0 -> m10_0  [color=darkorchid, key=3, label="method methodReturn string GetResourceKey", style=bold];
m10_1 -> m10_2  [color=green, key=0, style=solid];
m10_3 -> m10_4  [color=green, key=0, style=solid];
m10_3 -> m10_6  [color=green, key=1, label=mod10, style=dashed];
m10_5 -> m10_9  [color=green, key=0, style=solid];
m10_7 -> m10_9  [color=green, key=0, style=solid];
m10_8 -> m10_9  [color=red, key=0, style=solid];
m10_2 -> m10_3  [color=green, key=0, style=solid];
m10_2 -> m10_8  [color=green, key=0, style=solid];
m10_4 -> m10_5  [color=green, key=0, style=solid];
m10_4 -> m10_6  [color=green, key=0, style=solid];
m10_6 -> m10_7  [color=green, key=0, style=solid];
m10_6 -> m10_8  [color=green, key=0, style=solid];
m10_9 -> m10_0  [color=blue, key=0, style=bold];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> m12_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_91 -> m12_96  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_92 -> m12_93  [key=0, style=solid];
m12_93 -> m12_94  [key=0, style=solid];
m12_93 -> m12_96  [key=0, style=solid];
m12_93 -> m12_100  [key=2, style=dotted];
m12_93 -> m12_97  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m12_96 -> m12_97  [key=0, style=solid];
m12_96 -> m12_98  [key=0, style=solid];
m12_96 -> m12_102  [key=2, style=dotted];
m12_94 -> m12_95  [key=0, style=solid];
m12_97 -> m12_99  [key=0, style=solid];
m12_95 -> m12_99  [key=0, style=solid];
m12_95 -> m12_101  [key=2, style=dotted];
m12_98 -> m12_99  [key=0, style=solid];
m12_98 -> m12_101  [key=2, style=dotted];
m12_99 -> m12_91  [color=blue, key=0, style=bold];
m12_35 -> m12_45  [key=0, style=solid];
m12_35 -> m12_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_35 -> m12_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_35 -> m12_69  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_35 -> m12_63  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_35 -> m12_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_46  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_35 -> m12_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_35 -> m12_47  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_45 -> m12_46  [key=0, style=solid];
m12_45 -> m12_47  [color=darkseagreen4, key=1, label=changeType, style=dashed];
m12_46 -> m12_47  [key=0, style=solid];
m12_47 -> m12_48  [key=0, style=solid];
m12_47 -> m12_49  [key=2, style=dotted];
m12_47 -> m12_50  [key=2, style=dotted];
m12_47 -> m12_51  [key=2, style=dotted];
m12_48 -> m12_35  [color=blue, key=0, style=bold];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_3  [key=2, style=dotted];
m12_1 -> m12_4  [key=2, style=dotted];
m12_1 -> m12_5  [key=2, style=dotted];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m12_5 -> m12_22  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_10  [key=2, style=dotted];
m12_6 -> m12_11  [key=2, style=dotted];
m12_6 -> m12_12  [key=2, style=dotted];
m12_6 -> m12_13  [key=2, style=dotted];
m12_6 -> m12_14  [key=2, style=dotted];
m12_6 -> m12_15  [key=2, style=dotted];
m12_6 -> m12_22  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_6 -> m12_8  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_7 -> m12_8  [key=0, style=solid];
m12_7 -> m12_16  [key=2, style=dotted];
m12_7 -> m12_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_17  [key=2, style=dotted];
m12_8 -> m12_18  [key=2, style=dotted];
m12_8 -> m12_16  [key=2, style=dotted];
m12_8 -> m12_19  [key=2, style=dotted];
m12_8 -> m12_20  [key=2, style=dotted];
m12_8 -> m12_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_8 -> m12_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_9 -> m12_5  [color=blue, key=0, style=bold];
m12_82 -> m12_83  [key=0, style=solid];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_4  [key=2, style=dotted];
m12_21 -> m12_22  [key=0, style=solid];
m12_24 -> m12_25  [key=0, style=solid];
m12_28 -> m12_29  [key=0, style=solid];
m12_23 -> m12_21  [color=blue, key=0, style=bold];
m12_25 -> m12_26  [key=0, style=solid];
m12_25 -> m12_27  [key=2, style=dotted];
m12_26 -> m12_24  [color=blue, key=0, style=bold];
m12_29 -> m12_30  [key=0, style=solid];
m12_30 -> m12_28  [color=blue, key=0, style=bold];
m12_38 -> m12_39  [key=0, style=solid];
m12_40 -> m12_41  [key=0, style=solid];
m12_39 -> m12_38  [color=blue, key=0, style=bold];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_43  [key=2, style=dotted];
m12_41 -> m12_44  [key=2, style=dotted];
m12_42 -> m12_40  [color=blue, key=0, style=bold];
m12_53 -> m12_54  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_50  [key=2, style=dotted];
m12_61 -> m12_69  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_61 -> m12_64  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_61 -> m12_74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_61 -> m12_65  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_61 -> m12_79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_62 -> m12_63  [key=0, style=solid];
m12_69 -> m12_70  [key=0, style=solid];
m12_69 -> m12_71  [key=2, style=dotted];
m12_69 -> m12_72  [key=2, style=dotted];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_59  [key=2, style=dotted];
m12_63 -> m12_74  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_63 -> m12_65  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_63 -> m12_79  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_66  [color=darkseagreen4, key=1, label=withValue, style=dashed];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_76  [key=2, style=dotted];
m12_74 -> m12_77  [key=2, style=dotted];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_59  [key=2, style=dotted];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_56  [key=2, style=dotted];
m12_54 -> m12_57  [key=2, style=dotted];
m12_54 -> m12_10  [key=2, style=dotted];
m12_54 -> m12_58  [key=2, style=dotted];
m12_54 -> m12_59  [key=2, style=dotted];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_10  [key=2, style=dotted];
m12_83 -> m12_88  [key=2, style=dotted];
m12_84 -> m12_87  [key=0, style=solid];
m12_84 -> m12_89  [key=2, style=dotted];
m12_52 -> m12_53  [key=0, style=solid];
m12_55 -> m12_52  [color=blue, key=0, style=bold];
m12_60 -> m12_61  [key=0, style=solid];
m12_65 -> m12_66  [key=0, style=solid];
m12_79 -> m12_80  [key=0, style=solid];
m12_79 -> m12_81  [key=2, style=dotted];
m12_67 -> m12_60  [color=blue, key=0, style=bold];
m12_68 -> m12_69  [key=0, style=solid];
m12_70 -> m12_68  [color=blue, key=0, style=bold];
m12_73 -> m12_74  [key=0, style=solid];
m12_75 -> m12_73  [color=blue, key=0, style=bold];
m12_78 -> m12_79  [key=0, style=solid];
m12_80 -> m12_78  [color=blue, key=0, style=bold];
m12_85 -> m12_86  [key=0, style=solid];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_90  [key=2, style=dotted];
m12_87 -> m12_82  [color=blue, key=0, style=bold];
m12_4 -> m12_31  [key=0, style=solid];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_35  [key=2, style=dotted];
m12_31 -> m12_33  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_32 -> m12_33  [key=0, style=solid];
m12_32 -> m12_36  [key=2, style=dotted];
m12_32 -> m12_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_32 -> m12_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_33 -> m12_34  [key=0, style=solid];
m12_33 -> m12_37  [key=2, style=dotted];
m12_34 -> m12_4  [color=blue, key=0, style=bold];
m12_103 -> m12_22  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_104 -> m12_22  [color=darkseagreen4, key=1, label=bool, style=dashed];
m12_105 -> m12_22  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_106 -> m12_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_106 -> m12_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_106 -> m12_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_106 -> m12_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_106 -> m12_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_106 -> m12_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_107 -> m12_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_107 -> m12_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_107 -> m12_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_107 -> m12_69  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_107 -> m12_63  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_107 -> m12_54  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_107 -> m12_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m12_108 -> m12_53  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_108 -> m12_64  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_108 -> m12_74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_109 -> m12_54  [color=darkseagreen4, key=1, label=bool, style=dashed];
m12_110 -> m12_69  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_110 -> m12_74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_110 -> m12_79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m12_111 -> m12_74  [color=darkseagreen4, key=1, label=type, style=dashed];
m12_111 -> m12_79  [color=darkseagreen4, key=1, label=type, style=dashed];
m13_0 -> m13_1  [color=green, key=0, style=solid];
m13_0 -> m13_2  [color=green, key=1, label=bool, style=dashed];
m13_0 -> m13_6  [color=green, key=1, label=object, style=dashed];
m13_1 -> m13_2  [color=green, key=0, style=solid];
m13_1 -> m13_8  [color=green, key=2, style=dotted];
m13_1 -> m13_3  [color=green, key=1, label=result, style=dashed];
m13_1 -> m13_5  [color=green, key=1, label=result, style=dashed];
m13_2 -> m13_3  [color=green, key=0, style=solid];
m13_2 -> m13_4  [color=green, key=0, style=solid];
m13_3 -> m13_7  [color=green, key=0, style=solid];
m13_3 -> m13_9  [color=green, key=2, style=dotted];
m13_3 -> m13_10  [color=green, key=2, style=dotted];
m13_3 -> m13_11  [color=green, key=2, style=dotted];
m13_5 -> m13_6  [color=green, key=0, style=solid];
m13_5 -> m13_12  [color=green, key=2, style=dotted];
m13_5 -> m13_10  [color=green, key=2, style=dotted];
m13_5 -> m13_11  [color=green, key=2, style=dotted];
m13_4 -> m13_5  [color=green, key=0, style=solid];
m13_6 -> m13_7  [color=green, key=0, style=solid];
m13_6 -> m13_13  [color=green, key=2, style=dotted];
m13_7 -> m13_0  [color=blue, key=0, style=bold];
}
