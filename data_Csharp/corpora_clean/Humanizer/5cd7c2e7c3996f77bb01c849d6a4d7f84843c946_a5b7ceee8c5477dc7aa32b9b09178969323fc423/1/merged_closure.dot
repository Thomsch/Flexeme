digraph  {
n0 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="Entry Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", span="7-7"];
n1 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="number == 2", span="10-10"];
n2 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="return resourceKey + DualPostfix;", span="11-11"];
n3 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="number >= 3 && number <= 10", span="14-14"];
n4 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="return resourceKey + PluralPostfix;", span="15-15"];
n5 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="return resourceKey;", span="17-17"];
n6 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", label="Exit Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", span="7-7"];
m1_0 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs", label="Entry Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", span="6-6"];
m1_1 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs", label="number > 1 && number < 5", span="8-8"];
m1_2 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs", label="return resourceKey + PaucalPostfix;", span="9-9"];
m1_3 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs", label="return resourceKey;", span="11-11"];
m1_4 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", file="CzechSlovakPolishFormatter.cs", label="Exit Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.GetResourceKey(string, int)", span="6-6"];
m2_0 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label="Entry Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="15-15"];
m2_1 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label=casing, span="17-17"];
m2_5 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label="return input.Transform(To.LowerCase);", span="23-23"];
m2_7 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label="return input.Transform(To.UpperCase);", span="26-26"];
m2_2 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label="LetterCasing.Title", span="19-19"];
m2_6 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label="LetterCasing.AllCaps", span="25-25"];
m2_11 [cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="DateHumanizeTests.cs", label="Exit Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="15-15"];
m2_12 [cluster="string.Transform(params Humanizer.IStringTransformer[])", file="DateHumanizeTests.cs", label="Entry string.Transform(params Humanizer.IStringTransformer[])", span="15-15"];
m2_13 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="DateHumanizeTests.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m3_8 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="27-27"];
m3_9 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(plural, plural.Pluralize(Plurality.CouldBeEither))", span="29-29"];
m3_10 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(plural, singular.Pluralize(Plurality.CouldBeEither))", span="30-30"];
m3_11 [cluster="Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.PluralizeWordsWithUnknownPlurality(string, string)", span="27-27"];
m3_27 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="73-73"];
m3_28 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(input.Dasherize(), expectedOutput)", span="75-75"];
m3_29 [cluster="Humanizer.Tests.InflectorTests.Dasherize(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Dasherize(string, string)", span="73-73"];
m3_16 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="42-42"];
m3_17 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(singular, singular.Singularize(Plurality.Singular))", span="44-44"];
m3_18 [cluster="Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.SingularizeAlreadySingularWord(string, string)", span="42-42"];
m3_35 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Camelize(string, string)", span="100-100"];
m3_36 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(expectedOutput, input.Camelize())", span="102-102"];
m3_37 [cluster="Humanizer.Tests.InflectorTests.Camelize(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Camelize(string, string)", span="100-100"];
m3_43 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.PluralTestSource.GetEnumerator()", span="121-121"];
m3_44 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''search'', ''searches''};", span="123-123"];
m3_45 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''switch'', ''switches''};", span="124-124"];
m3_46 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''fix'', ''fixes''};", span="125-125"];
m3_47 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''box'', ''boxes''};", span="126-126"];
m3_48 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''process'', ''processes''};", span="127-127"];
m3_49 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''address'', ''addresses''};", span="128-128"];
m3_50 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''case'', ''cases''};", span="129-129"];
m3_51 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''stack'', ''stacks''};", span="130-130"];
m3_52 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''wish'', ''wishes''};", span="131-131"];
m3_53 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''fish'', ''fish''};", span="132-132"];
m3_54 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''category'', ''categories''};", span="134-134"];
m3_55 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''query'', ''queries''};", span="135-135"];
m3_56 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''ability'', ''abilities''};", span="136-136"];
m3_57 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''agency'', ''agencies''};", span="137-137"];
m3_58 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''movie'', ''movies''};", span="138-138"];
m3_59 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''archive'', ''archives''};", span="140-140"];
m3_60 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''index'', ''indices''};", span="142-142"];
m3_61 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''wife'', ''wives''};", span="144-144"];
m3_62 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''safe'', ''saves''};", span="145-145"];
m3_63 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''half'', ''halves''};", span="146-146"];
m3_64 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''move'', ''moves''};", span="148-148"];
m3_65 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''salesperson'', ''salespeople''};", span="150-150"];
m3_66 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''person'', ''people''};", span="151-151"];
m3_67 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''spokesman'', ''spokesmen''};", span="153-153"];
m3_68 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''man'', ''men''};", span="154-154"];
m3_69 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''woman'', ''women''};", span="155-155"];
m3_70 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''basis'', ''bases''};", span="157-157"];
m3_71 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''diagnosis'', ''diagnoses''};", span="158-158"];
m3_72 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''datum'', ''data''};", span="160-160"];
m3_73 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''medium'', ''media''};", span="161-161"];
m3_74 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''analysis'', ''analyses''};", span="162-162"];
m3_75 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''node_child'', ''node_children''};", span="164-164"];
m3_76 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''child'', ''children''};", span="165-165"];
m3_77 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''experience'', ''experiences''};", span="167-167"];
m3_78 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''day'', ''days''};", span="168-168"];
m3_79 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''comment'', ''comments''};", span="170-170"];
m3_80 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''foobar'', ''foobars''};", span="171-171"];
m3_81 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''newsletter'', ''newsletters''};", span="172-172"];
m3_82 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''old_news'', ''old_news''};", span="174-174"];
m3_83 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''news'', ''news''};", span="175-175"];
m3_84 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''series'', ''series''};", span="177-177"];
m3_85 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''species'', ''species''};", span="178-178"];
m3_86 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''quiz'', ''quizzes''};", span="180-180"];
m3_87 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''perspective'', ''perspectives''};", span="182-182"];
m3_88 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''ox'', ''oxen''};", span="184-184"];
m3_89 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''photo'', ''photos''};", span="185-185"];
m3_90 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''buffalo'', ''buffaloes''};", span="186-186"];
m3_91 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''tomato'', ''tomatoes''};", span="187-187"];
m3_92 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''dwarf'', ''dwarves''};", span="188-188"];
m3_93 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''elf'', ''elves''};", span="189-189"];
m3_94 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''information'', ''information''};", span="190-190"];
m3_95 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''equipment'', ''equipment''};", span="191-191"];
m3_96 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''bus'', ''buses''};", span="192-192"];
m3_97 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''status'', ''statuses''};", span="193-193"];
m3_98 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''status_code'', ''status_codes''};", span="194-194"];
m3_99 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''mouse'', ''mice''};", span="195-195"];
m3_100 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''louse'', ''lice''};", span="197-197"];
m3_101 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''house'', ''houses''};", span="198-198"];
m3_102 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''octopus'', ''octopi''};", span="199-199"];
m3_103 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''virus'', ''viri''};", span="200-200"];
m3_104 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''alias'', ''aliases''};", span="201-201"];
m3_105 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''portfolio'', ''portfolios''};", span="202-202"];
m3_106 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''vertex'', ''vertices''};", span="204-204"];
m3_107 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''matrix'', ''matrices''};", span="205-205"];
m3_108 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''axis'', ''axes''};", span="207-207"];
m3_109 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''testis'', ''testes''};", span="208-208"];
m3_110 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''crisis'', ''crises''};", span="209-209"];
m3_111 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''rice'', ''rice''};", span="211-211"];
m3_112 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''shoe'', ''shoes''};", span="212-212"];
m3_113 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''horse'', ''horses''};", span="214-214"];
m3_114 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''prize'', ''prizes''};", span="215-215"];
m3_115 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''edge'', ''edges''};", span="216-216"];
m3_116 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''goose'', ''geese''};", span="219-219"];
m3_117 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''deer'', ''deer''};", span="220-220"];
m3_118 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''sheep'', ''sheep''};", span="221-221"];
m3_119 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''wolf'', ''wolves''};", span="222-222"];
m3_120 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''volcano'', ''volcanoes''};", span="223-223"];
m3_121 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''aircraft'', ''aircraft''};", span="224-224"];
m3_122 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''alumna'', ''alumnae''};", span="225-225"];
m3_123 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''alumnus'', ''alumni''};", span="226-226"];
m3_124 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="yield return new object[] {''fungus'', ''fungi''};", span="227-227"];
m3_125 [cluster="Humanizer.Tests.PluralTestSource.GetEnumerator()", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.PluralTestSource.GetEnumerator()", span="121-121"];
m3_4 [cluster="Unk.Equal", file="DefaultFormatter.cs", label="Entry Unk.Equal", span=""];
m3_19 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="49-49"];
m3_20 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(singular, singular.Singularize(Plurality.CouldBeEither))", span="51-51"];
m3_21 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(singular, plural.Singularize(Plurality.CouldBeEither))", span="52-52"];
m3_22 [cluster="Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.SingularizeWordsWithUnknownSingularity(string, string)", span="49-49"];
m3_39 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Underscore(string, string)", span="113-113"];
m3_40 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(expectedOuput, input.Underscore())", span="115-115"];
m3_41 [cluster="Humanizer.Tests.InflectorTests.Underscore(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Underscore(string, string)", span="113-113"];
m3_3 [cluster="string.Pluralize(Humanizer.Plurality)", file="DefaultFormatter.cs", label="Entry string.Pluralize(Humanizer.Plurality)", span="147-147"];
m3_34 [cluster="string.Pascalize()", file="DefaultFormatter.cs", label="Entry string.Pascalize()", span="226-226"];
m3_23 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Titleize(string, string)", span="63-63"];
m3_24 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(expectedOuput, input.Titleize())", span="65-65"];
m3_25 [cluster="Humanizer.Tests.InflectorTests.Titleize(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Titleize(string, string)", span="63-63"];
m3_26 [cluster="string.Titleize()", file="DefaultFormatter.cs", label="Entry string.Titleize()", span="216-216"];
m3_0 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="13-13"];
m3_1 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(plural, singular.Pluralize())", span="15-15"];
m3_2 [cluster="Humanizer.Tests.InflectorTests.Pluralize(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Pluralize(string, string)", span="13-13"];
m3_30 [cluster="string.Dasherize()", file="DefaultFormatter.cs", label="Entry string.Dasherize()", span="259-259"];
m3_12 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Singularize(string, string)", span="35-35"];
m3_13 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(singular, plural.Singularize())", span="37-37"];
m3_14 [cluster="Humanizer.Tests.InflectorTests.Singularize(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Singularize(string, string)", span="35-35"];
m3_31 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="86-86"];
m3_32 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(expectedOutput, input.Pascalize())", span="88-88"];
m3_33 [cluster="Humanizer.Tests.InflectorTests.Pascalize(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.Pascalize(string, string)", span="86-86"];
m3_126 [cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", span="230-230"];
m3_127 [cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="DefaultFormatter.cs", label="return GetEnumerator();", span="232-232"];
m3_128 [cluster="Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.PluralTestSource.System.Collections.IEnumerable.GetEnumerator()", span="230-230"];
m3_38 [cluster="string.Camelize()", file="DefaultFormatter.cs", label="Entry string.Camelize()", span="236-236"];
m3_42 [cluster="string.Underscore()", file="DefaultFormatter.cs", label="Entry string.Underscore()", span="247-247"];
m3_5 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="DefaultFormatter.cs", label="Entry Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="20-20"];
m3_6 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="DefaultFormatter.cs", label="Assert.Equal(plural, plural.Pluralize(Plurality.Plural))", span="22-22"];
m3_7 [cluster="Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", file="DefaultFormatter.cs", label="Exit Humanizer.Tests.InflectorTests.PluralizeAlreadyPluralWord(string, string)", span="20-20"];
m3_15 [cluster="string.Singularize(Humanizer.Plurality)", file="DefaultFormatter.cs", label="Entry string.Singularize(Humanizer.Plurality)", span="171-171"];
m3_129 [file="DefaultFormatter.cs", label="Humanizer.Tests.PluralTestSource", span=""];
m5_4 [cluster="Unk.Equal", file="EnglishNumberToWordsConverter.cs", label="Entry Unk.Equal", span=""];
m5_3 [cluster="string.ToQuantity(int)", file="EnglishNumberToWordsConverter.cs", label="Entry string.ToQuantity(int)", span="17-17"];
m5_0 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="EnglishNumberToWordsConverter.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="19-19"];
m5_2 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="EnglishNumberToWordsConverter.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="19-19"];
m7_2 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", file="INumberToWordsConverter.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", span="19-19"];
m7_3 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", file="INumberToWordsConverter.cs", label="Exit Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", span="19-19"];
m7_0 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
m7_1 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs", label="Exit Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
m8_6 [cluster="int.ToString(System.IFormatProvider)", file="NumberToWordsExtension.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m8_0 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", file="NumberToWordsExtension.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", span="12-12"];
m8_2 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", file="NumberToWordsExtension.cs", label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.DefaultNumberToWordsConverter(System.Globalization.CultureInfo)", span="12-12"];
m8_3 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", span="22-22"];
m8_4 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs", label="return number.ToString(_culture);", span="24-24"];
m8_5 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs", label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.Convert(int)", span="22-22"];
m8_15 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="NumberToWordsExtension.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
m8_12 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25"];
m8_13 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs", label="return Converter.Convert(number);", prediction=0, span="27-27"];
m8_14 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25"];
m8_7 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="NumberToWordsExtension.cs", label="Entry Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="32-32"];
m8_9 [cluster="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", file="NumberToWordsExtension.cs", label="Exit Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter.ConvertToOrdinal(int)", span="32-32"];
m8_10 [file="NumberToWordsExtension.cs", label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter", span=""];
m9_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m9_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
m9_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
m9_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
m9_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m9_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
m9_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891"];
m9_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894"];
m9_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
m9_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m9_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m9_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m9_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m9_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m9_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m9_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m9_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m9_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Assert.Throws<ApplicationException>(test)", span="816-816"];
m9_338 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m9_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NumberToWordsTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m9_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
m9_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939"];
m9_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946"];
m9_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949"];
m9_419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
m9_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m9_11 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="NumberToWordsTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m9_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
m9_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m9_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
m9_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
m9_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m9_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m9_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m9_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m9_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m9_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m9_427 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NumberToWordsTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m9_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m9_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m9_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m9_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m9_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m9_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m9_383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
m9_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
m9_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m9_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m9_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m9_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m9_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m9_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m9_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m9_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m9_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m9_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m9_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m9_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m9_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m9_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m9_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m9_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m9_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m9_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m9_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m9_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m9_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m9_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m9_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
m9_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
m9_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m9_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m9_374 [cluster="Unk.HaveCount", file="NumberToWordsTests.cs", label="Entry Unk.HaveCount", span=""];
m9_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m9_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m9_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m9_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m9_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m9_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="NumberToWordsTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m9_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m9_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m9_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m9_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m9_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m9_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m9_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m9_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m9_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m9_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m9_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m9_378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m9_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m9_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m9_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Assert.Throws<ApplicationException>(test)", span="830-830"];
m9_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m9_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m9_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m9_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m9_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m9_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m9_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m9_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m9_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m9_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m9_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs", label="result.Value.FileName != null", span="771-771"];
m9_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m9_414 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m9_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m9_271 [cluster="string.Equals(string)", file="NumberToWordsTests.cs", label="Entry string.Equals(string)", span="0-0"];
m9_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m9_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m9_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m9_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m9_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m9_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m9_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m9_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m9_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m9_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m9_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m9_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m9_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m9_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m9_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m9_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m9_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m9_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m9_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m9_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m9_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m9_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m9_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m9_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m9_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m9_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m9_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m9_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m9_420 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="943-943"];
m9_14 [cluster="lambda expression", file="NumberToWordsTests.cs", label=fakeOptions, span="28-28"];
m9_13 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="28-28"];
m9_15 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="28-28"];
m9_21 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="49-49"];
m9_22 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="49-49"];
m9_23 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="49-49"];
m9_28 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="72-72"];
m9_29 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithDouble()", span="72-72"];
m9_30 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="72-72"];
m9_37 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="96-96"];
m9_38 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m9_39 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="96-96"];
m9_45 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="118-118"];
m9_46 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="118-118"];
m9_47 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="118-118"];
m9_52 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="141-141"];
m9_53 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m9_54 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="141-141"];
m9_60 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="163-163"];
m9_61 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m9_62 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="163-163"];
m9_71 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="182-182"];
m9_72 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m9_73 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="182-182"];
m9_80 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="201-201"];
m9_81 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
m9_82 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="201-201"];
m9_89 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="220-220"];
m9_90 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m9_91 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="220-220"];
m9_97 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="239-239"];
m9_98 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m9_99 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="239-239"];
m9_106 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="263-263"];
m9_107 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m9_108 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="263-263"];
m9_116 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="282-282"];
m9_117 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m9_118 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="282-282"];
m9_124 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="301-301"];
m9_125 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m9_126 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="301-301"];
m9_132 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="320-320"];
m9_133 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m9_134 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="320-320"];
m9_141 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="345-345"];
m9_142 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithValues()", span="345-345"];
m9_143 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="345-345"];
m9_148 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="368-368"];
m9_149 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m9_150 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="368-368"];
m9_156 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="390-390"];
m9_157 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m9_158 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="390-390"];
m9_164 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="412-412"];
m9_165 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m9_166 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="412-412"];
m9_174 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="441-441"];
m9_177 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="442-444"];
m9_175 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithValues()", span="441-441"];
m9_176 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="441-441"];
m9_178 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m9_182 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m9_186 [cluster="lambda expression", file="NumberToWordsTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m9_179 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="442-444"];
m9_181 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="444-444"];
m9_183 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="444-444"];
m9_185 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="444-444"];
m9_187 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="444-444"];
m9_195 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="467-467"];
m9_196 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSets()", span="467-467"];
m9_197 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="467-467"];
m9_205 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="487-487"];
m9_206 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m9_207 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="487-487"];
m9_213 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="507-507"];
m9_214 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m9_215 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="507-507"];
m9_222 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="527-527"];
m9_223 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m9_224 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="527-527"];
m9_230 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="545-545"];
m9_231 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionWithRequired()", span="545-545"];
m9_232 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="545-545"];
m9_239 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="564-564"];
m9_240 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="564-564"];
m9_241 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="564-564"];
m9_248 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="583-583"];
m9_249 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="583-583"];
m9_250 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="583-583"];
m9_256 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="602-602"];
m9_257 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="602-602"];
m9_258 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="602-602"];
m9_264 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="621-621"];
m9_265 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="621-621"];
m9_266 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="621-621"];
m9_272 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="641-641"];
m9_273 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="641-641"];
m9_274 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="641-641"];
m9_280 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="660-660"];
m9_281 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m9_282 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="660-660"];
m9_288 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="682-682"];
m9_289 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="682-682"];
m9_290 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="682-682"];
m9_296 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="701-701"];
m9_297 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m9_298 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="701-701"];
m9_304 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="723-723"];
m9_305 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m9_306 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="723-723"];
m9_312 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="745-745"];
m9_313 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m9_314 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="745-745"];
m9_322 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="765-765"];
m9_323 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m9_324 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="765-765"];
m9_332 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="789-789"];
m9_333 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m9_334 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="789-789"];
m9_340 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="809-813"];
m9_341 [cluster="lambda expression", file="NumberToWordsTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m9_342 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="809-813"];
m9_343 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="810-810"];
m9_344 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m9_345 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="810-810"];
m9_351 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="823-827"];
m9_352 [cluster="lambda expression", file="NumberToWordsTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m9_353 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="823-827"];
m9_354 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="824-824"];
m9_355 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m9_356 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="824-824"];
m9_362 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="837-841"];
m9_363 [cluster="lambda expression", file="NumberToWordsTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m9_364 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="837-841"];
m9_365 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="838-838"];
m9_366 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m9_367 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="838-838"];
m9_380 [cluster="lambda expression", file="NumberToWordsTests.cs", label="x == expected", span="863-863"];
m9_375 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="857-857"];
m9_379 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="863-863"];
m9_376 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
m9_377 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="857-857"];
m9_381 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="863-863"];
m9_390 [cluster="lambda expression", file="NumberToWordsTests.cs", label="x == expected", span="878-878"];
m9_386 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="872-872"];
m9_389 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="878-878"];
m9_387 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="872-872"];
m9_388 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="872-872"];
m9_391 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="878-878"];
m9_396 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="888-888"];
m9_397 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeInterfaceOptions()", span="888-888"];
m9_398 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="888-888"];
m9_404 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="905-905"];
m9_405 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithRequiredValue()", span="905-905"];
m9_406 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="905-905"];
m9_411 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="924-924"];
m9_412 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924"];
m9_413 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="924-924"];
m9_421 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new FakeOptions()", span="943-943"];
m9_422 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="943-943"];
m9_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m9_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m9_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
m9_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
m9_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m9_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m9_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m9_321 [cluster="Unk.get_IsSome", file="NumberToWordsTests.cs", label="Entry Unk.get_IsSome", span=""];
m9_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="NumberToWordsTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m9_105 [cluster="Unk.ShouldBeEquivalentTo", file="NumberToWordsTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m9_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
m9_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927"];
m9_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930"];
m9_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
m9_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m9_20 [cluster="Unk.Equal", file="NumberToWordsTests.cs", label="Entry Unk.Equal", span=""];
m9_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m9_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m9_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m9_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m9_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m9_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m9_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m9_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Assert.Throws<ApplicationException>(test)", span="844-844"];
m9_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m9_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="NumberToWordsTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m9_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m9_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m9_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m9_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m9_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs", label="result.Value.Offset != null", span="795-795"];
m9_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m9_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m9_399 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
m9_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m9_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m9_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
m9_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m9_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m9_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m9_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m9_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
m9_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
m9_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m9_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m9_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m9_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m9_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m9_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m9_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m9_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m9_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m9_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m9_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m9_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m9_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m9_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m9_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m9_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m9_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m9_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m9_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m9_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m9_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m9_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m9_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m9_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m9_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m9_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m9_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m9_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m9_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m9_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m9_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m9_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NumberToWordsTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m9_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m9_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m9_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m9_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m9_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m9_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m9_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m9_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m9_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m9_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m9_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m9_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
m9_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m9_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m9_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m9_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m9_373 [cluster="Unk.Should", file="NumberToWordsTests.cs", label="Entry Unk.Should", span=""];
m9_339 [cluster="Unk.>", file="NumberToWordsTests.cs", label="Entry Unk.>", span=""];
m9_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m9_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m9_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m9_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m9_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m9_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m9_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m9_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m9_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m9_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m9_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m9_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m9_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m9_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m9_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m9_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m9_36 [cluster="Unk.SequenceEqual", file="NumberToWordsTests.cs", label="Entry Unk.SequenceEqual", span=""];
m9_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m9_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m9_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="NumberToWordsTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m9_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m9_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m9_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m9_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
m9_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
m9_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m9_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
m9_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908"];
m9_402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911"];
m9_403 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
m9_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m9_12 [cluster="Unk.True", file="NumberToWordsTests.cs", label="Entry Unk.True", span=""];
m9_423 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
m9_424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965"];
m9_425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968"];
m9_426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
m9_428 [file="NumberToWordsTests.cs", label=fakeOptions, span=""];
m9_429 [file="NumberToWordsTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m9_430 [file="NumberToWordsTests.cs", label=int, span=""];
m9_431 [file="NumberToWordsTests.cs", label=int, span=""];
m10_0 [cluster="Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", file="RomanianFormatter.cs", label="Entry Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", span="7-7"];
m10_1 [cluster="Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", file="RomanianFormatter.cs", label="Assert.Equal(\r\n                ''PascalCaseSentenceIsCamelized'',\r\n                ''Pascal case sentence is camelized''.Dehumanize())", span="9-11"];
m10_2 [cluster="Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", file="RomanianFormatter.cs", label="Exit Humanizer.Tests.StringDehumanizeTests.PascalCaseSentence()", span="7-7"];
m10_11 [cluster="Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", file="RomanianFormatter.cs", label="Entry Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", span="31-31"];
m10_12 [cluster="Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", file="RomanianFormatter.cs", label="Assert.Equal(\r\n                ''LowerCaseSentenceIsCamelized'',\r\n                ''lower case sentence is camelized''.Dehumanize())", span="33-35"];
m10_13 [cluster="Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", file="RomanianFormatter.cs", label="Exit Humanizer.Tests.StringDehumanizeTests.LowerCaseSentence()", span="31-31"];
m10_5 [cluster="Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", file="RomanianFormatter.cs", label="Entry Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", span="15-15"];
m10_6 [cluster="Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", file="RomanianFormatter.cs", label="Assert.Equal(\r\n                ''TitleCaseSentenceIsCamelized'',\r\n                ''Title Case Sentence Is Camelized''.Dehumanize())", span="17-19"];
m10_7 [cluster="Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", file="RomanianFormatter.cs", label="Exit Humanizer.Tests.StringDehumanizeTests.TitleCaseSentence()", span="15-15"];
m10_4 [cluster="Unk.Equal", file="RomanianFormatter.cs", label="Entry Unk.Equal", span=""];
m10_3 [cluster="string.Dehumanize()", file="RomanianFormatter.cs", label="Entry string.Dehumanize()", span="11-11"];
m10_14 [cluster="Humanizer.Tests.StringDehumanizeTests.EmptySentence()", file="RomanianFormatter.cs", label="Entry Humanizer.Tests.StringDehumanizeTests.EmptySentence()", span="39-39"];
m10_15 [cluster="Humanizer.Tests.StringDehumanizeTests.EmptySentence()", file="RomanianFormatter.cs", label="Assert.Equal(\r\n                '''',\r\n                ''''.Dehumanize())", span="41-43"];
m10_16 [cluster="Humanizer.Tests.StringDehumanizeTests.EmptySentence()", file="RomanianFormatter.cs", label="Exit Humanizer.Tests.StringDehumanizeTests.EmptySentence()", span="39-39"];
m10_8 [cluster="Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", file="RomanianFormatter.cs", label="Entry Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", span="23-23"];
m10_9 [cluster="Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", file="RomanianFormatter.cs", label="Assert.Equal(\r\n                ''MixedCaseSentenceIsCamelized'',\r\n                ''Mixed case sentence Is Camelized''.Dehumanize())", span="25-27"];
m10_10 [cluster="Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", file="RomanianFormatter.cs", label="Exit Humanizer.Tests.StringDehumanizeTests.MixedCaseSentence()", span="23-23"];
m11_0 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m11_1 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="var mod100 = number%100", span="9-9"];
m11_3 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="var mod10 = number%10", span="12-12"];
m11_5 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="return resourceKey + SingularPostfix;", span="15-15"];
m11_7 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="return resourceKey + PaucalPostfix;", span="18-18"];
m11_8 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="return resourceKey;", span="21-21"];
m11_2 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="mod100/10 != 1", span="10-10"];
m11_4 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="mod10 == 1", span="14-14"];
m11_6 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="mod10 > 1 && mod10 < 5", span="17-17"];
m11_9 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs", label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m13_5 [cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)", file="ToQuantityTests.cs", label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="25-25"];
m13_0 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()", file="ToQuantityTests.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7"];
m13_1 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()", file="ToQuantityTests.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7"];
m13_2 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="ToQuantityTests.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24"];
m13_3 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="ToQuantityTests.cs", label="Assert.Equal(expected, word.ToQuantity(quatity))", span="26-26"];
m13_4 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", file="ToQuantityTests.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24"];
m13_6 [cluster="Unk.Equal", file="ToQuantityTests.cs", label="Entry Unk.Equal", span=""];
m13_13 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="ToQuantityTests.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77"];
m13_14 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="ToQuantityTests.cs", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="79-79"];
m13_15 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", file="ToQuantityTests.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77"];
m13_7 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="ToQuantityTests.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41"];
m13_8 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="ToQuantityTests.cs", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="43-43"];
m13_9 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="ToQuantityTests.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41"];
m13_10 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="ToQuantityTests.cs", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58"];
m13_11 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="ToQuantityTests.cs", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="61-61"];
m13_12 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="ToQuantityTests.cs", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58"];
n0 -> n2  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n3  [color=darkseagreen4, key=1, label=int, style=dashed];
n0 -> n4  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n5  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_8 -> m3_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_19 -> m3_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_129 -> m3_127  [color=darkseagreen4, key=1, label="Humanizer.Tests.PluralTestSource", style=dashed];
m8_10 -> m8_4  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.DefaultNumberToWordsConverter", style=dashed];
m9_75 -> m9_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_76 -> m9_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_392 -> m9_394  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_393 -> m9_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_252 -> m9_254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_253 -> m9_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_416 -> m9_418  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_417 -> m9_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_369 -> m9_371  [color=darkseagreen4, key=1, label=int, style=dashed];
m9_369 -> m9_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m9_370 -> m9_375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_371 -> m9_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_292 -> m9_294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_293 -> m9_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_217 -> m9_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_218 -> m9_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_382 -> m9_384  [color=darkseagreen4, key=1, label=int, style=dashed];
m9_382 -> m9_390  [color=darkseagreen4, key=1, label=int, style=dashed];
m9_383 -> m9_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_384 -> m9_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_144 -> m9_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m9_145 -> m9_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_209 -> m9_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_210 -> m9_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_276 -> m9_278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_277 -> m9_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_200 -> m9_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_201 -> m9_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_56 -> m9_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m9_57 -> m9_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_101 -> m9_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m9_102 -> m9_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_103 -> m9_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m9_16 -> m9_18  [color=darkseagreen4, key=1, label=long, style=dashed];
m9_17 -> m9_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_308 -> m9_310  [color=darkseagreen4, key=1, label="long?", style=dashed];
m9_309 -> m9_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_120 -> m9_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_121 -> m9_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_315 -> m9_318  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_315 -> m9_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m9_316 -> m9_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_316 -> m9_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_316 -> m9_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_267 -> m9_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_268 -> m9_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_128 -> m9_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_129 -> m9_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_160 -> m9_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m9_161 -> m9_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_111 -> m9_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_112 -> m9_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_93 -> m9_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_94 -> m9_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_48 -> m9_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m9_49 -> m9_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_177 -> m9_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_177 -> m9_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_178 -> m9_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_182 -> m9_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_341 -> m9_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_352 -> m9_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_363 -> m9_365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_65 -> m9_67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_66 -> m9_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_407 -> m9_409  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m9_408 -> m9_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_152 -> m9_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m9_153 -> m9_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_326 -> m9_329  [color=darkseagreen4, key=1, label=int, style=dashed];
m9_326 -> m9_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m9_327 -> m9_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_327 -> m9_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_327 -> m9_330  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_24 -> m9_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m9_25 -> m9_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_41 -> m9_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m9_42 -> m9_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_136 -> m9_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_137 -> m9_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_235 -> m9_237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_236 -> m9_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_284 -> m9_286  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_285 -> m9_288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_190 -> m9_192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_191 -> m9_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_168 -> m9_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_170 -> m9_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_170 -> m9_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_260 -> m9_262  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_261 -> m9_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_300 -> m9_302  [color=darkseagreen4, key=1, label="int?", style=dashed];
m9_301 -> m9_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_1 -> m9_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m9_2 -> m9_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_3 -> m9_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_243 -> m9_245  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_244 -> m9_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_85 -> m9_87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_86 -> m9_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_226 -> m9_228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m9_227 -> m9_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_32 -> m9_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m9_33 -> m9_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_400 -> m9_402  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m9_401 -> m9_404  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_423 -> m9_425  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m9_428 -> m9_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m9_429 -> m9_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_429 -> m9_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m9_430 -> m9_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m9_431 -> m9_390  [color=darkseagreen4, key=1, label=int, style=dashed];
m11_0 -> m11_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_3 -> m11_6  [color=darkseagreen4, key=1, label=mod10, style=dashed];
}
