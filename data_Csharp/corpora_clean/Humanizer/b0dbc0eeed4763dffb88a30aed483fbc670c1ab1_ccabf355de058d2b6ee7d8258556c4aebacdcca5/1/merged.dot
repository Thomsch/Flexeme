digraph  {
d1 [label="Assert.Equal(expected, actual)", span="13-13", cluster="Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysGeneration(string, string)", color=green, community=0];
d0 [label="Entry Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysGeneration(string, string)", span="11-11", cluster="Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysGeneration(string, string)"];
d2 [label="Exit Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysGeneration(string, string)", span="11-11", cluster="Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysGeneration(string, string)"];
d3 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d8 [label="Assert.NotNull(Resources.GetResource(generatedResourceKey))", span="27-27", cluster="Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysExistence(string, string)", color=green, community=0];
d7 [label="Entry Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysExistence(string, string)", span="25-25", cluster="Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysExistence(string, string)"];
d9 [label="Exit Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysExistence(string, string)", span="25-25", cluster="Humanizer.Tests.ResourceKeyTests.DateHumanizeKeysExistence(string, string)"];
d10 [label="Entry Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)", span="18-18", cluster="Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)"];
d11 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
d5 [label="Assert.Equal(expected, actual)", span="20-20", cluster="Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysGeneration(string, string)"];
d13 [label="Assert.NotNull(Resources.GetResource(generatedResourceKey))", span="34-34", cluster="Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysExistence(string, string)"];
d4 [label="Entry Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysGeneration(string, string)", span="18-18", cluster="Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysGeneration(string, string)"];
d6 [label="Exit Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysGeneration(string, string)", span="18-18", cluster="Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysGeneration(string, string)"];
d12 [label="Entry Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysExistence(string, string)", span="32-32", cluster="Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysExistence(string, string)"];
d14 [label="Exit Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysExistence(string, string)", span="32-32", cluster="Humanizer.Tests.ResourceKeyTests.TimeSpanHumanizeKeysExistence(string, string)"];
m1_7 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="39-39", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_8 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="41-41", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", color=green, community=0, file="DefaultNumberToWordsConverter.cs"];
m1_9 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="39-39", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_5 [label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="25-25", cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)", file="DefaultNumberToWordsConverter.cs"];
m1_10 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="56-56", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_11 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="59-59", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_12 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="56-56", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityNumeric(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_2 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", span="22-22", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_3 [label="Assert.Equal(expected, word.ToQuantity(quatity))", span="24-24", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_4 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", span="22-22", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantity(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_13 [label="Entry Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", span="75-75", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_14 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="77-77", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
m1_15 [label="Exit Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", span="75-75", cluster="Humanizer.Tests.Localisation.invariant.ToQuantityTests.ToQuantityWords(string, int, string)", file="DefaultNumberToWordsConverter.cs"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d0  [key=0, style=bold, color=blue];
d8 -> d9  [key=0, style=solid, color=green];
d8 -> d10  [key=2, style=dotted, color=green];
d8 -> d11  [key=2, style=dotted, color=green];
d7 -> d8  [key=0, style=solid, color=green];
d9 -> d7  [key=0, style=bold, color=blue];
d5 -> d3  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d13 -> d10  [key=2, style=dotted];
d13 -> d11  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d6 -> d4  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid, color=green];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_5  [key=2, style=dotted, color=green];
m1_8 -> d3  [key=2, style=dotted, color=green];
m1_9 -> m1_7  [key=0, style=bold, color=blue];
m1_5 -> m1_5  [key=3, color=darkorchid, style=bold, label="Local variable int hour"];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_5  [key=2, style=dotted];
m1_11 -> d3  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_10  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_5  [key=2, style=dotted];
m1_3 -> d3  [key=2, style=dotted];
m1_3 -> m1_3  [key=3, color=darkorchid, style=bold, label="Local variable int minute"];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_2  [key=0, style=bold, color=blue];
m1_13 -> m1_14  [key=0, style=solid];
m1_14 -> m1_5  [key=2, style=dotted];
m1_14 -> d3  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_15 -> m1_13  [key=0, style=bold, color=blue];
}
