digraph  {
m1_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m1_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
m1_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
m1_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
m1_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m1_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
m1_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891"];
m1_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894"];
m1_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
m1_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m1_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m1_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m1_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m1_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m1_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m1_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
m1_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939"];
m1_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946"];
m1_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949"];
m1_419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
m1_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m1_11 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m1_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
m1_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m1_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
m1_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
m1_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m1_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m1_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m1_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m1_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m1_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m1_427 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m1_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m1_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m1_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m1_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m1_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m1_383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
m1_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
m1_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m1_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m1_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m1_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m1_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m1_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m1_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m1_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m1_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m1_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m1_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m1_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m1_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m1_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m1_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m1_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m1_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m1_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m1_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m1_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m1_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m1_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
m1_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
m1_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m1_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m1_374 [cluster="Unk.HaveCount", file="CultureSpecificTestBase.cs", label="Entry Unk.HaveCount", span=""];
m1_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m1_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m1_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m1_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m1_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m1_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m1_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m1_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m1_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m1_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m1_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m1_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m1_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m1_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m1_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m1_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m1_378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m1_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m1_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m1_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m1_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m1_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m1_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m1_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m1_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs", label="result.Value.FileName != null", span="771-771"];
m1_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m1_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m1_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m1_414 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m1_271 [cluster="string.Equals(string)", file="CultureSpecificTestBase.cs", label="Entry string.Equals(string)", span="0-0"];
m1_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m1_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m1_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m1_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m1_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m1_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m1_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m1_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m1_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m1_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m1_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m1_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m1_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m1_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m1_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m1_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m1_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m1_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m1_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m1_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m1_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m1_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m1_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m1_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m1_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m1_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m1_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m1_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m1_185 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="444-444"];
m1_14 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label=fakeOptions, span="28-28"];
m1_22 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="49-49"];
m1_46 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="118-118"];
m1_240 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="564-564"];
m1_249 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="583-583"];
m1_257 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="602-602"];
m1_265 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="621-621"];
m1_273 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="641-641"];
m1_289 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="682-682"];
m1_387 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="872-872"];
m1_421 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptions()", span="943-943"];
m1_13 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="28-28"];
m1_15 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="28-28"];
m1_21 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="49-49"];
m1_23 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="49-49"];
m1_45 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="118-118"];
m1_47 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="118-118"];
m1_239 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="564-564"];
m1_241 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="564-564"];
m1_248 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="583-583"];
m1_250 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="583-583"];
m1_256 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="602-602"];
m1_258 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="602-602"];
m1_264 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="621-621"];
m1_266 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="621-621"];
m1_272 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="641-641"];
m1_274 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="641-641"];
m1_288 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="682-682"];
m1_290 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="682-682"];
m1_386 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="872-872"];
m1_388 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="872-872"];
m1_420 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="943-943"];
m1_422 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="943-943"];
m1_341 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m1_352 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m1_363 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m1_28 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="72-72"];
m1_37 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="96-96"];
m1_52 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="141-141"];
m1_60 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="163-163"];
m1_71 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="182-182"];
m1_80 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="201-201"];
m1_89 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="220-220"];
m1_97 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="239-239"];
m1_106 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="263-263"];
m1_116 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="282-282"];
m1_124 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="301-301"];
m1_132 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="320-320"];
m1_141 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="345-345"];
m1_148 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="368-368"];
m1_156 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="390-390"];
m1_164 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="412-412"];
m1_174 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="441-441"];
m1_177 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="442-444"];
m1_195 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="467-467"];
m1_205 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="487-487"];
m1_213 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="507-507"];
m1_222 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="527-527"];
m1_230 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="545-545"];
m1_280 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="660-660"];
m1_296 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="701-701"];
m1_304 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="723-723"];
m1_312 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="745-745"];
m1_322 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="765-765"];
m1_332 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="789-789"];
m1_340 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="809-813"];
m1_342 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="809-813"];
m1_343 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="810-810"];
m1_351 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="823-827"];
m1_353 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="823-827"];
m1_354 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="824-824"];
m1_362 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="837-841"];
m1_364 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="837-841"];
m1_365 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="838-838"];
m1_375 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="857-857"];
m1_396 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="888-888"];
m1_404 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="905-905"];
m1_411 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="924-924"];
m1_30 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="72-72"];
m1_29 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithDouble()", span="72-72"];
m1_39 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="96-96"];
m1_38 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m1_54 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="141-141"];
m1_53 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m1_62 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="163-163"];
m1_61 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m1_73 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="182-182"];
m1_72 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m1_82 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="201-201"];
m1_81 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
m1_91 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="220-220"];
m1_90 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m1_99 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="239-239"];
m1_98 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m1_108 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="263-263"];
m1_107 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m1_118 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="282-282"];
m1_117 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m1_126 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="301-301"];
m1_125 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m1_134 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="320-320"];
m1_133 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m1_143 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="345-345"];
m1_142 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithValues()", span="345-345"];
m1_150 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="368-368"];
m1_149 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m1_158 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="390-390"];
m1_157 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m1_166 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="412-412"];
m1_165 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m1_176 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="441-441"];
m1_175 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithValues()", span="441-441"];
m1_179 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="442-444"];
m1_178 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m1_182 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m1_186 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m1_197 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="467-467"];
m1_196 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSets()", span="467-467"];
m1_207 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="487-487"];
m1_206 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m1_215 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="507-507"];
m1_214 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m1_224 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="527-527"];
m1_223 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m1_232 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="545-545"];
m1_231 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionWithRequired()", span="545-545"];
m1_282 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="660-660"];
m1_281 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m1_298 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="701-701"];
m1_297 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m1_306 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="723-723"];
m1_305 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m1_314 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="745-745"];
m1_313 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m1_324 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="765-765"];
m1_323 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m1_334 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="789-789"];
m1_333 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m1_345 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="810-810"];
m1_344 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m1_356 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="824-824"];
m1_355 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m1_367 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="838-838"];
m1_366 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m1_380 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="x == expected", span="863-863"];
m1_379 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="863-863"];
m1_377 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="857-857"];
m1_376 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
m1_390 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="x == expected", span="878-878"];
m1_389 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="878-878"];
m1_398 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="888-888"];
m1_397 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeInterfaceOptions()", span="888-888"];
m1_406 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="905-905"];
m1_405 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithRequiredValue()", span="905-905"];
m1_413 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="924-924"];
m1_412 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924"];
m1_181 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Entry lambda expression", span="444-444"];
m1_183 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="444-444"];
m1_187 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="444-444"];
m1_381 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="863-863"];
m1_391 [cluster="lambda expression", file="CultureSpecificTestBase.cs", label="Exit lambda expression", span="878-878"];
m1_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m1_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
m1_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
m1_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m1_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m1_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m1_321 [cluster="Unk.get_IsSome", file="CultureSpecificTestBase.cs", label="Entry Unk.get_IsSome", span=""];
m1_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m1_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m1_105 [cluster="Unk.ShouldBeEquivalentTo", file="CultureSpecificTestBase.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
m1_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927"];
m1_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930"];
m1_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
m1_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m1_20 [cluster="Unk.Equal", file="CultureSpecificTestBase.cs", label="Entry Unk.Equal", span=""];
m1_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m1_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m1_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m1_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m1_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m1_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m1_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m1_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m1_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs", label="result.Value.Offset != null", span="795-795"];
m1_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m1_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m1_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m1_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m1_399 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m1_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m1_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
m1_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m1_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m1_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m1_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m1_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
m1_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
m1_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m1_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m1_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m1_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m1_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m1_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m1_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m1_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m1_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m1_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m1_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m1_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m1_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m1_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m1_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m1_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m1_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m1_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m1_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m1_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m1_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m1_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m1_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m1_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m1_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m1_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m1_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m1_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m1_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m1_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m1_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m1_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m1_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m1_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m1_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m1_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m1_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m1_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m1_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m1_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m1_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="CultureSpecificTestBase.cs", label="var fakeOptions = new FakeOptions()", prediction=0, span="21-21"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="CultureSpecificTestBase.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", prediction=1, span="22-24"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m1_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m1_373 [cluster="Unk.Should", file="CultureSpecificTestBase.cs", label="Entry Unk.Should", span=""];
m1_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m1_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m1_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m1_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m1_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m1_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m1_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m1_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m1_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m1_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m1_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m1_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m1_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m1_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m1_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m1_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m1_36 [cluster="Unk.SequenceEqual", file="CultureSpecificTestBase.cs", label="Entry Unk.SequenceEqual", span=""];
m1_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m1_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m1_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m1_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m1_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m1_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m1_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
m1_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m1_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
m1_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908"];
m1_402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911"];
m1_403 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
m1_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m1_12 [cluster="Unk.True", file="CultureSpecificTestBase.cs", label="Entry Unk.True", span=""];
m1_423 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
m1_424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965"];
m1_425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968"];
m1_426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
m1_428 [file="CultureSpecificTestBase.cs", label=fakeOptions, span=""];
m1_429 [file="CultureSpecificTestBase.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_430 [file="CultureSpecificTestBase.cs", label=int, span=""];
m1_431 [file="CultureSpecificTestBase.cs", label=int, span=""];
m2_4 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="DateHumanizeExtensions.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m2_5 [cluster="Unk.>", file="DateHumanizeExtensions.cs", label="Entry Unk.>", span=""];
m2_6 [cluster="Unk.Any", file="DateHumanizeExtensions.cs", label="Entry Unk.Any", span=""];
m2_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="DateHumanizeExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m2_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="DateHumanizeExtensions.cs", label="return from pi in type.GetProperties()\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                        attrs.OfType<OptionAttribute>().Any() ||\r\n                        attrs.OfType<ValueAttribute>().Any()\r\n                   select selector(pi);", span="16-21"];
m2_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="DateHumanizeExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m2_12 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="DateHumanizeExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="35-35"];
m2_13 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", color=green, community=0, file="DateHumanizeExtensions.cs", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", prediction=2, span="41-47"];
m2_14 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="DateHumanizeExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="35-35"];
m2_35 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="DateHumanizeExtensions.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m2_40 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="DateHumanizeExtensions.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m2_7 [cluster="Unk.selector", file="DateHumanizeExtensions.cs", label="Entry Unk.selector", span=""];
m2_21 [cluster="Unk.SetValue", file="DateHumanizeExtensions.cs", label="Entry Unk.SetValue", span=""];
m2_3 [cluster="System.Type.GetProperties()", file="DateHumanizeExtensions.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m2_36 [cluster="System.Action<T>.Invoke(T)", file="DateHumanizeExtensions.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_22 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="50-50"];
m2_26 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="DateHumanizeExtensions.cs", label="fail(e)", prediction=3, span="60-60"];
m2_23 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="52-52"];
m2_25 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label=TargetException, span="58-58"];
m2_33 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label="return instance;", span="75-75"];
m2_30 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="DateHumanizeExtensions.cs", label="fail(e)", prediction=4, span="68-68"];
m2_29 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label=MethodAccessException, span="66-66"];
m2_32 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="DateHumanizeExtensions.cs", label="fail(e)", prediction=5, span="72-72"];
m2_31 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label=TargetInvocationException, span="70-70"];
m2_24 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label="property.SetValue(instance, value, null)", span="56-56"];
m2_28 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label="fail(e)", span="64-64"];
m2_27 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label=TargetParameterCountException, span="62-62"];
m2_34 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="50-50"];
m2_37 [cluster="lambda expression", file="DateHumanizeExtensions.cs", label="Entry lambda expression", span="52-52"];
m2_17 [cluster="lambda expression", file="DateHumanizeExtensions.cs", label="Entry lambda expression", span="43-47"];
m2_18 [cluster="lambda expression", color=green, community=0, file="DateHumanizeExtensions.cs", label="specProp.Property.SetValue(current, selector(specProp))", prediction=6, span="45-45"];
m2_19 [cluster="lambda expression", file="DateHumanizeExtensions.cs", label="return instance;", span="46-46"];
m2_20 [cluster="lambda expression", file="DateHumanizeExtensions.cs", label="Exit lambda expression", span="43-47"];
m2_38 [cluster="lambda expression", file="DateHumanizeExtensions.cs", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="52-52"];
m2_39 [cluster="lambda expression", file="DateHumanizeExtensions.cs", label="Exit lambda expression", span="52-52"];
m2_15 [cluster="Unk.Where", file="DateHumanizeExtensions.cs", label="Entry Unk.Where", span=""];
m2_16 [cluster="Unk.Aggregate", file="DateHumanizeExtensions.cs", label="Entry Unk.Aggregate", span=""];
m2_69 [file="DateHumanizeExtensions.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m2_70 [file="DateHumanizeExtensions.cs", label=T, span=""];
m10_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m10_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
m10_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
m10_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
m10_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
m10_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m10_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m10_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m10_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m10_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m10_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m10_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m10_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m10_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Assert.Throws<ApplicationException>(test)", span="816-816"];
m10_338 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m10_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m10_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920"];
m10_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="923-923"];
m10_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="926-930"];
m10_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="933-933"];
m10_411 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920"];
m10_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m10_11 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m10_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
m10_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m10_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
m10_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
m10_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m10_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m10_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m10_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m10_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m10_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m10_419 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m10_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m10_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m10_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m10_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m10_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m10_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m10_383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
m10_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
m10_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m10_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m10_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m10_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m10_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m10_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m10_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m10_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m10_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m10_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m10_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m10_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m10_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m10_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m10_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m10_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m10_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m10_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m10_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m10_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m10_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m10_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m10_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
m10_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
m10_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m10_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m10_374 [cluster="Unk.HaveCount", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.HaveCount", span=""];
m10_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m10_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m10_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m10_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m10_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m10_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m10_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m10_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m10_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m10_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m10_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m10_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m10_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m10_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m10_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m10_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m10_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m10_378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m10_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m10_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m10_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Assert.Throws<ApplicationException>(test)", span="830-830"];
m10_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m10_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m10_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m10_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m10_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m10_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m10_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m10_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m10_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m10_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m10_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs", label="result.Value.FileName != null", span="771-771"];
m10_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m10_406 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m10_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m10_271 [cluster="string.Equals(string)", file="NumberToTimeSpanExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m10_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m10_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m10_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m10_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m10_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m10_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m10_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m10_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m10_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m10_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m10_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m10_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m10_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m10_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m10_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m10_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m10_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m10_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m10_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m10_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m10_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m10_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m10_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m10_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m10_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m10_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m10_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m10_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m10_412 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="927-927"];
m10_14 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label=fakeOptions, span="28-28"];
m10_13 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="28-28"];
m10_15 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="28-28"];
m10_21 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="49-49"];
m10_22 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="49-49"];
m10_23 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="49-49"];
m10_28 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="72-72"];
m10_29 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithDouble()", span="72-72"];
m10_30 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="72-72"];
m10_37 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="96-96"];
m10_38 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m10_39 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="96-96"];
m10_45 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="118-118"];
m10_46 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="118-118"];
m10_47 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="118-118"];
m10_52 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="141-141"];
m10_53 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m10_54 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="141-141"];
m10_60 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="163-163"];
m10_61 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m10_62 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="163-163"];
m10_71 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="182-182"];
m10_72 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m10_73 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="182-182"];
m10_80 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="201-201"];
m10_81 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
m10_82 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="201-201"];
m10_89 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="220-220"];
m10_90 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m10_91 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="220-220"];
m10_97 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="239-239"];
m10_98 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m10_99 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="239-239"];
m10_106 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="263-263"];
m10_107 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m10_108 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="263-263"];
m10_116 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="282-282"];
m10_117 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m10_118 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="282-282"];
m10_124 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="301-301"];
m10_125 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m10_126 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="301-301"];
m10_132 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="320-320"];
m10_133 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m10_134 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="320-320"];
m10_141 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="345-345"];
m10_142 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithValues()", span="345-345"];
m10_143 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="345-345"];
m10_148 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="368-368"];
m10_149 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m10_150 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="368-368"];
m10_156 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="390-390"];
m10_157 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m10_158 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="390-390"];
m10_164 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="412-412"];
m10_165 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m10_166 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="412-412"];
m10_174 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="441-441"];
m10_177 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="442-444"];
m10_175 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithValues()", span="441-441"];
m10_176 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="441-441"];
m10_178 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m10_182 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m10_186 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m10_179 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="442-444"];
m10_181 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="444-444"];
m10_183 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="444-444"];
m10_185 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="444-444"];
m10_187 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="444-444"];
m10_195 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="467-467"];
m10_196 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSets()", span="467-467"];
m10_197 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="467-467"];
m10_205 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="487-487"];
m10_206 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m10_207 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="487-487"];
m10_213 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="507-507"];
m10_214 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m10_215 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="507-507"];
m10_222 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="527-527"];
m10_223 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m10_224 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="527-527"];
m10_230 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="545-545"];
m10_231 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionWithRequired()", span="545-545"];
m10_232 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="545-545"];
m10_239 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="564-564"];
m10_240 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="564-564"];
m10_241 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="564-564"];
m10_248 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="583-583"];
m10_249 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="583-583"];
m10_250 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="583-583"];
m10_256 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="602-602"];
m10_257 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="602-602"];
m10_258 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="602-602"];
m10_264 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="621-621"];
m10_265 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="621-621"];
m10_266 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="621-621"];
m10_272 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="641-641"];
m10_273 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="641-641"];
m10_274 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="641-641"];
m10_280 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="660-660"];
m10_281 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m10_282 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="660-660"];
m10_288 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="682-682"];
m10_289 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="682-682"];
m10_290 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="682-682"];
m10_296 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="701-701"];
m10_297 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m10_298 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="701-701"];
m10_304 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="723-723"];
m10_305 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m10_306 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="723-723"];
m10_312 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="745-745"];
m10_313 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m10_314 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="745-745"];
m10_322 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="765-765"];
m10_323 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m10_324 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="765-765"];
m10_332 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="789-789"];
m10_333 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m10_334 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="789-789"];
m10_340 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="809-813"];
m10_341 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m10_342 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="809-813"];
m10_343 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="810-810"];
m10_344 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m10_345 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="810-810"];
m10_351 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="823-827"];
m10_352 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m10_353 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="823-827"];
m10_354 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="824-824"];
m10_355 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m10_356 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="824-824"];
m10_362 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="837-841"];
m10_363 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m10_364 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="837-841"];
m10_365 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="838-838"];
m10_366 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m10_367 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="838-838"];
m10_380 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="x == expected", span="863-863"];
m10_375 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="857-857"];
m10_379 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="863-863"];
m10_376 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
m10_377 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="857-857"];
m10_381 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="863-863"];
m10_390 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="x == expected", span="878-878"];
m10_386 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="872-872"];
m10_389 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="878-878"];
m10_387 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="872-872"];
m10_388 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="872-872"];
m10_391 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="878-878"];
m10_396 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="889-889"];
m10_397 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="889-889"];
m10_398 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="889-889"];
m10_403 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Entry lambda expression", span="908-908"];
m10_404 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="908-908"];
m10_405 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="908-908"];
m10_413 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="new FakeOptions()", span="927-927"];
m10_414 [cluster="lambda expression", file="NumberToTimeSpanExtensions.cs", label="Exit lambda expression", span="927-927"];
m10_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m10_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m10_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
m10_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
m10_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m10_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m10_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m10_321 [cluster="Unk.get_IsSome", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.get_IsSome", span=""];
m10_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m10_105 [cluster="Unk.ShouldBeEquivalentTo", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m10_399 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902"];
m10_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="907-911"];
m10_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="914-914"];
m10_402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902"];
m10_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m10_20 [cluster="Unk.Equal", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.Equal", span=""];
m10_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m10_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m10_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m10_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m10_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m10_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m10_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m10_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Assert.Throws<ApplicationException>(test)", span="844-844"];
m10_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m10_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m10_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m10_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m10_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m10_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m10_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs", label="result.Value.Offset != null", span="795-795"];
m10_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m10_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m10_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m10_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m10_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
m10_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
m10_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m10_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m10_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m10_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
m10_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
m10_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
m10_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m10_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m10_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m10_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m10_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m10_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m10_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m10_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m10_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m10_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m10_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m10_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m10_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m10_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m10_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m10_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m10_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m10_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m10_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m10_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m10_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m10_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m10_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m10_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m10_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m10_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m10_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m10_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m10_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m10_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m10_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m10_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m10_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m10_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m10_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m10_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m10_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m10_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m10_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m10_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m10_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m10_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m10_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
m10_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m10_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m10_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m10_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m10_373 [cluster="Unk.Should", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.Should", span=""];
m10_339 [cluster="Unk.>", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.>", span=""];
m10_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m10_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m10_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m10_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m10_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m10_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m10_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m10_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m10_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m10_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m10_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m10_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m10_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m10_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m10_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m10_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m10_36 [cluster="Unk.SequenceEqual", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.SequenceEqual", span=""];
m10_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m10_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m10_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m10_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m10_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m10_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m10_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
m10_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
m10_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m10_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883"];
m10_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="888-892"];
m10_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="895-895"];
m10_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883"];
m10_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m10_12 [cluster="Unk.True", file="NumberToTimeSpanExtensions.cs", label="Entry Unk.True", span=""];
m10_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940"];
m10_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="945-949"];
m10_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="952-952"];
m10_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940"];
m10_420 [file="NumberToTimeSpanExtensions.cs", label=fakeOptions, span=""];
m10_421 [file="NumberToTimeSpanExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m10_422 [file="NumberToTimeSpanExtensions.cs", label=int, span=""];
m10_423 [file="NumberToTimeSpanExtensions.cs", label=int, span=""];
m18_35 [cluster="System.Math.Abs(int)", file="Resources.Designer.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m18_41 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="Resources.Designer.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m18_37 [cluster="System.Collections.Generic.List<T>.List()", file="Resources.Designer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m18_60 [cluster="string.EndsWith(string)", file="Resources.Designer.cs", label="Entry string.EndsWith(string)", span="0-0"];
m18_42 [cluster="System.Collections.Generic.List<T>.ToArray()", file="Resources.Designer.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m18_0 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="Entry Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", span="17-17"];
m18_1 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number == 0", span="19-19"];
m18_3 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number < 0", span="22-22"];
m18_4 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="return string.Format(''moins {0}'', Convert(Math.Abs(number)));", span="23-23"];
m18_6 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="(number / 1000000000) > 0", span="27-27"];
m18_7 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="parts.Add(string.Format(''{0} milliard{1}'',\r\n                    Convert(number/1000000000),\r\n                    number/1000000000 == 1 ? '''' : ''s''))", span="29-31"];
m18_8 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number %= 1000000000", span="33-33"];
m18_9 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="(number / 1000000) > 0", span="36-36"];
m18_10 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="parts.Add(string.Format(''{0} million{1}'',\r\n                    Convert(number/1000000),\r\n                    number/1000000 == 1 ? '''' : ''s''))", span="38-40"];
m18_11 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number %= 1000000", span="42-42"];
m18_12 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="(number / 1000) > 0", span="45-45"];
m18_13 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="parts.Add(number/1000 == 1\r\n                    ? string.Format(''mille'')\r\n                    : string.Format(''{0} mille'', Convert(number/1000)))", span="47-49"];
m18_14 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number %= 1000", span="51-51"];
m18_15 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="(number / 100) > 0", span="54-54"];
m18_16 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="parts.Add(number < 200 ? ''cent'' : string.Format(''{0} cent'', Convert(number/100)))", span="56-56"];
m18_17 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number %= 100", span="57-57"];
m18_18 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number > 0", span="60-60"];
m18_19 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="NumberExceptions.ContainsKey(number)", span="62-62"];
m18_20 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="parts.Add(NumberExceptions[number])", span="63-63"];
m18_21 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number < 20", span="64-64"];
m18_24 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="number >= 70 && (number < 80 || number >= 90)", span="69-69"];
m18_25 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="int baseNumber = number < 80 ? 60 : 80", span="71-71"];
m18_28 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="(number%10) > 0", span="77-77"];
m18_29 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="(number - 1) % 10 == 0", span="79-79"];
m18_31 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="lastPart += string.Format(''-{0}'', UnitsMap[number%10])", span="82-82"];
m18_2 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="return UnitsMap[0];", span="20-20"];
m18_5 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="var parts = new List<string>()", span="25-25"];
m18_33 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="return string.Join('' '', parts.ToArray());", span="89-89"];
m18_23 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="string lastPart", span="68-68"];
m18_30 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="lastPart += '' et un''", span="80-80"];
m18_34 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs", label="Exit Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", span="17-17"];
m18_39 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Resources.Designer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m18_38 [cluster="string.Format(string, object, object)", file="Resources.Designer.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m18_44 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="Entry Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", span="92-92"];
m18_47 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="var convertedNumber = Convert(number)", span="97-97"];
m18_46 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="return ''premier'';", span="95-95"];
m18_49 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="convertedNumber = convertedNumber.TrimEnd('s')", span="100-100"];
m18_51 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="convertedNumber += ''u''", span="102-102"];
m18_53 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="convertedNumber = convertedNumber.TrimEnd('f') + ''v''", span="104-104"];
m18_54 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="convertedNumber.StartsWith(''un '')", span="106-106"];
m18_55 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="convertedNumber = convertedNumber.Remove(0, 3)", span="107-107"];
m18_56 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="convertedNumber = convertedNumber.TrimEnd('e')", span="109-109"];
m18_58 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="return convertedNumber;", span="111-111"];
m18_59 [cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs", label="Exit Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", span="92-92"];
m18_40 [cluster="string.Format(string, params object[])", file="Resources.Designer.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m18_43 [cluster="string.Join(string, params string[])", file="Resources.Designer.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m18_62 [cluster="string.StartsWith(string)", file="Resources.Designer.cs", label="Entry string.StartsWith(string)", span="0-0"];
m18_63 [cluster="string.Remove(int, int)", file="Resources.Designer.cs", label="Entry string.Remove(int, int)", span="0-0"];
m18_61 [cluster="string.TrimEnd(params char[])", file="Resources.Designer.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m18_36 [cluster="string.Format(string, object)", file="Resources.Designer.cs", label="Entry string.Format(string, object)", span="0-0"];
m18_64 [file="Resources.Designer.cs", label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter", span=""];
m1_76 -> m1_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_75 -> m1_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_392 -> m1_394  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_393 -> m1_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_253 -> m1_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_252 -> m1_254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_416 -> m1_418  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_417 -> m1_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_369 -> m1_371  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_369 -> m1_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_370 -> m1_375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_371 -> m1_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_293 -> m1_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_292 -> m1_294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_218 -> m1_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_217 -> m1_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_382 -> m1_384  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_382 -> m1_390  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_383 -> m1_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_384 -> m1_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_144 -> m1_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_145 -> m1_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_210 -> m1_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_209 -> m1_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_277 -> m1_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_276 -> m1_278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_201 -> m1_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_200 -> m1_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_56 -> m1_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_57 -> m1_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_101 -> m1_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_102 -> m1_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_103 -> m1_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label=long, style=dashed];
m1_17 -> m1_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_308 -> m1_310  [color=darkseagreen4, key=1, label="long?", style=dashed];
m1_309 -> m1_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_121 -> m1_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_120 -> m1_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_315 -> m1_318  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_315 -> m1_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_316 -> m1_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_316 -> m1_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_316 -> m1_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_267 -> m1_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_268 -> m1_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_129 -> m1_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_128 -> m1_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_160 -> m1_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_161 -> m1_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_112 -> m1_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_111 -> m1_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_94 -> m1_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_93 -> m1_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_48 -> m1_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_49 -> m1_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_341 -> m1_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_352 -> m1_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_363 -> m1_365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_177 -> m1_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_177 -> m1_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
