digraph  {
n0 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", span="7-7"];
n1 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", label="Assert.Equal(EnumUnderTest.MemberWithDescriptionAttribute, EnumTestsResources.CustomDescription.DehumanizeTo<EnumUnderTest>())", span="9-9"];
n2 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", span="7-7"];
n3 [cluster="string.DehumanizeTo<TTargetEnum>(Humanizer.LetterCasing?)", label="Entry string.DehumanizeTo<TTargetEnum>(Humanizer.LetterCasing?)", span="6-6"];
n4 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n5 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", span="13-13"];
n6 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", label="Assert.Equal(EnumUnderTest.MemberWithoutDescriptionAttribute, EnumTestsResources.MemberWithoutDescriptionAttributeSentence.DehumanizeTo<EnumUnderTest>())", span="15-15"];
n7 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", span="13-13"];
n8 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", span="19-19"];
n9 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", label="Assert.Equal(\r\n                EnumUnderTest.MemberWithoutDescriptionAttribute,\r\n                EnumTestsResources.MemberWithoutDescriptionAttributeTitle.DehumanizeTo<EnumUnderTest>(LetterCasing.Title))", span="21-23"];
n10 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", span="19-19"];
n11 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", span="27-27"];
n12 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", label="Assert.Equal(\r\n                EnumUnderTest.MemberWithoutDescriptionAttribute,\r\n                EnumTestsResources.MemberWithoutDescriptionAttributeLowerCase.DehumanizeTo<EnumUnderTest>(LetterCasing.LowerCase))", span="29-31"];
n13 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", span="27-27"];
n14 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", span="35-35"];
n15 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", label="Assert.Equal(\r\n                EnumUnderTest.ALLCAPITALS,\r\n                EnumUnderTest.ALLCAPITALS.ToString().DehumanizeTo<EnumUnderTest>())", span="37-39"];
n16 [cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", span="35-35"];
n17 [cluster="System.Enum.ToString()", label="Entry System.Enum.ToString()", span="0-0"];
d1 [cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", color=green, community=0, label="Assert.Equal(\r\n                ''Pascal case input string is turned into sentence'',\r\n                ''PascalCaseInputStringIsTurnedIntoSentence''.Humanize())", prediction=0, span="9-11"];
d0 [cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", label="Entry Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="7-7"];
d2 [cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", label="Exit Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="7-7"];
d3 [cluster="string.Humanize()", label="Entry string.Humanize()", span="42-42"];
d4 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d6 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", color=green, community=0, label="Assert.Equal(\r\n                ''When I use an input a here'',\r\n                ''WhenIUseAnInputAHere''.Humanize())", prediction=1, span="17-19"];
d5 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15"];
d7 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15"];
d9 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", label="Assert.Equal(''10 is in the begining'', ''10IsInTheBegining''.Humanize())", span="25-25"];
d12 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", label="Assert.Equal(''Number is at the end 100'', ''NumberIsAtTheEnd100''.Humanize())", span="31-31"];
d15 [cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", label="Assert.Equal(\r\n                ''Underscored input string is turned into sentence'',\r\n                ''Underscored_input_string_is_turned_into_sentence''.Humanize())", span="37-39"];
d18 [cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", label="Assert.Equal(\r\n                ''Underscored input String is turned INTO sentence'',\r\n                ''Underscored_input_String_is_turned_INTO_sentence''.Humanize())", span="45-47"];
d21 [cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", label="Assert.Equal(\r\n                ''X is first word in the sentence'',\r\n                ''XIsFirstWordInTheSentence''.Humanize())", span="53-55"];
d24 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", label="Assert.Equal(\r\n                ''HTML'',\r\n                ''HTML''.Humanize())", span="61-63"];
d27 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", label="Assert.Equal(\r\n                ''The HTML language'',\r\n                ''TheHTMLLanguage''.Humanize())", span="69-71"];
d30 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", label="Assert.Equal(\r\n                ''HTML is the language'',\r\n                ''HTMLIsTheLanguage''.Humanize())", span="77-79"];
d33 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", label="Assert.Equal(\r\n                ''The language is HTML'',\r\n                ''TheLanguageIsHTML''.Humanize())", span="85-87"];
d36 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", label="Assert.Equal(\r\n                ''HTML 5'',\r\n                ''HTML5''.Humanize())", span="93-95"];
d39 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", label="Assert.Equal(\r\n                ''1 HTML'',\r\n                ''1HTML''.Humanize())", span="101-103"];
d42 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''CanReturnTitleCase''.Humanize(LetterCasing.Title))", span="109-111"];
d46 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''Can_return_title_Case''.Humanize(LetterCasing.Title))", span="117-119"];
d49 [cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", label="Assert.Equal(\r\n                ''Title Humanization Honors ALLCAPS'',\r\n                ''Title_humanization_Honors_ALLCAPS''.Humanize(LetterCasing.Title))", span="125-127"];
d52 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", label="Assert.Equal(\r\n                ''can return lower case'',\r\n                ''CanReturnLowerCase''.Humanize(LetterCasing.LowerCase))", span="133-135"];
d55 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", label="Assert.Equal(\r\n                ''Can return sentence case'',\r\n                ''CanReturnSentenceCase''.Humanize(LetterCasing.Sentence))", span="141-143"];
d58 [cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", label="Assert.Equal(\r\n                '''',\r\n                ''''.Humanize(LetterCasing.Sentence))", span="149-151"];
d61 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", label="Assert.Equal(\r\n                ''lowercase'',\r\n                ''LOWERCASE''.Humanize(LetterCasing.LowerCase))", span="157-159"];
d64 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''CanHumanizeIntoUpperCase''.Humanize(LetterCasing.AllCaps))", span="165-167"];
d67 [cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''Can_Humanize_into_Upper_case''.Humanize(LetterCasing.AllCaps))", span="173-175"];
d8 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="23-23"];
d10 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="23-23"];
d11 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29"];
d13 [cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29"];
d14 [cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="35-35"];
d16 [cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="35-35"];
d17 [cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="43-43"];
d19 [cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="43-43"];
d20 [cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", label="Entry Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51"];
d22 [cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", label="Exit Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51"];
d23 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="59-59"];
d25 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="59-59"];
d26 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="67-67"];
d28 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="67-67"];
d29 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="75-75"];
d31 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="75-75"];
d32 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="83-83"];
d34 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="83-83"];
d35 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="91-91"];
d37 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="91-91"];
d38 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="99-99"];
d40 [cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="99-99"];
d41 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="107-107"];
d43 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="107-107"];
d44 [cluster="string.Humanize(Humanizer.LetterCasing)", label="Entry string.Humanize(Humanizer.LetterCasing)", span="60-60"];
d45 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="115-115"];
d47 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="115-115"];
d48 [cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", label="Entry Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="123-123"];
d50 [cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", label="Exit Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="123-123"];
d51 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="131-131"];
d53 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="131-131"];
d54 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="139-139"];
d56 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="139-139"];
d57 [cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", label="Entry Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="147-147"];
d59 [cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", label="Exit Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="147-147"];
d60 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="155-155"];
d62 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="155-155"];
d63 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="163-163"];
d65 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="163-163"];
d66 [cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", label="Entry Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="171-171"];
d68 [cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", label="Exit Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="171-171"];
m0_8 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="return resourceKey;", span="21-21"];
m0_9 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m0_10 [cluster="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int)", file="EnumDehumanizeExtensions.cs", label="Exit Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int)", span="34-34"];
m0_0 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7"];
m0_1 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="EnumDehumanizeExtensions.cs", label="var mod100 = number%100", prediction=2, span="9-9"];
m0_2 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="mod100/10 != 1", span="10-10"];
m0_6 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="mod10 > 1 && mod10 < 5", span="17-17"];
m0_7 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="return resourceKey + PaucalPostfix;", span="18-18"];
m0_11 [cluster="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="EnumDehumanizeExtensions.cs", label="Entry Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="45-45"];
m0_12 [cluster="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="EnumDehumanizeExtensions.cs", label="Exit Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="45-45"];
m0_3 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="var mod10 = number%10", span="12-12"];
m0_4 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="mod10 == 1", span="14-14"];
m0_5 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs", label="return resourceKey + SingularPostfix;", span="15-15"];
m0_13 [file="EnumDehumanizeExtensions.cs", label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter", span=""];
m1_0 [cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", file="StringDehumanizeExtensions.cs", label="Entry Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", span="13-13"];
m1_1 [cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", color=green, community=0, file="StringDehumanizeExtensions.cs", label="Assert.Equal(Expected, Format.FormatWith(1, 2, 3))", prediction=3, span="15-15"];
m1_2 [cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", file="StringDehumanizeExtensions.cs", label="Exit Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", span="13-13"];
m1_3 [cluster="string.FormatWith(params object[])", file="StringDehumanizeExtensions.cs", label="Entry string.FormatWith(params object[])", span="15-15"];
m1_4 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", file="StringDehumanizeExtensions.cs", label="return resourceKey + PluralPostfix;", span="15-15"];
m1_5 [cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", file="StringDehumanizeExtensions.cs", label="Entry Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", span="19-19"];
m1_6 [cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", file="StringDehumanizeExtensions.cs", label="Assert.Equal(Expected, Format.FormatWith(1, 2, 3, 4, 5))", span="21-21"];
m1_11 [cluster="Unk.>", file="StringDehumanizeExtensions.cs", label="Entry Unk.>", span=""];
m1_7 [cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", file="StringDehumanizeExtensions.cs", label="Exit Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", span="19-19"];
m1_15 [cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs", label="Entry Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", span="31-31"];
m1_16 [cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs", label="string format = null", span="33-33"];
m1_17 [cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs", label="Assert.Throws<ArgumentNullException>(() => format.FormatWith(1, 2))", span="34-34"];
m1_18 [cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs", label="Exit Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", span="31-31"];
m1_26 [cluster="string.FormatWith(System.IFormatProvider, params object[])", file="StringDehumanizeExtensions.cs", label="Entry string.FormatWith(System.IFormatProvider, params object[])", span="27-27"];
m1_8 [cluster="Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", file="StringDehumanizeExtensions.cs", label="Entry Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", span="25-25"];
m1_9 [cluster="Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", file="StringDehumanizeExtensions.cs", label="Assert.Throws<FormatException>(() => Format.FormatWith(1, 2))", span="27-27"];
m1_10 [cluster="Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", file="StringDehumanizeExtensions.cs", label="Exit Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", span="25-25"];
m1_19 [cluster="lambda expression", file="StringDehumanizeExtensions.cs", label="Entry lambda expression", span="34-34"];
m1_12 [cluster="lambda expression", file="StringDehumanizeExtensions.cs", label="Entry lambda expression", span="27-27"];
m1_13 [cluster="lambda expression", file="StringDehumanizeExtensions.cs", label="Format.FormatWith(1, 2)", span="27-27"];
m1_14 [cluster="lambda expression", file="StringDehumanizeExtensions.cs", label="Exit lambda expression", span="27-27"];
m1_20 [cluster="lambda expression", file="StringDehumanizeExtensions.cs", label="format.FormatWith(1, 2)", span="34-34"];
m1_21 [cluster="lambda expression", file="StringDehumanizeExtensions.cs", label="Exit lambda expression", span="34-34"];
m1_22 [cluster="Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", file="StringDehumanizeExtensions.cs", label="Entry Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", span="40-40"];
m1_23 [cluster="Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", file="StringDehumanizeExtensions.cs", label="Assert.Equal(expected, ''{0:N2}''.FormatWith(new CultureInfo(culture), 6666.66))", span="42-42"];
m1_24 [cluster="Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", file="StringDehumanizeExtensions.cs", label="Exit Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", span="40-40"];
m1_25 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StringDehumanizeExtensions.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m1_27 [file="StringDehumanizeExtensions.cs", label=format, span=""];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_3 -> m0_6  [color=darkseagreen4, key=1, label=mod10, style=dashed];
m0_13 -> m0_4  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter", style=dashed];
m0_13 -> m0_9  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter", style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_16 -> m1_20  [color=darkseagreen4, key=1, label=format, style=dashed];
m1_17 -> m1_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_9 -> m1_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_27 -> m1_20  [color=darkseagreen4, key=1, label=format, style=dashed];
}
