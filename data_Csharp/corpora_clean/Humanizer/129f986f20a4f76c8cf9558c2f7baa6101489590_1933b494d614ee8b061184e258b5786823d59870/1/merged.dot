digraph  {
d1 [label="value == null", span="12-12", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d0 [label="Entry Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", span="10-10", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)"];
d2 [label="return null;", span="13-13", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d3 [label="value.Length == 0", span="15-15", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d4 [label="return value;", span="16-16", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d5 [label="var numberOfWordsProcessed = 0", span="18-18", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d21 [label="Exit Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", span="10-10", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)"];
d6 [label="var numberOfWords = value.Split((char[])null, StringSplitOptions.RemoveEmptyEntries).Count()", span="19-19", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d7 [label="numberOfWords <= length", span="21-21", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d22 [label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0", cluster="string.Split(char[], System.StringSplitOptions)"];
d23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
d8 [label="return value;", span="22-22", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d9 [label="var lastCharactersWasWhiteSpace = true", span="24-24", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d11 [label="i < value.Length", span="26-26", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d10 [label="var i = 0", span="26-26", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d19 [label="i++", span="26-26", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d12 [label="Char.IsWhiteSpace(value[i])", span="28-28", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d20 [label="return value + truncationString;", span="44-44", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d13 [label="!lastCharactersWasWhiteSpace", span="30-30", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d18 [label="lastCharactersWasWhiteSpace = false", span="40-40", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d24 [label="Entry char.IsWhiteSpace(char)", span="0-0", cluster="char.IsWhiteSpace(char)"];
d16 [label="numberOfWordsProcessed == length", span="35-35", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d14 [label="numberOfWordsProcessed++", span="31-31", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d15 [label="lastCharactersWasWhiteSpace = true", span="33-33", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d17 [label="return value.Substring(0, i) + truncationString;", span="36-36", cluster="Humanizer.FixedNumberOfWordsTruncator.Truncate(string, int, string)", color=green, community=0];
d25 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
m2_11 [label="Entry Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", span="43-43", cluster="Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", file="PluralizeTests.cs"];
m2_12 [label="Assert.Equal(expectedOutput, input.Transform(To.UpperCase))", span="45-45", cluster="Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", file="PluralizeTests.cs"];
m2_13 [label="Exit Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", span="43-43", cluster="Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", file="PluralizeTests.cs"];
m2_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="PluralizeTests.cs"];
m2_3 [label="Entry string.Transform(params Humanizer.IStringTransformer[])", span="15-15", cluster="string.Transform(params Humanizer.IStringTransformer[])", file="PluralizeTests.cs"];
m2_5 [label="Entry Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", span="25-25", cluster="Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", file="PluralizeTests.cs"];
m2_6 [label="Assert.Equal(expectedOutput, input.Transform(To.LowerCase))", span="27-27", cluster="Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", file="PluralizeTests.cs"];
m2_7 [label="Exit Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", span="25-25", cluster="Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", file="PluralizeTests.cs"];
m2_0 [label="Entry Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", span="15-15", cluster="Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", file="PluralizeTests.cs"];
m2_1 [label="Assert.Equal(expectedOutput, input.Transform(To.TitleCase))", span="17-17", cluster="Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", file="PluralizeTests.cs"];
m2_2 [label="Exit Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", span="15-15", cluster="Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", file="PluralizeTests.cs"];
m2_8 [label="Entry Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", span="34-34", cluster="Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", file="PluralizeTests.cs"];
m2_9 [label="Assert.Equal(expectedOutput, input.Transform(To.SentenceCase))", span="36-36", cluster="Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", file="PluralizeTests.cs"];
m2_10 [label="Exit Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", span="34-34", cluster="Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", file="PluralizeTests.cs"];
m3_0 [label="Entry Humanizer.Tests.OrdinalizeTests.OrdinalizeString(string, string)", span="36-36", cluster="Humanizer.Tests.OrdinalizeTests.OrdinalizeString(string, string)", file="StringHumanizeExtensions.cs"];
m3_1 [label="Assert.Equal(number.Ordinalize(), ordinalized)", span="38-38", cluster="Humanizer.Tests.OrdinalizeTests.OrdinalizeString(string, string)", file="StringHumanizeExtensions.cs"];
m3_2 [label="Exit Humanizer.Tests.OrdinalizeTests.OrdinalizeString(string, string)", span="36-36", cluster="Humanizer.Tests.OrdinalizeTests.OrdinalizeString(string, string)", file="StringHumanizeExtensions.cs"];
m3_5 [label="Entry Humanizer.Tests.OrdinalizeTests.OrdanizeNumber(int, string)", span="70-70", cluster="Humanizer.Tests.OrdinalizeTests.OrdanizeNumber(int, string)", file="StringHumanizeExtensions.cs"];
m3_6 [label="Assert.Equal(number.Ordinalize(), ordinalized)", span="72-72", cluster="Humanizer.Tests.OrdinalizeTests.OrdanizeNumber(int, string)", color=red, community=0, file="StringHumanizeExtensions.cs"];
m3_7 [label="Exit Humanizer.Tests.OrdinalizeTests.OrdanizeNumber(int, string)", span="70-70", cluster="Humanizer.Tests.OrdinalizeTests.OrdanizeNumber(int, string)", file="StringHumanizeExtensions.cs"];
m3_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="StringHumanizeExtensions.cs"];
m3_8 [label="Entry int.Ordinalize()", span="25-25", cluster="int.Ordinalize()", file="StringHumanizeExtensions.cs"];
m3_3 [label="Entry string.Ordinalize()", span="15-15", cluster="string.Ordinalize()", file="StringHumanizeExtensions.cs"];
m4_85 [label="Entry Humanizer.Tests.StringHumanizeTests.Underscore(string, string)", span="238-238", cluster="Humanizer.Tests.StringHumanizeTests.Underscore(string, string)", file="StringHumanizeTests.cs"];
m4_86 [label="Assert.Equal(expectedOuput, input.Underscore())", span="240-240", cluster="Humanizer.Tests.StringHumanizeTests.Underscore(string, string)", color=red, community=0, file="StringHumanizeTests.cs"];
m4_87 [label="Exit Humanizer.Tests.StringHumanizeTests.Underscore(string, string)", span="238-238", cluster="Humanizer.Tests.StringHumanizeTests.Underscore(string, string)", file="StringHumanizeTests.cs"];
m4_3 [label="Entry string.Humanize()", span="42-42", cluster="string.Humanize()", file="StringHumanizeTests.cs"];
m4_45 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="116-116", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_46 [label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''Can_return_title_Case''.Humanize(LetterCasing.Title))", span="118-120", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_47 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="116-116", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_54 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="140-140", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", file="StringHumanizeTests.cs"];
m4_55 [label="Assert.Equal(\r\n                ''Can return sentence case'',\r\n                ''CanReturnSentenceCase''.Humanize(LetterCasing.Sentence))", span="142-144", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", file="StringHumanizeTests.cs"];
m4_56 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="140-140", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", file="StringHumanizeTests.cs"];
m4_38 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="100-100", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", file="StringHumanizeTests.cs"];
m4_39 [label="Assert.Equal(\r\n                ''1 HTML'',\r\n                ''1HTML''.Humanize())", span="102-104", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", file="StringHumanizeTests.cs"];
m4_40 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="100-100", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", file="StringHumanizeTests.cs"];
m4_48 [label="Entry Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="124-124", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", file="StringHumanizeTests.cs"];
m4_49 [label="Assert.Equal(\r\n                ''Title Humanization Honors ALLCAPS'',\r\n                ''Title_humanization_Honors_ALLCAPS''.Humanize(LetterCasing.Title))", span="126-128", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", file="StringHumanizeTests.cs"];
m4_50 [label="Exit Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="124-124", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", file="StringHumanizeTests.cs"];
m4_60 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="156-156", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringHumanizeTests.cs"];
m4_61 [label="Assert.Equal(\r\n                ''lowercase'',\r\n                ''LOWERCASE''.Humanize(LetterCasing.LowerCase))", span="158-160", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringHumanizeTests.cs"];
m4_62 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="156-156", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringHumanizeTests.cs"];
m4_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="StringHumanizeTests.cs"];
m4_26 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="68-68", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", file="StringHumanizeTests.cs"];
m4_27 [label="Assert.Equal(\r\n                ''The HTML language'',\r\n                ''TheHTMLLanguage''.Humanize())", span="70-72", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", file="StringHumanizeTests.cs"];
m4_28 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="68-68", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", file="StringHumanizeTests.cs"];
m4_51 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="132-132", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", file="StringHumanizeTests.cs"];
m4_52 [label="Assert.Equal(\r\n                ''can return lower case'',\r\n                ''CanReturnLowerCase''.Humanize(LetterCasing.LowerCase))", span="134-136", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", file="StringHumanizeTests.cs"];
m4_53 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="132-132", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", file="StringHumanizeTests.cs"];
m4_5 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="16-16", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringHumanizeTests.cs"];
m4_6 [label="Assert.Equal(\r\n                ''When I use an input a here'',\r\n                ''WhenIUseAnInputAHere''.Humanize())", span="18-20", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringHumanizeTests.cs"];
m4_7 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="16-16", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringHumanizeTests.cs"];
m4_8 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="24-24", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m4_9 [label="Assert.Equal(''10 is in the begining'', ''10IsInTheBegining''.Humanize())", span="26-26", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m4_10 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="24-24", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m4_14 [label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="36-36", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m4_15 [label="Assert.Equal(\r\n                ''Underscored input string is turned into sentence'',\r\n                ''Underscored_input_string_is_turned_into_sentence''.Humanize())", span="38-40", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m4_16 [label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="36-36", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m4_69 [label="Entry Humanizer.Tests.StringHumanizeTests.Dasherize(string, string)", span="184-184", cluster="Humanizer.Tests.StringHumanizeTests.Dasherize(string, string)", file="StringHumanizeTests.cs"];
m4_70 [label="Assert.Equal(input.Dasherize(), expectedOutput)", span="186-186", cluster="Humanizer.Tests.StringHumanizeTests.Dasherize(string, string)", color=red, community=0, file="StringHumanizeTests.cs"];
m4_71 [label="Exit Humanizer.Tests.StringHumanizeTests.Dasherize(string, string)", span="184-184", cluster="Humanizer.Tests.StringHumanizeTests.Dasherize(string, string)", file="StringHumanizeTests.cs"];
m4_20 [label="Entry Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="52-52", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", file="StringHumanizeTests.cs"];
m4_21 [label="Assert.Equal(\r\n                ''X is first word in the sentence'',\r\n                ''XIsFirstWordInTheSentence''.Humanize())", span="54-56", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", file="StringHumanizeTests.cs"];
m4_22 [label="Exit Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="52-52", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", file="StringHumanizeTests.cs"];
m4_23 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="60-60", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", file="StringHumanizeTests.cs"];
m4_24 [label="Assert.Equal(\r\n                ''HTML'',\r\n                ''HTML''.Humanize())", span="62-64", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", file="StringHumanizeTests.cs"];
m4_25 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="60-60", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", file="StringHumanizeTests.cs"];
m4_76 [label="Entry string.Pascalize()", span="112-112", cluster="string.Pascalize()", file="StringHumanizeTests.cs"];
m4_84 [label="Entry string.Titleize()", span="102-102", cluster="string.Titleize()", file="StringHumanizeTests.cs"];
m4_66 [label="Entry Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="172-172", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_67 [label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''Can_Humanize_into_Upper_case''.Humanize(LetterCasing.AllCaps))", span="174-176", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_68 [label="Exit Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="172-172", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_73 [label="Entry Humanizer.Tests.StringHumanizeTests.Pascalize(string, string)", span="197-197", cluster="Humanizer.Tests.StringHumanizeTests.Pascalize(string, string)", file="StringHumanizeTests.cs"];
m4_74 [label="Assert.Equal(expectedOutput, input.Pascalize())", span="199-199", cluster="Humanizer.Tests.StringHumanizeTests.Pascalize(string, string)", color=red, community=0, file="StringHumanizeTests.cs"];
m4_75 [label="Exit Humanizer.Tests.StringHumanizeTests.Pascalize(string, string)", span="197-197", cluster="Humanizer.Tests.StringHumanizeTests.Pascalize(string, string)", file="StringHumanizeTests.cs"];
m4_77 [label="Entry Humanizer.Tests.StringHumanizeTests.Camelize(string, string)", span="213-213", cluster="Humanizer.Tests.StringHumanizeTests.Camelize(string, string)", file="StringHumanizeTests.cs"];
m4_78 [label="Assert.Equal(expectedOutput, input.Camelize())", span="215-215", cluster="Humanizer.Tests.StringHumanizeTests.Camelize(string, string)", color=red, community=0, file="StringHumanizeTests.cs"];
m4_79 [label="Exit Humanizer.Tests.StringHumanizeTests.Camelize(string, string)", span="213-213", cluster="Humanizer.Tests.StringHumanizeTests.Camelize(string, string)", file="StringHumanizeTests.cs"];
m4_32 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="84-84", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", file="StringHumanizeTests.cs"];
m4_33 [label="Assert.Equal(\r\n                ''The language is HTML'',\r\n                ''TheLanguageIsHTML''.Humanize())", span="86-88", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", file="StringHumanizeTests.cs"];
m4_34 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="84-84", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", file="StringHumanizeTests.cs"];
m4_44 [label="Entry string.Humanize(Humanizer.LetterCasing)", span="60-60", cluster="string.Humanize(Humanizer.LetterCasing)", file="StringHumanizeTests.cs"];
m4_81 [label="Entry Humanizer.Tests.StringHumanizeTests.Titleize(string, string)", span="226-226", cluster="Humanizer.Tests.StringHumanizeTests.Titleize(string, string)", file="StringHumanizeTests.cs"];
m4_82 [label="Assert.Equal(expectedOuput, input.Titleize())", span="228-228", cluster="Humanizer.Tests.StringHumanizeTests.Titleize(string, string)", color=red, community=0, file="StringHumanizeTests.cs"];
m4_83 [label="Exit Humanizer.Tests.StringHumanizeTests.Titleize(string, string)", span="226-226", cluster="Humanizer.Tests.StringHumanizeTests.Titleize(string, string)", file="StringHumanizeTests.cs"];
m4_72 [label="Entry string.Dasherize()", span="145-145", cluster="string.Dasherize()", file="StringHumanizeTests.cs"];
m4_17 [label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="44-44", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", file="StringHumanizeTests.cs"];
m4_18 [label="Assert.Equal(\r\n                ''Underscored input String is turned INTO sentence'',\r\n                ''Underscored_input_String_is_turned_INTO_sentence''.Humanize())", span="46-48", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", file="StringHumanizeTests.cs"];
m4_19 [label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="44-44", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", file="StringHumanizeTests.cs"];
m4_63 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="164-164", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", file="StringHumanizeTests.cs"];
m4_64 [label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''CanHumanizeIntoUpperCase''.Humanize(LetterCasing.AllCaps))", span="166-168", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", file="StringHumanizeTests.cs"];
m4_65 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="164-164", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", file="StringHumanizeTests.cs"];
m4_80 [label="Entry string.Camelize()", span="122-122", cluster="string.Camelize()", file="StringHumanizeTests.cs"];
m4_88 [label="Entry string.Underscore()", span="133-133", cluster="string.Underscore()", file="StringHumanizeTests.cs"];
m4_11 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="30-30", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m4_12 [label="Assert.Equal(''Number is at the end 100'', ''NumberIsAtTheEnd100''.Humanize())", span="32-32", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m4_13 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="30-30", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m4_35 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="92-92", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", file="StringHumanizeTests.cs"];
m4_36 [label="Assert.Equal(\r\n                ''HTML 5'',\r\n                ''HTML5''.Humanize())", span="94-96", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", file="StringHumanizeTests.cs"];
m4_37 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="92-92", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", file="StringHumanizeTests.cs"];
m4_41 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="108-108", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_42 [label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''CanReturnTitleCase''.Humanize(LetterCasing.Title))", span="110-112", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_43 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="108-108", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringHumanizeTests.cs"];
m4_57 [label="Entry Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="148-148", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", file="StringHumanizeTests.cs"];
m4_58 [label="Assert.Equal(\r\n                '''',\r\n                ''''.Humanize(LetterCasing.Sentence))", span="150-152", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", file="StringHumanizeTests.cs"];
m4_59 [label="Exit Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="148-148", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", file="StringHumanizeTests.cs"];
m4_29 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="76-76", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", file="StringHumanizeTests.cs"];
m4_30 [label="Assert.Equal(\r\n                ''HTML is the language'',\r\n                ''HTMLIsTheLanguage''.Humanize())", span="78-80", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", file="StringHumanizeTests.cs"];
m4_31 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="76-76", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", file="StringHumanizeTests.cs"];
m4_0 [label="Entry Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="8-8", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m4_1 [label="Assert.Equal(\r\n                ''Pascal case input string is turned into sentence'',\r\n                ''PascalCaseInputStringIsTurnedIntoSentence''.Humanize())", span="10-12", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m4_2 [label="Exit Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="8-8", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=0, style=solid, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d3  [key=1, style=dashed, color=green, label=string];
d0 -> d4  [key=1, style=dashed, color=green, label=string];
d0 -> d6  [key=1, style=dashed, color=green, label=string];
d0 -> d7  [key=1, style=dashed, color=green, label=int];
d0 -> d8  [key=1, style=dashed, color=green, label=string];
d0 -> d11  [key=1, style=dashed, color=green, label=string];
d0 -> d12  [key=1, style=dashed, color=green, label=string];
d0 -> d16  [key=1, style=dashed, color=green, label=int];
d0 -> d17  [key=1, style=dashed, color=green, label=string];
d0 -> d20  [key=1, style=dashed, color=green, label=string];
d0 -> d2  [key=3, color=green, style=bold, label="method methodReturn string Truncate"];
d0 -> d0  [key=3, color=darkorchid, style=bold, label="method methodReturn string Truncate"];
d2 -> d21  [key=0, style=solid, color=green];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d5  [key=0, style=solid, color=green];
d4 -> d21  [key=0, style=solid, color=green];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d16  [key=1, style=dashed, color=green, label=numberOfWordsProcessed];
d5 -> d5  [key=3, color=green, style=bold, label="Local variable int numberOfWordsProcessed"];
d5 -> d14  [key=1, style=dashed, color=green, label=numberOfWordsProcessed];
d21 -> d0  [key=0, style=bold, color=blue];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d22  [key=2, style=dotted, color=green];
d6 -> d23  [key=2, style=dotted, color=green];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d9  [key=0, style=solid, color=green];
d8 -> d21  [key=0, style=solid, color=green];
d9 -> d9  [key=3, color=green, style=bold, label="Local variable bool lastCharactersWasWhiteSpace"];
d9 -> d10  [key=0, style=solid, color=green];
d9 -> d13  [key=1, style=dashed, color=green, label=lastCharactersWasWhiteSpace];
d11 -> d12  [key=0, style=solid, color=green];
d11 -> d20  [key=0, style=solid, color=green];
d11 -> d5  [key=3, color=green, style=bold, label="Local variable int i"];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d12  [key=1, style=dashed, color=green, label=i];
d10 -> d17  [key=1, style=dashed, color=green, label=i];
d10 -> d19  [key=1, style=dashed, color=green, label=i];
d19 -> d11  [key=0, style=solid, color=green];
d19 -> d19  [key=1, style=dashed, color=green, label=i];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d18  [key=0, style=solid, color=green];
d12 -> d24  [key=2, style=dotted, color=green];
d20 -> d21  [key=0, style=solid, color=green];
d13 -> d14  [key=0, style=solid, color=green];
d13 -> d15  [key=0, style=solid, color=green];
d18 -> d19  [key=0, style=solid, color=green];
d16 -> d17  [key=0, style=solid, color=green];
d16 -> d19  [key=0, style=solid, color=green];
d14 -> d16  [key=1, style=dashed, color=green, label=numberOfWordsProcessed];
d14 -> d14  [key=1, style=dashed, color=green, label=numberOfWordsProcessed];
d14 -> d15  [key=0, style=solid, color=green];
d15 -> d16  [key=0, style=solid, color=green];
d17 -> d21  [key=0, style=solid, color=green];
d17 -> d25  [key=2, style=dotted, color=green];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_3  [key=2, style=dotted];
m2_12 -> m2_4  [key=2, style=dotted];
m2_13 -> m2_11  [key=0, style=bold, color=blue];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_3  [key=2, style=dotted];
m2_6 -> m2_4  [key=2, style=dotted];
m2_7 -> m2_5  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_3  [key=2, style=dotted];
m2_9 -> m2_4  [key=2, style=dotted];
m2_10 -> m2_8  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_5 -> m3_6  [key=0, style=solid, color=red];
m3_6 -> m3_7  [key=0, style=solid, color=red];
m3_6 -> m3_8  [key=2, style=dotted, color=red];
m3_6 -> m3_4  [key=2, style=dotted, color=red];
m3_7 -> m3_5  [key=0, style=bold, color=blue];
m4_85 -> m4_86  [key=0, style=solid, color=red];
m4_86 -> m4_87  [key=0, style=solid, color=red];
m4_86 -> m4_88  [key=2, style=dotted, color=red];
m4_86 -> m4_4  [key=2, style=dotted, color=red];
m4_87 -> m4_85  [key=0, style=bold, color=blue];
m4_45 -> m4_46  [key=0, style=solid];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_44  [key=2, style=dotted];
m4_46 -> m4_4  [key=2, style=dotted];
m4_47 -> m4_45  [key=0, style=bold, color=blue];
m4_54 -> m4_55  [key=0, style=solid];
m4_55 -> m4_56  [key=0, style=solid];
m4_55 -> m4_44  [key=2, style=dotted];
m4_55 -> m4_4  [key=2, style=dotted];
m4_56 -> m4_54  [key=0, style=bold, color=blue];
m4_38 -> m4_39  [key=0, style=solid];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_3  [key=2, style=dotted];
m4_39 -> m4_4  [key=2, style=dotted];
m4_40 -> m4_38  [key=0, style=bold, color=blue];
m4_48 -> m4_49  [key=0, style=solid];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_44  [key=2, style=dotted];
m4_49 -> m4_4  [key=2, style=dotted];
m4_50 -> m4_48  [key=0, style=bold, color=blue];
m4_60 -> m4_61  [key=0, style=solid];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_44  [key=2, style=dotted];
m4_61 -> m4_4  [key=2, style=dotted];
m4_62 -> m4_60  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_3  [key=2, style=dotted];
m4_27 -> m4_4  [key=2, style=dotted];
m4_28 -> m4_26  [key=0, style=bold, color=blue];
m4_51 -> m4_52  [key=0, style=solid];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_44  [key=2, style=dotted];
m4_52 -> m4_4  [key=2, style=dotted];
m4_53 -> m4_51  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_3  [key=2, style=dotted];
m4_6 -> m4_4  [key=2, style=dotted];
m4_7 -> m4_5  [key=0, style=bold, color=blue];
m4_8 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_3  [key=2, style=dotted];
m4_9 -> m4_4  [key=2, style=dotted];
m4_10 -> m4_8  [key=0, style=bold, color=blue];
m4_14 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_3  [key=2, style=dotted];
m4_15 -> m4_4  [key=2, style=dotted];
m4_16 -> m4_14  [key=0, style=bold, color=blue];
m4_69 -> m4_70  [key=0, style=solid, color=red];
m4_70 -> m4_71  [key=0, style=solid, color=red];
m4_70 -> m4_72  [key=2, style=dotted, color=red];
m4_70 -> m4_4  [key=2, style=dotted, color=red];
m4_71 -> m4_69  [key=0, style=bold, color=blue];
m4_20 -> m4_21  [key=0, style=solid];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_3  [key=2, style=dotted];
m4_21 -> m4_4  [key=2, style=dotted];
m4_22 -> m4_20  [key=0, style=bold, color=blue];
m4_23 -> m4_24  [key=0, style=solid];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_3  [key=2, style=dotted];
m4_24 -> m4_4  [key=2, style=dotted];
m4_25 -> m4_23  [key=0, style=bold, color=blue];
m4_66 -> m4_67  [key=0, style=solid];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_44  [key=2, style=dotted];
m4_67 -> m4_4  [key=2, style=dotted];
m4_68 -> m4_66  [key=0, style=bold, color=blue];
m4_73 -> m4_74  [key=0, style=solid, color=red];
m4_74 -> m4_75  [key=0, style=solid, color=red];
m4_74 -> m4_76  [key=2, style=dotted, color=red];
m4_74 -> m4_4  [key=2, style=dotted, color=red];
m4_75 -> m4_73  [key=0, style=bold, color=blue];
m4_77 -> m4_78  [key=0, style=solid, color=red];
m4_78 -> m4_79  [key=0, style=solid, color=red];
m4_78 -> m4_80  [key=2, style=dotted, color=red];
m4_78 -> m4_4  [key=2, style=dotted, color=red];
m4_79 -> m4_77  [key=0, style=bold, color=blue];
m4_32 -> m4_33  [key=0, style=solid];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_3  [key=2, style=dotted];
m4_33 -> m4_4  [key=2, style=dotted];
m4_34 -> m4_32  [key=0, style=bold, color=blue];
m4_81 -> m4_82  [key=0, style=solid, color=red];
m4_82 -> m4_83  [key=0, style=solid, color=red];
m4_82 -> m4_84  [key=2, style=dotted, color=red];
m4_82 -> m4_4  [key=2, style=dotted, color=red];
m4_83 -> m4_81  [key=0, style=bold, color=blue];
m4_17 -> m4_18  [key=0, style=solid];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_3  [key=2, style=dotted];
m4_18 -> m4_4  [key=2, style=dotted];
m4_19 -> m4_17  [key=0, style=bold, color=blue];
m4_63 -> m4_64  [key=0, style=solid];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_44  [key=2, style=dotted];
m4_64 -> m4_4  [key=2, style=dotted];
m4_65 -> m4_63  [key=0, style=bold, color=blue];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_3  [key=2, style=dotted];
m4_12 -> m4_4  [key=2, style=dotted];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_35 -> m4_36  [key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_3  [key=2, style=dotted];
m4_36 -> m4_4  [key=2, style=dotted];
m4_37 -> m4_35  [key=0, style=bold, color=blue];
m4_41 -> m4_42  [key=0, style=solid];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_44  [key=2, style=dotted];
m4_42 -> m4_4  [key=2, style=dotted];
m4_43 -> m4_41  [key=0, style=bold, color=blue];
m4_57 -> m4_58  [key=0, style=solid];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_44  [key=2, style=dotted];
m4_58 -> m4_4  [key=2, style=dotted];
m4_59 -> m4_57  [key=0, style=bold, color=blue];
m4_29 -> m4_30  [key=0, style=solid];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_3  [key=2, style=dotted];
m4_30 -> m4_4  [key=2, style=dotted];
m4_31 -> m4_29  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=2, style=dotted];
m4_1 -> m4_4  [key=2, style=dotted];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
}
