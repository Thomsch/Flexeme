digraph  {
n0 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()"];
n1 [label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0);", span="18-18", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()"];
n2 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()"];
n4 [label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0)", span="18-18", cluster="lambda expression"];
n3 [label="Entry lambda expression", span="18-18", cluster="lambda expression"];
n5 [label="Exit lambda expression", span="18-18", cluster="lambda expression"];
n6 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()"];
n7 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()"];
n8 [label="return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max;", span="23-24", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()"];
n9 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()"];
n11 [label="spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max", span="23-24", cluster="lambda expression"];
n10 [label="Entry lambda expression", span="23-24", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="23-24", cluster="lambda expression"];
n13 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70", cluster="CommandLine.Core.Specification.IsMinNotSpecified()"];
n14 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()"];
n15 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()"];
n16 [label="return spec => spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1;", span="29-29", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", color=red, community=0];
n17 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()"];
n19 [label="spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1", span="29-29", cluster="lambda expression", color=red, community=0];
n18 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
n20 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
n21 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n5 -> n3  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n9 -> n7  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n11 -> n6  [key=2, style=dotted];
n11 -> n13  [key=2, style=dotted];
n11 -> n14  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n12 -> n10  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid, color=red];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n19  [key=1, style=dashed, color=red, label="CommandLine.Core.Specification"];
n17 -> n15  [key=0, style=bold, color=blue];
n19 -> n20  [key=0, style=solid, color=red];
n19 -> n21  [key=2, style=dotted, color=red];
n18 -> n19  [key=0, style=solid, color=red];
n20 -> n18  [key=0, style=bold, color=blue];
}
