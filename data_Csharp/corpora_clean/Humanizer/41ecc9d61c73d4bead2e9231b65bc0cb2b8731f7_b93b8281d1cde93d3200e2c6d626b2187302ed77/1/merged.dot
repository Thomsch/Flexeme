digraph  {
n0 [label="Entry Humanizer.FixedLengthTruncator.Truncate(string, int, string)", span="7-7", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n1 [label="value == null", span="9-9", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n3 [label="value.Length == 0", span="12-12", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n4 [label="return value;", span="13-13", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n5 [label="truncationString == null || truncationString.Length > length", span="15-15", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n6 [label="return value.Substring(0, length);", span="16-16", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n7 [label="return value.Length > length ? value.Substring(0, length - truncationString.Length) + truncationString : value;", span="18-18", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n2 [label="return null;", span="10-10", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n8 [label="Exit Humanizer.FixedLengthTruncator.Truncate(string, int, string)", span="7-7", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)"];
n9 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
d7 [label="return value.Length > length ? value.Substring(0, length - truncationString.Length) + truncationString : value;", span="18-18", cluster="Humanizer.FixedLengthTruncator.Truncate(string, int, string)", color=green, community=0];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n4  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label=int];
n0 -> n6  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n7  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> d7  [key=1, style=dashed, color=green, label=string];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=0, style=solid];
n4 -> n8  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=0, style=solid];
n5 -> d7  [key=0, style=solid, color=green];
n6 -> n8  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=2, style=dotted];
n2 -> n8  [key=0, style=solid];
n8 -> n0  [key=0, style=bold, color=blue];
d7 -> n8  [key=0, style=solid, color=green];
d7 -> n9  [key=2, style=dotted, color=green];
}
