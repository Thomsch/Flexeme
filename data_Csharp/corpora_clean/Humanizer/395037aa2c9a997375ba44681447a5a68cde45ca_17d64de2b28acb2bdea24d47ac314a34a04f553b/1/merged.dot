digraph  {
m1_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_77 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_392 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs"];
m1_393 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs"];
m1_394 [label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs"];
m1_395 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="CultureSpecificTestBase.cs"];
m1_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="CultureSpecificTestBase.cs"];
m1_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_254 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_415 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs"];
m1_416 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs"];
m1_417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs"];
m1_418 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs"];
m1_419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="CultureSpecificTestBase.cs"];
m1_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="CultureSpecificTestBase.cs"];
m1_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="CultureSpecificTestBase.cs"];
m1_11 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="CultureSpecificTestBase.cs"];
m1_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs"];
m1_369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs"];
m1_370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs"];
m1_371 [label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs"];
m1_372 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="CultureSpecificTestBase.cs"];
m1_291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_294 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_427 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="CultureSpecificTestBase.cs"];
m1_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs"];
m1_218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs"];
m1_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs"];
m1_217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs"];
m1_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="CultureSpecificTestBase.cs"];
m1_382 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs"];
m1_383 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs"];
m1_384 [label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs"];
m1_385 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="CultureSpecificTestBase.cs"];
m1_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs"];
m1_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs"];
m1_209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs"];
m1_211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs"];
m1_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="CultureSpecificTestBase.cs"];
m1_275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="CultureSpecificTestBase.cs"];
m1_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs"];
m1_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs"];
m1_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs"];
m1_202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs"];
m1_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="CultureSpecificTestBase.cs"];
m1_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_58 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs"];
m1_374 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="CultureSpecificTestBase.cs"];
m1_307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="CultureSpecificTestBase.cs"];
m1_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs"];
m1_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs"];
m1_103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs"];
m1_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="CultureSpecificTestBase.cs"];
m1_247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="CultureSpecificTestBase.cs"];
m1_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs"];
m1_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs"];
m1_18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs"];
m1_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="CultureSpecificTestBase.cs"];
m1_308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs"];
m1_309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs"];
m1_310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs"];
m1_311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="CultureSpecificTestBase.cs"];
m1_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="CultureSpecificTestBase.cs"];
m1_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="CultureSpecificTestBase.cs"];
m1_346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="CultureSpecificTestBase.cs"];
m1_378 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="CultureSpecificTestBase.cs"];
m1_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_122 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs"];
m1_316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs"];
m1_317 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs"];
m1_318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs"];
m1_319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs"];
m1_320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="CultureSpecificTestBase.cs"];
m1_414 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="CultureSpecificTestBase.cs"];
m1_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="CultureSpecificTestBase.cs"];
m1_271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="CultureSpecificTestBase.cs"];
m1_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs"];
m1_268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs"];
m1_269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs"];
m1_270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="CultureSpecificTestBase.cs"];
m1_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_113 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="CultureSpecificTestBase.cs"];
m1_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_95 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="CultureSpecificTestBase.cs"];
m1_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="CultureSpecificTestBase.cs"];
m1_185 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_14 [label=fakeOptions, span="28-28", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_22 [label="new FakeOptions()", span="49-49", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_46 [label="new FakeOptions()", span="118-118", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_240 [label="new FakeOptions()", span="564-564", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_249 [label="new FakeOptions()", span="583-583", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_257 [label="new FakeOptions()", span="602-602", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_265 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_273 [label="new FakeOptions()", span="641-641", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_289 [label="new FakeOptions()", span="682-682", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_387 [label="new FakeOptions()", span="872-872", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_421 [label="new FakeOptions()", span="943-943", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_13 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_15 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_21 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_23 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_45 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_47 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_239 [label="Entry lambda expression", span="564-564", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_241 [label="Exit lambda expression", span="564-564", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_248 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_250 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_256 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_258 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_264 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_266 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_272 [label="Entry lambda expression", span="641-641", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_274 [label="Exit lambda expression", span="641-641", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_288 [label="Entry lambda expression", span="682-682", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_290 [label="Exit lambda expression", span="682-682", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_386 [label="Entry lambda expression", span="872-872", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_388 [label="Exit lambda expression", span="872-872", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_420 [label="Entry lambda expression", span="943-943", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_422 [label="Exit lambda expression", span="943-943", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_28 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_37 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_52 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_60 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_71 [label="Entry lambda expression", span="182-182", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_80 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_89 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_97 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_106 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_116 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_124 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_132 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_141 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_148 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_156 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_164 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_174 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_177 [label="Entry lambda expression", span="442-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_195 [label="Entry lambda expression", span="467-467", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_205 [label="Entry lambda expression", span="487-487", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_213 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_222 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_230 [label="Entry lambda expression", span="545-545", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_280 [label="Entry lambda expression", span="660-660", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_296 [label="Entry lambda expression", span="701-701", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_304 [label="Entry lambda expression", span="723-723", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_312 [label="Entry lambda expression", span="745-745", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_322 [label="Entry lambda expression", span="765-765", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_332 [label="Entry lambda expression", span="789-789", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_340 [label="Entry lambda expression", span="809-813", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_342 [label="Exit lambda expression", span="809-813", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_343 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_351 [label="Entry lambda expression", span="823-827", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_353 [label="Exit lambda expression", span="823-827", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_354 [label="Entry lambda expression", span="824-824", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_362 [label="Entry lambda expression", span="837-841", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_364 [label="Exit lambda expression", span="837-841", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_365 [label="Entry lambda expression", span="838-838", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_375 [label="Entry lambda expression", span="857-857", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_396 [label="Entry lambda expression", span="888-888", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_404 [label="Entry lambda expression", span="905-905", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_411 [label="Entry lambda expression", span="924-924", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_30 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_39 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_38 [label="new FakeOptionsWithSequence()", span="96-96", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_54 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_62 [label="Exit lambda expression", span="163-163", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_73 [label="Exit lambda expression", span="182-182", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_82 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_91 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_99 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_108 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_107 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_118 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_117 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_126 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_125 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_134 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_133 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_143 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_142 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_150 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_158 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_166 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_176 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_175 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_179 [label="Exit lambda expression", span="442-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_197 [label="Exit lambda expression", span="467-467", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_196 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_207 [label="Exit lambda expression", span="487-487", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_206 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_215 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_214 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_224 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_223 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_232 [label="Exit lambda expression", span="545-545", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_231 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_282 [label="Exit lambda expression", span="660-660", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_281 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_298 [label="Exit lambda expression", span="701-701", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_306 [label="Exit lambda expression", span="723-723", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_305 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_314 [label="Exit lambda expression", span="745-745", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_313 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_324 [label="Exit lambda expression", span="765-765", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_323 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_334 [label="Exit lambda expression", span="789-789", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_333 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_345 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_344 [label="new FakeOptionsWithMinZero()", span="810-810", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_356 [label="Exit lambda expression", span="824-824", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_355 [label="new FakeOptionsWithMaxZero()", span="824-824", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_367 [label="Exit lambda expression", span="838-838", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_366 [label="new FakeOptionsWithMinMaxZero()", span="838-838", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_380 [label="x == expected", span="863-863", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_379 [label="Entry lambda expression", span="863-863", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_377 [label="Exit lambda expression", span="857-857", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_376 [label="new FakeOptionsWithNamedAndEmptySets()", span="857-857", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_390 [label="x == expected", span="878-878", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_389 [label="Entry lambda expression", span="878-878", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_398 [label="Exit lambda expression", span="888-888", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_397 [label="new FakeInterfaceOptions()", span="888-888", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_406 [label="Exit lambda expression", span="905-905", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_405 [label="new FakeOptionsWithRequiredValue()", span="905-905", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_413 [label="Exit lambda expression", span="924-924", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_412 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_181 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_183 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_187 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_381 [label="Exit lambda expression", span="863-863", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_391 [label="Exit lambda expression", span="878-878", cluster="lambda expression", file="CultureSpecificTestBase.cs"];
m1_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs"];
m1_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs"];
m1_67 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs"];
m1_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs"];
m1_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="CultureSpecificTestBase.cs"];
m1_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="CultureSpecificTestBase.cs"];
m1_321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="CultureSpecificTestBase.cs"];
m1_233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="CultureSpecificTestBase.cs"];
m1_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="CultureSpecificTestBase.cs"];
m1_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="CultureSpecificTestBase.cs"];
m1_407 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs"];
m1_408 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs"];
m1_409 [label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs"];
m1_410 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="CultureSpecificTestBase.cs"];
m1_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="CultureSpecificTestBase.cs"];
m1_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="CultureSpecificTestBase.cs"];
m1_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="CultureSpecificTestBase.cs"];
m1_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="CultureSpecificTestBase.cs"];
m1_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="CultureSpecificTestBase.cs"];
m1_326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs"];
m1_327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs"];
m1_328 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs"];
m1_329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs"];
m1_330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs"];
m1_331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="CultureSpecificTestBase.cs"];
m1_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="CultureSpecificTestBase.cs"];
m1_399 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="CultureSpecificTestBase.cs"];
m1_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs"];
m1_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs"];
m1_26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs"];
m1_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="CultureSpecificTestBase.cs"];
m1_357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="CultureSpecificTestBase.cs"];
m1_283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="CultureSpecificTestBase.cs"];
m1_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_43 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="CultureSpecificTestBase.cs"];
m1_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="CultureSpecificTestBase.cs"];
m1_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="CultureSpecificTestBase.cs"];
m1_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="CultureSpecificTestBase.cs"];
m1_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs"];
m1_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs"];
m1_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs"];
m1_138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs"];
m1_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="CultureSpecificTestBase.cs"];
m1_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs"];
m1_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs"];
m1_286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs"];
m1_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="CultureSpecificTestBase.cs"];
m1_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs"];
m1_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs"];
m1_192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs"];
m1_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs"];
m1_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="CultureSpecificTestBase.cs"];
m1_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs"];
m1_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs"];
m1_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs"];
m1_171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs"];
m1_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs"];
m1_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="CultureSpecificTestBase.cs"];
m1_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="CultureSpecificTestBase.cs"];
m1_9 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="CultureSpecificTestBase.cs"];
m1_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_262 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs"];
m1_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs"];
m1_302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs"];
m1_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="CultureSpecificTestBase.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs"];
m1_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="CultureSpecificTestBase.cs"];
m1_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="CultureSpecificTestBase.cs"];
m1_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs"];
m1_4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="CultureSpecificTestBase.cs"];
m1_368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="CultureSpecificTestBase.cs"];
m1_373 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="CultureSpecificTestBase.cs"];
m1_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="CultureSpecificTestBase.cs"];
m1_242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_245 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="CultureSpecificTestBase.cs"];
m1_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="CultureSpecificTestBase.cs"];
m1_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="CultureSpecificTestBase.cs"];
m1_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="CultureSpecificTestBase.cs"];
m1_221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs"];
m1_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs"];
m1_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="CultureSpecificTestBase.cs"];
m1_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="CultureSpecificTestBase.cs"];
m1_325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="CultureSpecificTestBase.cs"];
m1_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_34 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="CultureSpecificTestBase.cs"];
m1_400 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs"];
m1_401 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs"];
m1_402 [label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs"];
m1_403 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="CultureSpecificTestBase.cs"];
m1_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="CultureSpecificTestBase.cs"];
m1_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="CultureSpecificTestBase.cs"];
m1_423 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs"];
m1_424 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs"];
m1_425 [label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs"];
m1_426 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="CultureSpecificTestBase.cs"];
m1_428 [label=fakeOptions, span="", file="CultureSpecificTestBase.cs"];
m1_429 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="CultureSpecificTestBase.cs"];
m1_430 [label=int, span="", file="CultureSpecificTestBase.cs"];
m1_431 [label=int, span="", file="CultureSpecificTestBase.cs"];
m2_4 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="DateHumanizeExtensions.cs"];
m2_5 [label="Entry Unk.>", span="", cluster="Unk.>", file="DateHumanizeExtensions.cs"];
m2_6 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="DateHumanizeExtensions.cs"];
m2_0 [label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="DateHumanizeExtensions.cs"];
m2_1 [label="return from pi in type.GetProperties()\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                        attrs.OfType<OptionAttribute>().Any() ||\r\n                        attrs.OfType<ValueAttribute>().Any()\r\n                   select selector(pi);", span="16-21", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="DateHumanizeExtensions.cs"];
m2_2 [label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="DateHumanizeExtensions.cs"];
m2_12 [label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="35-35", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="DateHumanizeExtensions.cs"];
m2_13 [label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="41-47", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", color=green, community=0, file="DateHumanizeExtensions.cs"];
m2_14 [label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="35-35", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="DateHumanizeExtensions.cs"];
m2_35 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="DateHumanizeExtensions.cs"];
m2_40 [label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0", cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="DateHumanizeExtensions.cs"];
m2_7 [label="Entry Unk.selector", span="", cluster="Unk.selector", file="DateHumanizeExtensions.cs"];
m2_21 [label="Entry Unk.SetValue", span="", cluster="Unk.SetValue", file="DateHumanizeExtensions.cs"];
m2_3 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="DateHumanizeExtensions.cs"];
m2_36 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="DateHumanizeExtensions.cs"];
m2_22 [label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="50-50", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_26 [label="fail(e)", span="60-60", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="DateHumanizeExtensions.cs"];
m2_23 [label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="52-52", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_25 [label=TargetException, span="58-58", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_33 [label="return instance;", span="75-75", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_30 [label="fail(e)", span="68-68", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="DateHumanizeExtensions.cs"];
m2_29 [label=MethodAccessException, span="66-66", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_32 [label="fail(e)", span="72-72", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="DateHumanizeExtensions.cs"];
m2_31 [label=TargetInvocationException, span="70-70", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_24 [label="property.SetValue(instance, value, null)", span="56-56", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_28 [label="fail(e)", span="64-64", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_27 [label=TargetParameterCountException, span="62-62", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_34 [label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="50-50", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="DateHumanizeExtensions.cs"];
m2_37 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="DateHumanizeExtensions.cs"];
m2_17 [label="Entry lambda expression", span="43-47", cluster="lambda expression", file="DateHumanizeExtensions.cs"];
m2_18 [label="specProp.Property.SetValue(current, selector(specProp))", span="45-45", cluster="lambda expression", color=green, community=0, file="DateHumanizeExtensions.cs"];
m2_19 [label="return instance;", span="46-46", cluster="lambda expression", file="DateHumanizeExtensions.cs"];
m2_20 [label="Exit lambda expression", span="43-47", cluster="lambda expression", file="DateHumanizeExtensions.cs"];
m2_38 [label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="52-52", cluster="lambda expression", file="DateHumanizeExtensions.cs"];
m2_39 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="DateHumanizeExtensions.cs"];
m2_15 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="DateHumanizeExtensions.cs"];
m2_16 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate", file="DateHumanizeExtensions.cs"];
m2_69 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span="", file="DateHumanizeExtensions.cs"];
m2_70 [label=T, span="", file="DateHumanizeExtensions.cs"];
m10_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_77 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="NumberToTimeSpanExtensions.cs"];
m10_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_254 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_335 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_336 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_337 [label="Assert.Throws<ApplicationException>(test)", span="816-816", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_338 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NumberToTimeSpanExtensions.cs"];
m10_407 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs"];
m10_408 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="923-923", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs"];
m10_409 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="926-930", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs"];
m10_410 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="933-933", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs"];
m10_411 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="NumberToTimeSpanExtensions.cs"];
m10_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="NumberToTimeSpanExtensions.cs"];
m10_11 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="NumberToTimeSpanExtensions.cs"];
m10_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_371 [label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_372 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_294 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_419 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NumberToTimeSpanExtensions.cs"];
m10_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_382 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_383 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_384 [label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_385 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="NumberToTimeSpanExtensions.cs"];
m10_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="NumberToTimeSpanExtensions.cs"];
m10_275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NumberToTimeSpanExtensions.cs"];
m10_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs"];
m10_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs"];
m10_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs"];
m10_202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs"];
m10_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="NumberToTimeSpanExtensions.cs"];
m10_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_58 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_374 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="NumberToTimeSpanExtensions.cs"];
m10_307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="NumberToTimeSpanExtensions.cs"];
m10_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs"];
m10_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs"];
m10_103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs"];
m10_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="NumberToTimeSpanExtensions.cs"];
m10_247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="NumberToTimeSpanExtensions.cs"];
m10_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs"];
m10_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs"];
m10_18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs"];
m10_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="NumberToTimeSpanExtensions.cs"];
m10_308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs"];
m10_309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs"];
m10_310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs"];
m10_311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="NumberToTimeSpanExtensions.cs"];
m10_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="NumberToTimeSpanExtensions.cs"];
m10_346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="NumberToTimeSpanExtensions.cs"];
m10_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="NumberToTimeSpanExtensions.cs"];
m10_378 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="NumberToTimeSpanExtensions.cs"];
m10_347 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_348 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_349 [label="Assert.Throws<ApplicationException>(test)", span="830-830", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_350 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_122 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_317 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_406 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="NumberToTimeSpanExtensions.cs"];
m10_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="NumberToTimeSpanExtensions.cs"];
m10_271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="NumberToTimeSpanExtensions.cs"];
m10_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_113 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="NumberToTimeSpanExtensions.cs"];
m10_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_95 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="NumberToTimeSpanExtensions.cs"];
m10_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="NumberToTimeSpanExtensions.cs"];
m10_412 [label="Entry lambda expression", span="927-927", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_14 [label=fakeOptions, span="28-28", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_13 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_15 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_21 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_22 [label="new FakeOptions()", span="49-49", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_23 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_28 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_30 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_37 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_38 [label="new FakeOptionsWithSequence()", span="96-96", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_39 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_45 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_46 [label="new FakeOptions()", span="118-118", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_47 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_52 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_54 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_60 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_62 [label="Exit lambda expression", span="163-163", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_71 [label="Entry lambda expression", span="182-182", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_73 [label="Exit lambda expression", span="182-182", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_80 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_82 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_89 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_91 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_97 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_99 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_106 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_107 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_108 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_116 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_117 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_118 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_124 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_125 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_126 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_132 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_133 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_134 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_141 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_142 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_143 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_148 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_150 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_156 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_158 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_164 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_166 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_174 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_177 [label="Entry lambda expression", span="442-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_175 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_176 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_179 [label="Exit lambda expression", span="442-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_181 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_183 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_185 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_187 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_195 [label="Entry lambda expression", span="467-467", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_196 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_197 [label="Exit lambda expression", span="467-467", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_205 [label="Entry lambda expression", span="487-487", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_206 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_207 [label="Exit lambda expression", span="487-487", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_213 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_214 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_215 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_222 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_223 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_224 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_230 [label="Entry lambda expression", span="545-545", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_231 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_232 [label="Exit lambda expression", span="545-545", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_239 [label="Entry lambda expression", span="564-564", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_240 [label="new FakeOptions()", span="564-564", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_241 [label="Exit lambda expression", span="564-564", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_248 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_249 [label="new FakeOptions()", span="583-583", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_250 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_256 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_257 [label="new FakeOptions()", span="602-602", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_258 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_264 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_265 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_266 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_272 [label="Entry lambda expression", span="641-641", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_273 [label="new FakeOptions()", span="641-641", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_274 [label="Exit lambda expression", span="641-641", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_280 [label="Entry lambda expression", span="660-660", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_281 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_282 [label="Exit lambda expression", span="660-660", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_288 [label="Entry lambda expression", span="682-682", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_289 [label="new FakeOptions()", span="682-682", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_290 [label="Exit lambda expression", span="682-682", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_296 [label="Entry lambda expression", span="701-701", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_298 [label="Exit lambda expression", span="701-701", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_304 [label="Entry lambda expression", span="723-723", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_305 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_306 [label="Exit lambda expression", span="723-723", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_312 [label="Entry lambda expression", span="745-745", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_313 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_314 [label="Exit lambda expression", span="745-745", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_322 [label="Entry lambda expression", span="765-765", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_323 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_324 [label="Exit lambda expression", span="765-765", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_332 [label="Entry lambda expression", span="789-789", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_333 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_334 [label="Exit lambda expression", span="789-789", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_340 [label="Entry lambda expression", span="809-813", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_342 [label="Exit lambda expression", span="809-813", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_343 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_344 [label="new FakeOptionsWithMinZero()", span="810-810", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_345 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_351 [label="Entry lambda expression", span="823-827", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_353 [label="Exit lambda expression", span="823-827", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_354 [label="Entry lambda expression", span="824-824", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_355 [label="new FakeOptionsWithMaxZero()", span="824-824", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_356 [label="Exit lambda expression", span="824-824", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_362 [label="Entry lambda expression", span="837-841", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_364 [label="Exit lambda expression", span="837-841", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_365 [label="Entry lambda expression", span="838-838", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_366 [label="new FakeOptionsWithMinMaxZero()", span="838-838", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_367 [label="Exit lambda expression", span="838-838", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_380 [label="x == expected", span="863-863", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_375 [label="Entry lambda expression", span="857-857", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_379 [label="Entry lambda expression", span="863-863", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_376 [label="new FakeOptionsWithNamedAndEmptySets()", span="857-857", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_377 [label="Exit lambda expression", span="857-857", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_381 [label="Exit lambda expression", span="863-863", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_390 [label="x == expected", span="878-878", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_386 [label="Entry lambda expression", span="872-872", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_389 [label="Entry lambda expression", span="878-878", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_387 [label="new FakeOptions()", span="872-872", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_388 [label="Exit lambda expression", span="872-872", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_391 [label="Exit lambda expression", span="878-878", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_396 [label="Entry lambda expression", span="889-889", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_397 [label="new FakeOptionsWithRequiredValue()", span="889-889", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_398 [label="Exit lambda expression", span="889-889", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_403 [label="Entry lambda expression", span="908-908", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_404 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="908-908", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_405 [label="Exit lambda expression", span="908-908", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_413 [label="new FakeOptions()", span="927-927", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_414 [label="Exit lambda expression", span="927-927", cluster="lambda expression", file="NumberToTimeSpanExtensions.cs"];
m10_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_67 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="NumberToTimeSpanExtensions.cs"];
m10_233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="NumberToTimeSpanExtensions.cs"];
m10_321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="NumberToTimeSpanExtensions.cs"];
m10_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="NumberToTimeSpanExtensions.cs"];
m10_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NumberToTimeSpanExtensions.cs"];
m10_399 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs"];
m10_400 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="907-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs"];
m10_401 [label="expected.ShouldBeEquivalentTo(result.Value)", span="914-914", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs"];
m10_402 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="NumberToTimeSpanExtensions.cs"];
m10_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="NumberToTimeSpanExtensions.cs"];
m10_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="NumberToTimeSpanExtensions.cs"];
m10_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="NumberToTimeSpanExtensions.cs"];
m10_358 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_359 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_360 [label="Assert.Throws<ApplicationException>(test)", span="844-844", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_361 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="NumberToTimeSpanExtensions.cs"];
m10_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="NumberToTimeSpanExtensions.cs"];
m10_326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_328 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="NumberToTimeSpanExtensions.cs"];
m10_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="NumberToTimeSpanExtensions.cs"];
m10_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs"];
m10_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs"];
m10_26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs"];
m10_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="NumberToTimeSpanExtensions.cs"];
m10_357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="NumberToTimeSpanExtensions.cs"];
m10_283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="NumberToTimeSpanExtensions.cs"];
m10_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_43 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="NumberToTimeSpanExtensions.cs"];
m10_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="NumberToTimeSpanExtensions.cs"];
m10_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="NumberToTimeSpanExtensions.cs"];
m10_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs"];
m10_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs"];
m10_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs"];
m10_138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs"];
m10_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="NumberToTimeSpanExtensions.cs"];
m10_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="NumberToTimeSpanExtensions.cs"];
m10_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs"];
m10_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs"];
m10_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs"];
m10_192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs"];
m10_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="NumberToTimeSpanExtensions.cs"];
m10_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs"];
m10_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs"];
m10_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs"];
m10_171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs"];
m10_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs"];
m10_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="NumberToTimeSpanExtensions.cs"];
m10_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="NumberToTimeSpanExtensions.cs"];
m10_9 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NumberToTimeSpanExtensions.cs"];
m10_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_262 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs"];
m10_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs"];
m10_302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs"];
m10_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="NumberToTimeSpanExtensions.cs"];
m10_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs"];
m10_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs"];
m10_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs"];
m10_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs"];
m10_4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs"];
m10_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="NumberToTimeSpanExtensions.cs"];
m10_368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="NumberToTimeSpanExtensions.cs"];
m10_373 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="NumberToTimeSpanExtensions.cs"];
m10_339 [label="Entry Unk.>", span="", cluster="Unk.>", file="NumberToTimeSpanExtensions.cs"];
m10_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="NumberToTimeSpanExtensions.cs"];
m10_242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_245 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="NumberToTimeSpanExtensions.cs"];
m10_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="NumberToTimeSpanExtensions.cs"];
m10_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="NumberToTimeSpanExtensions.cs"];
m10_221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="NumberToTimeSpanExtensions.cs"];
m10_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="NumberToTimeSpanExtensions.cs"];
m10_325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="NumberToTimeSpanExtensions.cs"];
m10_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_34 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="NumberToTimeSpanExtensions.cs"];
m10_392 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs"];
m10_393 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="888-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs"];
m10_394 [label="expected.ShouldBeEquivalentTo(result.Value)", span="895-895", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs"];
m10_395 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="NumberToTimeSpanExtensions.cs"];
m10_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="NumberToTimeSpanExtensions.cs"];
m10_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="NumberToTimeSpanExtensions.cs"];
m10_415 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs"];
m10_416 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="945-949", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs"];
m10_417 [label="expected.ShouldBeEquivalentTo(result.Value)", span="952-952", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs"];
m10_418 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="NumberToTimeSpanExtensions.cs"];
m10_420 [label=fakeOptions, span="", file="NumberToTimeSpanExtensions.cs"];
m10_421 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="NumberToTimeSpanExtensions.cs"];
m10_422 [label=int, span="", file="NumberToTimeSpanExtensions.cs"];
m10_423 [label=int, span="", file="NumberToTimeSpanExtensions.cs"];
m18_35 [label="Entry System.Math.Abs(int)", span="0-0", cluster="System.Math.Abs(int)", file="Resources.Designer.cs"];
m18_41 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="Resources.Designer.cs"];
m18_37 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Resources.Designer.cs"];
m18_60 [label="Entry string.EndsWith(string)", span="0-0", cluster="string.EndsWith(string)", file="Resources.Designer.cs"];
m18_42 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="Resources.Designer.cs"];
m18_0 [label="Entry Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", span="17-17", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_1 [label="number == 0", span="19-19", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_3 [label="number < 0", span="22-22", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_4 [label="return string.Format(''moins {0}'', Convert(Math.Abs(number)));", span="23-23", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_6 [label="(number / 1000000000) > 0", span="27-27", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_7 [label="parts.Add(string.Format(''{0} milliard{1}'',\r\n                    Convert(number/1000000000),\r\n                    number/1000000000 == 1 ? '''' : ''s''))", span="29-31", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_8 [label="number %= 1000000000", span="33-33", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_9 [label="(number / 1000000) > 0", span="36-36", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_10 [label="parts.Add(string.Format(''{0} million{1}'',\r\n                    Convert(number/1000000),\r\n                    number/1000000 == 1 ? '''' : ''s''))", span="38-40", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_11 [label="number %= 1000000", span="42-42", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_12 [label="(number / 1000) > 0", span="45-45", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_13 [label="parts.Add(number/1000 == 1\r\n                    ? string.Format(''mille'')\r\n                    : string.Format(''{0} mille'', Convert(number/1000)))", span="47-49", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_14 [label="number %= 1000", span="51-51", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_15 [label="(number / 100) > 0", span="54-54", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_16 [label="parts.Add(number < 200 ? ''cent'' : string.Format(''{0} cent'', Convert(number/100)))", span="56-56", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_17 [label="number %= 100", span="57-57", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_18 [label="number > 0", span="60-60", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_19 [label="NumberExceptions.ContainsKey(number)", span="62-62", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_20 [label="parts.Add(NumberExceptions[number])", span="63-63", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_21 [label="number < 20", span="64-64", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_22 [label="parts.Add(UnitsMap[number])", span="65-65", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_24 [label="number >= 70 && (number < 80 || number >= 90)", span="69-69", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_25 [label="int baseNumber = number < 80 ? 60 : 80", span="71-71", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_26 [label="lastPart = string.Format(''{0}-{1}'', TensMap[baseNumber/10], Convert(number - baseNumber))", span="72-72", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_27 [label="lastPart = TensMap[number/10]", span="76-76", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_28 [label="(number%10) > 0", span="77-77", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_29 [label="(number - 1) % 10 == 0", span="79-79", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_31 [label="lastPart += string.Format(''-{0}'', UnitsMap[number%10])", span="82-82", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_2 [label="return UnitsMap[0];", span="20-20", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_5 [label="var parts = new List<string>()", span="25-25", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_32 [label="parts.Add(lastPart)", span="85-85", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_33 [label="return string.Join('' '', parts.ToArray());", span="89-89", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_23 [label="string lastPart", span="68-68", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_30 [label="lastPart += '' et un''", span="80-80", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_34 [label="Exit Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", span="17-17", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.Convert(int)", file="Resources.Designer.cs"];
m18_39 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Resources.Designer.cs"];
m18_38 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="Resources.Designer.cs"];
m18_44 [label="Entry Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", span="92-92", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_45 [label="number == 1", span="94-94", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_47 [label="var convertedNumber = Convert(number)", span="97-97", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_46 [label="return ''premier'';", span="95-95", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_48 [label="convertedNumber.EndsWith(''s'') && !convertedNumber.EndsWith(''trois'')", span="99-99", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_49 [label="convertedNumber = convertedNumber.TrimEnd('s')", span="100-100", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_50 [label="convertedNumber.EndsWith(''cinq'')", span="101-101", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_51 [label="convertedNumber += ''u''", span="102-102", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_52 [label="convertedNumber.EndsWith(''neuf'')", span="103-103", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_53 [label="convertedNumber = convertedNumber.TrimEnd('f') + ''v''", span="104-104", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_54 [label="convertedNumber.StartsWith(''un '')", span="106-106", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_55 [label="convertedNumber = convertedNumber.Remove(0, 3)", span="107-107", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_56 [label="convertedNumber = convertedNumber.TrimEnd('e')", span="109-109", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_57 [label="convertedNumber += ''ième''", span="110-110", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", color=red, community=0, file="Resources.Designer.cs"];
m18_58 [label="return convertedNumber;", span="111-111", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_59 [label="Exit Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", span="92-92", cluster="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter.ConvertToOrdinal(int)", file="Resources.Designer.cs"];
m18_40 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])", file="Resources.Designer.cs"];
m18_43 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="Resources.Designer.cs"];
m18_62 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)", file="Resources.Designer.cs"];
m18_63 [label="Entry string.Remove(int, int)", span="0-0", cluster="string.Remove(int, int)", file="Resources.Designer.cs"];
m18_61 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])", file="Resources.Designer.cs"];
m18_36 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="Resources.Designer.cs"];
m18_64 [label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter", span="", file="Resources.Designer.cs"];
m1_74 -> m1_75  [key=0, style=solid];
m1_76 -> m1_9  [key=2, style=dotted];
m1_76 -> m1_10  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_77 -> m1_12  [key=2, style=dotted];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_36  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_75 -> m1_79  [key=2, style=dotted];
m1_78 -> m1_74  [key=0, style=bold, color=blue];
m1_392 -> m1_393  [key=0, style=solid];
m1_392 -> m1_394  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_393 -> m1_9  [key=2, style=dotted];
m1_393 -> m1_10  [key=2, style=dotted];
m1_393 -> m1_394  [key=0, style=solid];
m1_393 -> m1_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_394 -> m1_105  [key=2, style=dotted];
m1_394 -> m1_395  [key=0, style=solid];
m1_395 -> m1_392  [key=0, style=bold, color=blue];
m1_251 -> m1_252  [key=0, style=solid];
m1_253 -> m1_9  [key=2, style=dotted];
m1_253 -> m1_10  [key=2, style=dotted];
m1_253 -> m1_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_253 -> m1_254  [key=0, style=solid];
m1_254 -> m1_12  [key=2, style=dotted];
m1_254 -> m1_255  [key=0, style=solid];
m1_254 -> m1_36  [key=2, style=dotted];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_252 -> m1_247  [key=2, style=dotted];
m1_255 -> m1_251  [key=0, style=bold, color=blue];
m1_415 -> m1_416  [key=0, style=solid];
m1_416 -> m1_6  [key=2, style=dotted];
m1_416 -> m1_417  [key=0, style=solid];
m1_416 -> m1_418  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_417 -> m1_9  [key=2, style=dotted];
m1_417 -> m1_10  [key=2, style=dotted];
m1_417 -> m1_418  [key=0, style=solid];
m1_417 -> m1_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_418 -> m1_419  [key=0, style=solid];
m1_418 -> m1_105  [key=2, style=dotted];
m1_419 -> m1_415  [key=0, style=bold, color=blue];
m1_369 -> m1_370  [key=0, style=solid];
m1_369 -> m1_371  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_369 -> m1_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_370 -> m1_9  [key=2, style=dotted];
m1_370 -> m1_10  [key=2, style=dotted];
m1_370 -> m1_371  [key=0, style=solid];
m1_370 -> m1_375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_371 -> m1_372  [key=0, style=solid];
m1_371 -> m1_373  [key=2, style=dotted];
m1_371 -> m1_374  [key=2, style=dotted];
m1_371 -> m1_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_372 -> m1_369  [key=0, style=bold, color=blue];
m1_291 -> m1_292  [key=0, style=solid];
m1_293 -> m1_9  [key=2, style=dotted];
m1_293 -> m1_10  [key=2, style=dotted];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_294 -> m1_12  [key=2, style=dotted];
m1_294 -> m1_295  [key=0, style=solid];
m1_294 -> m1_36  [key=2, style=dotted];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_292 -> m1_79  [key=2, style=dotted];
m1_295 -> m1_291  [key=0, style=bold, color=blue];
m1_216 -> m1_217  [key=0, style=solid];
m1_218 -> m1_9  [key=2, style=dotted];
m1_218 -> m1_10  [key=2, style=dotted];
m1_218 -> m1_219  [key=0, style=solid];
m1_218 -> m1_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_219 -> m1_12  [key=2, style=dotted];
m1_219 -> m1_220  [key=0, style=solid];
m1_219 -> m1_36  [key=2, style=dotted];
m1_217 -> m1_218  [key=0, style=solid];
m1_217 -> m1_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_217 -> m1_221  [key=2, style=dotted];
m1_217 -> m1_70  [key=2, style=dotted];
m1_220 -> m1_216  [key=0, style=bold, color=blue];
m1_382 -> m1_383  [key=0, style=solid];
m1_382 -> m1_384  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_382 -> m1_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_383 -> m1_9  [key=2, style=dotted];
m1_383 -> m1_10  [key=2, style=dotted];
m1_383 -> m1_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_383 -> m1_384  [key=0, style=solid];
m1_384 -> m1_385  [key=0, style=solid];
m1_384 -> m1_373  [key=2, style=dotted];
m1_384 -> m1_374  [key=2, style=dotted];
m1_384 -> m1_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_385 -> m1_382  [key=0, style=bold, color=blue];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_145 -> m1_9  [key=2, style=dotted];
m1_145 -> m1_10  [key=2, style=dotted];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_146 -> m1_105  [key=2, style=dotted];
m1_146 -> m1_147  [key=0, style=solid];
m1_147 -> m1_144  [key=0, style=bold, color=blue];
m1_208 -> m1_209  [key=0, style=solid];
m1_210 -> m1_9  [key=2, style=dotted];
m1_210 -> m1_10  [key=2, style=dotted];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_204  [key=2, style=dotted];
m1_209 -> m1_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_211 -> m1_105  [key=2, style=dotted];
m1_211 -> m1_212  [key=0, style=solid];
m1_212 -> m1_208  [key=0, style=bold, color=blue];
m1_275 -> m1_276  [key=0, style=solid];
m1_277 -> m1_9  [key=2, style=dotted];
m1_277 -> m1_10  [key=2, style=dotted];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_278 -> m1_12  [key=2, style=dotted];
m1_278 -> m1_279  [key=0, style=solid];
m1_278 -> m1_36  [key=2, style=dotted];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_276 -> m1_221  [key=2, style=dotted];
m1_279 -> m1_275  [key=0, style=bold, color=blue];
m1_199 -> m1_200  [key=0, style=solid];
m1_201 -> m1_9  [key=2, style=dotted];
m1_201 -> m1_10  [key=2, style=dotted];
m1_201 -> m1_202  [key=0, style=solid];
m1_201 -> m1_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_204  [key=2, style=dotted];
m1_200 -> m1_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_202 -> m1_105  [key=2, style=dotted];
m1_202 -> m1_203  [key=0, style=solid];
m1_203 -> m1_199  [key=0, style=bold, color=blue];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_57 -> m1_9  [key=2, style=dotted];
m1_57 -> m1_10  [key=2, style=dotted];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_58 -> m1_12  [key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_36  [key=2, style=dotted];
m1_59 -> m1_56  [key=0, style=bold, color=blue];
m1_101 -> m1_102  [key=0, style=solid];
m1_101 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_102 -> m1_9  [key=2, style=dotted];
m1_102 -> m1_10  [key=2, style=dotted];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_103 -> m1_105  [key=2, style=dotted];
m1_103 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_103 -> m1_104  [key=0, style=solid];
m1_104 -> m1_101  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m1_17 -> m1_9  [key=2, style=dotted];
m1_17 -> m1_10  [key=2, style=dotted];
m1_17 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_19 -> m1_16  [key=0, style=bold, color=blue];
m1_308 -> m1_309  [key=0, style=solid];
m1_308 -> m1_310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m1_309 -> m1_9  [key=2, style=dotted];
m1_309 -> m1_10  [key=2, style=dotted];
m1_309 -> m1_310  [key=0, style=solid];
m1_309 -> m1_312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_310 -> m1_105  [key=2, style=dotted];
m1_310 -> m1_311  [key=0, style=solid];
m1_311 -> m1_308  [key=0, style=bold, color=blue];
m1_119 -> m1_120  [key=0, style=solid];
m1_121 -> m1_9  [key=2, style=dotted];
m1_121 -> m1_10  [key=2, style=dotted];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_122 -> m1_12  [key=2, style=dotted];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_36  [key=2, style=dotted];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_120 -> m1_115  [key=2, style=dotted];
m1_120 -> m1_70  [key=2, style=dotted];
m1_123 -> m1_119  [key=0, style=bold, color=blue];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_318  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_315 -> m1_319  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_316 -> m1_9  [key=2, style=dotted];
m1_316 -> m1_10  [key=2, style=dotted];
m1_316 -> m1_317  [key=0, style=solid];
m1_316 -> m1_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_316 -> m1_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_316 -> m1_319  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_317 -> m1_318  [key=0, style=solid];
m1_317 -> m1_319  [key=0, style=solid];
m1_318 -> m1_105  [key=2, style=dotted];
m1_318 -> m1_319  [key=0, style=solid];
m1_319 -> m1_105  [key=2, style=dotted];
m1_319 -> m1_320  [key=0, style=solid];
m1_319 -> m1_321  [key=2, style=dotted];
m1_320 -> m1_315  [key=0, style=bold, color=blue];
m1_267 -> m1_268  [key=0, style=solid];
m1_267 -> m1_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_268 -> m1_9  [key=2, style=dotted];
m1_268 -> m1_10  [key=2, style=dotted];
m1_268 -> m1_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_268 -> m1_269  [key=0, style=solid];
m1_269 -> m1_12  [key=2, style=dotted];
m1_269 -> m1_270  [key=0, style=solid];
m1_269 -> m1_271  [key=2, style=dotted];
m1_270 -> m1_267  [key=0, style=bold, color=blue];
m1_127 -> m1_128  [key=0, style=solid];
m1_129 -> m1_9  [key=2, style=dotted];
m1_129 -> m1_10  [key=2, style=dotted];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_130 -> m1_12  [key=2, style=dotted];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_36  [key=2, style=dotted];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_128 -> m1_115  [key=2, style=dotted];
m1_128 -> m1_70  [key=2, style=dotted];
m1_131 -> m1_127  [key=0, style=bold, color=blue];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_161 -> m1_9  [key=2, style=dotted];
m1_161 -> m1_10  [key=2, style=dotted];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_162 -> m1_105  [key=2, style=dotted];
m1_162 -> m1_163  [key=0, style=solid];
m1_163 -> m1_160  [key=0, style=bold, color=blue];
m1_110 -> m1_111  [key=0, style=solid];
m1_112 -> m1_9  [key=2, style=dotted];
m1_112 -> m1_10  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_113 -> m1_12  [key=2, style=dotted];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_36  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_111 -> m1_115  [key=2, style=dotted];
m1_111 -> m1_70  [key=2, style=dotted];
m1_114 -> m1_110  [key=0, style=bold, color=blue];
m1_92 -> m1_93  [key=0, style=solid];
m1_94 -> m1_9  [key=2, style=dotted];
m1_94 -> m1_10  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_95 -> m1_12  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_36  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_93 -> m1_79  [key=2, style=dotted];
m1_96 -> m1_92  [key=0, style=bold, color=blue];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_49 -> m1_9  [key=2, style=dotted];
m1_49 -> m1_10  [key=2, style=dotted];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_50 -> m1_12  [key=2, style=dotted];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_36  [key=2, style=dotted];
m1_51 -> m1_48  [key=0, style=bold, color=blue];
m1_185 -> m1_186  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_22 -> m1_6  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_46 -> m1_6  [key=2, style=dotted];
m1_46 -> m1_47  [key=0, style=solid];
m1_240 -> m1_6  [key=2, style=dotted];
m1_240 -> m1_241  [key=0, style=solid];
m1_249 -> m1_6  [key=2, style=dotted];
m1_249 -> m1_250  [key=0, style=solid];
m1_257 -> m1_6  [key=2, style=dotted];
m1_257 -> m1_258  [key=0, style=solid];
m1_265 -> m1_6  [key=2, style=dotted];
m1_265 -> m1_266  [key=0, style=solid];
m1_273 -> m1_6  [key=2, style=dotted];
m1_273 -> m1_274  [key=0, style=solid];
m1_289 -> m1_6  [key=2, style=dotted];
m1_289 -> m1_290  [key=0, style=solid];
m1_387 -> m1_6  [key=2, style=dotted];
m1_387 -> m1_388  [key=0, style=solid];
m1_421 -> m1_6  [key=2, style=dotted];
m1_421 -> m1_422  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_15 -> m1_13  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_23 -> m1_21  [key=0, style=bold, color=blue];
m1_45 -> m1_46  [key=0, style=solid];
m1_47 -> m1_45  [key=0, style=bold, color=blue];
m1_239 -> m1_240  [key=0, style=solid];
m1_241 -> m1_239  [key=0, style=bold, color=blue];
m1_248 -> m1_249  [key=0, style=solid];
m1_250 -> m1_248  [key=0, style=bold, color=blue];
m1_256 -> m1_257  [key=0, style=solid];
m1_258 -> m1_256  [key=0, style=bold, color=blue];
m1_264 -> m1_265  [key=0, style=solid];
m1_266 -> m1_264  [key=0, style=bold, color=blue];
m1_272 -> m1_273  [key=0, style=solid];
m1_274 -> m1_272  [key=0, style=bold, color=blue];
m1_288 -> m1_289  [key=0, style=solid];
m1_290 -> m1_288  [key=0, style=bold, color=blue];
m1_386 -> m1_387  [key=0, style=solid];
m1_388 -> m1_386  [key=0, style=bold, color=blue];
m1_420 -> m1_421  [key=0, style=solid];
m1_422 -> m1_420  [key=0, style=bold, color=blue];
m1_341 -> m1_9  [key=2, style=dotted];
m1_341 -> m1_10  [key=2, style=dotted];
m1_341 -> m1_342  [key=0, style=solid];
m1_341 -> m1_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_352 -> m1_9  [key=2, style=dotted];
m1_352 -> m1_10  [key=2, style=dotted];
m1_352 -> m1_353  [key=0, style=solid];
m1_352 -> m1_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_363 -> m1_9  [key=2, style=dotted];
m1_363 -> m1_10  [key=2, style=dotted];
m1_363 -> m1_364  [key=0, style=solid];
m1_363 -> m1_365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_28 -> m1_29  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_52 -> m1_53  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_80 -> m1_81  [key=0, style=solid];
m1_89 -> m1_90  [key=0, style=solid];
m1_97 -> m1_98  [key=0, style=solid];
m1_106 -> m1_107  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_141 -> m1_142  [key=0, style=solid];
m1_148 -> m1_149  [key=0, style=solid];
m1_156 -> m1_157  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_174 -> m1_175  [key=0, style=solid];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_177 -> m1_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_195 -> m1_196  [key=0, style=solid];
m1_205 -> m1_206  [key=0, style=solid];
m1_213 -> m1_214  [key=0, style=solid];
m1_222 -> m1_223  [key=0, style=solid];
m1_230 -> m1_231  [key=0, style=solid];
m1_280 -> m1_281  [key=0, style=solid];
m1_296 -> m1_297  [key=0, style=solid];
m1_304 -> m1_305  [key=0, style=solid];
m1_312 -> m1_313  [key=0, style=solid];
m1_322 -> m1_323  [key=0, style=solid];
m1_332 -> m1_333  [key=0, style=solid];
m1_340 -> m1_341  [key=0, style=solid];
m1_342 -> m1_340  [key=0, style=bold, color=blue];
m1_343 -> m1_344  [key=0, style=solid];
m1_351 -> m1_352  [key=0, style=solid];
m1_353 -> m1_351  [key=0, style=bold, color=blue];
m1_354 -> m1_355  [key=0, style=solid];
m1_362 -> m1_363  [key=0, style=solid];
m1_364 -> m1_362  [key=0, style=bold, color=blue];
m1_365 -> m1_366  [key=0, style=solid];
m1_375 -> m1_376  [key=0, style=solid];
m1_396 -> m1_397  [key=0, style=solid];
m1_404 -> m1_405  [key=0, style=solid];
m1_411 -> m1_412  [key=0, style=solid];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=2, style=dotted];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_54 -> m1_52  [key=0, style=bold, color=blue];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=2, style=dotted];
m1_62 -> m1_60  [key=0, style=bold, color=blue];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_63  [key=2, style=dotted];
m1_73 -> m1_71  [key=0, style=bold, color=blue];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_55  [key=2, style=dotted];
m1_82 -> m1_80  [key=0, style=bold, color=blue];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_83  [key=2, style=dotted];
m1_91 -> m1_89  [key=0, style=bold, color=blue];
m1_90 -> m1_91  [key=0, style=solid];
m1_90 -> m1_63  [key=2, style=dotted];
m1_99 -> m1_97  [key=0, style=bold, color=blue];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_100  [key=2, style=dotted];
m1_108 -> m1_106  [key=0, style=bold, color=blue];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_109  [key=2, style=dotted];
m1_118 -> m1_116  [key=0, style=bold, color=blue];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_109  [key=2, style=dotted];
m1_126 -> m1_124  [key=0, style=bold, color=blue];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_109  [key=2, style=dotted];
m1_134 -> m1_132  [key=0, style=bold, color=blue];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_109  [key=2, style=dotted];
m1_143 -> m1_141  [key=0, style=bold, color=blue];
m1_142 -> m1_140  [key=2, style=dotted];
m1_142 -> m1_143  [key=0, style=solid];
m1_150 -> m1_148  [key=0, style=bold, color=blue];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_151  [key=2, style=dotted];
m1_158 -> m1_156  [key=0, style=bold, color=blue];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_159  [key=2, style=dotted];
m1_166 -> m1_164  [key=0, style=bold, color=blue];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_159  [key=2, style=dotted];
m1_176 -> m1_174  [key=0, style=bold, color=blue];
m1_175 -> m1_140  [key=2, style=dotted];
m1_175 -> m1_176  [key=0, style=solid];
m1_179 -> m1_177  [key=0, style=bold, color=blue];
m1_178 -> m1_179  [key=0, style=solid];
m1_178 -> m1_180  [key=2, style=dotted];
m1_178 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_182 -> m1_183  [key=0, style=solid];
m1_182 -> m1_184  [key=2, style=dotted];
m1_182 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_188  [key=2, style=dotted];
m1_197 -> m1_195  [key=0, style=bold, color=blue];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_198  [key=2, style=dotted];
m1_207 -> m1_205  [key=0, style=bold, color=blue];
m1_206 -> m1_204  [key=2, style=dotted];
m1_206 -> m1_207  [key=0, style=solid];
m1_215 -> m1_213  [key=0, style=bold, color=blue];
m1_214 -> m1_204  [key=2, style=dotted];
m1_214 -> m1_215  [key=0, style=solid];
m1_224 -> m1_222  [key=0, style=bold, color=blue];
m1_223 -> m1_204  [key=2, style=dotted];
m1_223 -> m1_224  [key=0, style=solid];
m1_232 -> m1_230  [key=0, style=bold, color=blue];
m1_231 -> m1_232  [key=0, style=solid];
m1_231 -> m1_233  [key=2, style=dotted];
m1_282 -> m1_280  [key=0, style=bold, color=blue];
m1_281 -> m1_282  [key=0, style=solid];
m1_281 -> m1_283  [key=2, style=dotted];
m1_298 -> m1_296  [key=0, style=bold, color=blue];
m1_297 -> m1_298  [key=0, style=solid];
m1_297 -> m1_299  [key=2, style=dotted];
m1_306 -> m1_304  [key=0, style=bold, color=blue];
m1_305 -> m1_306  [key=0, style=solid];
m1_305 -> m1_307  [key=2, style=dotted];
m1_314 -> m1_312  [key=0, style=bold, color=blue];
m1_313 -> m1_314  [key=0, style=solid];
m1_313 -> m1_307  [key=2, style=dotted];
m1_324 -> m1_322  [key=0, style=bold, color=blue];
m1_323 -> m1_324  [key=0, style=solid];
m1_323 -> m1_325  [key=2, style=dotted];
m1_334 -> m1_332  [key=0, style=bold, color=blue];
m1_333 -> m1_334  [key=0, style=solid];
m1_333 -> m1_325  [key=2, style=dotted];
m1_345 -> m1_343  [key=0, style=bold, color=blue];
m1_344 -> m1_345  [key=0, style=solid];
m1_344 -> m1_346  [key=2, style=dotted];
m1_356 -> m1_354  [key=0, style=bold, color=blue];
m1_355 -> m1_356  [key=0, style=solid];
m1_355 -> m1_357  [key=2, style=dotted];
m1_367 -> m1_365  [key=0, style=bold, color=blue];
m1_366 -> m1_367  [key=0, style=solid];
m1_366 -> m1_368  [key=2, style=dotted];
m1_380 -> m1_381  [key=0, style=solid];
m1_379 -> m1_380  [key=0, style=solid];
m1_377 -> m1_375  [key=0, style=bold, color=blue];
m1_376 -> m1_377  [key=0, style=solid];
m1_376 -> m1_378  [key=2, style=dotted];
m1_390 -> m1_391  [key=0, style=solid];
m1_389 -> m1_390  [key=0, style=solid];
m1_398 -> m1_396  [key=0, style=bold, color=blue];
m1_397 -> m1_398  [key=0, style=solid];
m1_397 -> m1_399  [key=2, style=dotted];
m1_406 -> m1_404  [key=0, style=bold, color=blue];
m1_405 -> m1_406  [key=0, style=solid];
m1_405 -> m1_283  [key=2, style=dotted];
m1_413 -> m1_411  [key=0, style=bold, color=blue];
m1_412 -> m1_413  [key=0, style=solid];
m1_412 -> m1_414  [key=2, style=dotted];
m1_181 -> m1_182  [key=0, style=solid];
m1_183 -> m1_181  [key=0, style=bold, color=blue];
m1_187 -> m1_185  [key=0, style=bold, color=blue];
m1_381 -> m1_379  [key=0, style=bold, color=blue];
m1_391 -> m1_389  [key=0, style=bold, color=blue];
m1_64 -> m1_65  [key=0, style=solid];
m1_66 -> m1_9  [key=2, style=dotted];
m1_66 -> m1_10  [key=2, style=dotted];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_67 -> m1_12  [key=2, style=dotted];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_36  [key=2, style=dotted];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_65 -> m1_69  [key=2, style=dotted];
m1_65 -> m1_70  [key=2, style=dotted];
m1_68 -> m1_64  [key=0, style=bold, color=blue];
m1_407 -> m1_408  [key=0, style=solid];
m1_407 -> m1_409  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m1_408 -> m1_9  [key=2, style=dotted];
m1_408 -> m1_10  [key=2, style=dotted];
m1_408 -> m1_409  [key=0, style=solid];
m1_408 -> m1_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_409 -> m1_105  [key=2, style=dotted];
m1_409 -> m1_410  [key=0, style=solid];
m1_410 -> m1_407  [key=0, style=bold, color=blue];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_153 -> m1_9  [key=2, style=dotted];
m1_153 -> m1_10  [key=2, style=dotted];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_154 -> m1_105  [key=2, style=dotted];
m1_154 -> m1_155  [key=0, style=solid];
m1_155 -> m1_152  [key=0, style=bold, color=blue];
m1_326 -> m1_327  [key=0, style=solid];
m1_326 -> m1_329  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_326 -> m1_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_327 -> m1_9  [key=2, style=dotted];
m1_327 -> m1_10  [key=2, style=dotted];
m1_327 -> m1_328  [key=0, style=solid];
m1_327 -> m1_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_327 -> m1_329  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_327 -> m1_330  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_328 -> m1_329  [key=0, style=solid];
m1_328 -> m1_330  [key=0, style=solid];
m1_329 -> m1_105  [key=2, style=dotted];
m1_329 -> m1_330  [key=0, style=solid];
m1_330 -> m1_105  [key=2, style=dotted];
m1_330 -> m1_331  [key=0, style=solid];
m1_330 -> m1_321  [key=2, style=dotted];
m1_331 -> m1_326  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m1_25 -> m1_9  [key=2, style=dotted];
m1_25 -> m1_10  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_20  [key=2, style=dotted];
m1_27 -> m1_24  [key=0, style=bold, color=blue];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_42 -> m1_9  [key=2, style=dotted];
m1_42 -> m1_10  [key=2, style=dotted];
m1_42 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_42 -> m1_43  [key=0, style=solid];
m1_43 -> m1_12  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_36  [key=2, style=dotted];
m1_44 -> m1_41  [key=0, style=bold, color=blue];
m1_135 -> m1_136  [key=0, style=solid];
m1_137 -> m1_9  [key=2, style=dotted];
m1_137 -> m1_10  [key=2, style=dotted];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_140  [key=2, style=dotted];
m1_136 -> m1_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_138 -> m1_105  [key=2, style=dotted];
m1_138 -> m1_139  [key=0, style=solid];
m1_139 -> m1_135  [key=0, style=bold, color=blue];
m1_234 -> m1_235  [key=0, style=solid];
m1_236 -> m1_9  [key=2, style=dotted];
m1_236 -> m1_10  [key=2, style=dotted];
m1_236 -> m1_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_236 -> m1_237  [key=0, style=solid];
m1_237 -> m1_12  [key=2, style=dotted];
m1_237 -> m1_238  [key=0, style=solid];
m1_237 -> m1_36  [key=2, style=dotted];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_235 -> m1_79  [key=2, style=dotted];
m1_235 -> m1_70  [key=2, style=dotted];
m1_238 -> m1_234  [key=0, style=bold, color=blue];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_286  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_285 -> m1_9  [key=2, style=dotted];
m1_285 -> m1_10  [key=2, style=dotted];
m1_285 -> m1_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_285 -> m1_286  [key=0, style=solid];
m1_286 -> m1_105  [key=2, style=dotted];
m1_286 -> m1_287  [key=0, style=solid];
m1_287 -> m1_284  [key=0, style=bold, color=blue];
m1_189 -> m1_190  [key=0, style=solid];
m1_191 -> m1_9  [key=2, style=dotted];
m1_191 -> m1_10  [key=2, style=dotted];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_192 -> m1_12  [key=2, style=dotted];
m1_192 -> m1_193  [key=0, style=solid];
m1_192 -> m1_36  [key=2, style=dotted];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_190 -> m1_194  [key=2, style=dotted];
m1_190 -> m1_70  [key=2, style=dotted];
m1_193 -> m1_189  [key=0, style=bold, color=blue];
m1_167 -> m1_168  [key=0, style=solid];
m1_170 -> m1_9  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_173  [key=2, style=dotted];
m1_170 -> m1_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_170 -> m1_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_169 -> m1_170  [key=0, style=solid];
m1_171 -> m1_105  [key=2, style=dotted];
m1_171 -> m1_172  [key=0, style=solid];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_168 -> m1_140  [key=2, style=dotted];
m1_172 -> m1_167  [key=0, style=bold, color=blue];
m1_259 -> m1_260  [key=0, style=solid];
m1_261 -> m1_9  [key=2, style=dotted];
m1_261 -> m1_10  [key=2, style=dotted];
m1_261 -> m1_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_261 -> m1_262  [key=0, style=solid];
m1_262 -> m1_12  [key=2, style=dotted];
m1_262 -> m1_263  [key=0, style=solid];
m1_262 -> m1_36  [key=2, style=dotted];
m1_260 -> m1_261  [key=0, style=solid];
m1_260 -> m1_262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_260 -> m1_247  [key=2, style=dotted];
m1_263 -> m1_259  [key=0, style=bold, color=blue];
m1_300 -> m1_301  [key=0, style=solid];
m1_300 -> m1_302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m1_301 -> m1_9  [key=2, style=dotted];
m1_301 -> m1_10  [key=2, style=dotted];
m1_301 -> m1_302  [key=0, style=solid];
m1_301 -> m1_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_302 -> m1_105  [key=2, style=dotted];
m1_302 -> m1_303  [key=0, style=solid];
m1_303 -> m1_300  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_6  [key=2, style=dotted, color=green];
m1_1 -> m1_3  [key=1, style=dashed, color=green, label=fakeOptions];
m1_1 -> m1_14  [key=1, style=dashed, color=green, label=fakeOptions];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_7  [key=2, style=dotted, color=green];
m1_2 -> m1_8  [key=2, style=dotted, color=green];
m1_2 -> m1_4  [key=1, style=dashed, color=green, label=expectedResult];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_12  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_242 -> m1_243  [key=0, style=solid];
m1_244 -> m1_9  [key=2, style=dotted];
m1_244 -> m1_10  [key=2, style=dotted];
m1_244 -> m1_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_244 -> m1_245  [key=0, style=solid];
m1_245 -> m1_12  [key=2, style=dotted];
m1_245 -> m1_246  [key=0, style=solid];
m1_245 -> m1_36  [key=2, style=dotted];
m1_243 -> m1_244  [key=0, style=solid];
m1_243 -> m1_245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_243 -> m1_247  [key=2, style=dotted];
m1_246 -> m1_242  [key=0, style=bold, color=blue];
m1_84 -> m1_85  [key=0, style=solid];
m1_86 -> m1_9  [key=2, style=dotted];
m1_86 -> m1_10  [key=2, style=dotted];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_87 -> m1_12  [key=2, style=dotted];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_36  [key=2, style=dotted];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_85 -> m1_79  [key=2, style=dotted];
m1_85 -> m1_70  [key=2, style=dotted];
m1_88 -> m1_84  [key=0, style=bold, color=blue];
m1_225 -> m1_226  [key=0, style=solid];
m1_227 -> m1_9  [key=2, style=dotted];
m1_227 -> m1_10  [key=2, style=dotted];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_228 -> m1_12  [key=2, style=dotted];
m1_228 -> m1_229  [key=0, style=solid];
m1_228 -> m1_36  [key=2, style=dotted];
m1_226 -> m1_227  [key=0, style=solid];
m1_226 -> m1_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_226 -> m1_221  [key=2, style=dotted];
m1_226 -> m1_70  [key=2, style=dotted];
m1_229 -> m1_225  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_33 -> m1_9  [key=2, style=dotted];
m1_33 -> m1_10  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_12  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=2, style=dotted];
m1_35 -> m1_32  [key=0, style=bold, color=blue];
m1_400 -> m1_401  [key=0, style=solid];
m1_400 -> m1_402  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m1_401 -> m1_9  [key=2, style=dotted];
m1_401 -> m1_10  [key=2, style=dotted];
m1_401 -> m1_402  [key=0, style=solid];
m1_401 -> m1_404  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_402 -> m1_105  [key=2, style=dotted];
m1_402 -> m1_403  [key=0, style=solid];
m1_403 -> m1_400  [key=0, style=bold, color=blue];
m1_423 -> m1_424  [key=0, style=solid];
m1_423 -> m1_425  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m1_424 -> m1_10  [key=2, style=dotted];
m1_424 -> m1_425  [key=0, style=solid];
m1_424 -> m1_427  [key=2, style=dotted];
m1_425 -> m1_105  [key=2, style=dotted];
m1_425 -> m1_426  [key=0, style=solid];
m1_426 -> m1_423  [key=0, style=bold, color=blue];
m1_428 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_429 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_429 -> m1_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_430 -> m1_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_431 -> m1_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_7  [key=2, style=dotted];
m2_1 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label=pi];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_1 -> m2_5  [key=2, style=dotted];
m2_1 -> m2_6  [key=2, style=dotted];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid, color=green];
m2_12 -> m2_18  [key=1, style=dashed, color=green, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
m2_12 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=T];
m2_13 -> m2_14  [key=0, style=solid, color=green];
m2_13 -> m2_15  [key=2, style=dotted, color=green];
m2_13 -> m2_16  [key=2, style=dotted, color=green];
m2_13 -> m2_17  [key=1, style=dashed, color=green, label="lambda expression"];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label=T];
m2_22 -> m2_22  [key=3, color=darkorchid, style=bold, label="method methodReturn T SetValue"];
m2_22 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_26 -> m2_33  [key=0, style=solid, color=green];
m2_26 -> m2_36  [key=2, style=dotted, color=green];
m2_23 -> m2_26  [key=1, style=dashed, color=green, label=fail];
m2_23 -> m2_30  [key=1, style=dashed, color=green, label=fail];
m2_23 -> m2_32  [key=1, style=dashed, color=green, label=fail];
m2_23 -> m2_23  [key=3, color=darkorchid, style=bold, label="Local variable System.Action<System.Exception> fail"];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m2_23 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label=fail];
m2_25 -> m2_26  [key=0, style=solid, color=green];
m2_33 -> m2_34  [key=0, style=solid];
m2_30 -> m2_33  [key=0, style=solid, color=green];
m2_30 -> m2_36  [key=2, style=dotted, color=green];
m2_29 -> m2_30  [key=0, style=solid, color=green];
m2_32 -> m2_33  [key=0, style=solid, color=green];
m2_32 -> m2_36  [key=2, style=dotted, color=green];
m2_31 -> m2_32  [key=0, style=solid, color=green];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_33  [key=0, style=solid];
m2_24 -> m2_29  [key=0, style=solid];
m2_24 -> m2_31  [key=0, style=solid];
m2_24 -> m2_27  [key=0, style=solid];
m2_24 -> m2_35  [key=2, style=dotted];
m2_28 -> m2_33  [key=0, style=solid];
m2_28 -> m2_36  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_34 -> m2_22  [key=0, style=bold, color=blue];
m2_37 -> m2_38  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_18 -> m2_19  [key=0, style=solid, color=green];
m2_18 -> m2_7  [key=2, style=dotted, color=green];
m2_18 -> m2_21  [key=2, style=dotted, color=green];
m2_19 -> m2_20  [key=0, style=solid];
m2_20 -> m2_17  [key=0, style=bold, color=blue];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_40  [key=2, style=dotted];
m2_39 -> m2_37  [key=0, style=bold, color=blue];
m2_69 -> m2_18  [key=1, style=dashed, color=green, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
m2_70 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=T];
m10_74 -> m10_75  [key=0, style=solid];
m10_75 -> m10_76  [key=0, style=solid];
m10_75 -> m10_79  [key=2, style=dotted];
m10_75 -> m10_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_76 -> m10_77  [key=0, style=solid];
m10_76 -> m10_9  [key=2, style=dotted];
m10_76 -> m10_10  [key=2, style=dotted];
m10_76 -> m10_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_77 -> m10_78  [key=0, style=solid];
m10_77 -> m10_36  [key=2, style=dotted];
m10_77 -> m10_12  [key=2, style=dotted];
m10_78 -> m10_74  [key=0, style=bold, color=blue];
m10_251 -> m10_252  [key=0, style=solid];
m10_252 -> m10_253  [key=0, style=solid];
m10_252 -> m10_247  [key=2, style=dotted];
m10_252 -> m10_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_253 -> m10_254  [key=0, style=solid];
m10_253 -> m10_9  [key=2, style=dotted];
m10_253 -> m10_10  [key=2, style=dotted];
m10_253 -> m10_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_254 -> m10_255  [key=0, style=solid];
m10_254 -> m10_36  [key=2, style=dotted];
m10_254 -> m10_12  [key=2, style=dotted];
m10_255 -> m10_251  [key=0, style=bold, color=blue];
m10_335 -> m10_336  [key=0, style=solid];
m10_336 -> m10_337  [key=0, style=solid];
m10_337 -> m10_338  [key=0, style=solid];
m10_337 -> m10_339  [key=2, style=dotted];
m10_338 -> m10_335  [key=0, style=bold, color=blue];
m10_407 -> m10_408  [key=0, style=solid];
m10_408 -> m10_409  [key=0, style=solid];
m10_408 -> m10_6  [key=2, style=dotted];
m10_408 -> m10_410  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_409 -> m10_410  [key=0, style=solid];
m10_409 -> m10_9  [key=2, style=dotted];
m10_409 -> m10_10  [key=2, style=dotted];
m10_409 -> m10_412  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_410 -> m10_411  [key=0, style=solid];
m10_410 -> m10_105  [key=2, style=dotted];
m10_411 -> m10_407  [key=0, style=bold, color=blue];
m10_369 -> m10_370  [key=0, style=solid];
m10_369 -> m10_371  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_369 -> m10_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_370 -> m10_371  [key=0, style=solid];
m10_370 -> m10_9  [key=2, style=dotted];
m10_370 -> m10_10  [key=2, style=dotted];
m10_370 -> m10_375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_371 -> m10_372  [key=0, style=solid];
m10_371 -> m10_373  [key=2, style=dotted];
m10_371 -> m10_374  [key=2, style=dotted];
m10_371 -> m10_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_372 -> m10_369  [key=0, style=bold, color=blue];
m10_291 -> m10_292  [key=0, style=solid];
m10_292 -> m10_293  [key=0, style=solid];
m10_292 -> m10_79  [key=2, style=dotted];
m10_292 -> m10_294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_293 -> m10_294  [key=0, style=solid];
m10_293 -> m10_9  [key=2, style=dotted];
m10_293 -> m10_10  [key=2, style=dotted];
m10_293 -> m10_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_294 -> m10_295  [key=0, style=solid];
m10_294 -> m10_36  [key=2, style=dotted];
m10_294 -> m10_12  [key=2, style=dotted];
m10_295 -> m10_291  [key=0, style=bold, color=blue];
m10_216 -> m10_217  [key=0, style=solid];
m10_217 -> m10_218  [key=0, style=solid];
m10_217 -> m10_221  [key=2, style=dotted];
m10_217 -> m10_70  [key=2, style=dotted];
m10_217 -> m10_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_218 -> m10_219  [key=0, style=solid];
m10_218 -> m10_9  [key=2, style=dotted];
m10_218 -> m10_10  [key=2, style=dotted];
m10_218 -> m10_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_219 -> m10_220  [key=0, style=solid];
m10_219 -> m10_36  [key=2, style=dotted];
m10_219 -> m10_12  [key=2, style=dotted];
m10_220 -> m10_216  [key=0, style=bold, color=blue];
m10_382 -> m10_383  [key=0, style=solid];
m10_382 -> m10_384  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_382 -> m10_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_383 -> m10_384  [key=0, style=solid];
m10_383 -> m10_9  [key=2, style=dotted];
m10_383 -> m10_10  [key=2, style=dotted];
m10_383 -> m10_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_384 -> m10_385  [key=0, style=solid];
m10_384 -> m10_373  [key=2, style=dotted];
m10_384 -> m10_374  [key=2, style=dotted];
m10_384 -> m10_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_385 -> m10_382  [key=0, style=bold, color=blue];
m10_144 -> m10_145  [key=0, style=solid];
m10_144 -> m10_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m10_145 -> m10_146  [key=0, style=solid];
m10_145 -> m10_9  [key=2, style=dotted];
m10_145 -> m10_10  [key=2, style=dotted];
m10_145 -> m10_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_146 -> m10_147  [key=0, style=solid];
m10_146 -> m10_105  [key=2, style=dotted];
m10_147 -> m10_144  [key=0, style=bold, color=blue];
m10_208 -> m10_209  [key=0, style=solid];
m10_209 -> m10_210  [key=0, style=solid];
m10_209 -> m10_204  [key=2, style=dotted];
m10_209 -> m10_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_210 -> m10_211  [key=0, style=solid];
m10_210 -> m10_9  [key=2, style=dotted];
m10_210 -> m10_10  [key=2, style=dotted];
m10_210 -> m10_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_211 -> m10_212  [key=0, style=solid];
m10_211 -> m10_105  [key=2, style=dotted];
m10_212 -> m10_208  [key=0, style=bold, color=blue];
m10_275 -> m10_276  [key=0, style=solid];
m10_276 -> m10_277  [key=0, style=solid];
m10_276 -> m10_221  [key=2, style=dotted];
m10_276 -> m10_278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_277 -> m10_278  [key=0, style=solid];
m10_277 -> m10_9  [key=2, style=dotted];
m10_277 -> m10_10  [key=2, style=dotted];
m10_277 -> m10_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_278 -> m10_279  [key=0, style=solid];
m10_278 -> m10_36  [key=2, style=dotted];
m10_278 -> m10_12  [key=2, style=dotted];
m10_279 -> m10_275  [key=0, style=bold, color=blue];
m10_199 -> m10_200  [key=0, style=solid];
m10_200 -> m10_201  [key=0, style=solid];
m10_200 -> m10_204  [key=2, style=dotted];
m10_200 -> m10_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_201 -> m10_202  [key=0, style=solid];
m10_201 -> m10_9  [key=2, style=dotted];
m10_201 -> m10_10  [key=2, style=dotted];
m10_201 -> m10_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_202 -> m10_203  [key=0, style=solid];
m10_202 -> m10_105  [key=2, style=dotted];
m10_203 -> m10_199  [key=0, style=bold, color=blue];
m10_56 -> m10_57  [key=0, style=solid];
m10_56 -> m10_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m10_57 -> m10_58  [key=0, style=solid];
m10_57 -> m10_9  [key=2, style=dotted];
m10_57 -> m10_10  [key=2, style=dotted];
m10_57 -> m10_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_58 -> m10_59  [key=0, style=solid];
m10_58 -> m10_36  [key=2, style=dotted];
m10_58 -> m10_12  [key=2, style=dotted];
m10_59 -> m10_56  [key=0, style=bold, color=blue];
m10_101 -> m10_102  [key=0, style=solid];
m10_101 -> m10_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m10_102 -> m10_103  [key=0, style=solid];
m10_102 -> m10_9  [key=2, style=dotted];
m10_102 -> m10_10  [key=2, style=dotted];
m10_102 -> m10_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_103 -> m10_104  [key=0, style=solid];
m10_103 -> m10_105  [key=2, style=dotted];
m10_103 -> m10_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m10_104 -> m10_101  [key=0, style=bold, color=blue];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_9  [key=2, style=dotted];
m10_17 -> m10_10  [key=2, style=dotted];
m10_17 -> m10_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_18 -> m10_19  [key=0, style=solid];
m10_18 -> m10_20  [key=2, style=dotted];
m10_19 -> m10_16  [key=0, style=bold, color=blue];
m10_308 -> m10_309  [key=0, style=solid];
m10_308 -> m10_310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m10_309 -> m10_310  [key=0, style=solid];
m10_309 -> m10_9  [key=2, style=dotted];
m10_309 -> m10_10  [key=2, style=dotted];
m10_309 -> m10_312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_310 -> m10_311  [key=0, style=solid];
m10_310 -> m10_105  [key=2, style=dotted];
m10_311 -> m10_308  [key=0, style=bold, color=blue];
m10_347 -> m10_348  [key=0, style=solid];
m10_348 -> m10_349  [key=0, style=solid];
m10_349 -> m10_350  [key=0, style=solid];
m10_349 -> m10_339  [key=2, style=dotted];
m10_350 -> m10_347  [key=0, style=bold, color=blue];
m10_119 -> m10_120  [key=0, style=solid];
m10_120 -> m10_121  [key=0, style=solid];
m10_120 -> m10_115  [key=2, style=dotted];
m10_120 -> m10_70  [key=2, style=dotted];
m10_120 -> m10_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_121 -> m10_122  [key=0, style=solid];
m10_121 -> m10_9  [key=2, style=dotted];
m10_121 -> m10_10  [key=2, style=dotted];
m10_121 -> m10_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_122 -> m10_123  [key=0, style=solid];
m10_122 -> m10_36  [key=2, style=dotted];
m10_122 -> m10_12  [key=2, style=dotted];
m10_123 -> m10_119  [key=0, style=bold, color=blue];
m10_315 -> m10_316  [key=0, style=solid];
m10_315 -> m10_318  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_315 -> m10_319  [key=1, style=dashed, color=darkseagreen4, label=bool];
m10_316 -> m10_317  [key=0, style=solid];
m10_316 -> m10_9  [key=2, style=dotted];
m10_316 -> m10_10  [key=2, style=dotted];
m10_316 -> m10_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_316 -> m10_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_316 -> m10_319  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_318 -> m10_319  [key=0, style=solid];
m10_318 -> m10_105  [key=2, style=dotted];
m10_319 -> m10_320  [key=0, style=solid];
m10_319 -> m10_321  [key=2, style=dotted];
m10_319 -> m10_105  [key=2, style=dotted];
m10_317 -> m10_318  [key=0, style=solid];
m10_317 -> m10_319  [key=0, style=solid];
m10_320 -> m10_315  [key=0, style=bold, color=blue];
m10_267 -> m10_268  [key=0, style=solid];
m10_267 -> m10_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_268 -> m10_269  [key=0, style=solid];
m10_268 -> m10_9  [key=2, style=dotted];
m10_268 -> m10_10  [key=2, style=dotted];
m10_268 -> m10_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_269 -> m10_270  [key=0, style=solid];
m10_269 -> m10_271  [key=2, style=dotted];
m10_269 -> m10_12  [key=2, style=dotted];
m10_270 -> m10_267  [key=0, style=bold, color=blue];
m10_127 -> m10_128  [key=0, style=solid];
m10_128 -> m10_129  [key=0, style=solid];
m10_128 -> m10_115  [key=2, style=dotted];
m10_128 -> m10_70  [key=2, style=dotted];
m10_128 -> m10_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_129 -> m10_130  [key=0, style=solid];
m10_129 -> m10_9  [key=2, style=dotted];
m10_129 -> m10_10  [key=2, style=dotted];
m10_129 -> m10_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_130 -> m10_131  [key=0, style=solid];
m10_130 -> m10_36  [key=2, style=dotted];
m10_130 -> m10_12  [key=2, style=dotted];
m10_131 -> m10_127  [key=0, style=bold, color=blue];
m10_160 -> m10_161  [key=0, style=solid];
m10_160 -> m10_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m10_161 -> m10_162  [key=0, style=solid];
m10_161 -> m10_9  [key=2, style=dotted];
m10_161 -> m10_10  [key=2, style=dotted];
m10_161 -> m10_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_162 -> m10_163  [key=0, style=solid];
m10_162 -> m10_105  [key=2, style=dotted];
m10_163 -> m10_160  [key=0, style=bold, color=blue];
m10_110 -> m10_111  [key=0, style=solid];
m10_111 -> m10_112  [key=0, style=solid];
m10_111 -> m10_115  [key=2, style=dotted];
m10_111 -> m10_70  [key=2, style=dotted];
m10_111 -> m10_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_112 -> m10_113  [key=0, style=solid];
m10_112 -> m10_9  [key=2, style=dotted];
m10_112 -> m10_10  [key=2, style=dotted];
m10_112 -> m10_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_113 -> m10_114  [key=0, style=solid];
m10_113 -> m10_36  [key=2, style=dotted];
m10_113 -> m10_12  [key=2, style=dotted];
m10_114 -> m10_110  [key=0, style=bold, color=blue];
m10_92 -> m10_93  [key=0, style=solid];
m10_93 -> m10_94  [key=0, style=solid];
m10_93 -> m10_79  [key=2, style=dotted];
m10_93 -> m10_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_94 -> m10_95  [key=0, style=solid];
m10_94 -> m10_9  [key=2, style=dotted];
m10_94 -> m10_10  [key=2, style=dotted];
m10_94 -> m10_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_95 -> m10_96  [key=0, style=solid];
m10_95 -> m10_36  [key=2, style=dotted];
m10_95 -> m10_12  [key=2, style=dotted];
m10_96 -> m10_92  [key=0, style=bold, color=blue];
m10_48 -> m10_49  [key=0, style=solid];
m10_48 -> m10_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m10_49 -> m10_50  [key=0, style=solid];
m10_49 -> m10_9  [key=2, style=dotted];
m10_49 -> m10_10  [key=2, style=dotted];
m10_49 -> m10_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_50 -> m10_51  [key=0, style=solid];
m10_50 -> m10_36  [key=2, style=dotted];
m10_50 -> m10_12  [key=2, style=dotted];
m10_51 -> m10_48  [key=0, style=bold, color=blue];
m10_412 -> m10_413  [key=0, style=solid];
m10_14 -> m10_15  [key=0, style=solid];
m10_13 -> m10_14  [key=0, style=solid];
m10_15 -> m10_13  [key=0, style=bold, color=blue];
m10_21 -> m10_22  [key=0, style=solid];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_6  [key=2, style=dotted];
m10_23 -> m10_21  [key=0, style=bold, color=blue];
m10_28 -> m10_29  [key=0, style=solid];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_31  [key=2, style=dotted];
m10_30 -> m10_28  [key=0, style=bold, color=blue];
m10_37 -> m10_38  [key=0, style=solid];
m10_38 -> m10_39  [key=0, style=solid];
m10_38 -> m10_40  [key=2, style=dotted];
m10_39 -> m10_37  [key=0, style=bold, color=blue];
m10_45 -> m10_46  [key=0, style=solid];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_6  [key=2, style=dotted];
m10_47 -> m10_45  [key=0, style=bold, color=blue];
m10_52 -> m10_53  [key=0, style=solid];
m10_53 -> m10_54  [key=0, style=solid];
m10_53 -> m10_55  [key=2, style=dotted];
m10_54 -> m10_52  [key=0, style=bold, color=blue];
m10_60 -> m10_61  [key=0, style=solid];
m10_61 -> m10_62  [key=0, style=solid];
m10_61 -> m10_63  [key=2, style=dotted];
m10_62 -> m10_60  [key=0, style=bold, color=blue];
m10_71 -> m10_72  [key=0, style=solid];
m10_72 -> m10_73  [key=0, style=solid];
m10_72 -> m10_55  [key=2, style=dotted];
m10_73 -> m10_71  [key=0, style=bold, color=blue];
m10_80 -> m10_81  [key=0, style=solid];
m10_81 -> m10_82  [key=0, style=solid];
m10_81 -> m10_83  [key=2, style=dotted];
m10_82 -> m10_80  [key=0, style=bold, color=blue];
m10_89 -> m10_90  [key=0, style=solid];
m10_90 -> m10_91  [key=0, style=solid];
m10_90 -> m10_63  [key=2, style=dotted];
m10_91 -> m10_89  [key=0, style=bold, color=blue];
m10_97 -> m10_98  [key=0, style=solid];
m10_98 -> m10_99  [key=0, style=solid];
m10_98 -> m10_100  [key=2, style=dotted];
m10_99 -> m10_97  [key=0, style=bold, color=blue];
m10_106 -> m10_107  [key=0, style=solid];
m10_107 -> m10_108  [key=0, style=solid];
m10_107 -> m10_109  [key=2, style=dotted];
m10_108 -> m10_106  [key=0, style=bold, color=blue];
m10_116 -> m10_117  [key=0, style=solid];
m10_117 -> m10_118  [key=0, style=solid];
m10_117 -> m10_109  [key=2, style=dotted];
m10_118 -> m10_116  [key=0, style=bold, color=blue];
m10_124 -> m10_125  [key=0, style=solid];
m10_125 -> m10_126  [key=0, style=solid];
m10_125 -> m10_109  [key=2, style=dotted];
m10_126 -> m10_124  [key=0, style=bold, color=blue];
m10_132 -> m10_133  [key=0, style=solid];
m10_133 -> m10_134  [key=0, style=solid];
m10_133 -> m10_109  [key=2, style=dotted];
m10_134 -> m10_132  [key=0, style=bold, color=blue];
m10_141 -> m10_142  [key=0, style=solid];
m10_142 -> m10_143  [key=0, style=solid];
m10_142 -> m10_140  [key=2, style=dotted];
m10_143 -> m10_141  [key=0, style=bold, color=blue];
m10_148 -> m10_149  [key=0, style=solid];
m10_149 -> m10_150  [key=0, style=solid];
m10_149 -> m10_151  [key=2, style=dotted];
m10_150 -> m10_148  [key=0, style=bold, color=blue];
m10_156 -> m10_157  [key=0, style=solid];
m10_157 -> m10_158  [key=0, style=solid];
m10_157 -> m10_159  [key=2, style=dotted];
m10_158 -> m10_156  [key=0, style=bold, color=blue];
m10_164 -> m10_165  [key=0, style=solid];
m10_165 -> m10_166  [key=0, style=solid];
m10_165 -> m10_159  [key=2, style=dotted];
m10_166 -> m10_164  [key=0, style=bold, color=blue];
m10_174 -> m10_175  [key=0, style=solid];
m10_177 -> m10_178  [key=0, style=solid];
m10_177 -> m10_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m10_177 -> m10_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m10_175 -> m10_176  [key=0, style=solid];
m10_175 -> m10_140  [key=2, style=dotted];
m10_176 -> m10_174  [key=0, style=bold, color=blue];
m10_178 -> m10_179  [key=0, style=solid];
m10_178 -> m10_180  [key=2, style=dotted];
m10_178 -> m10_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_182 -> m10_183  [key=0, style=solid];
m10_182 -> m10_184  [key=2, style=dotted];
m10_182 -> m10_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_186 -> m10_187  [key=0, style=solid];
m10_186 -> m10_188  [key=2, style=dotted];
m10_179 -> m10_177  [key=0, style=bold, color=blue];
m10_181 -> m10_182  [key=0, style=solid];
m10_183 -> m10_181  [key=0, style=bold, color=blue];
m10_185 -> m10_186  [key=0, style=solid];
m10_187 -> m10_185  [key=0, style=bold, color=blue];
m10_195 -> m10_196  [key=0, style=solid];
m10_196 -> m10_197  [key=0, style=solid];
m10_196 -> m10_198  [key=2, style=dotted];
m10_197 -> m10_195  [key=0, style=bold, color=blue];
m10_205 -> m10_206  [key=0, style=solid];
m10_206 -> m10_207  [key=0, style=solid];
m10_206 -> m10_204  [key=2, style=dotted];
m10_207 -> m10_205  [key=0, style=bold, color=blue];
m10_213 -> m10_214  [key=0, style=solid];
m10_214 -> m10_215  [key=0, style=solid];
m10_214 -> m10_204  [key=2, style=dotted];
m10_215 -> m10_213  [key=0, style=bold, color=blue];
m10_222 -> m10_223  [key=0, style=solid];
m10_223 -> m10_224  [key=0, style=solid];
m10_223 -> m10_204  [key=2, style=dotted];
m10_224 -> m10_222  [key=0, style=bold, color=blue];
m10_230 -> m10_231  [key=0, style=solid];
m10_231 -> m10_232  [key=0, style=solid];
m10_231 -> m10_233  [key=2, style=dotted];
m10_232 -> m10_230  [key=0, style=bold, color=blue];
m10_239 -> m10_240  [key=0, style=solid];
m10_240 -> m10_241  [key=0, style=solid];
m10_240 -> m10_6  [key=2, style=dotted];
m10_241 -> m10_239  [key=0, style=bold, color=blue];
m10_248 -> m10_249  [key=0, style=solid];
m10_249 -> m10_250  [key=0, style=solid];
m10_249 -> m10_6  [key=2, style=dotted];
m10_250 -> m10_248  [key=0, style=bold, color=blue];
m10_256 -> m10_257  [key=0, style=solid];
m10_257 -> m10_258  [key=0, style=solid];
m10_257 -> m10_6  [key=2, style=dotted];
m10_258 -> m10_256  [key=0, style=bold, color=blue];
m10_264 -> m10_265  [key=0, style=solid];
m10_265 -> m10_266  [key=0, style=solid];
m10_265 -> m10_6  [key=2, style=dotted];
m10_266 -> m10_264  [key=0, style=bold, color=blue];
m10_272 -> m10_273  [key=0, style=solid];
m10_273 -> m10_274  [key=0, style=solid];
m10_273 -> m10_6  [key=2, style=dotted];
m10_274 -> m10_272  [key=0, style=bold, color=blue];
m10_280 -> m10_281  [key=0, style=solid];
m10_281 -> m10_282  [key=0, style=solid];
m10_281 -> m10_283  [key=2, style=dotted];
m10_282 -> m10_280  [key=0, style=bold, color=blue];
m10_288 -> m10_289  [key=0, style=solid];
m10_289 -> m10_290  [key=0, style=solid];
m10_289 -> m10_6  [key=2, style=dotted];
m10_290 -> m10_288  [key=0, style=bold, color=blue];
m10_296 -> m10_297  [key=0, style=solid];
m10_297 -> m10_298  [key=0, style=solid];
m10_297 -> m10_299  [key=2, style=dotted];
m10_298 -> m10_296  [key=0, style=bold, color=blue];
m10_304 -> m10_305  [key=0, style=solid];
m10_305 -> m10_306  [key=0, style=solid];
m10_305 -> m10_307  [key=2, style=dotted];
m10_306 -> m10_304  [key=0, style=bold, color=blue];
m10_312 -> m10_313  [key=0, style=solid];
m10_313 -> m10_314  [key=0, style=solid];
m10_313 -> m10_307  [key=2, style=dotted];
m10_314 -> m10_312  [key=0, style=bold, color=blue];
m10_322 -> m10_323  [key=0, style=solid];
m10_323 -> m10_324  [key=0, style=solid];
m10_323 -> m10_325  [key=2, style=dotted];
m10_324 -> m10_322  [key=0, style=bold, color=blue];
m10_332 -> m10_333  [key=0, style=solid];
m10_333 -> m10_334  [key=0, style=solid];
m10_333 -> m10_325  [key=2, style=dotted];
m10_334 -> m10_332  [key=0, style=bold, color=blue];
m10_340 -> m10_341  [key=0, style=solid];
m10_341 -> m10_342  [key=0, style=solid];
m10_341 -> m10_9  [key=2, style=dotted];
m10_341 -> m10_10  [key=2, style=dotted];
m10_341 -> m10_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_342 -> m10_340  [key=0, style=bold, color=blue];
m10_343 -> m10_344  [key=0, style=solid];
m10_344 -> m10_345  [key=0, style=solid];
m10_344 -> m10_346  [key=2, style=dotted];
m10_345 -> m10_343  [key=0, style=bold, color=blue];
m10_351 -> m10_352  [key=0, style=solid];
m10_352 -> m10_353  [key=0, style=solid];
m10_352 -> m10_9  [key=2, style=dotted];
m10_352 -> m10_10  [key=2, style=dotted];
m10_352 -> m10_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_353 -> m10_351  [key=0, style=bold, color=blue];
m10_354 -> m10_355  [key=0, style=solid];
m10_355 -> m10_356  [key=0, style=solid];
m10_355 -> m10_357  [key=2, style=dotted];
m10_356 -> m10_354  [key=0, style=bold, color=blue];
m10_362 -> m10_363  [key=0, style=solid];
m10_363 -> m10_364  [key=0, style=solid];
m10_363 -> m10_9  [key=2, style=dotted];
m10_363 -> m10_10  [key=2, style=dotted];
m10_363 -> m10_365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_364 -> m10_362  [key=0, style=bold, color=blue];
m10_365 -> m10_366  [key=0, style=solid];
m10_366 -> m10_367  [key=0, style=solid];
m10_366 -> m10_368  [key=2, style=dotted];
m10_367 -> m10_365  [key=0, style=bold, color=blue];
m10_380 -> m10_381  [key=0, style=solid];
m10_375 -> m10_376  [key=0, style=solid];
m10_379 -> m10_380  [key=0, style=solid];
m10_376 -> m10_377  [key=0, style=solid];
m10_376 -> m10_378  [key=2, style=dotted];
m10_377 -> m10_375  [key=0, style=bold, color=blue];
m10_381 -> m10_379  [key=0, style=bold, color=blue];
m10_390 -> m10_391  [key=0, style=solid];
m10_386 -> m10_387  [key=0, style=solid];
m10_389 -> m10_390  [key=0, style=solid];
m10_387 -> m10_388  [key=0, style=solid];
m10_387 -> m10_6  [key=2, style=dotted];
m10_388 -> m10_386  [key=0, style=bold, color=blue];
m10_391 -> m10_389  [key=0, style=bold, color=blue];
m10_396 -> m10_397  [key=0, style=solid];
m10_397 -> m10_398  [key=0, style=solid];
m10_397 -> m10_283  [key=2, style=dotted];
m10_398 -> m10_396  [key=0, style=bold, color=blue];
m10_403 -> m10_404  [key=0, style=solid];
m10_404 -> m10_405  [key=0, style=solid];
m10_404 -> m10_406  [key=2, style=dotted];
m10_405 -> m10_403  [key=0, style=bold, color=blue];
m10_413 -> m10_414  [key=0, style=solid];
m10_413 -> m10_6  [key=2, style=dotted];
m10_414 -> m10_412  [key=0, style=bold, color=blue];
m10_64 -> m10_65  [key=0, style=solid];
m10_65 -> m10_66  [key=0, style=solid];
m10_65 -> m10_69  [key=2, style=dotted];
m10_65 -> m10_70  [key=2, style=dotted];
m10_65 -> m10_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_66 -> m10_67  [key=0, style=solid];
m10_66 -> m10_9  [key=2, style=dotted];
m10_66 -> m10_10  [key=2, style=dotted];
m10_66 -> m10_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_67 -> m10_68  [key=0, style=solid];
m10_67 -> m10_36  [key=2, style=dotted];
m10_67 -> m10_12  [key=2, style=dotted];
m10_68 -> m10_64  [key=0, style=bold, color=blue];
m10_399 -> m10_400  [key=0, style=solid];
m10_399 -> m10_401  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m10_400 -> m10_401  [key=0, style=solid];
m10_400 -> m10_9  [key=2, style=dotted];
m10_400 -> m10_10  [key=2, style=dotted];
m10_400 -> m10_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_401 -> m10_402  [key=0, style=solid];
m10_401 -> m10_105  [key=2, style=dotted];
m10_402 -> m10_399  [key=0, style=bold, color=blue];
m10_152 -> m10_153  [key=0, style=solid];
m10_152 -> m10_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m10_153 -> m10_154  [key=0, style=solid];
m10_153 -> m10_9  [key=2, style=dotted];
m10_153 -> m10_10  [key=2, style=dotted];
m10_153 -> m10_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_154 -> m10_155  [key=0, style=solid];
m10_154 -> m10_105  [key=2, style=dotted];
m10_155 -> m10_152  [key=0, style=bold, color=blue];
m10_358 -> m10_359  [key=0, style=solid];
m10_359 -> m10_360  [key=0, style=solid];
m10_360 -> m10_361  [key=0, style=solid];
m10_360 -> m10_339  [key=2, style=dotted];
m10_361 -> m10_358  [key=0, style=bold, color=blue];
m10_326 -> m10_327  [key=0, style=solid];
m10_326 -> m10_329  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_326 -> m10_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m10_327 -> m10_328  [key=0, style=solid];
m10_327 -> m10_9  [key=2, style=dotted];
m10_327 -> m10_10  [key=2, style=dotted];
m10_327 -> m10_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_327 -> m10_329  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_327 -> m10_330  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_329 -> m10_330  [key=0, style=solid];
m10_329 -> m10_105  [key=2, style=dotted];
m10_330 -> m10_331  [key=0, style=solid];
m10_330 -> m10_321  [key=2, style=dotted];
m10_330 -> m10_105  [key=2, style=dotted];
m10_328 -> m10_329  [key=0, style=solid];
m10_328 -> m10_330  [key=0, style=solid];
m10_331 -> m10_326  [key=0, style=bold, color=blue];
m10_24 -> m10_25  [key=0, style=solid];
m10_24 -> m10_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_9  [key=2, style=dotted];
m10_25 -> m10_10  [key=2, style=dotted];
m10_25 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_20  [key=2, style=dotted];
m10_27 -> m10_24  [key=0, style=bold, color=blue];
m10_41 -> m10_42  [key=0, style=solid];
m10_41 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m10_42 -> m10_43  [key=0, style=solid];
m10_42 -> m10_9  [key=2, style=dotted];
m10_42 -> m10_10  [key=2, style=dotted];
m10_42 -> m10_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_43 -> m10_44  [key=0, style=solid];
m10_43 -> m10_36  [key=2, style=dotted];
m10_43 -> m10_12  [key=2, style=dotted];
m10_44 -> m10_41  [key=0, style=bold, color=blue];
m10_135 -> m10_136  [key=0, style=solid];
m10_136 -> m10_137  [key=0, style=solid];
m10_136 -> m10_140  [key=2, style=dotted];
m10_136 -> m10_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_137 -> m10_138  [key=0, style=solid];
m10_137 -> m10_9  [key=2, style=dotted];
m10_137 -> m10_10  [key=2, style=dotted];
m10_137 -> m10_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_138 -> m10_139  [key=0, style=solid];
m10_138 -> m10_105  [key=2, style=dotted];
m10_139 -> m10_135  [key=0, style=bold, color=blue];
m10_234 -> m10_235  [key=0, style=solid];
m10_235 -> m10_236  [key=0, style=solid];
m10_235 -> m10_79  [key=2, style=dotted];
m10_235 -> m10_70  [key=2, style=dotted];
m10_235 -> m10_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_236 -> m10_237  [key=0, style=solid];
m10_236 -> m10_9  [key=2, style=dotted];
m10_236 -> m10_10  [key=2, style=dotted];
m10_236 -> m10_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_237 -> m10_238  [key=0, style=solid];
m10_237 -> m10_36  [key=2, style=dotted];
m10_237 -> m10_12  [key=2, style=dotted];
m10_238 -> m10_234  [key=0, style=bold, color=blue];
m10_284 -> m10_285  [key=0, style=solid];
m10_284 -> m10_286  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_285 -> m10_286  [key=0, style=solid];
m10_285 -> m10_9  [key=2, style=dotted];
m10_285 -> m10_10  [key=2, style=dotted];
m10_285 -> m10_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_286 -> m10_287  [key=0, style=solid];
m10_286 -> m10_105  [key=2, style=dotted];
m10_287 -> m10_284  [key=0, style=bold, color=blue];
m10_189 -> m10_190  [key=0, style=solid];
m10_190 -> m10_191  [key=0, style=solid];
m10_190 -> m10_194  [key=2, style=dotted];
m10_190 -> m10_70  [key=2, style=dotted];
m10_190 -> m10_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_191 -> m10_192  [key=0, style=solid];
m10_191 -> m10_9  [key=2, style=dotted];
m10_191 -> m10_10  [key=2, style=dotted];
m10_191 -> m10_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_192 -> m10_193  [key=0, style=solid];
m10_192 -> m10_36  [key=2, style=dotted];
m10_192 -> m10_12  [key=2, style=dotted];
m10_193 -> m10_189  [key=0, style=bold, color=blue];
m10_167 -> m10_168  [key=0, style=solid];
m10_168 -> m10_169  [key=0, style=solid];
m10_168 -> m10_140  [key=2, style=dotted];
m10_168 -> m10_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_169 -> m10_170  [key=0, style=solid];
m10_171 -> m10_172  [key=0, style=solid];
m10_171 -> m10_105  [key=2, style=dotted];
m10_170 -> m10_171  [key=0, style=solid];
m10_170 -> m10_9  [key=2, style=dotted];
m10_170 -> m10_173  [key=2, style=dotted];
m10_170 -> m10_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_170 -> m10_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_172 -> m10_167  [key=0, style=bold, color=blue];
m10_259 -> m10_260  [key=0, style=solid];
m10_260 -> m10_261  [key=0, style=solid];
m10_260 -> m10_247  [key=2, style=dotted];
m10_260 -> m10_262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_261 -> m10_262  [key=0, style=solid];
m10_261 -> m10_9  [key=2, style=dotted];
m10_261 -> m10_10  [key=2, style=dotted];
m10_261 -> m10_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_262 -> m10_263  [key=0, style=solid];
m10_262 -> m10_36  [key=2, style=dotted];
m10_262 -> m10_12  [key=2, style=dotted];
m10_263 -> m10_259  [key=0, style=bold, color=blue];
m10_300 -> m10_301  [key=0, style=solid];
m10_300 -> m10_302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m10_301 -> m10_302  [key=0, style=solid];
m10_301 -> m10_9  [key=2, style=dotted];
m10_301 -> m10_10  [key=2, style=dotted];
m10_301 -> m10_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_302 -> m10_303  [key=0, style=solid];
m10_302 -> m10_105  [key=2, style=dotted];
m10_303 -> m10_300  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_6  [key=2, style=dotted];
m10_1 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m10_1 -> m10_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_7  [key=2, style=dotted];
m10_2 -> m10_8  [key=2, style=dotted];
m10_2 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_9  [key=2, style=dotted];
m10_3 -> m10_10  [key=2, style=dotted];
m10_3 -> m10_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_4 -> m10_5  [key=0, style=solid];
m10_4 -> m10_11  [key=2, style=dotted];
m10_4 -> m10_12  [key=2, style=dotted];
m10_5 -> m10_0  [key=0, style=bold, color=blue];
m10_242 -> m10_243  [key=0, style=solid];
m10_243 -> m10_244  [key=0, style=solid];
m10_243 -> m10_247  [key=2, style=dotted];
m10_243 -> m10_245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_244 -> m10_245  [key=0, style=solid];
m10_244 -> m10_9  [key=2, style=dotted];
m10_244 -> m10_10  [key=2, style=dotted];
m10_244 -> m10_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_245 -> m10_246  [key=0, style=solid];
m10_245 -> m10_36  [key=2, style=dotted];
m10_245 -> m10_12  [key=2, style=dotted];
m10_246 -> m10_242  [key=0, style=bold, color=blue];
m10_84 -> m10_85  [key=0, style=solid];
m10_85 -> m10_86  [key=0, style=solid];
m10_85 -> m10_79  [key=2, style=dotted];
m10_85 -> m10_70  [key=2, style=dotted];
m10_85 -> m10_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_86 -> m10_87  [key=0, style=solid];
m10_86 -> m10_9  [key=2, style=dotted];
m10_86 -> m10_10  [key=2, style=dotted];
m10_86 -> m10_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_87 -> m10_88  [key=0, style=solid];
m10_87 -> m10_36  [key=2, style=dotted];
m10_87 -> m10_12  [key=2, style=dotted];
m10_88 -> m10_84  [key=0, style=bold, color=blue];
m10_225 -> m10_226  [key=0, style=solid];
m10_226 -> m10_227  [key=0, style=solid];
m10_226 -> m10_221  [key=2, style=dotted];
m10_226 -> m10_70  [key=2, style=dotted];
m10_226 -> m10_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m10_227 -> m10_228  [key=0, style=solid];
m10_227 -> m10_9  [key=2, style=dotted];
m10_227 -> m10_10  [key=2, style=dotted];
m10_227 -> m10_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_228 -> m10_229  [key=0, style=solid];
m10_228 -> m10_36  [key=2, style=dotted];
m10_228 -> m10_12  [key=2, style=dotted];
m10_229 -> m10_225  [key=0, style=bold, color=blue];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_9  [key=2, style=dotted];
m10_33 -> m10_10  [key=2, style=dotted];
m10_33 -> m10_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_36  [key=2, style=dotted];
m10_34 -> m10_12  [key=2, style=dotted];
m10_35 -> m10_32  [key=0, style=bold, color=blue];
m10_392 -> m10_393  [key=0, style=solid];
m10_392 -> m10_394  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m10_393 -> m10_394  [key=0, style=solid];
m10_393 -> m10_9  [key=2, style=dotted];
m10_393 -> m10_10  [key=2, style=dotted];
m10_393 -> m10_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_394 -> m10_395  [key=0, style=solid];
m10_394 -> m10_105  [key=2, style=dotted];
m10_395 -> m10_392  [key=0, style=bold, color=blue];
m10_415 -> m10_416  [key=0, style=solid];
m10_415 -> m10_417  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m10_416 -> m10_417  [key=0, style=solid];
m10_416 -> m10_419  [key=2, style=dotted];
m10_416 -> m10_10  [key=2, style=dotted];
m10_417 -> m10_418  [key=0, style=solid];
m10_417 -> m10_105  [key=2, style=dotted];
m10_418 -> m10_415  [key=0, style=bold, color=blue];
m10_420 -> m10_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m10_421 -> m10_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m10_421 -> m10_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m10_422 -> m10_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_423 -> m10_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_1  [key=0, style=solid];
m18_0 -> m18_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_4  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_6  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_9  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_22  [key=1, style=dashed, color=red, label=int];
m18_0 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_26  [key=1, style=dashed, color=red, label=int];
m18_0 -> m18_27  [key=1, style=dashed, color=red, label=int];
m18_0 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_29  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_0 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_1 -> m18_2  [key=0, style=solid];
m18_1 -> m18_3  [key=0, style=solid];
m18_3 -> m18_4  [key=0, style=solid];
m18_3 -> m18_5  [key=0, style=solid];
m18_4 -> m18_34  [key=0, style=solid];
m18_4 -> m18_35  [key=2, style=dotted];
m18_4 -> m18_0  [key=2, style=dotted];
m18_4 -> m18_36  [key=2, style=dotted];
m18_6 -> m18_7  [key=0, style=solid];
m18_6 -> m18_9  [key=0, style=solid];
m18_7 -> m18_8  [key=0, style=solid];
m18_7 -> m18_0  [key=2, style=dotted];
m18_7 -> m18_38  [key=2, style=dotted];
m18_7 -> m18_39  [key=2, style=dotted];
m18_8 -> m18_9  [key=0, style=solid];
m18_8 -> m18_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_22  [key=1, style=dashed, color=red, label=int];
m18_8 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_26  [key=1, style=dashed, color=red, label=int];
m18_8 -> m18_27  [key=1, style=dashed, color=red, label=int];
m18_8 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_29  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_8 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_9 -> m18_10  [key=0, style=solid];
m18_9 -> m18_12  [key=0, style=solid];
m18_10 -> m18_11  [key=0, style=solid];
m18_10 -> m18_0  [key=2, style=dotted];
m18_10 -> m18_38  [key=2, style=dotted];
m18_10 -> m18_39  [key=2, style=dotted];
m18_11 -> m18_12  [key=0, style=solid];
m18_11 -> m18_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_22  [key=1, style=dashed, color=red, label=int];
m18_11 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_26  [key=1, style=dashed, color=red, label=int];
m18_11 -> m18_27  [key=1, style=dashed, color=red, label=int];
m18_11 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_29  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_11 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_12 -> m18_13  [key=0, style=solid];
m18_12 -> m18_15  [key=0, style=solid];
m18_13 -> m18_14  [key=0, style=solid];
m18_13 -> m18_40  [key=2, style=dotted];
m18_13 -> m18_0  [key=2, style=dotted];
m18_13 -> m18_36  [key=2, style=dotted];
m18_13 -> m18_39  [key=2, style=dotted];
m18_14 -> m18_15  [key=0, style=solid];
m18_14 -> m18_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_18  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_22  [key=1, style=dashed, color=red, label=int];
m18_14 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_26  [key=1, style=dashed, color=red, label=int];
m18_14 -> m18_27  [key=1, style=dashed, color=red, label=int];
m18_14 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_29  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_14 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_15 -> m18_16  [key=0, style=solid];
m18_15 -> m18_18  [key=0, style=solid];
m18_16 -> m18_17  [key=0, style=solid];
m18_16 -> m18_0  [key=2, style=dotted];
m18_16 -> m18_36  [key=2, style=dotted];
m18_16 -> m18_39  [key=2, style=dotted];
m18_17 -> m18_18  [key=0, style=solid];
m18_17 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_20  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_21  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_22  [key=1, style=dashed, color=red, label=int];
m18_17 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_26  [key=1, style=dashed, color=red, label=int];
m18_17 -> m18_27  [key=1, style=dashed, color=red, label=int];
m18_17 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_29  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_17 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_18 -> m18_19  [key=0, style=solid];
m18_18 -> m18_33  [key=0, style=solid];
m18_19 -> m18_20  [key=0, style=solid];
m18_19 -> m18_21  [key=0, style=solid];
m18_19 -> m18_41  [key=2, style=dotted];
m18_20 -> m18_33  [key=0, style=solid];
m18_20 -> m18_39  [key=2, style=dotted];
m18_21 -> m18_22  [key=0, style=solid, color=red];
m18_21 -> m18_23  [key=0, style=solid];
m18_22 -> m18_33  [key=0, style=solid, color=red];
m18_22 -> m18_39  [key=2, style=dotted, color=red];
m18_24 -> m18_25  [key=0, style=solid];
m18_24 -> m18_27  [key=0, style=solid, color=red];
m18_25 -> m18_26  [key=0, style=solid, color=red];
m18_26 -> m18_32  [key=0, style=solid, color=red];
m18_26 -> m18_0  [key=2, style=dotted, color=red];
m18_26 -> m18_38  [key=2, style=dotted, color=red];
m18_27 -> m18_28  [key=0, style=solid, color=red];
m18_27 -> m18_30  [key=1, style=dashed, color=red, label=lastPart];
m18_27 -> m18_31  [key=1, style=dashed, color=red, label=lastPart];
m18_27 -> m18_32  [key=1, style=dashed, color=red, label=lastPart];
m18_28 -> m18_29  [key=0, style=solid];
m18_28 -> m18_32  [key=0, style=solid, color=red];
m18_29 -> m18_30  [key=0, style=solid];
m18_29 -> m18_31  [key=0, style=solid];
m18_31 -> m18_32  [key=0, style=solid, color=red];
m18_31 -> m18_36  [key=2, style=dotted];
m18_31 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m18_2 -> m18_34  [key=0, style=solid];
m18_5 -> m18_6  [key=0, style=solid];
m18_5 -> m18_37  [key=2, style=dotted];
m18_5 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label=parts];
m18_5 -> m18_10  [key=1, style=dashed, color=darkseagreen4, label=parts];
m18_5 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label=parts];
m18_5 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label=parts];
m18_5 -> m18_20  [key=1, style=dashed, color=darkseagreen4, label=parts];
m18_5 -> m18_22  [key=1, style=dashed, color=red, label=parts];
m18_5 -> m18_32  [key=1, style=dashed, color=red, label=parts];
m18_5 -> m18_33  [key=1, style=dashed, color=darkseagreen4, label=parts];
m18_32 -> m18_33  [key=0, style=solid, color=red];
m18_32 -> m18_39  [key=2, style=dotted, color=red];
m18_33 -> m18_34  [key=0, style=solid];
m18_33 -> m18_42  [key=2, style=dotted];
m18_33 -> m18_43  [key=2, style=dotted];
m18_23 -> m18_24  [key=0, style=solid];
m18_30 -> m18_32  [key=0, style=solid, color=red];
m18_30 -> m18_30  [key=1, style=dashed, color=darkseagreen4, label=lastPart];
m18_34 -> m18_0  [key=0, style=bold, color=blue];
m18_44 -> m18_45  [key=0, style=solid, color=red];
m18_44 -> m18_47  [key=1, style=dashed, color=darkseagreen4, label=int];
m18_45 -> m18_46  [key=0, style=solid, color=red];
m18_45 -> m18_47  [key=0, style=solid, color=red];
m18_47 -> m18_48  [key=0, style=solid, color=red];
m18_47 -> m18_0  [key=2, style=dotted];
m18_47 -> m18_49  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_47 -> m18_50  [key=1, style=dashed, color=red, label=convertedNumber];
m18_47 -> m18_51  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_47 -> m18_52  [key=1, style=dashed, color=red, label=convertedNumber];
m18_47 -> m18_53  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_47 -> m18_54  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_47 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_47 -> m18_56  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_46 -> m18_59  [key=0, style=solid];
m18_48 -> m18_49  [key=0, style=solid, color=red];
m18_48 -> m18_50  [key=0, style=solid, color=red];
m18_48 -> m18_60  [key=2, style=dotted, color=red];
m18_49 -> m18_54  [key=0, style=solid];
m18_49 -> m18_61  [key=2, style=dotted];
m18_49 -> m18_49  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_49 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_49 -> m18_56  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_50 -> m18_51  [key=0, style=solid, color=red];
m18_50 -> m18_52  [key=0, style=solid, color=red];
m18_50 -> m18_60  [key=2, style=dotted, color=red];
m18_51 -> m18_54  [key=0, style=solid];
m18_51 -> m18_51  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_51 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_51 -> m18_56  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_52 -> m18_53  [key=0, style=solid, color=red];
m18_52 -> m18_54  [key=0, style=solid, color=red];
m18_52 -> m18_60  [key=2, style=dotted, color=red];
m18_53 -> m18_54  [key=0, style=solid];
m18_53 -> m18_61  [key=2, style=dotted];
m18_53 -> m18_53  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_53 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_53 -> m18_56  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_54 -> m18_55  [key=0, style=solid];
m18_54 -> m18_56  [key=0, style=solid];
m18_54 -> m18_62  [key=2, style=dotted];
m18_55 -> m18_56  [key=0, style=solid];
m18_55 -> m18_63  [key=2, style=dotted];
m18_55 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_56 -> m18_57  [key=0, style=solid, color=red];
m18_56 -> m18_61  [key=2, style=dotted];
m18_56 -> m18_56  [key=1, style=dashed, color=darkseagreen4, label=convertedNumber];
m18_57 -> m18_58  [key=0, style=solid, color=red];
m18_57 -> m18_57  [key=1, style=dashed, color=red, label=convertedNumber];
m18_58 -> m18_59  [key=0, style=solid];
m18_59 -> m18_44  [key=0, style=bold, color=blue];
m18_64 -> m18_4  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
m18_64 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
m18_64 -> m18_10  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
m18_64 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
m18_64 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
m18_64 -> m18_26  [key=1, style=dashed, color=red, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
m18_64 -> m18_47  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.FrenchNumberToWordsConverter"];
}
