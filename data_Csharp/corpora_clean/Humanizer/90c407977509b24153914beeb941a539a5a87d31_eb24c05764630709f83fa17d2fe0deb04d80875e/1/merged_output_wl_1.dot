digraph  {
n0 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", span="8-8"];
n1 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", label="var twoWeeks = TimeSpan.FromDays(14)", span="10-10"];
n2 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", label="var actual = twoWeeks.Humanize()", span="11-11"];
n5 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n3 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", label="Assert.Equal(''2 weeks'', actual)", span="12-12"];
n6 [cluster="System.TimeSpan.Humanize()", label="Entry System.TimeSpan.Humanize()", span="22-22"];
n4 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoWeeks()", span="8-8"];
n7 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n8 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", span="16-16"];
n9 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", label="var oneWeek = TimeSpan.FromDays(7)", span="18-18"];
n10 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", label="var actual = oneWeek.Humanize()", span="19-19"];
n11 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", label="Assert.Equal(''1 week'', actual)", span="20-20"];
n12 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneWeek()", span="16-16"];
n13 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", span="24-24"];
n14 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", label="var sixDays = TimeSpan.FromDays(6)", span="26-26"];
n15 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", label="var actual = sixDays.Humanize()", span="27-27"];
n16 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", label="Assert.Equal(''6 days'', actual)", span="28-28"];
n17 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.SixDays()", span="24-24"];
n18 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", span="32-32"];
n19 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", label="var twoDays = TimeSpan.FromDays(2)", span="34-34"];
n20 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", label="var actual = twoDays.Humanize()", span="35-35"];
n21 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", label="Assert.Equal(''2 days'', actual)", span="36-36"];
n22 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoDays()", span="32-32"];
n23 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", span="40-40"];
n24 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", label="var oneDay = TimeSpan.FromDays(1)", span="42-42"];
n25 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", label="var actual = oneDay.Humanize()", span="43-43"];
n26 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", label="Assert.Equal(''1 day'', actual)", span="44-44"];
n27 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneDay()", span="40-40"];
n28 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", span="48-48"];
n29 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", label="var twoHours = TimeSpan.FromHours(2)", span="50-50"];
n30 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", label="var actual = twoHours.Humanize()", span="51-51"];
n33 [cluster="System.TimeSpan.FromHours(double)", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
n31 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", label="Assert.Equal(''2 hours'', actual)", span="52-52"];
n32 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoHours()", span="48-48"];
n34 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", span="56-56"];
n35 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", label="var oneHour = TimeSpan.FromHours(1)", span="58-58"];
n36 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", label="var actual = oneHour.Humanize()", span="59-59"];
n37 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", label="Assert.Equal(''1 hour'', actual)", span="60-60"];
n38 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneHour()", span="56-56"];
n39 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", span="64-64"];
n40 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", label="var twoMinutes = TimeSpan.FromMinutes(2)", span="66-66"];
n41 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", label="var actual = twoMinutes.Humanize()", span="67-67"];
n44 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n42 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", label="Assert.Equal(''2 minutes'', actual)", span="68-68"];
n43 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMinutes()", span="64-64"];
n45 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", span="72-72"];
n46 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", label="var oneMinute = TimeSpan.FromMinutes(1)", span="74-74"];
n47 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", label="var actual = oneMinute.Humanize()", span="75-75"];
n48 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", label="Assert.Equal(''1 minute'', actual)", span="76-76"];
n49 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMinute()", span="72-72"];
n50 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", span="80-80"];
n51 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", label="var twoSeconds = TimeSpan.FromSeconds(2)", span="82-82"];
n52 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", label="var actual = twoSeconds.Humanize()", span="83-83"];
n55 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n53 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", label="Assert.Equal(''2 seconds'', actual)", span="84-84"];
n54 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoSeconds()", span="80-80"];
n56 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", span="88-88"];
n57 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", label="var oneSecond = TimeSpan.FromSeconds(1)", span="90-90"];
n58 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", label="var actual = oneSecond.Humanize()", span="91-91"];
n59 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", label="Assert.Equal(''1 second'', actual)", span="92-92"];
n60 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneSecond()", span="88-88"];
n61 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", span="96-96"];
n62 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", label="var twoMilliseconds = TimeSpan.FromMilliseconds(2)", span="98-98"];
n63 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", label="var actual = twoMilliseconds.Humanize()", span="99-99"];
n66 [cluster="System.TimeSpan.FromMilliseconds(double)", label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0"];
n64 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", label="Assert.Equal(''2 milliseconds'', actual)", span="100-100"];
n65 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.TwoMilliseconds()", span="96-96"];
n67 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", span="104-104"];
n68 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", label="var oneMillisecond = TimeSpan.FromMilliseconds(1)", span="106-106"];
n69 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", label="var actual = oneMillisecond.Humanize()", span="107-107"];
n70 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", label="Assert.Equal(''1 millisecond'', actual)", span="108-108"];
n71 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.OneMillisecond()", span="104-104"];
n72 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", label="Entry Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", span="112-112"];
n73 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", label="var noTime = TimeSpan.Zero", span="114-114"];
n74 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", label="var actual = noTime.Humanize()", span="115-115"];
n75 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", label="Assert.Equal(''no time'', actual)", span="116-116"];
n76 [cluster="Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", label="Exit Humanizer.Tests.TimeSpanHumanizeExtensionsTests.NoTime()", span="112-112"];
d1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, label="0: var fakeOptions = new FakeOptions()", span="21-21"];
d0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
d2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, label="0: var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
d6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
d3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
d14 [cluster="lambda expression", label=fakeOptions, span="28-28"];
d7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
d8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
d4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
d5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
d22 [cluster="lambda expression", label="new FakeOptions()", span="49-49"];
d46 [cluster="lambda expression", label="new FakeOptions()", span="118-118"];
d240 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
d249 [cluster="lambda expression", label="new FakeOptions()", span="583-583"];
d257 [cluster="lambda expression", label="new FakeOptions()", span="602-602"];
d265 [cluster="lambda expression", label="new FakeOptions()", span="621-621"];
d273 [cluster="lambda expression", label="new FakeOptions()", span="641-641"];
d289 [cluster="lambda expression", label="new FakeOptions()", span="682-682"];
d387 [cluster="lambda expression", label="new FakeOptions()", span="872-872"];
d416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939"];
d421 [cluster="lambda expression", label="new FakeOptions()", span="943-943"];
d9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
d10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
d13 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d428 [label=fakeOptions, span=""];
d15 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d11 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
d12 [cluster="Unk.True", label="Entry Unk.True", span=""];
d21 [cluster="lambda expression", label="Entry lambda expression", span="49-49"];
d23 [cluster="lambda expression", label="Exit lambda expression", span="49-49"];
d45 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
d47 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
d239 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
d241 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
d248 [cluster="lambda expression", label="Entry lambda expression", span="583-583"];
d250 [cluster="lambda expression", label="Exit lambda expression", span="583-583"];
d256 [cluster="lambda expression", label="Entry lambda expression", span="602-602"];
d258 [cluster="lambda expression", label="Exit lambda expression", span="602-602"];
d264 [cluster="lambda expression", label="Entry lambda expression", span="621-621"];
d266 [cluster="lambda expression", label="Exit lambda expression", span="621-621"];
d272 [cluster="lambda expression", label="Entry lambda expression", span="641-641"];
d274 [cluster="lambda expression", label="Exit lambda expression", span="641-641"];
d288 [cluster="lambda expression", label="Entry lambda expression", span="682-682"];
d290 [cluster="lambda expression", label="Exit lambda expression", span="682-682"];
d386 [cluster="lambda expression", label="Entry lambda expression", span="872-872"];
d388 [cluster="lambda expression", label="Exit lambda expression", span="872-872"];
d415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
d417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946"];
d418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949"];
d420 [cluster="lambda expression", label="Entry lambda expression", span="943-943"];
d422 [cluster="lambda expression", label="Exit lambda expression", span="943-943"];
d17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
d25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
d33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
d42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
d49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
d57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
d66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
d76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
d86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
d94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
d102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
d112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
d121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
d129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
d137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
d145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
d153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
d161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
d170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
d191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
d201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
d210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
d218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
d227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
d236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
d244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
d253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
d261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
d268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
d277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
d285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
d293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
d301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
d309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
d316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
d327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
d341 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
d352 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
d363 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
d370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
d383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
d393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891"];
d401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908"];
d408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927"];
d424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965"];
d34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
d43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
d50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
d58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
d67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
d77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
d87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
d95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
d113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
d122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
d130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
d192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
d219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
d228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
d237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
d245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
d254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
d262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
d269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
d278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
d294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
d419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
d105 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
d18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
d24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
d26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
d28 [cluster="lambda expression", label="Entry lambda expression", span="72-72"];
d32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
d37 [cluster="lambda expression", label="Entry lambda expression", span="96-96"];
d41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
d48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
d52 [cluster="lambda expression", label="Entry lambda expression", span="141-141"];
d56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
d60 [cluster="lambda expression", label="Entry lambda expression", span="163-163"];
d65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
d71 [cluster="lambda expression", label="Entry lambda expression", span="182-182"];
d75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
d80 [cluster="lambda expression", label="Entry lambda expression", span="201-201"];
d85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
d89 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
d93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
d97 [cluster="lambda expression", label="Entry lambda expression", span="239-239"];
d101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
d103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
d106 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
d111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
d120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
d124 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
d128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
d132 [cluster="lambda expression", label="Entry lambda expression", span="320-320"];
d136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
d138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
d141 [cluster="lambda expression", label="Entry lambda expression", span="345-345"];
d144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
d146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
d148 [cluster="lambda expression", label="Entry lambda expression", span="368-368"];
d152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
d154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
d156 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
d160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
d162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
d164 [cluster="lambda expression", label="Entry lambda expression", span="412-412"];
d169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
d171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
d173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
d174 [cluster="lambda expression", label="Entry lambda expression", span="441-441"];
d177 [cluster="lambda expression", label="Entry lambda expression", span="442-444"];
d190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
d195 [cluster="lambda expression", label="Entry lambda expression", span="467-467"];
d200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
d202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
d205 [cluster="lambda expression", label="Entry lambda expression", span="487-487"];
d209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
d211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
d213 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
d217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
d222 [cluster="lambda expression", label="Entry lambda expression", span="527-527"];
d226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
d230 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
d235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
d243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
d252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
d260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
d267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
d276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
d280 [cluster="lambda expression", label="Entry lambda expression", span="660-660"];
d284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
d286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
d292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
d296 [cluster="lambda expression", label="Entry lambda expression", span="701-701"];
d300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
d302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
d304 [cluster="lambda expression", label="Entry lambda expression", span="723-723"];
d308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
d310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
d312 [cluster="lambda expression", label="Entry lambda expression", span="745-745"];
d315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
d317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="result.Value.FileName != null", span="771-771"];
d322 [cluster="lambda expression", label="Entry lambda expression", span="765-765"];
d318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
d319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
d326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
d328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="result.Value.Offset != null", span="795-795"];
d332 [cluster="lambda expression", label="Entry lambda expression", span="789-789"];
d329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
d330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
d340 [cluster="lambda expression", label="Entry lambda expression", span="809-813"];
d342 [cluster="lambda expression", label="Exit lambda expression", span="809-813"];
d343 [cluster="lambda expression", label="Entry lambda expression", span="810-810"];
d351 [cluster="lambda expression", label="Entry lambda expression", span="823-827"];
d353 [cluster="lambda expression", label="Exit lambda expression", span="823-827"];
d354 [cluster="lambda expression", label="Entry lambda expression", span="824-824"];
d362 [cluster="lambda expression", label="Entry lambda expression", span="837-841"];
d364 [cluster="lambda expression", label="Exit lambda expression", span="837-841"];
d365 [cluster="lambda expression", label="Entry lambda expression", span="838-838"];
d369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
d371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
d375 [cluster="lambda expression", label="Entry lambda expression", span="857-857"];
d382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
d384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
d392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
d394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894"];
d396 [cluster="lambda expression", label="Entry lambda expression", span="888-888"];
d400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
d402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911"];
d404 [cluster="lambda expression", label="Entry lambda expression", span="905-905"];
d407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
d409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930"];
d411 [cluster="lambda expression", label="Entry lambda expression", span="924-924"];
d423 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
d425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968"];
d427 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
d35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
d36 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
d44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
d51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
d59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
d68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
d78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
d88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
d96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
d114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
d123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
d131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
d193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
d220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
d229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
d238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
d246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
d255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
d263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
d270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
d271 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
d295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
d19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
d20 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
d30 [cluster="lambda expression", label="Exit lambda expression", span="72-72"];
d29 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="72-72"];
d39 [cluster="lambda expression", label="Exit lambda expression", span="96-96"];
d38 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="96-96"];
d54 [cluster="lambda expression", label="Exit lambda expression", span="141-141"];
d53 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
d62 [cluster="lambda expression", label="Exit lambda expression", span="163-163"];
d61 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
d64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
d69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
d70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
d73 [cluster="lambda expression", label="Exit lambda expression", span="182-182"];
d72 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
d74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
d79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
d82 [cluster="lambda expression", label="Exit lambda expression", span="201-201"];
d81 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
d84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
d91 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
d90 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
d92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
d99 [cluster="lambda expression", label="Exit lambda expression", span="239-239"];
d98 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
d104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
d108 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
d107 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="263-263"];
d110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
d115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
d118 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
d117 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="282-282"];
d119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
d126 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
d125 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="301-301"];
d127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
d134 [cluster="lambda expression", label="Exit lambda expression", span="320-320"];
d133 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="320-320"];
d135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
d140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
d139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
d143 [cluster="lambda expression", label="Exit lambda expression", span="345-345"];
d142 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="345-345"];
d147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="368-368"];
d149 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
d155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
d158 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
d157 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
d163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
d166 [cluster="lambda expression", label="Exit lambda expression", span="412-412"];
d165 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
d168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
d172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
d176 [cluster="lambda expression", label="Exit lambda expression", span="441-441"];
d175 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="441-441"];
d179 [cluster="lambda expression", label="Exit lambda expression", span="442-444"];
d178 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
d182 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
d186 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
d189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
d194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
d197 [cluster="lambda expression", label="Exit lambda expression", span="467-467"];
d196 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="467-467"];
d199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
d204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
d203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
d207 [cluster="lambda expression", label="Exit lambda expression", span="487-487"];
d206 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
d208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
d212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
d215 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
d214 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
d216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
d221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
d224 [cluster="lambda expression", label="Exit lambda expression", span="527-527"];
d223 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
d225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
d232 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
d231 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="545-545"];
d234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
d242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
d247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
d251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
d259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
d275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
d282 [cluster="lambda expression", label="Exit lambda expression", span="660-660"];
d281 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="660-660"];
d287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
d291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
d298 [cluster="lambda expression", label="Exit lambda expression", span="701-701"];
d297 [cluster="lambda expression", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
d303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
d306 [cluster="lambda expression", label="Exit lambda expression", span="723-723"];
d305 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="723-723"];
d311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
d314 [cluster="lambda expression", label="Exit lambda expression", span="745-745"];
d313 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="745-745"];
d320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
d324 [cluster="lambda expression", label="Exit lambda expression", span="765-765"];
d323 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="765-765"];
d321 [cluster="Unk.get_IsSome", label="Entry Unk.get_IsSome", span=""];
d331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
d334 [cluster="lambda expression", label="Exit lambda expression", span="789-789"];
d333 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="789-789"];
d345 [cluster="lambda expression", label="Exit lambda expression", span="810-810"];
d344 [cluster="lambda expression", label="new FakeOptionsWithMinZero()", span="810-810"];
d356 [cluster="lambda expression", label="Exit lambda expression", span="824-824"];
d355 [cluster="lambda expression", label="new FakeOptionsWithMaxZero()", span="824-824"];
d367 [cluster="lambda expression", label="Exit lambda expression", span="838-838"];
d366 [cluster="lambda expression", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
d372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
d380 [cluster="lambda expression", label="x == expected", span="863-863"];
d373 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
d374 [cluster="Unk.HaveCount", label="Entry Unk.HaveCount", span=""];
d379 [cluster="lambda expression", label="Entry lambda expression", span="863-863"];
d377 [cluster="lambda expression", label="Exit lambda expression", span="857-857"];
d376 [cluster="lambda expression", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
d385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
d390 [cluster="lambda expression", label="x == expected", span="878-878"];
d389 [cluster="lambda expression", label="Entry lambda expression", span="878-878"];
d395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
d398 [cluster="lambda expression", label="Exit lambda expression", span="888-888"];
d397 [cluster="lambda expression", label="new FakeInterfaceOptions()", span="888-888"];
d403 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
d406 [cluster="lambda expression", label="Exit lambda expression", span="905-905"];
d405 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="905-905"];
d410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
d413 [cluster="lambda expression", label="Exit lambda expression", span="924-924"];
d412 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924"];
d426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
d31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
d40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
d55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
d63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
d83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
d100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
d109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
d151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
d159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
d167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
d180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
d181 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
d429 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d183 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
d184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d185 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
d187 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
d188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
d233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
d283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
d299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
d307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
d325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
d346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
d357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
d368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
d430 [label=int, span=""];
d381 [cluster="lambda expression", label="Exit lambda expression", span="863-863"];
d378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
d431 [label=int, span=""];
d391 [cluster="lambda expression", label="Exit lambda expression", span="878-878"];
d399 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
d414 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_4 [cluster="string.Split(params char[])", file="StringDehumanizeExtensions.cs", label="Entry string.Split(params char[])", span="0-0"];
m1_0 [cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", file="StringDehumanizeExtensions.cs", label="Entry Humanizer.StringDehumanizeExtensions.Duhumanize(string)", span="6-6"];
m1_1 [cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", color=green, community=0, file="StringDehumanizeExtensions.cs", label="0: var titlizedWords = from word in input.Split(' ')\r\n                           select word.Humanize(LetterCasing.Title)", span="8-9"];
m1_2 [cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", file="StringDehumanizeExtensions.cs", label="return string.Join('''', titlizedWords);", span="11-11"];
m1_3 [cluster="Humanizer.StringDehumanizeExtensions.Duhumanize(string)", file="StringDehumanizeExtensions.cs", label="Exit Humanizer.StringDehumanizeExtensions.Duhumanize(string)", span="6-6"];
m1_6 [cluster="Unk.Join", file="StringDehumanizeExtensions.cs", label="Entry Unk.Join", span=""];
m1_5 [cluster="string.Humanize(Humanizer.LetterCasing)", file="StringDehumanizeExtensions.cs", label="Entry string.Humanize(Humanizer.LetterCasing)", span="61-61"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n7  [key=2, style=dotted];
n4 -> n0  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n5  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n6  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n7  [key=2, style=dotted];
n12 -> n8  [color=blue, key=0, style=bold];
n13 -> n14  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n14 -> n5  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n6  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n7  [key=2, style=dotted];
n17 -> n13  [color=blue, key=0, style=bold];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n5  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n6  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n7  [key=2, style=dotted];
n22 -> n18  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n5  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n6  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n7  [key=2, style=dotted];
n27 -> n23  [color=blue, key=0, style=bold];
n28 -> n29  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n33  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n6  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n7  [key=2, style=dotted];
n32 -> n28  [color=blue, key=0, style=bold];
n34 -> n35  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n35 -> n33  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n6  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n7  [key=2, style=dotted];
n38 -> n34  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n44  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n6  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n7  [key=2, style=dotted];
n43 -> n39  [color=blue, key=0, style=bold];
n45 -> n46  [key=0, style=solid];
n46 -> n47  [key=0, style=solid];
n46 -> n44  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n6  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n7  [key=2, style=dotted];
n49 -> n45  [color=blue, key=0, style=bold];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n55  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n6  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n7  [key=2, style=dotted];
n54 -> n50  [color=blue, key=0, style=bold];
n56 -> n57  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n55  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n6  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n7  [key=2, style=dotted];
n60 -> n56  [color=blue, key=0, style=bold];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n66  [key=2, style=dotted];
n63 -> n64  [key=0, style=solid];
n63 -> n6  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n7  [key=2, style=dotted];
n65 -> n61  [color=blue, key=0, style=bold];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n66  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n69 -> n6  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n7  [key=2, style=dotted];
n71 -> n67  [color=blue, key=0, style=bold];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n6  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n7  [key=2, style=dotted];
n76 -> n72  [color=blue, key=0, style=bold];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d6  [color=green, key=2, style=dotted];
d1 -> d3  [color=green, key=1, label=fakeOptions, style=dashed];
d1 -> d14  [color=green, key=1, label=fakeOptions, style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d3  [color=green, key=0, style=solid];
d2 -> d7  [color=green, key=2, style=dotted];
d2 -> d8  [color=green, key=2, style=dotted];
d2 -> d4  [color=green, key=1, label=expectedResult, style=dashed];
d3 -> d4  [key=0, style=solid];
d3 -> d9  [key=2, style=dotted];
d3 -> d10  [key=2, style=dotted];
d3 -> d13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d14 -> d15  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d11  [key=2, style=dotted];
d4 -> d12  [key=2, style=dotted];
d5 -> d0  [color=blue, key=0, style=bold];
d22 -> d6  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d46 -> d6  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d240 -> d6  [key=2, style=dotted];
d240 -> d241  [key=0, style=solid];
d249 -> d6  [key=2, style=dotted];
d249 -> d250  [key=0, style=solid];
d257 -> d6  [key=2, style=dotted];
d257 -> d258  [key=0, style=solid];
d265 -> d6  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d273 -> d6  [key=2, style=dotted];
d273 -> d274  [key=0, style=solid];
d289 -> d6  [key=2, style=dotted];
d289 -> d290  [key=0, style=solid];
d387 -> d6  [key=2, style=dotted];
d387 -> d388  [key=0, style=solid];
d416 -> d6  [key=2, style=dotted];
d416 -> d417  [key=0, style=solid];
d416 -> d418  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d421 -> d6  [key=2, style=dotted];
d421 -> d422  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d428 -> d14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d15 -> d13  [color=blue, key=0, style=bold];
d21 -> d22  [key=0, style=solid];
d23 -> d21  [color=blue, key=0, style=bold];
d45 -> d46  [key=0, style=solid];
d47 -> d45  [color=blue, key=0, style=bold];
d239 -> d240  [key=0, style=solid];
d241 -> d239  [color=blue, key=0, style=bold];
d248 -> d249  [key=0, style=solid];
d250 -> d248  [color=blue, key=0, style=bold];
d256 -> d257  [key=0, style=solid];
d258 -> d256  [color=blue, key=0, style=bold];
d264 -> d265  [key=0, style=solid];
d266 -> d264  [color=blue, key=0, style=bold];
d272 -> d273  [key=0, style=solid];
d274 -> d272  [color=blue, key=0, style=bold];
d288 -> d289  [key=0, style=solid];
d290 -> d288  [color=blue, key=0, style=bold];
d386 -> d387  [key=0, style=solid];
d388 -> d386  [color=blue, key=0, style=bold];
d415 -> d416  [key=0, style=solid];
d417 -> d9  [key=2, style=dotted];
d417 -> d10  [key=2, style=dotted];
d417 -> d418  [key=0, style=solid];
d417 -> d420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d418 -> d419  [key=0, style=solid];
d418 -> d105  [key=2, style=dotted];
d420 -> d421  [key=0, style=solid];
d422 -> d420  [color=blue, key=0, style=bold];
d17 -> d9  [key=2, style=dotted];
d17 -> d10  [key=2, style=dotted];
d17 -> d21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d17 -> d18  [key=0, style=solid];
d25 -> d9  [key=2, style=dotted];
d25 -> d10  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d9  [key=2, style=dotted];
d33 -> d10  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d9  [key=2, style=dotted];
d42 -> d10  [key=2, style=dotted];
d42 -> d45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d43  [key=0, style=solid];
d49 -> d9  [key=2, style=dotted];
d49 -> d10  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d57 -> d9  [key=2, style=dotted];
d57 -> d10  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d57 -> d60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d66 -> d9  [key=2, style=dotted];
d66 -> d10  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d66 -> d71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d76 -> d9  [key=2, style=dotted];
d76 -> d10  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d76 -> d80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d86 -> d9  [key=2, style=dotted];
d86 -> d10  [key=2, style=dotted];
d86 -> d87  [key=0, style=solid];
d86 -> d89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d94 -> d9  [key=2, style=dotted];
d94 -> d10  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d102 -> d9  [key=2, style=dotted];
d102 -> d10  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d102 -> d106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d112 -> d9  [key=2, style=dotted];
d112 -> d10  [key=2, style=dotted];
d112 -> d113  [key=0, style=solid];
d112 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d121 -> d9  [key=2, style=dotted];
d121 -> d10  [key=2, style=dotted];
d121 -> d122  [key=0, style=solid];
d121 -> d124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d129 -> d9  [key=2, style=dotted];
d129 -> d10  [key=2, style=dotted];
d129 -> d130  [key=0, style=solid];
d129 -> d132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d137 -> d9  [key=2, style=dotted];
d137 -> d10  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d137 -> d141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d145 -> d9  [key=2, style=dotted];
d145 -> d10  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d145 -> d148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d153 -> d9  [key=2, style=dotted];
d153 -> d10  [key=2, style=dotted];
d153 -> d154  [key=0, style=solid];
d153 -> d156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d161 -> d9  [key=2, style=dotted];
d161 -> d10  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d161 -> d164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d170 -> d9  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d170 -> d173  [key=2, style=dotted];
d170 -> d174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d170 -> d177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d191 -> d9  [key=2, style=dotted];
d191 -> d10  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d191 -> d195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d201 -> d9  [key=2, style=dotted];
d201 -> d10  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d210 -> d9  [key=2, style=dotted];
d210 -> d10  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d210 -> d213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d218 -> d9  [key=2, style=dotted];
d218 -> d10  [key=2, style=dotted];
d218 -> d219  [key=0, style=solid];
d218 -> d222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d227 -> d9  [key=2, style=dotted];
d227 -> d10  [key=2, style=dotted];
d227 -> d228  [key=0, style=solid];
d227 -> d230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d236 -> d9  [key=2, style=dotted];
d236 -> d10  [key=2, style=dotted];
d236 -> d239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d236 -> d237  [key=0, style=solid];
d244 -> d9  [key=2, style=dotted];
d244 -> d10  [key=2, style=dotted];
d244 -> d248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d244 -> d245  [key=0, style=solid];
d253 -> d9  [key=2, style=dotted];
d253 -> d10  [key=2, style=dotted];
d253 -> d256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d253 -> d254  [key=0, style=solid];
d261 -> d9  [key=2, style=dotted];
d261 -> d10  [key=2, style=dotted];
d261 -> d264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d261 -> d262  [key=0, style=solid];
d268 -> d9  [key=2, style=dotted];
d268 -> d10  [key=2, style=dotted];
d268 -> d272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d268 -> d269  [key=0, style=solid];
d277 -> d9  [key=2, style=dotted];
d277 -> d10  [key=2, style=dotted];
d277 -> d278  [key=0, style=solid];
d277 -> d280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d285 -> d9  [key=2, style=dotted];
d285 -> d10  [key=2, style=dotted];
d285 -> d288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d285 -> d286  [key=0, style=solid];
d293 -> d9  [key=2, style=dotted];
d293 -> d10  [key=2, style=dotted];
d293 -> d294  [key=0, style=solid];
d293 -> d296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d301 -> d9  [key=2, style=dotted];
d301 -> d10  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d301 -> d304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d309 -> d9  [key=2, style=dotted];
d309 -> d10  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d309 -> d312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d316 -> d9  [key=2, style=dotted];
d316 -> d10  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d316 -> d322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d316 -> d318  [color=darkseagreen4, key=1, label=result, style=dashed];
d316 -> d319  [color=darkseagreen4, key=1, label=result, style=dashed];
d327 -> d9  [key=2, style=dotted];
d327 -> d10  [key=2, style=dotted];
d327 -> d328  [key=0, style=solid];
d327 -> d332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d327 -> d329  [color=darkseagreen4, key=1, label=result, style=dashed];
d327 -> d330  [color=darkseagreen4, key=1, label=result, style=dashed];
d341 -> d9  [key=2, style=dotted];
d341 -> d10  [key=2, style=dotted];
d341 -> d342  [key=0, style=solid];
d341 -> d343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d352 -> d9  [key=2, style=dotted];
d352 -> d10  [key=2, style=dotted];
d352 -> d353  [key=0, style=solid];
d352 -> d354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d363 -> d9  [key=2, style=dotted];
d363 -> d10  [key=2, style=dotted];
d363 -> d364  [key=0, style=solid];
d363 -> d365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d370 -> d9  [key=2, style=dotted];
d370 -> d10  [key=2, style=dotted];
d370 -> d371  [key=0, style=solid];
d370 -> d375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d383 -> d9  [key=2, style=dotted];
d383 -> d10  [key=2, style=dotted];
d383 -> d386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d383 -> d384  [key=0, style=solid];
d393 -> d9  [key=2, style=dotted];
d393 -> d10  [key=2, style=dotted];
d393 -> d394  [key=0, style=solid];
d393 -> d396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d401 -> d9  [key=2, style=dotted];
d401 -> d10  [key=2, style=dotted];
d401 -> d402  [key=0, style=solid];
d401 -> d404  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d408 -> d9  [key=2, style=dotted];
d408 -> d10  [key=2, style=dotted];
d408 -> d409  [key=0, style=solid];
d408 -> d411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d424 -> d10  [key=2, style=dotted];
d424 -> d425  [key=0, style=solid];
d424 -> d427  [key=2, style=dotted];
d34 -> d12  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d36  [key=2, style=dotted];
d43 -> d12  [key=2, style=dotted];
d43 -> d44  [key=0, style=solid];
d43 -> d36  [key=2, style=dotted];
d50 -> d12  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d50 -> d36  [key=2, style=dotted];
d58 -> d12  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d58 -> d36  [key=2, style=dotted];
d67 -> d12  [key=2, style=dotted];
d67 -> d68  [key=0, style=solid];
d67 -> d36  [key=2, style=dotted];
d77 -> d12  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d36  [key=2, style=dotted];
d87 -> d12  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d87 -> d36  [key=2, style=dotted];
d95 -> d12  [key=2, style=dotted];
d95 -> d96  [key=0, style=solid];
d95 -> d36  [key=2, style=dotted];
d113 -> d12  [key=2, style=dotted];
d113 -> d114  [key=0, style=solid];
d113 -> d36  [key=2, style=dotted];
d122 -> d12  [key=2, style=dotted];
d122 -> d123  [key=0, style=solid];
d122 -> d36  [key=2, style=dotted];
d130 -> d12  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d36  [key=2, style=dotted];
d192 -> d12  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d36  [key=2, style=dotted];
d219 -> d12  [key=2, style=dotted];
d219 -> d220  [key=0, style=solid];
d219 -> d36  [key=2, style=dotted];
d228 -> d12  [key=2, style=dotted];
d228 -> d229  [key=0, style=solid];
d228 -> d36  [key=2, style=dotted];
d237 -> d12  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d237 -> d36  [key=2, style=dotted];
d245 -> d12  [key=2, style=dotted];
d245 -> d246  [key=0, style=solid];
d245 -> d36  [key=2, style=dotted];
d254 -> d12  [key=2, style=dotted];
d254 -> d255  [key=0, style=solid];
d254 -> d36  [key=2, style=dotted];
d262 -> d12  [key=2, style=dotted];
d262 -> d263  [key=0, style=solid];
d262 -> d36  [key=2, style=dotted];
d269 -> d12  [key=2, style=dotted];
d269 -> d270  [key=0, style=solid];
d269 -> d271  [key=2, style=dotted];
d278 -> d12  [key=2, style=dotted];
d278 -> d279  [key=0, style=solid];
d278 -> d36  [key=2, style=dotted];
d294 -> d12  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d294 -> d36  [key=2, style=dotted];
d419 -> d415  [color=blue, key=0, style=bold];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [color=darkseagreen4, key=1, label=long, style=dashed];
d18 -> d19  [key=0, style=solid];
d18 -> d20  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d26  [color=darkseagreen4, key=1, label=double, style=dashed];
d26 -> d27  [key=0, style=solid];
d26 -> d20  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d32 -> d34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d37 -> d38  [key=0, style=solid];
d41 -> d42  [key=0, style=solid];
d41 -> d43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d48 -> d49  [key=0, style=solid];
d48 -> d50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d52 -> d53  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d56 -> d58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d60 -> d61  [key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d65 -> d67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d65 -> d69  [key=2, style=dotted];
d65 -> d70  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d75 -> d76  [key=0, style=solid];
d75 -> d77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d75 -> d79  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d85 -> d79  [key=2, style=dotted];
d85 -> d70  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d93 -> d95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d93 -> d79  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d101 -> d102  [key=0, style=solid];
d101 -> d103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d103 -> d105  [key=2, style=dotted];
d103 -> d103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d103 -> d104  [key=0, style=solid];
d106 -> d107  [key=0, style=solid];
d111 -> d112  [key=0, style=solid];
d111 -> d113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d111 -> d115  [key=2, style=dotted];
d111 -> d70  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d120 -> d121  [key=0, style=solid];
d120 -> d122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d120 -> d115  [key=2, style=dotted];
d120 -> d70  [key=2, style=dotted];
d124 -> d125  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d128 -> d115  [key=2, style=dotted];
d128 -> d70  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d136 -> d137  [key=0, style=solid];
d136 -> d140  [key=2, style=dotted];
d136 -> d138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d138 -> d105  [key=2, style=dotted];
d138 -> d139  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d144 -> d145  [key=0, style=solid];
d144 -> d146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d146 -> d105  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d152 -> d153  [key=0, style=solid];
d152 -> d154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d154 -> d105  [key=2, style=dotted];
d154 -> d155  [key=0, style=solid];
d156 -> d157  [key=0, style=solid];
d160 -> d161  [key=0, style=solid];
d160 -> d162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d162 -> d105  [key=2, style=dotted];
d162 -> d163  [key=0, style=solid];
d164 -> d165  [key=0, style=solid];
d169 -> d170  [key=0, style=solid];
d171 -> d105  [key=2, style=dotted];
d171 -> d172  [key=0, style=solid];
d174 -> d175  [key=0, style=solid];
d177 -> d178  [key=0, style=solid];
d177 -> d182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d177 -> d186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d190 -> d191  [key=0, style=solid];
d190 -> d192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d190 -> d194  [key=2, style=dotted];
d190 -> d70  [key=2, style=dotted];
d195 -> d196  [key=0, style=solid];
d200 -> d201  [key=0, style=solid];
d200 -> d204  [key=2, style=dotted];
d200 -> d202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d202 -> d105  [key=2, style=dotted];
d202 -> d203  [key=0, style=solid];
d205 -> d206  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d209 -> d204  [key=2, style=dotted];
d209 -> d211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d211 -> d105  [key=2, style=dotted];
d211 -> d212  [key=0, style=solid];
d213 -> d214  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d217 -> d219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d217 -> d221  [key=2, style=dotted];
d217 -> d70  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d226 -> d227  [key=0, style=solid];
d226 -> d228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d226 -> d221  [key=2, style=dotted];
d226 -> d70  [key=2, style=dotted];
d230 -> d231  [key=0, style=solid];
d235 -> d236  [key=0, style=solid];
d235 -> d237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d235 -> d79  [key=2, style=dotted];
d235 -> d70  [key=2, style=dotted];
d243 -> d244  [key=0, style=solid];
d243 -> d245  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d243 -> d247  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d252 -> d254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d252 -> d247  [key=2, style=dotted];
d260 -> d261  [key=0, style=solid];
d260 -> d262  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d260 -> d247  [key=2, style=dotted];
d267 -> d268  [key=0, style=solid];
d267 -> d269  [color=darkseagreen4, key=1, label=string, style=dashed];
d276 -> d277  [key=0, style=solid];
d276 -> d278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d276 -> d221  [key=2, style=dotted];
d280 -> d281  [key=0, style=solid];
d284 -> d285  [key=0, style=solid];
d284 -> d286  [color=darkseagreen4, key=1, label=string, style=dashed];
d286 -> d105  [key=2, style=dotted];
d286 -> d287  [key=0, style=solid];
d292 -> d293  [key=0, style=solid];
d292 -> d294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d292 -> d79  [key=2, style=dotted];
d296 -> d297  [key=0, style=solid];
d300 -> d301  [key=0, style=solid];
d300 -> d302  [color=darkseagreen4, key=1, label="int?", style=dashed];
d302 -> d105  [key=2, style=dotted];
d302 -> d303  [key=0, style=solid];
d304 -> d305  [key=0, style=solid];
d308 -> d309  [key=0, style=solid];
d308 -> d310  [color=darkseagreen4, key=1, label="long?", style=dashed];
d310 -> d105  [key=2, style=dotted];
d310 -> d311  [key=0, style=solid];
d312 -> d313  [key=0, style=solid];
d315 -> d316  [key=0, style=solid];
d315 -> d318  [color=darkseagreen4, key=1, label=string, style=dashed];
d315 -> d319  [color=darkseagreen4, key=1, label=bool, style=dashed];
d317 -> d318  [key=0, style=solid];
d317 -> d319  [key=0, style=solid];
d322 -> d323  [key=0, style=solid];
d318 -> d105  [key=2, style=dotted];
d318 -> d319  [key=0, style=solid];
d319 -> d105  [key=2, style=dotted];
d319 -> d320  [key=0, style=solid];
d319 -> d321  [key=2, style=dotted];
d326 -> d327  [key=0, style=solid];
d326 -> d329  [color=darkseagreen4, key=1, label=int, style=dashed];
d326 -> d330  [color=darkseagreen4, key=1, label=bool, style=dashed];
d328 -> d329  [key=0, style=solid];
d328 -> d330  [key=0, style=solid];
d332 -> d333  [key=0, style=solid];
d329 -> d105  [key=2, style=dotted];
d329 -> d330  [key=0, style=solid];
d330 -> d105  [key=2, style=dotted];
d330 -> d331  [key=0, style=solid];
d330 -> d321  [key=2, style=dotted];
d340 -> d341  [key=0, style=solid];
d342 -> d340  [color=blue, key=0, style=bold];
d343 -> d344  [key=0, style=solid];
d351 -> d352  [key=0, style=solid];
d353 -> d351  [color=blue, key=0, style=bold];
d354 -> d355  [key=0, style=solid];
d362 -> d363  [key=0, style=solid];
d364 -> d362  [color=blue, key=0, style=bold];
d365 -> d366  [key=0, style=solid];
d369 -> d370  [key=0, style=solid];
d369 -> d371  [color=darkseagreen4, key=1, label=int, style=dashed];
d369 -> d380  [color=darkseagreen4, key=1, label=int, style=dashed];
d371 -> d372  [key=0, style=solid];
d371 -> d373  [key=2, style=dotted];
d371 -> d374  [key=2, style=dotted];
d371 -> d379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d375 -> d376  [key=0, style=solid];
d382 -> d383  [key=0, style=solid];
d382 -> d384  [color=darkseagreen4, key=1, label=int, style=dashed];
d382 -> d390  [color=darkseagreen4, key=1, label=int, style=dashed];
d384 -> d385  [key=0, style=solid];
d384 -> d373  [key=2, style=dotted];
d384 -> d374  [key=2, style=dotted];
d384 -> d389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d392 -> d393  [key=0, style=solid];
d392 -> d394  [color=darkseagreen4, key=1, label=string, style=dashed];
d394 -> d105  [key=2, style=dotted];
d394 -> d395  [key=0, style=solid];
d396 -> d397  [key=0, style=solid];
d400 -> d401  [key=0, style=solid];
d400 -> d402  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
d402 -> d105  [key=2, style=dotted];
d402 -> d403  [key=0, style=solid];
d404 -> d405  [key=0, style=solid];
d407 -> d408  [key=0, style=solid];
d407 -> d409  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
d409 -> d105  [key=2, style=dotted];
d409 -> d410  [key=0, style=solid];
d411 -> d412  [key=0, style=solid];
d423 -> d424  [key=0, style=solid];
d423 -> d425  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
d425 -> d105  [key=2, style=dotted];
d425 -> d426  [key=0, style=solid];
d35 -> d32  [color=blue, key=0, style=bold];
d44 -> d41  [color=blue, key=0, style=bold];
d51 -> d48  [color=blue, key=0, style=bold];
d59 -> d56  [color=blue, key=0, style=bold];
d68 -> d64  [color=blue, key=0, style=bold];
d78 -> d74  [color=blue, key=0, style=bold];
d88 -> d84  [color=blue, key=0, style=bold];
d96 -> d92  [color=blue, key=0, style=bold];
d114 -> d110  [color=blue, key=0, style=bold];
d123 -> d119  [color=blue, key=0, style=bold];
d131 -> d127  [color=blue, key=0, style=bold];
d193 -> d189  [color=blue, key=0, style=bold];
d220 -> d216  [color=blue, key=0, style=bold];
d229 -> d225  [color=blue, key=0, style=bold];
d238 -> d234  [color=blue, key=0, style=bold];
d246 -> d242  [color=blue, key=0, style=bold];
d255 -> d251  [color=blue, key=0, style=bold];
d263 -> d259  [color=blue, key=0, style=bold];
d270 -> d267  [color=blue, key=0, style=bold];
d279 -> d275  [color=blue, key=0, style=bold];
d295 -> d291  [color=blue, key=0, style=bold];
d19 -> d16  [color=blue, key=0, style=bold];
d27 -> d24  [color=blue, key=0, style=bold];
d30 -> d28  [color=blue, key=0, style=bold];
d29 -> d30  [key=0, style=solid];
d29 -> d31  [key=2, style=dotted];
d39 -> d37  [color=blue, key=0, style=bold];
d38 -> d39  [key=0, style=solid];
d38 -> d40  [key=2, style=dotted];
d54 -> d52  [color=blue, key=0, style=bold];
d53 -> d54  [key=0, style=solid];
d53 -> d55  [key=2, style=dotted];
d62 -> d60  [color=blue, key=0, style=bold];
d61 -> d62  [key=0, style=solid];
d61 -> d63  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d73 -> d71  [color=blue, key=0, style=bold];
d72 -> d73  [key=0, style=solid];
d72 -> d55  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d82 -> d80  [color=blue, key=0, style=bold];
d81 -> d82  [key=0, style=solid];
d81 -> d83  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d91 -> d89  [color=blue, key=0, style=bold];
d90 -> d91  [key=0, style=solid];
d90 -> d63  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d99 -> d97  [color=blue, key=0, style=bold];
d98 -> d99  [key=0, style=solid];
d98 -> d100  [key=2, style=dotted];
d104 -> d101  [color=blue, key=0, style=bold];
d108 -> d106  [color=blue, key=0, style=bold];
d107 -> d108  [key=0, style=solid];
d107 -> d109  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d118 -> d116  [color=blue, key=0, style=bold];
d117 -> d118  [key=0, style=solid];
d117 -> d109  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d126 -> d124  [color=blue, key=0, style=bold];
d125 -> d126  [key=0, style=solid];
d125 -> d109  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d134 -> d132  [color=blue, key=0, style=bold];
d133 -> d134  [key=0, style=solid];
d133 -> d109  [key=2, style=dotted];
d135 -> d136  [key=0, style=solid];
d139 -> d135  [color=blue, key=0, style=bold];
d143 -> d141  [color=blue, key=0, style=bold];
d142 -> d140  [key=2, style=dotted];
d142 -> d143  [key=0, style=solid];
d147 -> d144  [color=blue, key=0, style=bold];
d150 -> d148  [color=blue, key=0, style=bold];
d149 -> d150  [key=0, style=solid];
d149 -> d151  [key=2, style=dotted];
d155 -> d152  [color=blue, key=0, style=bold];
d158 -> d156  [color=blue, key=0, style=bold];
d157 -> d158  [key=0, style=solid];
d157 -> d159  [key=2, style=dotted];
d163 -> d160  [color=blue, key=0, style=bold];
d166 -> d164  [color=blue, key=0, style=bold];
d165 -> d166  [key=0, style=solid];
d165 -> d159  [key=2, style=dotted];
d168 -> d169  [key=0, style=solid];
d168 -> d171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d168 -> d140  [key=2, style=dotted];
d172 -> d167  [color=blue, key=0, style=bold];
d176 -> d174  [color=blue, key=0, style=bold];
d175 -> d140  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d179 -> d177  [color=blue, key=0, style=bold];
d178 -> d179  [key=0, style=solid];
d178 -> d180  [key=2, style=dotted];
d178 -> d181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d182 -> d183  [key=0, style=solid];
d182 -> d184  [key=2, style=dotted];
d182 -> d185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d186 -> d187  [key=0, style=solid];
d186 -> d188  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d197 -> d195  [color=blue, key=0, style=bold];
d196 -> d197  [key=0, style=solid];
d196 -> d198  [key=2, style=dotted];
d199 -> d200  [key=0, style=solid];
d203 -> d199  [color=blue, key=0, style=bold];
d207 -> d205  [color=blue, key=0, style=bold];
d206 -> d204  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d208 -> d209  [key=0, style=solid];
d212 -> d208  [color=blue, key=0, style=bold];
d215 -> d213  [color=blue, key=0, style=bold];
d214 -> d204  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d224 -> d222  [color=blue, key=0, style=bold];
d223 -> d204  [key=2, style=dotted];
d223 -> d224  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d232 -> d230  [color=blue, key=0, style=bold];
d231 -> d232  [key=0, style=solid];
d231 -> d233  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d242 -> d243  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d259 -> d260  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d282 -> d280  [color=blue, key=0, style=bold];
d281 -> d282  [key=0, style=solid];
d281 -> d283  [key=2, style=dotted];
d287 -> d284  [color=blue, key=0, style=bold];
d291 -> d292  [key=0, style=solid];
d298 -> d296  [color=blue, key=0, style=bold];
d297 -> d298  [key=0, style=solid];
d297 -> d299  [key=2, style=dotted];
d303 -> d300  [color=blue, key=0, style=bold];
d306 -> d304  [color=blue, key=0, style=bold];
d305 -> d306  [key=0, style=solid];
d305 -> d307  [key=2, style=dotted];
d311 -> d308  [color=blue, key=0, style=bold];
d314 -> d312  [color=blue, key=0, style=bold];
d313 -> d314  [key=0, style=solid];
d313 -> d307  [key=2, style=dotted];
d320 -> d315  [color=blue, key=0, style=bold];
d324 -> d322  [color=blue, key=0, style=bold];
d323 -> d324  [key=0, style=solid];
d323 -> d325  [key=2, style=dotted];
d331 -> d326  [color=blue, key=0, style=bold];
d334 -> d332  [color=blue, key=0, style=bold];
d333 -> d334  [key=0, style=solid];
d333 -> d325  [key=2, style=dotted];
d345 -> d343  [color=blue, key=0, style=bold];
d344 -> d345  [key=0, style=solid];
d344 -> d346  [key=2, style=dotted];
d356 -> d354  [color=blue, key=0, style=bold];
d355 -> d356  [key=0, style=solid];
d355 -> d357  [key=2, style=dotted];
d367 -> d365  [color=blue, key=0, style=bold];
d366 -> d367  [key=0, style=solid];
d366 -> d368  [key=2, style=dotted];
d372 -> d369  [color=blue, key=0, style=bold];
d380 -> d381  [key=0, style=solid];
d379 -> d380  [key=0, style=solid];
d377 -> d375  [color=blue, key=0, style=bold];
d376 -> d377  [key=0, style=solid];
d376 -> d378  [key=2, style=dotted];
d385 -> d382  [color=blue, key=0, style=bold];
d390 -> d391  [key=0, style=solid];
d389 -> d390  [key=0, style=solid];
d395 -> d392  [color=blue, key=0, style=bold];
d398 -> d396  [color=blue, key=0, style=bold];
d397 -> d398  [key=0, style=solid];
d397 -> d399  [key=2, style=dotted];
d403 -> d400  [color=blue, key=0, style=bold];
d406 -> d404  [color=blue, key=0, style=bold];
d405 -> d406  [key=0, style=solid];
d405 -> d283  [key=2, style=dotted];
d410 -> d407  [color=blue, key=0, style=bold];
d413 -> d411  [color=blue, key=0, style=bold];
d412 -> d413  [key=0, style=solid];
d412 -> d414  [key=2, style=dotted];
d426 -> d423  [color=blue, key=0, style=bold];
d167 -> d168  [key=0, style=solid];
d181 -> d182  [key=0, style=solid];
d429 -> d182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d429 -> d186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d183 -> d181  [color=blue, key=0, style=bold];
d185 -> d186  [key=0, style=solid];
d187 -> d185  [color=blue, key=0, style=bold];
d430 -> d380  [color=darkseagreen4, key=1, label=int, style=dashed];
d381 -> d379  [color=blue, key=0, style=bold];
d431 -> d390  [color=darkseagreen4, key=1, label=int, style=dashed];
d391 -> d389  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_4  [color=green, key=2, style=dotted];
m1_1 -> m1_5  [color=green, key=2, style=dotted];
m1_1 -> m1_1  [color=green, key=1, label=word, style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
}
