digraph  {
m1_4 [cluster="System.Enum.TryParse<TEnum>(string, out TEnum)", file="CreatingMethods.cs", label="Entry System.Enum.TryParse<TEnum>(string, out TEnum)", span="0-0"];
m1_0 [cluster="Humanizer.RegexOptionsUtil.RegexOptionsUtil()", file="CreatingMethods.cs", label="Entry Humanizer.RegexOptionsUtil.RegexOptionsUtil()", span="9-9"];
m1_1 [cluster="Humanizer.RegexOptionsUtil.RegexOptionsUtil()", color=green, community=0, file="CreatingMethods.cs", label="1: RegexOptions compiled", span="11-11"];
m1_2 [cluster="Humanizer.RegexOptionsUtil.RegexOptionsUtil()", file="CreatingMethods.cs", label="_compiled = Enum.TryParse(''Compiled'', out compiled) ? compiled : RegexOptions.None", span="12-12"];
m1_3 [cluster="Humanizer.RegexOptionsUtil.RegexOptionsUtil()", file="CreatingMethods.cs", label="Exit Humanizer.RegexOptionsUtil.RegexOptionsUtil()", span="9-9"];
m2_0 [cluster="Humanizer.Tests.NumberToWordsTests.NumberToWordsTests()", file="ParsingMethods.cs", label="Entry Humanizer.Tests.NumberToWordsTests.NumberToWordsTests()", span="7-7"];
m2_1 [cluster="Humanizer.Tests.NumberToWordsTests.NumberToWordsTests()", file="ParsingMethods.cs", label="Exit Humanizer.Tests.NumberToWordsTests.NumberToWordsTests()", span="7-7"];
m2_2 [cluster="Humanizer.Tests.NumberToWordsTests.ToWords(int, string)", file="ParsingMethods.cs", label="Entry Humanizer.Tests.NumberToWordsTests.ToWords(int, string)", span="41-41"];
m2_3 [cluster="Humanizer.Tests.NumberToWordsTests.ToWords(int, string)", color=red, community=0, file="ParsingMethods.cs", label="0: Assert.Equal(expected, number.ToWords())", span="43-43"];
m2_4 [cluster="Humanizer.Tests.NumberToWordsTests.ToWords(int, string)", file="ParsingMethods.cs", label="Exit Humanizer.Tests.NumberToWordsTests.ToWords(int, string)", span="41-41"];
m2_6 [cluster="Unk.Equal", file="ParsingMethods.cs", label="Entry Unk.Equal", span=""];
m2_7 [cluster="Humanizer.Tests.NumberToWordsTests.ToOrdinalWords(int, string)", file="ParsingMethods.cs", label="Entry Humanizer.Tests.NumberToWordsTests.ToOrdinalWords(int, string)", span="90-90"];
m2_8 [cluster="Humanizer.Tests.NumberToWordsTests.ToOrdinalWords(int, string)", color=red, community=0, file="ParsingMethods.cs", label="0: Assert.Equal(words, number.ToOrdinalWords())", span="92-92"];
m2_9 [cluster="Humanizer.Tests.NumberToWordsTests.ToOrdinalWords(int, string)", file="ParsingMethods.cs", label="Exit Humanizer.Tests.NumberToWordsTests.ToOrdinalWords(int, string)", span="90-90"];
m2_5 [cluster="int.ToWords()", file="ParsingMethods.cs", label="Entry int.ToWords()", span="14-14"];
m2_10 [cluster="int.ToOrdinalWords()", file="ParsingMethods.cs", label="Entry int.ToOrdinalWords()", span="48-48"];
m4_3 [cluster="System.DateTime.DateTime(int, int, int)", file="ToStringMethod.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m4_0 [cluster="Humanizer.In.TheYear(int)", file="ToStringMethod.cs", label="Entry Humanizer.In.TheYear(int)", span="10-10"];
m4_1 [cluster="Humanizer.In.TheYear(int)", color=red, community=0, file="ToStringMethod.cs", label="0: return new DateTime(year, 1, 1);", span="12-12"];
m4_2 [cluster="Humanizer.In.TheYear(int)", file="ToStringMethod.cs", label="Exit Humanizer.In.TheYear(int)", span="10-10"];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_2 -> m1_2  [color=darkseagreen4, key=1, label=compiled, style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [key=2, style=dotted];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [color=blue, key=0, style=bold];
m2_2 -> m2_3  [color=red, key=0, style=solid];
m2_3 -> m2_4  [color=red, key=0, style=solid];
m2_3 -> m2_5  [color=red, key=2, style=dotted];
m2_3 -> m2_6  [color=red, key=2, style=dotted];
m2_4 -> m2_2  [color=blue, key=0, style=bold];
m2_7 -> m2_8  [color=red, key=0, style=solid];
m2_8 -> m2_9  [color=red, key=0, style=solid];
m2_8 -> m2_10  [color=red, key=2, style=dotted];
m2_8 -> m2_6  [color=red, key=2, style=dotted];
m2_9 -> m2_7  [color=blue, key=0, style=bold];
m2_10 -> m2_10  [color=darkorchid, key=3, label="Local variable string val", style=bold];
m4_0 -> m4_1  [color=red, key=0, style=solid];
m4_1 -> m4_2  [color=red, key=0, style=solid];
m4_1 -> m4_3  [color=red, key=2, style=dotted];
m4_2 -> m4_0  [color=blue, key=0, style=bold];
}
