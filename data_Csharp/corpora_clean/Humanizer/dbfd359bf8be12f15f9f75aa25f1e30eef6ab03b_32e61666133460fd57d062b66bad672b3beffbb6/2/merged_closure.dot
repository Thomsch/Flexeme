digraph  {
n36 [label="CommandLine.Text.Example", span=""];
n0 [cluster="CommandLine.Text.Example.Example(string, string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Entry CommandLine.Text.Example.Example(string, string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="16-16"];
n6 [cluster="CommandLine.Text.Example.Example(string, string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Exit CommandLine.Text.Example.Example(string, string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="16-16"];
n7 [cluster="CommandLine.Text.Example.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Entry CommandLine.Text.Example.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="25-25"];
n8 [cluster="CommandLine.Text.Example.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Exit CommandLine.Text.Example.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="25-25"];
n9 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Entry CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="30-30"];
n10 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Exit CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="30-30"];
n11 [cluster="CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", label="Entry CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", span="35-35"];
n12 [cluster="CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", label="Exit CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", span="35-35"];
n13 [cluster="CommandLine.Text.Example.Example(string, object)", label="Entry CommandLine.Text.Example.Example(string, object)", span="40-40"];
n14 [cluster="CommandLine.Text.Example.Example(string, object)", label="Exit CommandLine.Text.Example.Example(string, object)", span="40-40"];
n15 [cluster="CommandLine.Text.Example.Equals(object)", label="Entry CommandLine.Text.Example.Equals(object)", span="75-75"];
n16 [cluster="CommandLine.Text.Example.Equals(object)", label="var other = obj as Example", span="77-77"];
n19 [cluster="CommandLine.Text.Example.Equals(object)", label="return base.Equals(obj);", span="83-83"];
n17 [cluster="CommandLine.Text.Example.Equals(object)", label="other != null", span="78-78"];
n18 [cluster="CommandLine.Text.Example.Equals(object)", label="return Equals(other);", span="80-80"];
n20 [cluster="CommandLine.Text.Example.Equals(object)", label="Exit CommandLine.Text.Example.Equals(object)", span="75-75"];
n22 [cluster="object.Equals(object)", label="Entry object.Equals(object)", span="0-0"];
n21 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="Entry CommandLine.Text.Example.Equals(CommandLine.Text.Example)", span="100-100"];
n23 [cluster="CommandLine.Text.Example.GetHashCode()", label="Entry CommandLine.Text.Example.GetHashCode()", span="90-90"];
n24 [cluster="CommandLine.Text.Example.GetHashCode()", label="return new { Group, GroupDescription, HelpText, FormatStyles, Sample }.GetHashCode();", span="92-92"];
n25 [cluster="CommandLine.Text.Example.GetHashCode()", label="Exit CommandLine.Text.Example.GetHashCode()", span="90-90"];
n26 [cluster="object.GetHashCode()", label="Entry object.GetHashCode()", span="0-0"];
n27 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="other == null", span="102-102"];
n29 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="return Group.Equals(other.Group)\r\n                && GroupDescription.Equals(other.GroupDescription)\r\n                && HelpText.Equals(other.HelpText)\r\n                && FormatStyles.SequenceEqual(other.FormatStyles)\r\n                && Sample.Equals(other.Sample);", span="107-111"];
n28 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="return false;", span="104-104"];
n30 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="Exit CommandLine.Text.Example.Equals(CommandLine.Text.Example)", span="100-100"];
n31 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n32 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n33 [cluster="CommandLine.Text.ExampleExtensions.WithGroupDescription(CommandLine.Text.Example, string)", label="Entry CommandLine.Text.ExampleExtensions.WithGroupDescription(CommandLine.Text.Example, string)", span="117-117"];
n34 [cluster="CommandLine.Text.ExampleExtensions.WithGroupDescription(CommandLine.Text.Example, string)", label="return new Example(\r\n                example.Group,\r\n                newGroupDescription,\r\n                example.HelpText,\r\n                example.FormatStyles,\r\n                example.Sample);", span="119-124"];
n35 [cluster="CommandLine.Text.ExampleExtensions.WithGroupDescription(CommandLine.Text.Example, string)", label="Exit CommandLine.Text.ExampleExtensions.WithGroupDescription(CommandLine.Text.Example, string)", span="117-117"];
m3_30 [cluster="System.Array.CreateInstance(System.Type, int)", file="EnumExtensionsTests.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m3_7 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="EnumExtensionsTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_33 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="EnumExtensionsTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="73-73"];
m3_34 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="EnumExtensionsTests.cs", label="return !source.Any();", span="75-75"];
m3_35 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="EnumExtensionsTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="73-73"];
m3_19 [cluster="System.Collections.IEnumerator.MoveNext()", file="EnumExtensionsTests.cs", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
m3_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="EnumExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m3_32 [cluster="System.Array.CopyTo(System.Array, int)", file="EnumExtensionsTests.cs", label="Entry System.Array.CopyTo(System.Array, int)", span="0-0"];
m3_36 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="EnumExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_24 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumExtensionsTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="66-66"];
m3_25 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumExtensionsTests.cs", label="var array = Array.CreateInstance(type, value.Count())", span="68-68"];
m3_26 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumExtensionsTests.cs", label="value.ToArray().CopyTo(array, 0)", span="69-69"];
m3_27 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumExtensionsTests.cs", label="return array;", span="70-70"];
m3_28 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumExtensionsTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="66-66"];
m3_18 [cluster="System.Collections.Generic.IEnumerable<T>.GetEnumerator()", file="EnumExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<T>.GetEnumerator()", span="0-0"];
m3_21 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="EnumExtensionsTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", span="61-61"];
m3_22 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="EnumExtensionsTests.cs", label="return value;", span="63-63"];
m3_23 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="EnumExtensionsTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", span="61-61"];
m3_9 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="18-18"];
m3_15 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="yield return selector(left, right);", span="29-29"];
m3_13 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="enumerator.MoveNext()", span="26-26"];
m3_14 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="var right = enumerator.Current", span="28-28"];
m3_16 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="left = right", span="30-30"];
m3_17 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="18-18"];
m3_8 [cluster="System.Collections.Generic.IEnumerable<TSource>.PairwiseImpl<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.PairwiseImpl<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="18-18"];
m3_20 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="EnumExtensionsTests.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m3_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="EnumExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m3_0 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="10-10"];
m3_6 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="EnumExtensionsTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="10-10"];
m5_0 [cluster="Humanizer.Resources.Resources()", file="Resources.Designer.cs", label="Entry Humanizer.Resources.Resources()", span="31-31"];
m5_1 [cluster="Humanizer.Resources.Resources()", file="Resources.Designer.cs", label="Exit Humanizer.Resources.Resources()", span="31-31"];
m6_51 [cluster="string.Humanize()", file="StringExtensions.cs", label="Entry string.Humanize()", span="74-74"];
m6_10 [cluster="System.Collections.Generic.List<T>.List()", file="StringExtensions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_44 [cluster="Unk.Any", file="StringExtensions.cs", label="Entry Unk.Any", span=""];
m6_45 [cluster="string.Contains(string)", file="StringExtensions.cs", label="Entry string.Contains(string)", span="0-0"];
m6_35 [cluster="char.IsLower(char)", file="StringExtensions.cs", label="Entry char.IsLower(char)", span="0-0"];
m6_33 [cluster="char.IsDigit(char)", file="StringExtensions.cs", label="Entry char.IsDigit(char)", span="0-0"];
m6_14 [cluster="string.Replace(string, string)", file="StringExtensions.cs", label="Entry string.Replace(string, string)", span="0-0"];
m6_46 [cluster="System.Func<T, TResult>.Invoke(T)", file="StringExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m6_52 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="Entry Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="93-93"];
m6_53 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label=casing, span="95-95"];
m6_55 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input);", span="98-98"];
m6_57 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="return input.ToLower();", span="101-101"];
m6_59 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="return input.ToUpper();", span="104-104"];
m6_54 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="LetterCasing.Title", span="97-97"];
m6_56 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="LetterCasing.LowerCase", span="100-100"];
m6_58 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="LetterCasing.AllCaps", span="103-103"];
m6_60 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="LetterCasing.Sentence", span="106-106"];
m6_62 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="throw new ArgumentOutOfRangeException(''casing'');", span="110-110"];
m6_63 [cluster="Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="Exit Humanizer.StringExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="93-93"];
m6_4 [cluster="string.Join(string, params string[])", file="StringExtensions.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m6_47 [cluster="Humanizer.StringExtensions.Humanize(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="Entry Humanizer.StringExtensions.Humanize(string, Humanizer.LetterCasing)", span="86-86"];
m6_48 [cluster="Humanizer.StringExtensions.Humanize(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="var humanizedString = input.Humanize()", span="88-88"];
m6_49 [cluster="Humanizer.StringExtensions.Humanize(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="return ApplyCase(humanizedString, casing);", span="90-90"];
m6_50 [cluster="Humanizer.StringExtensions.Humanize(string, Humanizer.LetterCasing)", file="StringExtensions.cs", label="Exit Humanizer.StringExtensions.Humanize(string, Humanizer.LetterCasing)", span="86-86"];
m6_37 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="Entry Humanizer.StringExtensions.Humanize(string)", span="74-74"];
m6_38 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="!input.Any(Char.IsLower)", span="77-77"];
m6_39 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="return input;", span="78-78"];
m6_40 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="input.Contains(''_'')", span="80-80"];
m6_41 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="return FromUnderscoreSeparatedWords(input);", span="81-81"];
m6_42 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="return FromPascalCase(input);", span="83-83"];
m6_43 [cluster="Humanizer.StringExtensions.Humanize(string)", file="StringExtensions.cs", label="Exit Humanizer.StringExtensions.Humanize(string)", span="74-74"];
m6_66 [cluster="string.ToUpper()", file="StringExtensions.cs", label="Entry string.ToUpper()", span="0-0"];
m6_13 [cluster="Unk.ToArray", file="StringExtensions.cs", label="Entry Unk.ToArray", span=""];
m6_12 [cluster="string.cstr", file="StringExtensions.cs", label="Entry string.cstr", span=""];
m6_11 [cluster="Unk.Aggregate", file="StringExtensions.cs", label="Entry Unk.Aggregate", span=""];
m6_67 [cluster="string.Substring(int, int)", file="StringExtensions.cs", label="Entry string.Substring(int, int)", span="0-0"];
m6_5 [cluster="Humanizer.StringExtensions.FromPascalCase(string)", file="StringExtensions.cs", label="Entry Humanizer.StringExtensions.FromPascalCase(string)", span="35-35"];
m6_6 [cluster="Humanizer.StringExtensions.FromPascalCase(string)", file="StringExtensions.cs", label="var chars = name.Aggregate(\r\n                new List<char>(),\r\n                (list, currentChar) =>\r\n                {\r\n                    if (currentChar == ' ')\r\n                    {\r\n                        list.Add(currentChar);\r\n                        return list;\r\n                    }\r\n\r\n                    if (list.Count == 0)\r\n                    {\r\n                        list.Add(currentChar);\r\n                        return list;\r\n                    }\r\n\r\n                    var lastCharacterInTheList = list[list.Count - 1];\r\n                    if (lastCharacterInTheList != ' ')\r\n                    {\r\n                        if (char.IsDigit(lastCharacterInTheList))\r\n                        {\r\n                            if (char.IsLetter(currentChar))\r\n                                list.Add(' ');\r\n                        }\r\n                        else if (!char.IsLower(currentChar))\r\n                            list.Add(' ');\r\n                    }\r\n\r\n                    list.Add(char.ToLower(currentChar));\r\n\r\n                    return list;\r\n                })", span="37-68"];
m6_7 [cluster="Humanizer.StringExtensions.FromPascalCase(string)", file="StringExtensions.cs", label="var result = new string(chars.ToArray())", span="70-70"];
m6_8 [cluster="Humanizer.StringExtensions.FromPascalCase(string)", file="StringExtensions.cs", label="return result.Replace('' i '', '' I '');", span="71-71"];
m6_9 [cluster="Humanizer.StringExtensions.FromPascalCase(string)", file="StringExtensions.cs", label="Exit Humanizer.StringExtensions.FromPascalCase(string)", span="35-35"];
m6_64 [cluster="System.Globalization.TextInfo.ToTitleCase(string)", file="StringExtensions.cs", label="Entry System.Globalization.TextInfo.ToTitleCase(string)", span="0-0"];
m6_69 [cluster="string.Concat(string, string)", file="StringExtensions.cs", label="Entry string.Concat(string, string)", span="0-0"];
m6_34 [cluster="char.IsLetter(char)", file="StringExtensions.cs", label="Entry char.IsLetter(char)", span="0-0"];
m6_15 [cluster="lambda expression", file="StringExtensions.cs", label="Entry lambda expression", span="39-68"];
m6_0 [cluster="lambda expression", file="StringExtensions.cs", label="Entry lambda expression", span="34-34"];
m6_1 [cluster="lambda expression", file="StringExtensions.cs", label="string.Join('' '', methodName.Split(new[] { '_' }))", span="34-34"];
m6_2 [cluster="lambda expression", file="StringExtensions.cs", label="Exit lambda expression", span="34-34"];
m6_16 [cluster="lambda expression", file="StringExtensions.cs", label="currentChar == ' '", span="41-41"];
m6_17 [cluster="lambda expression", file="StringExtensions.cs", label="list.Add(currentChar)", span="43-43"];
m6_18 [cluster="lambda expression", file="StringExtensions.cs", label="return list;", span="44-44"];
m6_19 [cluster="lambda expression", file="StringExtensions.cs", label="list.Count == 0", span="47-47"];
m6_20 [cluster="lambda expression", file="StringExtensions.cs", label="list.Add(currentChar)", span="49-49"];
m6_21 [cluster="lambda expression", file="StringExtensions.cs", label="return list;", span="50-50"];
m6_22 [cluster="lambda expression", file="StringExtensions.cs", label="var lastCharacterInTheList = list[list.Count - 1]", span="53-53"];
m6_25 [cluster="lambda expression", file="StringExtensions.cs", label="char.IsLetter(currentChar)", span="58-58"];
m6_26 [cluster="lambda expression", file="StringExtensions.cs", label="list.Add(' ')", span="59-59"];
m6_27 [cluster="lambda expression", file="StringExtensions.cs", label="!char.IsLower(currentChar)", span="61-61"];
m6_28 [cluster="lambda expression", file="StringExtensions.cs", label="list.Add(' ')", span="62-62"];
m6_29 [cluster="lambda expression", file="StringExtensions.cs", label="list.Add(char.ToLower(currentChar))", span="65-65"];
m6_30 [cluster="lambda expression", file="StringExtensions.cs", label="return list;", span="67-67"];
m6_23 [cluster="lambda expression", file="StringExtensions.cs", label="lastCharacterInTheList != ' '", span="54-54"];
m6_24 [cluster="lambda expression", file="StringExtensions.cs", label="char.IsDigit(lastCharacterInTheList)", span="56-56"];
m6_31 [cluster="lambda expression", file="StringExtensions.cs", label="Exit lambda expression", span="39-68"];
m6_70 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="StringExtensions.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m6_3 [cluster="string.Split(params char[])", file="StringExtensions.cs", label="Entry string.Split(params char[])", span="0-0"];
m6_36 [cluster="char.ToLower(char)", file="StringExtensions.cs", label="Entry char.ToLower(char)", span="0-0"];
m6_32 [cluster="System.Collections.Generic.List<T>.Add(T)", file="StringExtensions.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m6_65 [cluster="string.ToLower()", file="StringExtensions.cs", label="Entry string.ToLower()", span="0-0"];
m6_68 [cluster="string.Substring(int)", file="StringExtensions.cs", label="Entry string.Substring(int)", span="0-0"];
m7_23 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.AcronymsAreLeftIntact()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.AcronymsAreLeftIntact()", span="59-59"];
m7_24 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.AcronymsAreLeftIntact()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''HTML'',\r\n                ''HTML''.Humanize())", span="61-63"];
m7_25 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.AcronymsAreLeftIntact()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.AcronymsAreLeftIntact()", span="59-59"];
m7_3 [cluster="Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", file="StringExtensionsTests.cs", label="Entry Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", span="2-2"];
m7_0 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Entry lambda expression", span="16-16"];
m7_2 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Exit lambda expression", span="16-16"];
m7_36 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCase()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCase()", span="91-91"];
m7_37 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCase()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''can return lower case'',\r\n                ''CanReturnLowerCase''.Humanize(LetterCasing.LowerCase))", span="93-95"];
m7_38 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCase()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCase()", span="91-91"];
m7_30 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="75-75"];
m7_31 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''Can_return_title_Case''.Humanize(LetterCasing.Title))", span="77-79"];
m7_32 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="75-75"];
m7_4 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Entry lambda expression", span="17-17"];
m7_8 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Entry lambda expression", span="18-18"];
m7_10 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Exit lambda expression", span="18-18"];
m7_39 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="99-99"];
m7_40 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", color=green, community=1, file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''lowercase'',\r\n                ''LOWERCASE''.Humanize(LetterCasing.LowerCase))", prediction=0, span="101-103"];
m7_41 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="99-99"];
m7_11 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29"];
m7_26 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="67-67"];
m7_27 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''CanReturnTitleCase''.Humanize(LetterCasing.Title))", span="69-71"];
m7_28 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="67-67"];
m7_14 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Exit lambda expression", span="19-19"];
m7_15 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.CzechSlovakPolishFormatter()", file="StringExtensionsTests.cs", label="Entry Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.CzechSlovakPolishFormatter()", span="2-2"];
m7_16 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Entry lambda expression", span="20-20"];
m7_42 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoUpperCase()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoUpperCase()", span="107-107"];
m7_43 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoUpperCase()", color=green, community=1, file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''CanHumanizeIntoUpperCase''.Humanize(LetterCasing.AllCaps))", prediction=1, span="109-111"];
m7_44 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoUpperCase()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.CanHumanizeIntoUpperCase()", span="107-107"];
m7_33 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.TitleHumanizationHonorsAllCaps()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.TitleHumanizationHonorsAllCaps()", span="83-83"];
m7_34 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.TitleHumanizationHonorsAllCaps()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''Title Humanization Honors ALLCAPS'',\r\n                ''Title_humanization_Honors_ALLCAPS''.Humanize(LetterCasing.Title))", span="85-87"];
m7_35 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.TitleHumanizationHonorsAllCaps()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.TitleHumanizationHonorsAllCaps()", span="83-83"];
m7_7 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15"];
m7_6 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Exit lambda expression", span="17-17"];
m7_29 [cluster="string.Humanize(Humanizer.LetterCasing)", file="StringExtensionsTests.cs", label="Entry string.Humanize(Humanizer.LetterCasing)", span="61-61"];
m7_21 [cluster="lambda expression", file="StringExtensionsTests.cs", label="Exit lambda expression", span="21-21"];
m7_22 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51"];
m7_19 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.UnderscoredInputStringPreservesCasing()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.UnderscoredInputStringPreservesCasing()", span="43-43"];
m7_12 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringExtensionsTests.cs", label="Assert.Equal(''Number is at the end 100'', ''NumberIsAtTheEnd100''.Humanize())", span="31-31"];
m7_18 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.UnderscoredInputStringPreservesCasing()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''Underscored input String is turned INTO sentence'',\r\n                ''Underscored_input_String_is_turned_INTO_sentence''.Humanize())", span="45-47"];
m7_45 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringExtensionsTests.cs", label="Entry Humanizer.Tests.Extensions.StringExtensionsTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="115-115"];
m7_46 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringExtensionsTests.cs", label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''Can_Humanize_into_Upper_case''.Humanize(LetterCasing.AllCaps))", span="117-119"];
m7_47 [cluster="Humanizer.Tests.Extensions.StringExtensionsTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringExtensionsTests.cs", label="Exit Humanizer.Tests.Extensions.StringExtensionsTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="115-115"];
n36 -> n18  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
n36 -> n19  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
n36 -> n24  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
n36 -> n29  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
n15 -> n19  [color=darkseagreen4, key=1, label=object, style=dashed];
n16 -> n18  [color=darkseagreen4, key=1, label=other, style=dashed];
n21 -> n29  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
m3_24 -> m3_26  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m3_25 -> m3_27  [color=darkseagreen4, key=1, label=array, style=dashed];
m6_52 -> m6_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_52 -> m6_57  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_52 -> m6_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_47 -> m6_49  [color=darkseagreen4, key=1, label="Humanizer.LetterCasing", style=dashed];
m6_37 -> m6_39  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_37 -> m6_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_37 -> m6_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_37 -> m6_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_6 -> m6_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_15 -> m6_17  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_18  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_25  [color=darkseagreen4, key=1, label=char, style=dashed];
m6_15 -> m6_26  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_27  [color=darkseagreen4, key=1, label=char, style=dashed];
m6_15 -> m6_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_15 -> m6_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<char>", style=dashed];
m6_22 -> m6_24  [color=darkseagreen4, key=1, label=lastCharacterInTheList, style=dashed];
}
