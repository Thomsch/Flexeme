digraph  {
n0 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="Entry Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="11-11"];
n1 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="return String.Join('' '', input.Split(new[] {'_', '-'}));", span="13-13"];
n2 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="Exit Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="11-11"];
n3 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n4 [cluster="string.Join(string, params string[])", label="Entry string.Join(string, params string[])", span="0-0"];
n5 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="Entry Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="16-16"];
n11 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
n8 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="result = Char.ToUpper(result[0]) +\r\n                result.Substring(1, result.Length - 1)", span="37-38"];
n12 [cluster="System.Text.RegularExpressions.Regex.Split(string)", label="Entry System.Text.RegularExpressions.Regex.Split(string)", span="0-0"];
n13 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n14 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n18 [cluster="lambda expression", label="Entry lambda expression", span="31-34"];
n24 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
n9 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="return result.Replace('' i '', '' I '');", span="39-39"];
n15 [cluster="Unk.ToUpper", label="Entry Unk.ToUpper", span=""];
n16 [cluster="Unk.Substring", label="Entry Unk.Substring", span=""];
n10 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="Exit Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="16-16"];
n17 [cluster="Unk.Replace", label="Entry Unk.Replace", span=""];
n20 [cluster="lambda expression", label="Exit lambda expression", span="31-34"];
n21 [cluster="string.ToCharArray()", label="Entry string.ToCharArray()", span="0-0"];
n22 [cluster="Unk.All", label="Entry Unk.All", span=""];
n23 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n25 [cluster="lambda expression", label="res + '' '' + word", span="35-35"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
n27 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="Entry Humanizer.StringHumanizeExtensions.Humanize(string)", span="47-47"];
n28 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="input.ToCharArray().All(Char.IsUpper)", span="50-50"];
n29 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return input;", span="51-51"];
n30 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="input.Contains(''_'') || input.Contains(''-'')", span="53-53"];
n31 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromUnderscoreDashSeparatedWords(input);", span="54-54"];
n32 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromPascalCase(input);", span="56-56"];
n34 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n33 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="Exit Humanizer.StringHumanizeExtensions.Humanize(string)", span="47-47"];
n35 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="Entry Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="65-65"];
n36 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="return input.Humanize().ApplyCase(casing);", span="67-67"];
n37 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="Exit Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="65-65"];
n38 [cluster="string.Humanize()", label="Entry string.Humanize()", span="47-47"];
n39 [cluster="string.ApplyCase(Humanizer.LetterCasing)", label="Entry string.ApplyCase(Humanizer.LetterCasing)", span="15-15"];
n27 -> n29  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n30  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n31  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n32  [color=darkseagreen4, key=1, label=string, style=dashed];
}
