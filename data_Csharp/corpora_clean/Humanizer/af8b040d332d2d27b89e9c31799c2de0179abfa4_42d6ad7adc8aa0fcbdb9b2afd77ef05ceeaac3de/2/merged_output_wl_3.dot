digraph  {
n0 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="Entry Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="11-11"];
n1 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="return String.Join('' '', input.Split(new[] {'_', '-'}));", span="13-13"];
n2 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="Exit Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="11-11"];
n3 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n4 [cluster="string.Join(string, params string[])", label="Entry string.Join(string, params string[])", span="0-0"];
n5 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="Entry Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="16-16"];
n6 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", color=red, community=0, label="0: var pascalCaseWordBoundaryRegex = new Regex(@''\r\n(?# word to word, number or acronym)\r\n(?<=[a-z])(?=[A-Z0-9])|\r\n(?# number to word or acronym)\r\n(?<=[0-9])(?=[A-Za-z])|\r\n(?# acronym to number)\r\n(?<=[A-Z])(?=[0-9])|\r\n(?# acronym to word)\r\n(?<=[A-Z])(?=[A-Z][a-z])\r\n'', RegexOptions.IgnorePatternWhitespace)", span="18-27"];
n7 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", color=red, community=0, label="0: var result = pascalCaseWordBoundaryRegex\r\n                .Split(input)\r\n                .Select(word =>\r\n                    word.ToCharArray().All(Char.IsUpper) && word.Length > 1\r\n                        ? word\r\n                        : word.ToLower())\r\n                .Aggregate((res, word) => res + '' '' + word)", span="29-35"];
n11 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
n8 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="result = Char.ToUpper(result[0]) +\r\n                result.Substring(1, result.Length - 1)", span="37-38"];
n12 [cluster="System.Text.RegularExpressions.Regex.Split(string)", label="Entry System.Text.RegularExpressions.Regex.Split(string)", span="0-0"];
n13 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n14 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n18 [cluster="lambda expression", label="Entry lambda expression", span="31-34"];
n24 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
n9 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="return result.Replace('' i '', '' I '');", span="39-39"];
n15 [cluster="Unk.ToUpper", label="Entry Unk.ToUpper", span=""];
n16 [cluster="Unk.Substring", label="Entry Unk.Substring", span=""];
n10 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="Exit Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="16-16"];
n17 [cluster="Unk.Replace", label="Entry Unk.Replace", span=""];
n19 [cluster="lambda expression", color=red, community=1, label="0: word.ToCharArray().All(Char.IsUpper) && word.Length > 1\r\n                        ? word\r\n                        : word.ToLower()", span="32-34"];
n20 [cluster="lambda expression", label="Exit lambda expression", span="31-34"];
n21 [cluster="string.ToCharArray()", label="Entry string.ToCharArray()", span="0-0"];
n22 [cluster="Unk.All", label="Entry Unk.All", span=""];
n23 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n25 [cluster="lambda expression", label="res + '' '' + word", span="35-35"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
n27 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="Entry Humanizer.StringHumanizeExtensions.Humanize(string)", span="47-47"];
n28 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="input.ToCharArray().All(Char.IsUpper)", span="50-50"];
n29 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return input;", span="51-51"];
n30 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="input.Contains(''_'') || input.Contains(''-'')", span="53-53"];
n31 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromUnderscoreDashSeparatedWords(input);", span="54-54"];
n32 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromPascalCase(input);", span="56-56"];
n34 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n33 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="Exit Humanizer.StringHumanizeExtensions.Humanize(string)", span="47-47"];
n35 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="Entry Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="65-65"];
n36 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="return input.Humanize().ApplyCase(casing);", span="67-67"];
n37 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="Exit Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="65-65"];
n38 [cluster="string.Humanize()", label="Entry string.Humanize()", span="47-47"];
n39 [cluster="string.ApplyCase(Humanizer.LetterCasing)", label="Entry string.ApplyCase(Humanizer.LetterCasing)", span="15-15"];
n0 -> n1  [key=0, style=solid];
n0 -> n27  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n5 -> n6  [color=red, key=0, style=solid];
n5 -> n7  [color=red, key=1, label=string, style=dashed];
n5 -> n27  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n6 -> n7  [color=red, key=0, style=solid];
n6 -> n11  [color=red, key=2, style=dotted];
n7 -> n8  [color=red, key=0, style=solid];
n7 -> n12  [color=red, key=2, style=dotted];
n7 -> n13  [color=red, key=2, style=dotted];
n7 -> n14  [color=red, key=2, style=dotted];
n7 -> n18  [color=red, key=1, label="lambda expression", style=dashed];
n7 -> n24  [color=red, key=1, label="lambda expression", style=dashed];
n8 -> n9  [key=0, style=solid];
n8 -> n15  [key=2, style=dotted];
n8 -> n16  [key=2, style=dotted];
n8 -> n8  [color=darkseagreen4, key=1, label=result, style=dashed];
n18 -> n19  [color=red, key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n17  [key=2, style=dotted];
n10 -> n5  [color=blue, key=0, style=bold];
n19 -> n20  [color=red, key=0, style=solid];
n19 -> n21  [color=red, key=2, style=dotted];
n19 -> n22  [color=red, key=2, style=dotted];
n19 -> n23  [color=red, key=2, style=dotted];
n20 -> n18  [color=blue, key=0, style=bold];
n25 -> n26  [key=0, style=solid];
n26 -> n24  [color=blue, key=0, style=bold];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n30  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n31  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n32  [color=darkseagreen4, key=1, label=string, style=dashed];
n27 -> n27  [color=darkorchid, key=3, label="method methodReturn string Humanize", style=bold];
n27 -> n0  [color=darkorchid, key=3, label="method methodReturn string Humanize", style=bold];
n27 -> n5  [color=darkorchid, key=3, label="method methodReturn string Humanize", style=bold];
n28 -> n29  [key=0, style=solid];
n28 -> n30  [key=0, style=solid];
n28 -> n21  [key=2, style=dotted];
n28 -> n22  [key=2, style=dotted];
n29 -> n33  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=0, style=solid];
n30 -> n34  [key=2, style=dotted];
n31 -> n33  [key=0, style=solid];
n31 -> n0  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n5  [key=2, style=dotted];
n33 -> n27  [color=blue, key=0, style=bold];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n38  [key=2, style=dotted];
n36 -> n39  [key=2, style=dotted];
n37 -> n35  [color=blue, key=0, style=bold];
}
