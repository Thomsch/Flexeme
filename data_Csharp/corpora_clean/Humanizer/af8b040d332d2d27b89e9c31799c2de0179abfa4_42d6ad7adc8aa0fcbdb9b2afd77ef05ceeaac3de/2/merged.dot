digraph  {
n0 [label="Entry Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="11-11", cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)"];
n1 [label="return String.Join('' '', input.Split(new[] {'_', '-'}));", span="13-13", cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)"];
n2 [label="Exit Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="11-11", cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)"];
n3 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])"];
n4 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])"];
n5 [label="Entry Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="16-16", cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)"];
n6 [label="var pascalCaseWordBoundaryRegex = new Regex(@''\r\n(?# word to word, number or acronym)\r\n(?<=[a-z])(?=[A-Z0-9])|\r\n(?# number to word or acronym)\r\n(?<=[0-9])(?=[A-Za-z])|\r\n(?# acronym to number)\r\n(?<=[A-Z])(?=[0-9])|\r\n(?# acronym to word)\r\n(?<=[A-Z])(?=[A-Z][a-z])\r\n'', RegexOptions.IgnorePatternWhitespace)", span="18-27", cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", color=red, community=0];
n7 [label="var result = pascalCaseWordBoundaryRegex\r\n                .Split(input)\r\n                .Select(word =>\r\n                    word.ToCharArray().All(Char.IsUpper) && word.Length > 1\r\n                        ? word\r\n                        : word.ToLower())\r\n                .Aggregate((res, word) => res + '' '' + word)", span="29-35", cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", color=red, community=0];
n11 [label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)"];
n8 [label="result = Char.ToUpper(result[0]) +\r\n                result.Substring(1, result.Length - 1)", span="37-38", cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)"];
n12 [label="Entry System.Text.RegularExpressions.Regex.Split(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Split(string)"];
n13 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n14 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate"];
n18 [label="Entry lambda expression", span="31-34", cluster="lambda expression"];
n24 [label="Entry lambda expression", span="35-35", cluster="lambda expression"];
n9 [label="return result.Replace('' i '', '' I '');", span="39-39", cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)"];
n15 [label="Entry Unk.ToUpper", span="", cluster="Unk.ToUpper"];
n16 [label="Entry Unk.Substring", span="", cluster="Unk.Substring"];
n10 [label="Exit Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="16-16", cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)"];
n17 [label="Entry Unk.Replace", span="", cluster="Unk.Replace"];
n19 [label="word.ToCharArray().All(Char.IsUpper) && word.Length > 1\r\n                        ? word\r\n                        : word.ToLower()", span="32-34", cluster="lambda expression", color=red, community=1];
n20 [label="Exit lambda expression", span="31-34", cluster="lambda expression"];
n21 [label="Entry string.ToCharArray()", span="0-0", cluster="string.ToCharArray()"];
n22 [label="Entry Unk.All", span="", cluster="Unk.All"];
n23 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
n25 [label="res + '' '' + word", span="35-35", cluster="lambda expression"];
n26 [label="Exit lambda expression", span="35-35", cluster="lambda expression"];
n27 [label="Entry Humanizer.StringHumanizeExtensions.Humanize(string)", span="47-47", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n28 [label="input.ToCharArray().All(Char.IsUpper)", span="50-50", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n29 [label="return input;", span="51-51", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n30 [label="input.Contains(''_'') || input.Contains(''-'')", span="53-53", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n31 [label="return FromUnderscoreDashSeparatedWords(input);", span="54-54", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n32 [label="return FromPascalCase(input);", span="56-56", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n34 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)"];
n33 [label="Exit Humanizer.StringHumanizeExtensions.Humanize(string)", span="47-47", cluster="Humanizer.StringHumanizeExtensions.Humanize(string)"];
n35 [label="Entry Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="65-65", cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)"];
n36 [label="return input.Humanize().ApplyCase(casing);", span="67-67", cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)"];
n37 [label="Exit Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="65-65", cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)"];
n38 [label="Entry string.Humanize()", span="47-47", cluster="string.Humanize()"];
n39 [label="Entry string.ApplyCase(Humanizer.LetterCasing)", span="15-15", cluster="string.ApplyCase(Humanizer.LetterCasing)"];
n0 -> n1  [key=0, style=solid];
n0 -> n27  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n7  [key=1, style=dashed, color=red, label=string];
n5 -> n27  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
n6 -> n7  [key=0, style=solid, color=red];
n6 -> n11  [key=2, style=dotted, color=red];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n12  [key=2, style=dotted, color=red];
n7 -> n13  [key=2, style=dotted, color=red];
n7 -> n14  [key=2, style=dotted, color=red];
n7 -> n18  [key=1, style=dashed, color=red, label="lambda expression"];
n7 -> n24  [key=1, style=dashed, color=red, label="lambda expression"];
n8 -> n9  [key=0, style=solid];
n8 -> n15  [key=2, style=dotted];
n8 -> n16  [key=2, style=dotted];
n8 -> n8  [key=1, style=dashed, color=darkseagreen4, label=result];
n18 -> n19  [key=0, style=solid, color=red];
n24 -> n25  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n17  [key=2, style=dotted];
n10 -> n5  [key=0, style=bold, color=blue];
n19 -> n20  [key=0, style=solid, color=red];
n19 -> n21  [key=2, style=dotted, color=red];
n19 -> n22  [key=2, style=dotted, color=red];
n19 -> n23  [key=2, style=dotted, color=red];
n20 -> n18  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n26 -> n24  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=string];
n27 -> n30  [key=1, style=dashed, color=darkseagreen4, label=string];
n27 -> n31  [key=1, style=dashed, color=darkseagreen4, label=string];
n27 -> n32  [key=1, style=dashed, color=darkseagreen4, label=string];
n27 -> n27  [key=3, color=darkorchid, style=bold, label="method methodReturn string Humanize"];
n27 -> n0  [key=3, color=darkorchid, style=bold, label="method methodReturn string Humanize"];
n27 -> n5  [key=3, color=darkorchid, style=bold, label="method methodReturn string Humanize"];
n28 -> n29  [key=0, style=solid];
n28 -> n30  [key=0, style=solid];
n28 -> n21  [key=2, style=dotted];
n28 -> n22  [key=2, style=dotted];
n29 -> n33  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=0, style=solid];
n30 -> n34  [key=2, style=dotted];
n31 -> n33  [key=0, style=solid];
n31 -> n0  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n5  [key=2, style=dotted];
n33 -> n27  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n38  [key=2, style=dotted];
n36 -> n39  [key=2, style=dotted];
n37 -> n35  [key=0, style=bold, color=blue];
}
