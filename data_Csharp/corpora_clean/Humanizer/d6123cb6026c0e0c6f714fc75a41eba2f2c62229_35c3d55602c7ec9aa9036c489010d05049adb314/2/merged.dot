digraph  {
d1 [label="input == null", span="82-82", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d0 [label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)"];
d2 [label="throw new ArgumentNullException(''input'');", span="82-82", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d3 [label="input = input.Trim()", span="83-83", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d4 [label="input.Length == 0 || input.IsInvalidMetricNumeral()", span="84-84", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d16 [label="Entry string.Trim()", span="0-0", cluster="string.Trim()"];
d6 [label="input = input.Replace('' '', String.Empty)", span="86-86", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d14 [label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)"];
d15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d5 [label="throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="85-85", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d17 [label="Entry string.IsInvalidMetricNumeral()", span="146-146", cluster="string.IsInvalidMetricNumeral()"];
d7 [label="var last = input[input.Length - 1]", span="87-87", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d19 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)"];
d9 [label="return Double.Parse(input);", span="88-88", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d11 [label="var number = Double.Parse(input.Remove(input.Length - 1))", span="90-90", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d18 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)"];
d29 [label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="164-164", cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)"];
d8 [label="!Char.IsLetter(last)", span="88-88", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d10 [label="Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", span="89-89", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d27 [label="(symbols.IndexOf(last) + 1) * 3", span="89-89", cluster="lambda expression", color=green, community=0];
d12 [label="var exponent = Math.Pow(10, Symbols[0].Contains(last) ? getExponent(Symbols[0]) : -getExponent(Symbols[1]))", span="91-91", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d21 [label="Entry double.Parse(string)", span="0-0", cluster="double.Parse(string)"];
d22 [label="Entry string.Remove(int)", span="0-0", cluster="string.Remove(int)"];
d13 [label="return number * exponent;", span="92-92", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d20 [label="Entry char.IsLetter(char)", span="0-0", cluster="char.IsLetter(char)"];
d78 [label=last, span=""];
d26 [label="Entry lambda expression", span="89-89", cluster="lambda expression"];
d28 [label="Exit lambda expression", span="89-89", cluster="lambda expression"];
d23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)"];
d24 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
d25 [label="Entry System.Math.Pow(double, double)", span="0-0", cluster="System.Math.Pow(double, double)"];
d31 [label="input.Equals(0)", span="112-112", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d30 [label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", span="110-110", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)"];
d32 [label="return input.ToString();", span="112-112", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d33 [label="input.IsOutOfRange()", span="113-113", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d40 [label="Entry double.Equals(double)", span="0-0", cluster="double.Equals(double)"];
d39 [label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", span="110-110", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)"];
d41 [label="Entry double.ToString()", span="0-0", cluster="double.ToString()"];
d34 [label="throw new ArgumentOutOfRangeException(''input'');", span="113-113", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d35 [label="var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="114-114", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d42 [label="Entry double.IsOutOfRange()", span="126-126", cluster="double.IsOutOfRange()"];
d36 [label="exponent == 0", span="115-115", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d44 [label="Entry System.Math.Abs(double)", span="0-0", cluster="System.Math.Abs(double)"];
d45 [label="Entry System.Math.Log10(double)", span="0-0", cluster="System.Math.Log10(double)"];
d46 [label="Entry System.Math.Floor(double)", span="0-0", cluster="System.Math.Floor(double)"];
d38 [label="return input * Math.Pow(1000, -exponent)\r\n                                + (isSplitedBySpace ? '' '' : String.Empty)\r\n                                + (Math.Sign(exponent) == 1 ? Symbols[0][exponent - 1] : Symbols[1][-exponent - 1]);", span="116-118", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d37 [label="return input.ToString();", span="115-115", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool)", color=green, community=0];
d47 [label="Entry System.Math.Sign(int)", span="0-0", cluster="System.Math.Sign(int)"];
d43 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
d49 [label="int limit = 27", span="128-128", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d48 [label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="126-126", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)"];
d50 [label="var bigLimit = Math.Pow(10, limit)", span="129-129", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d51 [label="var smallLimit = Math.Pow(10, -limit)", span="130-130", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d52 [label="Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="131-131", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d53 [label="return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n                               || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", span="132-133", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d58 [label="!(max > input && input > min)", span="131-131", cluster="lambda expression", color=green, community=0];
d79 [label=double, span=""];
d57 [label="Entry lambda expression", span="131-131", cluster="lambda expression"];
d59 [label="Exit lambda expression", span="131-131", cluster="lambda expression"];
d54 [label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="126-126", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)"];
d55 [label="Entry System.Math.Sign(double)", span="0-0", cluster="System.Math.Sign(double)"];
d56 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
d61 [label="double number", span="148-148", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d60 [label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="146-146", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)"];
d62 [label="var index = input.Length - 1", span="149-149", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d63 [label="var last = input[index]", span="150-150", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d65 [label="return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="152-152", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d64 [label="var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="151-151", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d66 [label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="146-146", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)"];
d67 [label="Entry double.TryParse(string, out double)", span="0-0", cluster="double.TryParse(string, out double)"];
d69 [label="var i = 0", span="166-166", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d68 [label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="164-164", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)"];
d70 [label="i < chars.Count", span="166-166", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d71 [label="chars.ElementAt(i).Equals(value)", span="167-167", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d72 [label="return i;", span="168-168", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d73 [label="i++", span="166-166", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d74 [label="return -1;", span="169-169", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d76 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)"];
d77 [label="Entry char.Equals(char)", span="0-0", cluster="char.Equals(char)"];
d75 [label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="164-164", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)"];
m0_46 [label="Entry System.Diagnostics.Debugger.Break()", span="0-0", cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs"];
m0_0 [label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", span="16-16", cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", file="MetricNumeralTests.cs"];
m0_1 [label="Assert.Equal(expected, input.ToMetric(isSplitedBySpace))", span="18-18", cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", color=green, community=0, file="MetricNumeralTests.cs"];
m0_2 [label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", span="16-16", cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool)", file="MetricNumeralTests.cs"];
m0_22 [label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="56-56", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs"];
m0_23 [label="Assert.Throws<ArgumentNullException>(() =>\r\n                                MetricNumeralExtensions.FromMetric(null))", span="58-59", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", color=green, community=1, file="MetricNumeralTests.cs"];
m0_24 [label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="56-56", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs"];
m0_8 [label="Entry Unk.>", span="", cluster="Unk.>", file="MetricNumeralTests.cs"];
m0_44 [label="Entry double.ToString(string, System.IFormatProvider)", span="0-0", cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs"];
m0_15 [label="Entry string.FromMetric()", span="80-80", cluster="string.FromMetric()", file="MetricNumeralTests.cs"];
m0_47 [label="Entry Unk.True", span="", cluster="Unk.True", file="MetricNumeralTests.cs"];
m0_29 [label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="64-64", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_30 [label="var b = true", span="66-66", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_31 [label="var i = -24", span="67-67", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_39 [label="b &= c", span="79-79", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_41 [label="Assert.True(b)", span="81-81", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_36 [label="var c = Equals(\r\n                                        origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                        from.ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="73-75", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_32 [label="i < 27", span="67-67", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_33 [label="var origin = Math.Pow(10, i)", span="69-69", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_40 [label="i++", span="67-67", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_37 [label="!c", span="76-76", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_38 [label="Debugger.Break()", span="77-77", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_34 [label="var to = origin.ToMetric()", span="70-70", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_35 [label="var from = to.FromMetric()", span="71-71", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", color=green, community=0, file="MetricNumeralTests.cs"];
m0_42 [label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="64-64", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_45 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="MetricNumeralTests.cs"];
m0_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="MetricNumeralTests.cs"];
m0_3 [label="Entry double.ToMetric(bool)", span="110-110", cluster="double.ToMetric(bool)", file="MetricNumeralTests.cs"];
m0_5 [label="Entry Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="26-26", cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs"];
m0_6 [label="Assert.Throws<ArgumentOutOfRangeException>(() => input.ToMetric())", span="28-28", cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", color=green, community=0, file="MetricNumeralTests.cs"];
m0_7 [label="Exit Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="26-26", cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs"];
m0_16 [label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="50-50", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs"];
m0_17 [label="Assert.Throws<ArgumentException>(() => input.FromMetric())", span="52-52", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", color=green, community=0, file="MetricNumeralTests.cs"];
m0_18 [label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="50-50", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs"];
m0_12 [label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="37-37", cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs"];
m0_13 [label="Assert.Equal(expected, input.FromMetric())", span="39-39", cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", color=green, community=0, file="MetricNumeralTests.cs"];
m0_14 [label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="37-37", cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs"];
m0_25 [label="Entry lambda expression", span="58-59", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_9 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_10 [label="input.ToMetric()", span="28-28", cluster="lambda expression", color=green, community=0, file="MetricNumeralTests.cs"];
m0_11 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_19 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_20 [label="input.FromMetric()", span="52-52", cluster="lambda expression", color=green, community=0, file="MetricNumeralTests.cs"];
m0_21 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_26 [label="MetricNumeralExtensions.FromMetric(null)", span="59-59", cluster="lambda expression", color=green, community=0, file="MetricNumeralTests.cs"];
m0_27 [label="Exit lambda expression", span="58-59", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_28 [label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="80-80", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", file="MetricNumeralTests.cs"];
m0_48 [label=double, span="", file="MetricNumeralTests.cs"];
m0_49 [label=string, span="", file="MetricNumeralTests.cs"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=0, style=solid, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d3  [key=1, style=dashed, color=green, label=string];
d2 -> d14  [key=0, style=solid, color=green];
d2 -> d15  [key=2, style=dotted, color=green];
d3 -> d3  [key=1, style=dashed, color=green, label=string];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d16  [key=2, style=dotted, color=green];
d3 -> d6  [key=1, style=dashed, color=green, label=string];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d6  [key=0, style=solid, color=green];
d4 -> d17  [key=2, style=dotted, color=green];
d6 -> d6  [key=1, style=dashed, color=green, label=string];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d19  [key=2, style=dotted, color=green];
d6 -> d9  [key=1, style=dashed, color=green, label=string];
d6 -> d11  [key=1, style=dashed, color=green, label=string];
d14 -> d0  [key=0, style=bold, color=blue];
d5 -> d14  [key=0, style=solid, color=green];
d5 -> d18  [key=2, style=dotted, color=green];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d10  [key=1, style=dashed, color=green, label=last];
d7 -> d27  [key=1, style=dashed, color=green, label=last];
d7 -> d12  [key=1, style=dashed, color=green, label=last];
d9 -> d14  [key=0, style=solid, color=green];
d9 -> d21  [key=2, style=dotted, color=green];
d11 -> d12  [key=0, style=solid, color=green];
d11 -> d22  [key=2, style=dotted, color=green];
d11 -> d21  [key=2, style=dotted, color=green];
d11 -> d13  [key=1, style=dashed, color=green, label=number];
d29 -> d7  [key=3, color=green, style=bold, label="Parameter variable char value"];
d29 -> d69  [key=3, color=green, style=bold, label="method methodReturn int IndexOf"];
d29 -> d74  [key=3, color=green, style=bold, label="method methodReturn int IndexOf"];
d8 -> d9  [key=0, style=solid, color=green];
d8 -> d10  [key=0, style=solid, color=green];
d8 -> d20  [key=2, style=dotted, color=green];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d10  [key=3, color=green, style=bold, label="Local variable System.Func<char[], double> getExponent"];
d10 -> d27  [key=1, style=dashed, color=green, label="char[]"];
d10 -> d12  [key=1, style=dashed, color=green, label=getExponent];
d27 -> d28  [key=0, style=solid, color=green];
d27 -> d29  [key=2, style=dotted, color=green];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d23  [key=2, style=dotted, color=green];
d12 -> d24  [key=2, style=dotted, color=green];
d12 -> d25  [key=2, style=dotted, color=green];
d13 -> d14  [key=0, style=solid, color=green];
d78 -> d27  [key=1, style=dashed, color=green, label=last];
d26 -> d27  [key=0, style=solid, color=green];
d28 -> d26  [key=0, style=bold, color=blue];
d31 -> d32  [key=0, style=solid, color=green];
d31 -> d33  [key=0, style=solid, color=green];
d31 -> d40  [key=2, style=dotted, color=green];
d30 -> d31  [key=0, style=solid, color=green];
d30 -> d32  [key=1, style=dashed, color=green, label=double];
d30 -> d33  [key=1, style=dashed, color=green, label=double];
d30 -> d35  [key=1, style=dashed, color=green, label=double];
d30 -> d37  [key=1, style=dashed, color=green, label=double];
d30 -> d38  [key=1, style=dashed, color=green, label=double];
d32 -> d39  [key=0, style=solid, color=green];
d32 -> d41  [key=2, style=dotted, color=green];
d33 -> d34  [key=0, style=solid, color=green];
d33 -> d35  [key=0, style=solid, color=green];
d33 -> d42  [key=2, style=dotted, color=green];
d39 -> d30  [key=0, style=bold, color=blue];
d34 -> d39  [key=0, style=solid, color=green];
d34 -> d43  [key=2, style=dotted, color=green];
d35 -> d36  [key=0, style=solid, color=green];
d35 -> d44  [key=2, style=dotted, color=green];
d35 -> d45  [key=2, style=dotted, color=green];
d35 -> d46  [key=2, style=dotted, color=green];
d35 -> d38  [key=1, style=dashed, color=green, label=exponent];
d36 -> d37  [key=0, style=solid, color=green];
d36 -> d38  [key=0, style=solid, color=green];
d38 -> d39  [key=0, style=solid, color=green];
d38 -> d25  [key=2, style=dotted, color=green];
d38 -> d47  [key=2, style=dotted, color=green];
d37 -> d39  [key=0, style=solid, color=green];
d37 -> d41  [key=2, style=dotted, color=green];
d49 -> d49  [key=3, color=green, style=bold, label="Local variable int limit"];
d49 -> d50  [key=0, style=solid, color=green];
d49 -> d51  [key=1, style=dashed, color=green, label=limit];
d48 -> d49  [key=0, style=solid, color=green];
d48 -> d52  [key=1, style=dashed, color=green, label=double];
d48 -> d58  [key=1, style=dashed, color=green, label=double];
d48 -> d53  [key=1, style=dashed, color=green, label=double];
d50 -> d53  [key=1, style=dashed, color=green, label=bigLimit];
d50 -> d51  [key=0, style=solid, color=green];
d50 -> d25  [key=2, style=dotted, color=green];
d51 -> d52  [key=0, style=solid, color=green];
d51 -> d53  [key=1, style=dashed, color=green, label=smallLimit];
d51 -> d25  [key=2, style=dotted, color=green];
d52 -> d52  [key=3, color=green, style=bold, label="Local variable System.Func<double, double, bool> outside"];
d52 -> d53  [key=0, style=solid, color=green];
d52 -> d58  [key=1, style=dashed, color=green, label=double];
d53 -> d54  [key=0, style=solid, color=green];
d53 -> d55  [key=2, style=dotted, color=green];
d53 -> d56  [key=2, style=dotted, color=green];
d58 -> d59  [key=0, style=solid, color=green];
d79 -> d58  [key=1, style=dashed, color=green, label=double];
d57 -> d58  [key=0, style=solid, color=green];
d59 -> d57  [key=0, style=bold, color=blue];
d54 -> d48  [key=0, style=bold, color=blue];
d61 -> d62  [key=0, style=solid, color=green];
d60 -> d61  [key=0, style=solid, color=green];
d60 -> d62  [key=1, style=dashed, color=green, label=string];
d60 -> d63  [key=1, style=dashed, color=green, label=string];
d60 -> d65  [key=1, style=dashed, color=green, label=string];
d62 -> d63  [key=0, style=solid, color=green];
d62 -> d65  [key=1, style=dashed, color=green, label=index];
d63 -> d64  [key=0, style=solid, color=green];
d65 -> d66  [key=0, style=solid, color=green];
d65 -> d22  [key=2, style=dotted, color=green];
d65 -> d67  [key=2, style=dotted, color=green];
d64 -> d65  [key=0, style=solid, color=green];
d64 -> d23  [key=2, style=dotted, color=green];
d66 -> d60  [key=0, style=bold, color=blue];
d69 -> d69  [key=3, color=green, style=bold, label="Local variable int i"];
d69 -> d70  [key=0, style=solid, color=green];
d69 -> d71  [key=1, style=dashed, color=green, label=i];
d69 -> d72  [key=1, style=dashed, color=green, label=i];
d69 -> d73  [key=1, style=dashed, color=green, label=i];
d68 -> d69  [key=0, style=solid, color=green];
d68 -> d70  [key=1, style=dashed, color=green, label="System.Collections.Generic.ICollection<char>"];
d68 -> d71  [key=1, style=dashed, color=green, label="System.Collections.Generic.ICollection<char>"];
d70 -> d71  [key=0, style=solid, color=green];
d70 -> d74  [key=0, style=solid, color=green];
d71 -> d72  [key=0, style=solid, color=green];
d71 -> d73  [key=0, style=solid, color=green];
d71 -> d76  [key=2, style=dotted, color=green];
d71 -> d77  [key=2, style=dotted, color=green];
d72 -> d75  [key=0, style=solid, color=green];
d73 -> d70  [key=0, style=solid, color=green];
d73 -> d73  [key=1, style=dashed, color=green, label=i];
d74 -> d75  [key=0, style=solid, color=green];
d75 -> d68  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=2, style=dotted, color=green];
m0_1 -> m0_4  [key=2, style=dotted, color=green];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid, color=green];
m0_23 -> m0_24  [key=0, style=solid, color=green];
m0_23 -> m0_8  [key=2, style=dotted, color=green];
m0_23 -> m0_25  [key=1, style=dashed, color=green, label="lambda expression"];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid, color=green];
m0_30 -> m0_30  [key=3, color=green, style=bold, label="Local variable bool b"];
m0_30 -> m0_31  [key=0, style=solid, color=green];
m0_30 -> m0_39  [key=1, style=dashed, color=green, label=b];
m0_30 -> m0_41  [key=1, style=dashed, color=green, label=b];
m0_30 -> m0_36  [key=3, color=green, style=bold, label="Local variable bool b"];
m0_31 -> m0_31  [key=3, color=green, style=bold, label="Local variable int i"];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_33  [key=1, style=dashed, color=green, label=i];
m0_31 -> m0_40  [key=1, style=dashed, color=green, label=i];
m0_39 -> m0_39  [key=1, style=dashed, color=green, label=b];
m0_39 -> m0_40  [key=0, style=solid, color=green];
m0_39 -> m0_41  [key=1, style=dashed, color=green, label=b];
m0_41 -> m0_42  [key=0, style=solid, color=green];
m0_41 -> m0_47  [key=2, style=dotted, color=green];
m0_36 -> m0_39  [key=1, style=dashed, color=green, label=c];
m0_36 -> m0_37  [key=0, style=solid, color=green];
m0_36 -> m0_44  [key=2, style=dotted, color=green];
m0_36 -> m0_45  [key=2, style=dotted, color=green];
m0_32 -> m0_41  [key=0, style=solid, color=green];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_33 -> m0_34  [key=0, style=solid, color=green];
m0_33 -> d25  [key=2, style=dotted, color=green];
m0_33 -> m0_36  [key=1, style=dashed, color=green, label=origin];
m0_40 -> m0_32  [key=0, style=solid, color=green];
m0_40 -> m0_40  [key=1, style=dashed, color=green, label=i];
m0_37 -> m0_39  [key=0, style=solid, color=green];
m0_37 -> m0_38  [key=0, style=solid, color=green];
m0_38 -> m0_39  [key=0, style=solid, color=green];
m0_38 -> m0_46  [key=2, style=dotted, color=green];
m0_34 -> m0_35  [key=0, style=solid, color=green];
m0_34 -> m0_3  [key=2, style=dotted, color=green];
m0_35 -> m0_36  [key=0, style=solid, color=green];
m0_35 -> m0_15  [key=2, style=dotted, color=green];
m0_42 -> m0_29  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_10  [key=1, style=dashed, color=green, label=double];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_8  [key=2, style=dotted, color=green];
m0_6 -> m0_9  [key=1, style=dashed, color=green, label="lambda expression"];
m0_7 -> m0_5  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_20  [key=1, style=dashed, color=green, label=string];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_17 -> m0_8  [key=2, style=dotted, color=green];
m0_17 -> m0_19  [key=1, style=dashed, color=green, label="lambda expression"];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid, color=green];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_13 -> m0_15  [key=2, style=dotted, color=green];
m0_13 -> m0_4  [key=2, style=dotted, color=green];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid, color=green];
m0_9 -> m0_10  [key=0, style=solid, color=green];
m0_10 -> m0_11  [key=0, style=solid, color=green];
m0_10 -> m0_3  [key=2, style=dotted, color=green];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_20 -> m0_21  [key=0, style=solid, color=green];
m0_20 -> m0_15  [key=2, style=dotted, color=green];
m0_21 -> m0_19  [key=0, style=bold, color=blue];
m0_26 -> m0_27  [key=0, style=solid, color=green];
m0_26 -> m0_28  [key=2, style=dotted, color=green];
m0_27 -> m0_25  [key=0, style=bold, color=blue];
m0_48 -> m0_10  [key=1, style=dashed, color=green, label=double];
m0_49 -> m0_20  [key=1, style=dashed, color=green, label=string];
}
