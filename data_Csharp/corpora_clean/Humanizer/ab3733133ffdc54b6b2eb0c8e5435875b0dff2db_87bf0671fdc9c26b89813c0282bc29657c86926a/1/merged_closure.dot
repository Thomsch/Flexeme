digraph  {
m0_0 [cluster="Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", file="DateHumanizeTests.cs", label="Entry Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", span="6-6"];
m0_1 [cluster="Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", file="DateHumanizeTests.cs", label="Exit Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", span="6-6"];
m2_20 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="DutchNumberToWordsConverter.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m2_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="DutchNumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m2_27 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="DutchNumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m2_19 [cluster="System.Func<T, TResult>.Invoke(T)", file="DutchNumberToWordsConverter.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m2_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="tokens.Empty()", span="15-15"];
m2_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="yield break;", span="17-17"];
m2_9 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="yield return first;", span="29-29"];
m2_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="yield return token;", span="36-36"];
m2_15 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="yield return token;", span="48-48"];
m2_4 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="var first = tokens.First()", span="20-20"];
m2_7 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="typeLookup(first.Text).MatchJust(out info)", span="24-24"];
m2_8 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="info.Tag == TypeDescriptorKind.Sequence\r\n                        && IsNextTokenAValue(tokens)", span="26-27"];
m2_10 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="tokens.Skip(1)", span="31-31"];
m2_14 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="Partition(tokens.Skip(1 + items), typeLookup)", span="46-46"];
m2_3 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="var items = 0", span="19-19"];
m2_12 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="items++", span="35-35"];
m2_5 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="first.Tag == TokenType.Name", span="21-21"];
m2_6 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="TypeDescriptor info", span="23-23"];
m2_11 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="token.IsValue()", span="33-33"];
m2_16 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m2_28 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="DutchNumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m2_23 [cluster="CommandLine.Core.Token.IsValue()", file="DutchNumberToWordsConverter.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m2_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="DutchNumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m2_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="DutchNumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m2_17 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="DutchNumberToWordsConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="87-87"];
m2_21 [cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs", label="Entry CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="52-52"];
m2_24 [cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs", label="var next = tokens.Skip(1).Take(1)", span="54-54"];
m2_25 [cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs", label="return next.Any()\r\n                ? next.Single().IsValue()\r\n                : false;", span="56-58"];
m2_26 [cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs", label="Exit CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="52-52"];
m3_52 [cluster="Unk.Pairwise", file="EnglishOrdinalizer.cs", label="Entry Unk.Pairwise", span=""];
m3_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="EnglishOrdinalizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m3_36 [cluster="Unk.IsValue", file="EnglishOrdinalizer.cs", label="Entry Unk.IsValue", span=""];
m3_43 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9"];
m3_20 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="34-34"];
m3_50 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="EnglishOrdinalizer.cs", label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? KeyValuePairHelper.Create(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : KeyValuePairHelper.Create(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="37-43"];
m3_51 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="EnglishOrdinalizer.cs", label="Exit CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="34-34"];
m3_58 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="EnglishOrdinalizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m3_53 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="EnglishOrdinalizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_25 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="EnglishOrdinalizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m3_14 [cluster="Unk.Where", file="EnglishOrdinalizer.cs", label="Entry Unk.Where", span=""];
m3_60 [cluster="Unk.ToArray", file="EnglishOrdinalizer.cs", label="Entry Unk.ToArray", span=""];
m3_16 [cluster="Unk.Partition", file="EnglishOrdinalizer.cs", label="Entry Unk.Partition", span=""];
m3_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="EnglishOrdinalizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m3_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m3_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var tokenList = tokens.ToList()", span="16-16"];
m3_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var switches = Switch.Partition(tokenList, typeLookup).ToList()", span="17-17"];
m3_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var scalars = Scalar.Partition(tokensExceptSwitches, typeLookup).ToList()", span="19-19"];
m3_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var sequences = Sequence.Partition(tokensExceptSwitchesAndScalars, typeLookup).ToList()", span="21-21"];
m3_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var tokensExceptSwitches = tokenList.Where(x => !switches.Contains(x)).ToList()", span="18-18"];
m3_10 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="return TokenGroup.Create(\r\n                    switches.Select(t => KeyValuePairHelper.Create(t.Text, ''true''))\r\n                        .Concat(scalars.Pairwise((f, s) => KeyValuePairHelper.Create(f.Text, s.Text)))\r\n                        .Concat(SequenceTokensToKeyValuePairEnumerable(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="26-31"];
m3_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var tokensExceptSwitchesAndScalars = (tokensExceptSwitches.Where(x => !scalars.Contains(x))).ToList()", span="20-20"];
m3_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Where(x => !sequences.Contains(x)).ToList()", span="22-22"];
m3_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue()).ToList()", span="23-23"];
m3_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="var errors = tokensExceptSwitchesAndScalarsAndSeq.Where(x => !values.Contains(x))", span="24-24"];
m3_11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m3_68 [cluster="CommandLine.Core.Token.IsValue()", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m3_57 [cluster="CommandLine.Core.Token.IsName()", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m3_69 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="40-40"];
m3_23 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="!switches.Contains(x)", span="18-18"];
m3_22 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="18-18"];
m3_27 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="!scalars.Contains(x)", span="20-20"];
m3_26 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="20-20"];
m3_31 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="!sequences.Contains(x)", span="22-22"];
m3_30 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="22-22"];
m3_33 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="23-23"];
m3_38 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="!values.Contains(x)", span="24-24"];
m3_37 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="24-24"];
m3_40 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="27-27"];
m3_44 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="28-28"];
m3_47 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="30-30"];
m3_24 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="18-18"];
m3_28 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="20-20"];
m3_32 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="22-22"];
m3_34 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="v.IsValue()", span="23-23"];
m3_35 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="23-23"];
m3_39 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="24-24"];
m3_41 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="KeyValuePairHelper.Create(t.Text, ''true'')", span="27-27"];
m3_42 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="27-27"];
m3_45 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="KeyValuePairHelper.Create(f.Text, s.Text)", span="28-28"];
m3_46 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="28-28"];
m3_48 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="t.Text", span="30-30"];
m3_49 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="30-30"];
m3_55 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="f.IsName()\r\n                            ? KeyValuePairHelper.Create(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : KeyValuePairHelper.Create(string.Empty)", span="39-41"];
m3_54 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="38-41"];
m3_62 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="t.Equals(f)", span="40-40"];
m3_56 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="38-41"];
m3_61 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="40-40"];
m3_65 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Entry lambda expression", span="40-40"];
m3_63 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="40-40"];
m3_66 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="v.IsValue()", span="40-40"];
m3_67 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="40-40"];
m3_70 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="x.Text", span="40-40"];
m3_71 [cluster="lambda expression", file="EnglishOrdinalizer.cs", label="Exit lambda expression", span="40-40"];
m3_29 [cluster="Unk.Contains", file="EnglishOrdinalizer.cs", label="Entry Unk.Contains", span=""];
m3_17 [cluster="Unk.Select", file="EnglishOrdinalizer.cs", label="Entry Unk.Select", span=""];
m3_64 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59"];
m3_19 [cluster="Unk.Concat", file="EnglishOrdinalizer.cs", label="Entry Unk.Concat", span=""];
m3_15 [cluster="Unk.ToList", file="EnglishOrdinalizer.cs", label="Entry Unk.ToList", span=""];
m3_21 [cluster="Unk.Create", file="EnglishOrdinalizer.cs", label="Entry Unk.Create", span=""];
m3_13 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m3_59 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="EnglishOrdinalizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m3_72 [file="EnglishOrdinalizer.cs", label=switches, span=""];
m3_73 [file="EnglishOrdinalizer.cs", label=scalars, span=""];
m3_74 [file="EnglishOrdinalizer.cs", label=sequences, span=""];
m3_75 [file="EnglishOrdinalizer.cs", label=values, span=""];
m3_76 [file="EnglishOrdinalizer.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m3_77 [file="EnglishOrdinalizer.cs", label="CommandLine.Core.Token", span=""];
m4_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="NumberToWordsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m4_19 [cluster="CommandLine.Core.Token.Name(string)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m4_5 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m4_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NumberToWordsTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m4_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NumberToWordsTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m4_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m4_14 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="34-34"];
m4_15 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="36-39"];
m4_16 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="41-51"];
m4_17 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="53-53"];
m4_18 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="34-34"];
m4_0 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="19-19"];
m4_1 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs", label="var expected = new Token[] { }", span="21-21"];
m4_2 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs", label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="23-28"];
m4_3 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="30-30"];
m4_4 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="19-19"];
m4_24 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="57-57"];
m4_25 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="59-63"];
m4_26 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="65-76"];
m4_27 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="78-78"];
m4_28 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="57-57"];
m4_29 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="73-76"];
m4_7 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="25-28"];
m4_8 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="26-28"];
m4_9 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="25-28"];
m4_21 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Entry lambda expression", span="48-51"];
m4_22 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="49-51"];
m4_23 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="48-51"];
m4_30 [cluster="lambda expression", file="NumberToWordsTests.cs", label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="74-76"];
m4_31 [cluster="lambda expression", file="NumberToWordsTests.cs", label="Exit lambda expression", span="73-76"];
m4_20 [cluster="CommandLine.Core.Token.Value(string)", file="NumberToWordsTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m4_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="NumberToWordsTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m5_8 [cluster="int.ToString(System.IFormatProvider)", file="OrdinalizeExtensions.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m5_5 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="OrdinalizeExtensions.cs", label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25"];
m5_6 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", color=green, community=0, file="OrdinalizeExtensions.cs", label="return Ordinalize(number, number.ToString(CultureInfo.InvariantCulture));", prediction=0, span="27-27"];
m5_7 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="OrdinalizeExtensions.cs", label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25"];
m5_4 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="OrdinalizeExtensions.cs", label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30"];
m5_9 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs", label="int nMod100 = number % 100", prediction=1, span="32-32"];
m5_11 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs", label="return numberString + ''th'';", prediction=2, span="36-36"];
m5_12 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs", label="number % 10", prediction=2, span="39-39"];
m5_10 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs", label="nMod100 >= 11 && nMod100 <= 13", prediction=4, span="34-34"];
m5_13 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs", label=1, prediction=5, span="41-41"];
m5_20 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="OrdinalizeExtensions.cs", label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30"];
m5_0 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="OrdinalizeExtensions.cs", label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15"];
m5_1 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", color=green, community=0, file="OrdinalizeExtensions.cs", label="return Ordinalize(int.Parse(numberString), numberString);", prediction=6, span="17-17"];
m5_2 [cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="OrdinalizeExtensions.cs", label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15"];
m5_3 [cluster="int.Parse(string)", file="OrdinalizeExtensions.cs", label="Entry int.Parse(string)", span="0-0"];
m7_0 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="PolishNumberToWordsConverter.cs", label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9"];
m7_2 [cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="PolishNumberToWordsConverter.cs", label="Exit CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9"];
m7_3 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="PolishNumberToWordsConverter.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m2_0 -> m2_7  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m2_0 -> m2_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_0 -> m2_10  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_0 -> m2_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m2_4 -> m2_7  [color=darkseagreen4, key=1, label=first, style=dashed];
m2_4 -> m2_9  [color=darkseagreen4, key=1, label=first, style=dashed];
m2_10 -> m2_13  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_3 -> m2_12  [color=darkseagreen4, key=1, label=items, style=dashed];
m2_3 -> m2_14  [color=darkseagreen4, key=1, label=items, style=dashed];
m2_12 -> m2_12  [color=darkseagreen4, key=1, label=items, style=dashed];
m2_12 -> m2_14  [color=darkseagreen4, key=1, label=items, style=dashed];
m3_20 -> m3_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_50 -> m3_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_50 -> m3_50  [color=darkseagreen4, key=1, label=t, style=dashed];
m3_2 -> m3_23  [color=darkseagreen4, key=1, label=switches, style=dashed];
m3_2 -> m3_10  [color=darkseagreen4, key=1, label=switches, style=dashed];
m3_4 -> m3_27  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m3_4 -> m3_10  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m3_6 -> m3_31  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m3_6 -> m3_10  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m3_3 -> m3_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_5 -> m3_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_7 -> m3_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_8 -> m3_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_8 -> m3_38  [color=darkseagreen4, key=1, label=values, style=dashed];
m3_8 -> m3_10  [color=darkseagreen4, key=1, label=values, style=dashed];
m3_9 -> m3_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_55 -> m3_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_55 -> m3_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_55 -> m3_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_54 -> m3_62  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_72 -> m3_23  [color=darkseagreen4, key=1, label=switches, style=dashed];
m3_73 -> m3_27  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m3_74 -> m3_31  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m3_75 -> m3_38  [color=darkseagreen4, key=1, label=values, style=dashed];
m3_76 -> m3_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_77 -> m3_62  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_15 -> m4_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m4_16 -> m4_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_1 -> m4_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m4_2 -> m4_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_25 -> m4_27  [color=darkseagreen4, key=1, label=expected, style=dashed];
m4_26 -> m4_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_4 -> m5_11  [color=green, key=1, label=string, style=dashed];
m5_4 -> m5_12  [color=green, key=1, label=int, style=dashed];
}
