digraph  {
m0_0 [label="Entry Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", span="6-6", cluster="Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", file="DateHumanizeTests.cs"];
m0_1 [label="Exit Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", span="6-6", cluster="Humanizer.DateTimeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime)", file="DateHumanizeTests.cs"];
m2_20 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="DutchNumberToWordsConverter.cs"];
m2_22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="DutchNumberToWordsConverter.cs"];
m2_27 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="DutchNumberToWordsConverter.cs"];
m2_19 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="DutchNumberToWordsConverter.cs"];
m2_0 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_1 [label="tokens.Empty()", span="15-15", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_2 [label="yield break;", span="17-17", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_9 [label="yield return first;", span="29-29", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_13 [label="yield return token;", span="36-36", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_15 [label="yield return token;", span="48-48", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_4 [label="var first = tokens.First()", span="20-20", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_7 [label="typeLookup(first.Text).MatchJust(out info)", span="24-24", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_8 [label="info.Tag == TypeDescriptorKind.Sequence\r\n                        && IsNextTokenAValue(tokens)", span="26-27", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_10 [label="tokens.Skip(1)", span="31-31", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_14 [label="Partition(tokens.Skip(1 + items), typeLookup)", span="46-46", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_3 [label="var items = 0", span="19-19", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_12 [label="items++", span="35-35", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_5 [label="first.Tag == TokenType.Name", span="21-21", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_6 [label="TypeDescriptor info", span="23-23", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_11 [label="token.IsValue()", span="33-33", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_16 [label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="DutchNumberToWordsConverter.cs"];
m2_28 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="DutchNumberToWordsConverter.cs"];
m2_23 [label="Entry CommandLine.Core.Token.IsValue()", span="77-77", cluster="CommandLine.Core.Token.IsValue()", file="DutchNumberToWordsConverter.cs"];
m2_18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="DutchNumberToWordsConverter.cs"];
m2_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="DutchNumberToWordsConverter.cs"];
m2_17 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="87-87", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="DutchNumberToWordsConverter.cs"];
m2_21 [label="Entry CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="52-52", cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs"];
m2_24 [label="var next = tokens.Skip(1).Take(1)", span="54-54", cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs"];
m2_25 [label="return next.Any()\r\n                ? next.Single().IsValue()\r\n                : false;", span="56-58", cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs"];
m2_26 [label="Exit CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="52-52", cluster="CommandLine.Core.Sequence.IsNextTokenAValue(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="DutchNumberToWordsConverter.cs"];
m3_52 [label="Entry Unk.Pairwise", span="", cluster="Unk.Pairwise", file="EnglishOrdinalizer.cs"];
m3_18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="EnglishOrdinalizer.cs"];
m3_36 [label="Entry Unk.IsValue", span="", cluster="Unk.IsValue", file="EnglishOrdinalizer.cs"];
m3_43 [label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="EnglishOrdinalizer.cs"];
m3_20 [label="Entry CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="34-34", cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="EnglishOrdinalizer.cs"];
m3_50 [label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? KeyValuePairHelper.Create(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : KeyValuePairHelper.Create(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="37-43", cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="EnglishOrdinalizer.cs"];
m3_51 [label="Exit CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="34-34", cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="EnglishOrdinalizer.cs"];
m3_58 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="EnglishOrdinalizer.cs"];
m3_53 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="EnglishOrdinalizer.cs"];
m3_25 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="EnglishOrdinalizer.cs"];
m3_14 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="EnglishOrdinalizer.cs"];
m3_60 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="EnglishOrdinalizer.cs"];
m3_16 [label="Entry Unk.Partition", span="", cluster="Unk.Partition", file="EnglishOrdinalizer.cs"];
m3_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="EnglishOrdinalizer.cs"];
m3_0 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_1 [label="var tokenList = tokens.ToList()", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_2 [label="var switches = Switch.Partition(tokenList, typeLookup).ToList()", span="17-17", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_4 [label="var scalars = Scalar.Partition(tokensExceptSwitches, typeLookup).ToList()", span="19-19", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_6 [label="var sequences = Sequence.Partition(tokensExceptSwitchesAndScalars, typeLookup).ToList()", span="21-21", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_3 [label="var tokensExceptSwitches = tokenList.Where(x => !switches.Contains(x)).ToList()", span="18-18", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_10 [label="return TokenGroup.Create(\r\n                    switches.Select(t => KeyValuePairHelper.Create(t.Text, ''true''))\r\n                        .Concat(scalars.Pairwise((f, s) => KeyValuePairHelper.Create(f.Text, s.Text)))\r\n                        .Concat(SequenceTokensToKeyValuePairEnumerable(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="26-31", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_5 [label="var tokensExceptSwitchesAndScalars = (tokensExceptSwitches.Where(x => !scalars.Contains(x))).ToList()", span="20-20", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_7 [label="var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Where(x => !sequences.Contains(x)).ToList()", span="22-22", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_8 [label="var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue()).ToList()", span="23-23", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_9 [label="var errors = tokensExceptSwitchesAndScalarsAndSeq.Where(x => !values.Contains(x))", span="24-24", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_11 [label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_68 [label="Entry CommandLine.Core.Token.IsValue()", span="77-77", cluster="CommandLine.Core.Token.IsValue()", file="EnglishOrdinalizer.cs"];
m3_57 [label="Entry CommandLine.Core.Token.IsName()", span="72-72", cluster="CommandLine.Core.Token.IsName()", file="EnglishOrdinalizer.cs"];
m3_69 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_23 [label="!switches.Contains(x)", span="18-18", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_22 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_27 [label="!scalars.Contains(x)", span="20-20", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_26 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_31 [label="!sequences.Contains(x)", span="22-22", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_30 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_33 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_38 [label="!values.Contains(x)", span="24-24", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_37 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_40 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_44 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_47 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_24 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_28 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_32 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_34 [label="v.IsValue()", span="23-23", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_35 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_39 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_41 [label="KeyValuePairHelper.Create(t.Text, ''true'')", span="27-27", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_42 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_45 [label="KeyValuePairHelper.Create(f.Text, s.Text)", span="28-28", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_46 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_48 [label="t.Text", span="30-30", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_49 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_55 [label="f.IsName()\r\n                            ? KeyValuePairHelper.Create(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : KeyValuePairHelper.Create(string.Empty)", span="39-41", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_54 [label="Entry lambda expression", span="38-41", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_62 [label="t.Equals(f)", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_56 [label="Exit lambda expression", span="38-41", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_61 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_65 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_63 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_66 [label="v.IsValue()", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_67 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_70 [label="x.Text", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_71 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="EnglishOrdinalizer.cs"];
m3_29 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="EnglishOrdinalizer.cs"];
m3_17 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="EnglishOrdinalizer.cs"];
m3_64 [label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="EnglishOrdinalizer.cs"];
m3_19 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="EnglishOrdinalizer.cs"];
m3_15 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="EnglishOrdinalizer.cs"];
m3_21 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="EnglishOrdinalizer.cs"];
m3_13 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="EnglishOrdinalizer.cs"];
m3_59 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="EnglishOrdinalizer.cs"];
m3_72 [label=switches, span="", file="EnglishOrdinalizer.cs"];
m3_73 [label=scalars, span="", file="EnglishOrdinalizer.cs"];
m3_74 [label=sequences, span="", file="EnglishOrdinalizer.cs"];
m3_75 [label=values, span="", file="EnglishOrdinalizer.cs"];
m3_76 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="EnglishOrdinalizer.cs"];
m3_77 [label="CommandLine.Core.Token", span="", file="EnglishOrdinalizer.cs"];
m4_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="NumberToWordsTests.cs"];
m4_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="NumberToWordsTests.cs"];
m4_5 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="NumberToWordsTests.cs"];
m4_13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NumberToWordsTests.cs"];
m4_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NumberToWordsTests.cs"];
m4_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="NumberToWordsTests.cs"];
m4_14 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="34-34", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs"];
m4_15 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="36-39", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs"];
m4_16 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="41-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs"];
m4_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="53-53", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs"];
m4_18 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="34-34", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="NumberToWordsTests.cs"];
m4_0 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="19-19", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs"];
m4_1 [label="var expected = new Token[] { }", span="21-21", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs"];
m4_2 [label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="23-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs"];
m4_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="30-30", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs"];
m4_4 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="19-19", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="NumberToWordsTests.cs"];
m4_24 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="57-57", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs"];
m4_25 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="59-63", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs"];
m4_26 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="65-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs"];
m4_27 [label="expected.ShouldAllBeEquivalentTo(result)", span="78-78", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs"];
m4_28 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="57-57", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="NumberToWordsTests.cs"];
m4_29 [label="Entry lambda expression", span="73-76", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_7 [label="Entry lambda expression", span="25-28", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_8 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="26-28", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_9 [label="Exit lambda expression", span="25-28", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_21 [label="Entry lambda expression", span="48-51", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_22 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="49-51", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_23 [label="Exit lambda expression", span="48-51", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_30 [label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="74-76", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_31 [label="Exit lambda expression", span="73-76", cluster="lambda expression", file="NumberToWordsTests.cs"];
m4_20 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="NumberToWordsTests.cs"];
m4_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="NumberToWordsTests.cs"];
m5_8 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="OrdinalizeExtensions.cs"];
m5_5 [label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="OrdinalizeExtensions.cs"];
m5_6 [label="return Ordinalize(number, number.ToString(CultureInfo.InvariantCulture));", span="27-27", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_7 [label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="OrdinalizeExtensions.cs"];
m5_4 [label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="OrdinalizeExtensions.cs"];
m5_9 [label="int nMod100 = number % 100", span="32-32", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_11 [label="return numberString + ''th'';", span="36-36", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_12 [label="number % 10", span="39-39", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_14 [label="return numberString + ''st'';", span="42-42", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=red, community=0, file="OrdinalizeExtensions.cs"];
m5_16 [label="return numberString + ''nd'';", span="44-44", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=red, community=0, file="OrdinalizeExtensions.cs"];
m5_18 [label="return numberString + ''rd'';", span="46-46", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=red, community=0, file="OrdinalizeExtensions.cs"];
m5_19 [label="return numberString + ''th'';", span="48-48", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=red, community=0, file="OrdinalizeExtensions.cs"];
m5_10 [label="nMod100 >= 11 && nMod100 <= 13", span="34-34", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_13 [label=1, span="41-41", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_15 [label=2, span="43-43", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=red, community=0, file="OrdinalizeExtensions.cs"];
m5_17 [label=3, span="45-45", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", color=red, community=0, file="OrdinalizeExtensions.cs"];
m5_20 [label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="OrdinalizeExtensions.cs"];
m5_0 [label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="OrdinalizeExtensions.cs"];
m5_1 [label="return Ordinalize(int.Parse(numberString), numberString);", span="17-17", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", color=green, community=0, file="OrdinalizeExtensions.cs"];
m5_2 [label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="OrdinalizeExtensions.cs"];
m5_3 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="OrdinalizeExtensions.cs"];
m7_0 [label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="PolishNumberToWordsConverter.cs"];
m7_1 [label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="11-11", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", color=red, community=0, file="PolishNumberToWordsConverter.cs"];
m7_2 [label="Exit CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="PolishNumberToWordsConverter.cs"];
m7_3 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="PolishNumberToWordsConverter.cs"];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=0, style=bold, color=crimson];
m2_0 -> m2_9  [key=0, style=bold, color=crimson];
m2_0 -> m2_13  [key=0, style=bold, color=crimson];
m2_0 -> m2_15  [key=0, style=bold, color=crimson];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m2_0 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m2_0 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m2_0 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=0, style=solid];
m2_1 -> m2_17  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_13 -> m2_10  [key=0, style=solid];
m2_15 -> m2_14  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_18  [key=2, style=dotted];
m2_4 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=first];
m2_4 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label=first];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_14  [key=0, style=solid];
m2_7 -> m2_19  [key=2, style=dotted];
m2_7 -> m2_20  [key=2, style=dotted];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_14  [key=0, style=solid];
m2_8 -> m2_21  [key=2, style=dotted];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_14  [key=0, style=solid];
m2_10 -> m2_22  [key=2, style=dotted];
m2_10 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=token];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=0, style=solid];
m2_14 -> m2_22  [key=2, style=dotted];
m2_14 -> m2_0  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=items];
m2_3 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=items];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=items];
m2_12 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=items];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_14  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_14  [key=0, style=solid];
m2_11 -> m2_23  [key=2, style=dotted];
m2_16 -> m2_0  [key=0, style=bold, color=blue];
m2_21 -> m2_24  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_22  [key=2, style=dotted];
m2_24 -> m2_27  [key=2, style=dotted];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_28  [key=2, style=dotted];
m2_25 -> m2_29  [key=2, style=dotted];
m2_25 -> m2_23  [key=2, style=dotted];
m2_26 -> m2_21  [key=0, style=bold, color=blue];
m3_20 -> m3_50  [key=0, style=solid];
m3_20 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_52  [key=2, style=dotted];
m3_50 -> m3_53  [key=2, style=dotted];
m3_50 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_50 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_51 -> m3_20  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m3_0 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m3_0 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_12  [key=2, style=dotted];
m3_1 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label=tokenList];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_13  [key=2, style=dotted];
m3_2 -> m3_12  [key=2, style=dotted];
m3_2 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label=switches];
m3_2 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=switches];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_16  [key=2, style=dotted];
m3_4 -> m3_12  [key=2, style=dotted];
m3_4 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m3_4 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_16  [key=2, style=dotted];
m3_6 -> m3_12  [key=2, style=dotted];
m3_6 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m3_6 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_14  [key=2, style=dotted];
m3_3 -> m3_15  [key=2, style=dotted];
m3_3 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_3 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=tokensExceptSwitches];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_17  [key=2, style=dotted];
m3_10 -> m3_18  [key=2, style=dotted];
m3_10 -> m3_19  [key=2, style=dotted];
m3_10 -> m3_20  [key=2, style=dotted];
m3_10 -> m3_21  [key=2, style=dotted];
m3_10 -> m3_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_10 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_10 -> m3_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_14  [key=2, style=dotted];
m3_5 -> m3_15  [key=2, style=dotted];
m3_5 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_5 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label=tokensExceptSwitchesAndScalars];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_14  [key=2, style=dotted];
m3_7 -> m3_15  [key=2, style=dotted];
m3_7 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_7 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label=tokensExceptSwitchesAndScalarsAndSeq];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_14  [key=2, style=dotted];
m3_8 -> m3_15  [key=2, style=dotted];
m3_8 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_8 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=values];
m3_8 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=values];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_14  [key=2, style=dotted];
m3_9 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_11 -> m3_0  [key=0, style=bold, color=blue];
m3_69 -> m3_70  [key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=2, style=dotted];
m3_26 -> m3_27  [key=0, style=solid];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_29  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_29  [key=2, style=dotted];
m3_37 -> m3_38  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_47 -> m3_48  [key=0, style=solid];
m3_24 -> m3_22  [key=0, style=bold, color=blue];
m3_28 -> m3_26  [key=0, style=bold, color=blue];
m3_32 -> m3_30  [key=0, style=bold, color=blue];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_36  [key=2, style=dotted];
m3_35 -> m3_33  [key=0, style=bold, color=blue];
m3_39 -> m3_37  [key=0, style=bold, color=blue];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_43  [key=2, style=dotted];
m3_42 -> m3_40  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_43  [key=2, style=dotted];
m3_46 -> m3_44  [key=0, style=bold, color=blue];
m3_48 -> m3_49  [key=0, style=solid];
m3_49 -> m3_47  [key=0, style=bold, color=blue];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_57  [key=2, style=dotted];
m3_55 -> m3_58  [key=2, style=dotted];
m3_55 -> m3_59  [key=2, style=dotted];
m3_55 -> m3_17  [key=2, style=dotted];
m3_55 -> m3_60  [key=2, style=dotted];
m3_55 -> m3_21  [key=2, style=dotted];
m3_55 -> m3_43  [key=2, style=dotted];
m3_55 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_55 -> m3_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_55 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_54 -> m3_55  [key=0, style=solid];
m3_54 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_64  [key=2, style=dotted];
m3_56 -> m3_54  [key=0, style=bold, color=blue];
m3_61 -> m3_62  [key=0, style=solid];
m3_65 -> m3_66  [key=0, style=solid];
m3_63 -> m3_61  [key=0, style=bold, color=blue];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_68  [key=2, style=dotted];
m3_67 -> m3_65  [key=0, style=bold, color=blue];
m3_70 -> m3_71  [key=0, style=solid];
m3_71 -> m3_69  [key=0, style=bold, color=blue];
m3_72 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label=switches];
m3_73 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m3_74 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m3_75 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=values];
m3_76 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_77 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m4_14 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_19  [key=2, style=dotted];
m4_15 -> m4_20  [key=2, style=dotted];
m4_15 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_19  [key=2, style=dotted];
m4_16 -> m4_20  [key=2, style=dotted];
m4_16 -> m4_5  [key=2, style=dotted];
m4_16 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_6  [key=2, style=dotted];
m4_18 -> m4_14  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_6  [key=2, style=dotted];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_24 -> m4_25  [key=0, style=solid];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_19  [key=2, style=dotted];
m4_25 -> m4_20  [key=2, style=dotted];
m4_25 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label=expected];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_19  [key=2, style=dotted];
m4_26 -> m4_20  [key=2, style=dotted];
m4_26 -> m4_5  [key=2, style=dotted];
m4_26 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_6  [key=2, style=dotted];
m4_28 -> m4_24  [key=0, style=bold, color=blue];
m4_29 -> m4_30  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_10  [key=2, style=dotted];
m4_8 -> m4_11  [key=2, style=dotted];
m4_8 -> m4_12  [key=2, style=dotted];
m4_8 -> m4_13  [key=2, style=dotted];
m4_9 -> m4_7  [key=0, style=bold, color=blue];
m4_21 -> m4_22  [key=0, style=solid];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_10  [key=2, style=dotted];
m4_22 -> m4_11  [key=2, style=dotted];
m4_22 -> m4_12  [key=2, style=dotted];
m4_22 -> m4_13  [key=2, style=dotted];
m4_23 -> m4_21  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_10  [key=2, style=dotted];
m4_30 -> m4_11  [key=2, style=dotted];
m4_30 -> m4_12  [key=2, style=dotted];
m4_30 -> m4_13  [key=2, style=dotted];
m4_31 -> m4_29  [key=0, style=bold, color=blue];
m5_5 -> m5_6  [key=0, style=solid, color=green];
m5_5 -> m5_4  [key=3, color=darkorchid, style=bold, label="method methodReturn string Ordinalize"];
m5_6 -> m5_7  [key=0, style=solid, color=green];
m5_6 -> m5_8  [key=2, style=dotted, color=green];
m5_6 -> m5_4  [key=2, style=dotted, color=green];
m5_7 -> m5_5  [key=0, style=bold, color=blue];
m5_4 -> m5_9  [key=0, style=solid, color=green];
m5_4 -> m5_11  [key=1, style=dashed, color=green, label=string];
m5_4 -> m5_12  [key=1, style=dashed, color=green, label=int];
m5_4 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_4 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_4 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_4 -> m5_19  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_4 -> m5_0  [key=3, color=darkorchid, style=bold, label="Parameter variable string numberString"];
m5_4 -> m5_5  [key=3, color=darkorchid, style=bold, label="Parameter variable int number"];
m5_9 -> m5_10  [key=0, style=solid, color=green];
m5_11 -> m5_20  [key=0, style=solid, color=green];
m5_12 -> m5_13  [key=0, style=solid, color=green];
m5_12 -> m5_15  [key=0, style=solid, color=green];
m5_12 -> m5_17  [key=0, style=solid, color=green];
m5_12 -> m5_19  [key=0, style=solid, color=green];
m5_14 -> m5_20  [key=0, style=solid, color=red];
m5_16 -> m5_20  [key=0, style=solid, color=red];
m5_18 -> m5_20  [key=0, style=solid, color=red];
m5_19 -> m5_20  [key=0, style=solid, color=red];
m5_10 -> m5_11  [key=0, style=solid, color=green];
m5_10 -> m5_12  [key=0, style=solid, color=green];
m5_13 -> m5_14  [key=0, style=solid, color=green];
m5_15 -> m5_16  [key=0, style=solid, color=red];
m5_17 -> m5_18  [key=0, style=solid, color=red];
m5_20 -> m5_4  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid, color=green];
m5_0 -> m5_4  [key=3, color=darkorchid, style=bold, label="method methodReturn string Ordinalize"];
m5_1 -> m5_2  [key=0, style=solid, color=green];
m5_1 -> m5_3  [key=2, style=dotted, color=green];
m5_1 -> m5_4  [key=2, style=dotted, color=green];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=red];
m7_1 -> m7_2  [key=0, style=solid, color=red];
m7_1 -> m7_3  [key=2, style=dotted, color=red];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
}
