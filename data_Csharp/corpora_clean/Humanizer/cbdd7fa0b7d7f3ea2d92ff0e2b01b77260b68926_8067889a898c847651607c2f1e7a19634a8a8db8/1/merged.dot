digraph  {
n21 [label="Humanizer.Configuration.OrdinalizerRegistry", span=""];
n0 [label="Entry Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", span="6-6", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n1 [label="Register(''de'', new GermanOrdinalizer())", span="8-8", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n2 [label="Register(''en'', new EnglishOrdinalizer())", span="9-9", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n11 [label="Entry Humanizer.Localisation.Ordinalizers.GermanOrdinalizer.GermanOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.GermanOrdinalizer.GermanOrdinalizer()"];
n12 [label="Entry Humanizer.Configuration.LocaliserRegistry<TLocaliser>.Register(string, TLocaliser)", span="54-54", cluster="Humanizer.Configuration.LocaliserRegistry<TLocaliser>.Register(string, TLocaliser)"];
n3 [label="Register(''es'', new SpanishOrdinalizer())", span="10-10", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n13 [label="Entry Humanizer.Localisation.Ordinalizers.EnglishOrdinalizer.EnglishOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.EnglishOrdinalizer.EnglishOrdinalizer()"];
n4 [label="Register(''it'', new ItalianOrdinalizer())", span="11-11", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n14 [label="Entry Humanizer.Localisation.Ordinalizers.SpanishOrdinalizer.SpanishOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.SpanishOrdinalizer.SpanishOrdinalizer()"];
n5 [label="Register(''nl'', new DutchOrdinalizer())", span="12-12", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n15 [label="Entry Humanizer.Localisation.Ordinalizers.ItalianOrdinalizer.ItalianOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.ItalianOrdinalizer.ItalianOrdinalizer()"];
n6 [label="Register(''pt'', new PortugueseOrdinalizer())", span="13-13", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n16 [label="Entry Humanizer.Localisation.Ordinalizers.DutchOrdinalizer.DutchOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.DutchOrdinalizer.DutchOrdinalizer()"];
n7 [label="Register(''ru'', new RussianOrdinalizer())", span="14-14", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n17 [label="Entry Humanizer.Localisation.Ordinalizers.PortugueseOrdinalizer.PortugueseOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.PortugueseOrdinalizer.PortugueseOrdinalizer()"];
n8 [label="Register(''tr'', new TurkishOrdinalizer())", span="15-15", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n18 [label="Entry Humanizer.Localisation.Ordinalizers.RussianOrdinalizer.RussianOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.RussianOrdinalizer.RussianOrdinalizer()"];
n9 [label="Register(''uk'', new UkrainianOrdinalizer())", span="16-16", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n19 [label="Entry Humanizer.Localisation.Ordinalizers.TurkishOrdinalizer.TurkishOrdinalizer()", span="7-7", cluster="Humanizer.Localisation.Ordinalizers.TurkishOrdinalizer.TurkishOrdinalizer()"];
n10 [label="Exit Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", span="6-6", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()"];
n20 [label="Entry Humanizer.Localisation.Ordinalizers.UkrainianOrdinalizer.UkrainianOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.UkrainianOrdinalizer.UkrainianOrdinalizer()"];
d4 [label="LetterCasing.LowerCase", span="24-24", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", color=green, community=0];
d1 [label=casing, span="19-19", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d5 [label="return input.ToLower();", span="25-25", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d0 [label="Entry Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="17-17", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d2 [label="LetterCasing.Title", span="21-21", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d6 [label="LetterCasing.AllCaps", span="27-27", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d8 [label="LetterCasing.Sentence", span="30-30", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d12 [label="throw new ArgumentOutOfRangeException(''casing'');", span="37-37", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d13 [label="Exit Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)", span="17-17", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d15 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
d3 [label="return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input);", span="22-22", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d7 [label="return input.ToUpper();", span="28-28", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d9 [label="input.Length >= 1", span="31-31", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d10 [label="return String.Concat(input.Substring(0, 1).ToUpper(), input.Substring(1));", span="32-32", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d11 [label="return input.ToUpper();", span="34-34", cluster="Humanizer.CasingExtensions.ApplyCase(string, Humanizer.LetterCasing)"];
d20 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
d14 [label="Entry System.Globalization.TextInfo.ToTitleCase(string)", span="0-0", cluster="System.Globalization.TextInfo.ToTitleCase(string)"];
d16 [label="Entry string.ToUpper()", span="0-0", cluster="string.ToUpper()"];
d17 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
d18 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)"];
d19 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)"];
m0_0 [label="Entry Humanizer.Tests.CasingTests.ToTitle(string, string)", span="12-12", cluster="Humanizer.Tests.CasingTests.ToTitle(string, string)", file="CasingTests.cs"];
m0_1 [label="Assert.Equal(expectedOutput, input.ToTitle())", span="14-14", cluster="Humanizer.Tests.CasingTests.ToTitle(string, string)", file="CasingTests.cs", color=green, community=0];
m0_2 [label="Exit Humanizer.Tests.CasingTests.ToTitle(string, string)", span="12-12", cluster="Humanizer.Tests.CasingTests.ToTitle(string, string)", file="CasingTests.cs"];
m0_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="CasingTests.cs"];
m0_5 [label="return (Enum)DehumanizeToPrivate(input, targetEnum, onNoMatch);", span="32-32", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", file="CasingTests.cs"];
m0_6 [label="Exit Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", span="30-30", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", file="CasingTests.cs"];
m0_3 [label="Entry Unk.ToTitle", span="", cluster="Unk.ToTitle", file="CasingTests.cs"];
m0_7 [label="var match = Enum.GetValues(targetEnum).Cast<Enum>().FirstOrDefault(value => string.Equals(value.Humanize(), input, StringComparison.OrdinalIgnoreCase))", span="37-37", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", color=red, community=0, file="CasingTests.cs"];
m0_8 [label="match == null && onNoMatch == OnNoMatch.ThrowsException", span="39-39", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", color=red, community=0, file="CasingTests.cs"];
m0_9 [label="throw new NoMatchFoundException(''Couldn't find any enum member that matches the string '' + input);", span="40-40", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", color=red, community=0, file="CasingTests.cs"];
m0_10 [label="return match;", span="42-42", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", color=red, community=0, file="CasingTests.cs"];
m0_11 [label="Exit Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", span="35-35", cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", file="CasingTests.cs"];
m0_12 [label="Entry System.Enum.GetValues(System.Type)", span="0-0", cluster="System.Enum.GetValues(System.Type)", file="CasingTests.cs"];
m0_13 [label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.Cast<TResult>()", file="CasingTests.cs"];
m0_15 [label="Entry Humanizer.NoMatchFoundException.NoMatchFoundException(string)", span="13-13", cluster="Humanizer.NoMatchFoundException.NoMatchFoundException(string)", file="CasingTests.cs"];
m0_19 [label="Entry System.Enum.Humanize()", span="15-15", cluster="System.Enum.Humanize()", file="CasingTests.cs"];
m0_16 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="CasingTests.cs"];
m0_17 [label="string.Equals(value.Humanize(), input, StringComparison.OrdinalIgnoreCase)", span="37-37", cluster="lambda expression", color=red, community=0, file="CasingTests.cs"];
m0_18 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="CasingTests.cs"];
m0_20 [label="Entry string.Equals(string, string, System.StringComparison)", span="0-0", cluster="string.Equals(string, string, System.StringComparison)", file="CasingTests.cs"];
m0_14 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="CasingTests.cs"];
m0_21 [label=string, span="", file="CasingTests.cs"];
m1_15 [label="Entry Humanizer.Tests.EnumHumanizeTests.AllCapitalMembersAreReturnedAsIs()", span="35-35", cluster="Humanizer.Tests.EnumHumanizeTests.AllCapitalMembersAreReturnedAsIs()", file="EnumHumanizeTests.cs"];
m1_16 [label="Assert.Equal(EnumUnderTest.ALLCAPITALS.ToString(), EnumUnderTest.ALLCAPITALS.Humanize())", span="37-37", cluster="Humanizer.Tests.EnumHumanizeTests.AllCapitalMembersAreReturnedAsIs()", file="EnumHumanizeTests.cs"];
m1_17 [label="Exit Humanizer.Tests.EnumHumanizeTests.AllCapitalMembersAreReturnedAsIs()", span="35-35", cluster="Humanizer.Tests.EnumHumanizeTests.AllCapitalMembersAreReturnedAsIs()", file="EnumHumanizeTests.cs"];
m1_18 [label="Entry System.Enum.ToString()", span="0-0", cluster="System.Enum.ToString()", file="EnumHumanizeTests.cs"];
m1_8 [label="Entry Humanizer.Tests.EnumHumanizeTests.CanApplyTitleCasingOnEnumHumanization()", span="19-19", cluster="Humanizer.Tests.EnumHumanizeTests.CanApplyTitleCasingOnEnumHumanization()", file="EnumHumanizeTests.cs"];
m1_9 [label="Assert.Equal(\r\n                EnumTestsResources.MemberWithoutDescriptionAttributeTitle, \r\n                EnumUnderTest.MemberWithoutDescriptionAttribute.Humanize(LetterCasing.Title))", span="21-23", cluster="Humanizer.Tests.EnumHumanizeTests.CanApplyTitleCasingOnEnumHumanization()", file="EnumHumanizeTests.cs"];
m1_10 [label="Exit Humanizer.Tests.EnumHumanizeTests.CanApplyTitleCasingOnEnumHumanization()", span="19-19", cluster="Humanizer.Tests.EnumHumanizeTests.CanApplyTitleCasingOnEnumHumanization()", file="EnumHumanizeTests.cs"];
m1_12 [label="Entry Humanizer.Tests.EnumHumanizeTests.CanApplyLowerCaseCasingOnEnumHumanization()", span="27-27", cluster="Humanizer.Tests.EnumHumanizeTests.CanApplyLowerCaseCasingOnEnumHumanization()", file="EnumHumanizeTests.cs"];
m1_13 [label="Assert.Equal(\r\n                EnumTestsResources.MemberWithoutDescriptionAttributeLowerCase, \r\n                EnumUnderTest.MemberWithoutDescriptionAttribute.Humanize(LetterCasing.LowerCase))", span="29-31", cluster="Humanizer.Tests.EnumHumanizeTests.CanApplyLowerCaseCasingOnEnumHumanization()", color=green, community=0, file="EnumHumanizeTests.cs"];
m1_14 [label="Exit Humanizer.Tests.EnumHumanizeTests.CanApplyLowerCaseCasingOnEnumHumanization()", span="27-27", cluster="Humanizer.Tests.EnumHumanizeTests.CanApplyLowerCaseCasingOnEnumHumanization()", file="EnumHumanizeTests.cs"];
m1_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="EnumHumanizeTests.cs"];
m1_3 [label="Entry System.Enum.Humanize()", span="13-13", cluster="System.Enum.Humanize()", file="EnumHumanizeTests.cs"];
m1_0 [label="Entry Humanizer.Tests.EnumHumanizeTests.HonorsDescriptionAttribute()", span="7-7", cluster="Humanizer.Tests.EnumHumanizeTests.HonorsDescriptionAttribute()", file="EnumHumanizeTests.cs"];
m1_1 [label="Assert.Equal(EnumTestsResources.CustomDescription, EnumUnderTest.MemberWithDescriptionAttribute.Humanize())", span="9-9", cluster="Humanizer.Tests.EnumHumanizeTests.HonorsDescriptionAttribute()", file="EnumHumanizeTests.cs"];
m1_2 [label="Exit Humanizer.Tests.EnumHumanizeTests.HonorsDescriptionAttribute()", span="7-7", cluster="Humanizer.Tests.EnumHumanizeTests.HonorsDescriptionAttribute()", file="EnumHumanizeTests.cs"];
m1_11 [label="Entry System.Enum.Humanize(Humanizer.LetterCasing)", span="37-37", cluster="System.Enum.Humanize(Humanizer.LetterCasing)", file="EnumHumanizeTests.cs"];
m1_5 [label="Entry Humanizer.Tests.EnumHumanizeTests.CanHumanizeMembersWithoutDescriptionAttribute()", span="13-13", cluster="Humanizer.Tests.EnumHumanizeTests.CanHumanizeMembersWithoutDescriptionAttribute()", file="EnumHumanizeTests.cs"];
m1_6 [label="Assert.Equal(EnumTestsResources.MemberWithoutDescriptionAttributeSentence, EnumUnderTest.MemberWithoutDescriptionAttribute.Humanize())", span="15-15", cluster="Humanizer.Tests.EnumHumanizeTests.CanHumanizeMembersWithoutDescriptionAttribute()", file="EnumHumanizeTests.cs"];
m1_7 [label="Exit Humanizer.Tests.EnumHumanizeTests.CanHumanizeMembersWithoutDescriptionAttribute()", span="13-13", cluster="Humanizer.Tests.EnumHumanizeTests.CanHumanizeMembersWithoutDescriptionAttribute()", file="EnumHumanizeTests.cs"];
m2_8 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="InflectorExtensions.cs"];
m2_5 [label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="InflectorExtensions.cs"];
m2_6 [label="return Ordinalize(number, number.ToString(CultureInfo.InvariantCulture));", span="27-27", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="InflectorExtensions.cs"];
m2_7 [label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int)", span="25-25", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int)", file="InflectorExtensions.cs"];
m2_4 [label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_9 [label="int nMod100 = number % 100", span="32-32", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_11 [label="return numberString + ''th'';", span="36-36", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_12 [label="number % 10", span="39-39", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_14 [label="return numberString + ''st'';", span="42-42", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_16 [label="return numberString + ''nd'';", span="44-44", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_18 [label="return numberString + ''rd'';", span="46-46", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_19 [label="return numberString + ''th'';", span="48-48", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_10 [label="nMod100 >= 11 && nMod100 <= 13", span="34-34", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_13 [label=1, span="41-41", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_15 [label=2, span="43-43", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_17 [label=3, span="45-45", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_20 [label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", span="30-30", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(int, string)", file="InflectorExtensions.cs"];
m2_0 [label="Entry Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="InflectorExtensions.cs"];
m2_1 [label="return Ordinalize(int.Parse(numberString), numberString);", span="17-17", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="InflectorExtensions.cs"];
m2_2 [label="Exit Humanizer.OrdinalizeExtensions.Ordinalize(string)", span="15-15", cluster="Humanizer.OrdinalizeExtensions.Ordinalize(string)", file="InflectorExtensions.cs"];
m2_3 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="InflectorExtensions.cs"];
m3_0 [label="Entry Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)", span="18-18", cluster="Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)", file="InflectorTests.cs"];
m3_1 [label="return ResourceManager.GetString(resourceKey, culture);", span="20-20", cluster="Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)", file="InflectorTests.cs"];
m3_2 [label="Exit Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)", span="18-18", cluster="Humanizer.Localisation.Resources.GetResource(string, System.Globalization.CultureInfo)", file="InflectorTests.cs"];
m3_3 [label="Entry System.Resources.ResourceManager.GetString(string, System.Globalization.CultureInfo)", span="0-0", cluster="System.Resources.ResourceManager.GetString(string, System.Globalization.CultureInfo)", file="InflectorTests.cs"];
m6_45 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="115-115", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_46 [label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''Can_return_title_Case''.Humanize(LetterCasing.Title))", span="117-119", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_47 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="115-115", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_3 [label="value.Length == 0", span="15-15", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="StringHumanizeTests.cs"];
m6_54 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="139-139", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", file="StringHumanizeTests.cs"];
m6_55 [label="Assert.Equal(\r\n                ''Can return sentence case'',\r\n                ''CanReturnSentenceCase''.Humanize(LetterCasing.Sentence))", span="141-143", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", file="StringHumanizeTests.cs"];
m6_56 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="139-139", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", file="StringHumanizeTests.cs"];
m6_38 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="99-99", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", file="StringHumanizeTests.cs"];
m6_39 [label="Assert.Equal(\r\n                ''1 HTML'',\r\n                ''1HTML''.Humanize())", span="101-103", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", file="StringHumanizeTests.cs"];
m6_40 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="99-99", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", file="StringHumanizeTests.cs"];
m6_0 [label="Entry Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="7-7", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m6_1 [label="Assert.Equal(\r\n                ''Pascal case input string is turned into sentence'',\r\n                ''PascalCaseInputStringIsTurnedIntoSentence''.Humanize())", span="9-11", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m6_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="StringHumanizeTests.cs"];
m6_5 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringHumanizeTests.cs"];
m6_6 [label="Assert.Equal(\r\n                ''When I use an input a here'',\r\n                ''WhenIUseAnInputAHere''.Humanize())", span="17-19", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringHumanizeTests.cs"];
m6_8 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="23-23", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m6_10 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="23-23", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m6_11 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m6_13 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m6_14 [label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="35-35", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m6_15 [label="Assert.Equal(\r\n                ''Underscored input string is turned into sentence'',\r\n                ''Underscored_input_string_is_turned_into_sentence''.Humanize())", span="37-39", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m6_16 [label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="35-35", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m6_18 [label="Assert.Equal(\r\n                ''Underscored input String is turned INTO sentence'',\r\n                ''Underscored_input_String_is_turned_INTO_sentence''.Humanize())", span="45-47", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", file="StringHumanizeTests.cs"];
m6_2 [label="Exit Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="7-7", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", file="StringHumanizeTests.cs"];
m6_7 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", file="StringHumanizeTests.cs"];
m6_12 [label="Assert.Equal(''Number is at the end 100'', ''NumberIsAtTheEnd100''.Humanize())", span="31-31", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m6_9 [label="Assert.Equal(''10 is in the begining'', ''10IsInTheBegining''.Humanize())", span="25-25", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", file="StringHumanizeTests.cs"];
m6_17 [label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="43-43", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", file="StringHumanizeTests.cs"];
m6_19 [label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="43-43", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", file="StringHumanizeTests.cs"];
m6_60 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="155-155", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringHumanizeTests.cs"];
m6_61 [label="Assert.Equal(\r\n                ''lowercase'',\r\n                ''LOWERCASE''.Humanize(LetterCasing.LowerCase))", span="157-159", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", color=green, community=0, file="StringHumanizeTests.cs"];
m6_62 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="155-155", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", file="StringHumanizeTests.cs"];
m6_22 [label="Exit Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", file="StringHumanizeTests.cs"];
m6_48 [label="Entry Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="123-123", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", file="StringHumanizeTests.cs"];
m6_49 [label="Assert.Equal(\r\n                ''Title Humanization Honors ALLCAPS'',\r\n                ''Title_humanization_Honors_ALLCAPS''.Humanize(LetterCasing.Title))", span="125-127", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", file="StringHumanizeTests.cs"];
m6_50 [label="Exit Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="123-123", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", file="StringHumanizeTests.cs"];
m6_26 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="67-67", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", file="StringHumanizeTests.cs"];
m6_27 [label="Assert.Equal(\r\n                ''The HTML language'',\r\n                ''TheHTMLLanguage''.Humanize())", span="69-71", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", file="StringHumanizeTests.cs"];
m6_28 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="67-67", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", file="StringHumanizeTests.cs"];
m6_51 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="131-131", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", file="StringHumanizeTests.cs"];
m6_52 [label="Assert.Equal(\r\n                ''can return lower case'',\r\n                ''CanReturnLowerCase''.Humanize(LetterCasing.LowerCase))", span="133-135", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", color=green, community=0, file="StringHumanizeTests.cs"];
m6_53 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="131-131", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", file="StringHumanizeTests.cs"];
m6_20 [label="Entry Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", file="StringHumanizeTests.cs"];
m6_21 [label="Entry string.ToCharArray()", span="0-0", cluster="string.ToCharArray()", file="StringHumanizeTests.cs"];
m6_23 [label="Entry char.IsLetterOrDigit(char)", span="0-0", cluster="char.IsLetterOrDigit(char)", file="StringHumanizeTests.cs"];
m6_24 [label="Assert.Equal(\r\n                ''HTML'',\r\n                ''HTML''.Humanize())", span="61-63", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", file="StringHumanizeTests.cs"];
m6_25 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="59-59", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", file="StringHumanizeTests.cs"];
m6_66 [label="Entry Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="171-171", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_67 [label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''Can_Humanize_into_Upper_case''.Humanize(LetterCasing.AllCaps))", span="173-175", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_68 [label="Exit Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="171-171", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_32 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="83-83", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", file="StringHumanizeTests.cs"];
m6_33 [label="Assert.Equal(\r\n                ''The language is HTML'',\r\n                ''TheLanguageIsHTML''.Humanize())", span="85-87", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", file="StringHumanizeTests.cs"];
m6_34 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="83-83", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", file="StringHumanizeTests.cs"];
m6_44 [label="Entry string.Humanize(Humanizer.LetterCasing)", span="60-60", cluster="string.Humanize(Humanizer.LetterCasing)", file="StringHumanizeTests.cs"];
m6_63 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="163-163", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", file="StringHumanizeTests.cs"];
m6_64 [label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''CanHumanizeIntoUpperCase''.Humanize(LetterCasing.AllCaps))", span="165-167", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", file="StringHumanizeTests.cs"];
m6_65 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="163-163", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", file="StringHumanizeTests.cs"];
m6_35 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="91-91", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", file="StringHumanizeTests.cs"];
m6_36 [label="Assert.Equal(\r\n                ''HTML 5'',\r\n                ''HTML5''.Humanize())", span="93-95", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", file="StringHumanizeTests.cs"];
m6_37 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="91-91", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", file="StringHumanizeTests.cs"];
m6_41 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="107-107", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_42 [label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''CanReturnTitleCase''.Humanize(LetterCasing.Title))", span="109-111", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_43 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="107-107", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", file="StringHumanizeTests.cs"];
m6_57 [label="Entry Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="147-147", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", file="StringHumanizeTests.cs"];
m6_58 [label="Assert.Equal(\r\n                '''',\r\n                ''''.Humanize(LetterCasing.Sentence))", span="149-151", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", file="StringHumanizeTests.cs"];
m6_59 [label="Exit Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="147-147", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", file="StringHumanizeTests.cs"];
m6_29 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="75-75", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", file="StringHumanizeTests.cs"];
m6_30 [label="Assert.Equal(\r\n                ''HTML is the language'',\r\n                ''HTMLIsTheLanguage''.Humanize())", span="77-79", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", file="StringHumanizeTests.cs"];
m6_31 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="75-75", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", file="StringHumanizeTests.cs"];
m7_0 [label="Entry Humanizer.Transformer.ToLowerCase.Transform(string)", span="6-6", cluster="Humanizer.Transformer.ToLowerCase.Transform(string)", file="ToLowerCase.cs"];
m7_1 [label="return CultureInfo.CurrentCulture.TextInfo.ToLower(input);", span="8-8", cluster="Humanizer.Transformer.ToLowerCase.Transform(string)", color=green, community=0, file="ToLowerCase.cs"];
m7_2 [label="Exit Humanizer.Transformer.ToLowerCase.Transform(string)", span="6-6", cluster="Humanizer.Transformer.ToLowerCase.Transform(string)", file="ToLowerCase.cs"];
m7_3 [label="Entry System.Globalization.TextInfo.ToLower(string)", span="0-0", cluster="System.Globalization.TextInfo.ToLower(string)", file="ToLowerCase.cs"];
m8_0 [label="Entry Humanizer.Transformer.ToSentenceCase.Transform(string)", span="6-6", cluster="Humanizer.Transformer.ToSentenceCase.Transform(string)", file="ToSentenceCase.cs"];
m8_1 [label="input.Length >= 1", span="8-8", cluster="Humanizer.Transformer.ToSentenceCase.Transform(string)", color=green, community=0, file="ToSentenceCase.cs"];
m8_2 [label="return String.Concat(input.Substring(0, 1).ToUpper(), input.Substring(1));", span="9-9", cluster="Humanizer.Transformer.ToSentenceCase.Transform(string)", color=green, community=0, file="ToSentenceCase.cs"];
m8_3 [label="return input.ToUpper();", span="11-11", cluster="Humanizer.Transformer.ToSentenceCase.Transform(string)", color=green, community=0, file="ToSentenceCase.cs"];
m8_4 [label="Exit Humanizer.Transformer.ToSentenceCase.Transform(string)", span="6-6", cluster="Humanizer.Transformer.ToSentenceCase.Transform(string)", file="ToSentenceCase.cs"];
m8_6 [label="Entry string.ToUpper()", span="0-0", cluster="string.ToUpper()", file="ToSentenceCase.cs"];
m8_5 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="ToSentenceCase.cs"];
m8_7 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="ToSentenceCase.cs"];
m9_0 [label="Entry Humanizer.Transformer.ToTitleCase.Transform(string)", span="6-6", cluster="Humanizer.Transformer.ToTitleCase.Transform(string)", file="ToTitleCase.cs"];
m9_1 [label="return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input);", span="8-8", cluster="Humanizer.Transformer.ToTitleCase.Transform(string)", color=green, community=0, file="ToTitleCase.cs"];
m9_2 [label="Exit Humanizer.Transformer.ToTitleCase.Transform(string)", span="6-6", cluster="Humanizer.Transformer.ToTitleCase.Transform(string)", file="ToTitleCase.cs"];
m10_0 [label="Entry Humanizer.Transformer.ToUpperCase.Transform(string)", span="4-4", cluster="Humanizer.Transformer.ToUpperCase.Transform(string)", file="ToUpperCase.cs"];
m10_1 [label="return input.ToUpper();", span="6-6", cluster="Humanizer.Transformer.ToUpperCase.Transform(string)", color=green, community=0, file="ToUpperCase.cs"];
m10_2 [label="Exit Humanizer.Transformer.ToUpperCase.Transform(string)", span="4-4", cluster="Humanizer.Transformer.ToUpperCase.Transform(string)", file="ToUpperCase.cs"];
m11_4 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="Transformers.cs"];
m11_5 [label="stringTransformer.Transform(current)", span="18-18", cluster="lambda expression", color=green, community=0, file="Transformers.cs"];
m11_6 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="Transformers.cs"];
m11_3 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate", file="Transformers.cs"];
m11_7 [label="Entry Humanizer.Transformer.IStringTransformer.Transform(string)", span="12-12", cluster="Humanizer.Transformer.IStringTransformer.Transform(string)", file="Transformers.cs"];
m11_0 [label="Entry Humanizer.Transformers.TransformWith(string, params Humanizer.Transformer.IStringTransformer[])", span="16-16", cluster="Humanizer.Transformers.TransformWith(string, params Humanizer.Transformer.IStringTransformer[])", file="Transformers.cs"];
m11_1 [label="return transformers.Aggregate(input, (current, stringTransformer) => stringTransformer.Transform(current));", span="18-18", cluster="Humanizer.Transformers.TransformWith(string, params Humanizer.Transformer.IStringTransformer[])", color=green, community=0, file="Transformers.cs"];
m11_2 [label="Exit Humanizer.Transformers.TransformWith(string, params Humanizer.Transformer.IStringTransformer[])", span="16-16", cluster="Humanizer.Transformers.TransformWith(string, params Humanizer.Transformer.IStringTransformer[])", file="Transformers.cs"];
m12_14 [label="Entry Humanizer.Localisation.Ordinalizers.SpanishOrdinalizer.SpanishOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.SpanishOrdinalizer.SpanishOrdinalizer()", file="TransformersTests.cs"];
m12_19 [label="Entry Humanizer.Localisation.Ordinalizers.TurkishOrdinalizer.TurkishOrdinalizer()", span="7-7", cluster="Humanizer.Localisation.Ordinalizers.TurkishOrdinalizer.TurkishOrdinalizer()", file="TransformersTests.cs"];
m12_20 [label="Entry Humanizer.Localisation.Ordinalizers.UkrainianOrdinalizer.UkrainianOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.UkrainianOrdinalizer.UkrainianOrdinalizer()", file="TransformersTests.cs"];
m12_13 [label="Entry Humanizer.Localisation.Ordinalizers.EnglishOrdinalizer.EnglishOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.EnglishOrdinalizer.EnglishOrdinalizer()", file="TransformersTests.cs"];
m12_11 [label="Entry Humanizer.Localisation.Ordinalizers.GermanOrdinalizer.GermanOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.GermanOrdinalizer.GermanOrdinalizer()", file="TransformersTests.cs"];
m12_0 [label="Entry Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", span="6-6", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", file="TransformersTests.cs"];
m12_1 [label="Register(''de'', new GermanOrdinalizer())", span="8-8", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_2 [label="Register(''en'', new EnglishOrdinalizer())", span="9-9", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_3 [label="Register(''es'', new SpanishOrdinalizer())", span="10-10", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_4 [label="Register(''it'', new ItalianOrdinalizer())", span="11-11", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_5 [label="Register(''nl'', new DutchOrdinalizer())", span="12-12", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_6 [label="Register(''pt'', new PortugueseOrdinalizer())", span="13-13", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_7 [label="Register(''ru'', new RussianOrdinalizer())", span="14-14", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_8 [label="Register(''tr'', new TurkishOrdinalizer())", span="15-15", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_9 [label="Register(''uk'', new UkrainianOrdinalizer())", span="16-16", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", color=green, community=0, file="TransformersTests.cs"];
m12_10 [label="Exit Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", span="6-6", cluster="Humanizer.Configuration.OrdinalizerRegistry.OrdinalizerRegistry()", file="TransformersTests.cs"];
m12_15 [label="Entry Humanizer.Localisation.Ordinalizers.ItalianOrdinalizer.ItalianOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.ItalianOrdinalizer.ItalianOrdinalizer()", file="TransformersTests.cs"];
m12_16 [label="Entry Humanizer.Localisation.Ordinalizers.DutchOrdinalizer.DutchOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.DutchOrdinalizer.DutchOrdinalizer()", file="TransformersTests.cs"];
m12_17 [label="Entry Humanizer.Localisation.Ordinalizers.PortugueseOrdinalizer.PortugueseOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.PortugueseOrdinalizer.PortugueseOrdinalizer()", file="TransformersTests.cs"];
m12_18 [label="Entry Humanizer.Localisation.Ordinalizers.RussianOrdinalizer.RussianOrdinalizer()", span="2-2", cluster="Humanizer.Localisation.Ordinalizers.RussianOrdinalizer.RussianOrdinalizer()", file="TransformersTests.cs"];
m12_21 [label="Humanizer.Configuration.OrdinalizerRegistry", span="", file="TransformersTests.cs"];
n21 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n4  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n5  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n6  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n21 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Configuration.OrdinalizerRegistry"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n11  [key=2, style=dotted];
n1 -> n12  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n13  [key=2, style=dotted];
n2 -> n12  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n14  [key=2, style=dotted];
n3 -> n12  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n4 -> n15  [key=2, style=dotted];
n4 -> n12  [key=2, style=dotted];
n5 -> n6  [key=0, style=solid];
n5 -> n16  [key=2, style=dotted];
n5 -> n12  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n17  [key=2, style=dotted];
n6 -> n12  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n7 -> n18  [key=2, style=dotted];
n7 -> n12  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid];
n8 -> n19  [key=2, style=dotted];
n8 -> n12  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n9 -> n20  [key=2, style=dotted];
n9 -> n12  [key=2, style=dotted];
n10 -> n0  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid, color=green];
d1 -> d4  [key=0, style=solid, color=green];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=0, style=solid];
d1 -> d8  [key=0, style=solid];
d1 -> d12  [key=0, style=solid];
d5 -> d13  [key=0, style=solid];
d5 -> d15  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label=string];
d0 -> d3  [key=1, style=dashed, color=darkseagreen4, label=string];
d0 -> d7  [key=1, style=dashed, color=darkseagreen4, label=string];
d0 -> d9  [key=1, style=dashed, color=darkseagreen4, label=string];
d0 -> d10  [key=1, style=dashed, color=darkseagreen4, label=string];
d0 -> d11  [key=1, style=dashed, color=darkseagreen4, label=string];
d2 -> d3  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d8 -> d9  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d12 -> d20  [key=2, style=dotted];
d13 -> d0  [key=0, style=bold, color=blue];
d3 -> d13  [key=0, style=solid];
d3 -> d14  [key=2, style=dotted];
d7 -> d13  [key=0, style=solid];
d7 -> d16  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d9 -> d11  [key=0, style=solid];
d10 -> d13  [key=0, style=solid];
d10 -> d17  [key=2, style=dotted];
d10 -> d16  [key=2, style=dotted];
d10 -> d18  [key=2, style=dotted];
d10 -> d19  [key=2, style=dotted];
d11 -> d13  [key=0, style=solid];
d11 -> d16  [key=2, style=dotted];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=2, style=dotted, color=green];
m0_1 -> m0_4  [key=2, style=dotted, color=green];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_3  [key=2, style=dotted];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_3 -> m0_7  [key=0, style=solid, color=red];
m0_3 -> m0_17  [key=1, style=dashed, color=red, label=string];
m0_3 -> m0_8  [key=1, style=dashed, color=red, label="Humanizer.OnNoMatch"];
m0_3 -> m0_9  [key=1, style=dashed, color=red, label=string];
m0_7 -> m0_8  [key=0, style=solid, color=red];
m0_7 -> m0_12  [key=2, style=dotted, color=red];
m0_7 -> m0_13  [key=2, style=dotted, color=red];
m0_7 -> m0_14  [key=2, style=dotted, color=red];
m0_7 -> m0_16  [key=1, style=dashed, color=red, label="lambda expression"];
m0_7 -> m0_10  [key=1, style=dashed, color=red, label=match];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_8 -> m0_10  [key=0, style=solid, color=red];
m0_9 -> m0_11  [key=0, style=solid, color=red];
m0_9 -> m0_15  [key=2, style=dotted, color=red];
m0_10 -> m0_11  [key=0, style=solid, color=red];
m0_11 -> m0_3  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid, color=red];
m0_17 -> m0_18  [key=0, style=solid, color=red];
m0_17 -> m0_19  [key=2, style=dotted, color=red];
m0_17 -> m0_20  [key=2, style=dotted, color=red];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_21 -> m0_17  [key=1, style=dashed, color=red, label=string];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_16 -> m1_3  [key=2, style=dotted];
m1_16 -> m1_4  [key=2, style=dotted];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=2, style=dotted];
m1_9 -> m1_4  [key=2, style=dotted];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid, color=green];
m1_13 -> m1_14  [key=0, style=solid, color=green];
m1_13 -> m1_11  [key=2, style=dotted, color=green];
m1_13 -> m1_4  [key=2, style=dotted, color=green];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_3  [key=2, style=dotted];
m1_6 -> m1_4  [key=2, style=dotted];
m1_7 -> m1_5  [key=0, style=bold, color=blue];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_8  [key=2, style=dotted];
m2_6 -> m2_4  [key=2, style=dotted];
m2_7 -> m2_5  [key=0, style=bold, color=blue];
m2_4 -> m2_9  [key=0, style=solid];
m2_4 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_4 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_4 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_4 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_4 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_4 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_9 -> m2_10  [key=0, style=solid];
m2_11 -> m2_20  [key=0, style=solid];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_15  [key=0, style=solid];
m2_12 -> m2_17  [key=0, style=solid];
m2_12 -> m2_19  [key=0, style=solid];
m2_14 -> m2_20  [key=0, style=solid];
m2_16 -> m2_20  [key=0, style=solid];
m2_18 -> m2_20  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_12  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_20 -> m2_4  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m6_45 -> m6_46  [key=0, style=solid];
m6_46 -> m6_44  [key=2, style=dotted];
m6_46 -> m6_4  [key=2, style=dotted];
m6_46 -> m6_47  [key=0, style=solid];
m6_47 -> m6_45  [key=0, style=bold, color=blue];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_5  [key=0, style=solid];
m6_54 -> m6_55  [key=0, style=solid];
m6_55 -> m6_44  [key=2, style=dotted];
m6_55 -> m6_4  [key=2, style=dotted];
m6_55 -> m6_56  [key=0, style=solid];
m6_56 -> m6_54  [key=0, style=bold, color=blue];
m6_38 -> m6_39  [key=0, style=solid];
m6_39 -> m6_4  [key=2, style=dotted];
m6_39 -> m6_40  [key=0, style=solid];
m6_39 -> m6_3  [key=2, style=dotted];
m6_40 -> m6_38  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label=int];
m6_0 -> m6_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m6_0 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m6_0 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_2  [key=3, color=darkorchid, style=bold, label="method methodReturn string Truncate"];
m6_0 -> m6_0  [key=3, color=darkorchid, style=bold, label="method methodReturn string Truncate"];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=0, style=solid];
m6_1 -> m6_4  [key=2, style=dotted];
m6_4 -> m6_19  [key=0, style=solid];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_7  [key=0, style=solid];
m6_6 -> m6_19  [key=0, style=solid];
m6_6 -> d17  [key=2, style=dotted];
m6_6 -> m6_4  [key=2, style=dotted];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_3  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_21  [key=2, style=dotted];
m6_8 -> m6_22  [key=2, style=dotted];
m6_8 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=numberOfCharactersEqualToTruncateLength];
m6_8 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label=numberOfCharactersEqualToTruncateLength];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_18  [key=0, style=solid];
m6_10 -> m6_7  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m6_10 -> m6_8  [key=0, style=bold, color=blue];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_13  [key=0, style=solid];
m6_11 -> m6_23  [key=2, style=dotted];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=0, style=solid];
m6_13 -> m6_11  [key=0, style=bold, color=blue];
m6_14 -> m6_19  [key=0, style=solid];
m6_14 -> m6_15  [key=0, style=solid];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_17  [key=0, style=solid];
m6_15 -> m6_4  [key=2, style=dotted];
m6_15 -> m6_3  [key=2, style=dotted];
m6_16 -> m6_19  [key=0, style=solid];
m6_16 -> d17  [key=2, style=dotted];
m6_16 -> m6_14  [key=0, style=bold, color=blue];
m6_18 -> m6_19  [key=0, style=solid];
m6_18 -> m6_4  [key=2, style=dotted];
m6_18 -> m6_3  [key=2, style=dotted];
m6_2 -> m6_19  [key=0, style=solid];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_12  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m6_7 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m6_7 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m6_7 -> m6_7  [key=3, color=darkorchid, style=bold, label="Local variable int alphaNumericalCharactersProcessed"];
m6_7 -> m6_5  [key=0, style=bold, color=blue];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_12  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m6_12 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m6_12 -> m6_4  [key=2, style=dotted];
m6_12 -> m6_3  [key=2, style=dotted];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_9 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_9 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_9 -> m6_4  [key=2, style=dotted];
m6_9 -> m6_3  [key=2, style=dotted];
m6_17 -> m6_10  [key=0, style=solid];
m6_17 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_17 -> m6_18  [key=0, style=solid];
m6_19 -> m6_0  [key=0, style=bold, color=blue];
m6_19 -> m6_17  [key=0, style=bold, color=blue];
m6_60 -> m6_61  [key=0, style=solid, color=green];
m6_61 -> m6_62  [key=0, style=solid, color=green];
m6_61 -> m6_44  [key=2, style=dotted, color=green];
m6_61 -> m6_4  [key=2, style=dotted, color=green];
m6_62 -> m6_60  [key=0, style=bold, color=blue];
m6_22 -> m6_20  [key=0, style=bold, color=blue];
m6_48 -> m6_49  [key=0, style=solid];
m6_49 -> m6_44  [key=2, style=dotted];
m6_49 -> m6_4  [key=2, style=dotted];
m6_49 -> m6_50  [key=0, style=solid];
m6_50 -> m6_48  [key=0, style=bold, color=blue];
m6_26 -> m6_27  [key=0, style=solid];
m6_27 -> m6_4  [key=2, style=dotted];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_3  [key=2, style=dotted];
m6_28 -> m6_26  [key=0, style=bold, color=blue];
m6_51 -> m6_52  [key=0, style=solid, color=green];
m6_52 -> m6_53  [key=0, style=solid, color=green];
m6_52 -> m6_44  [key=2, style=dotted, color=green];
m6_52 -> m6_4  [key=2, style=dotted, color=green];
m6_53 -> m6_51  [key=0, style=bold, color=blue];
m6_20 -> m6_21  [key=0, style=solid];
m6_21 -> m6_4  [key=2, style=dotted];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_3  [key=2, style=dotted];
m6_23 -> m6_24  [key=0, style=solid];
m6_24 -> m6_4  [key=2, style=dotted];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_3  [key=2, style=dotted];
m6_25 -> m6_23  [key=0, style=bold, color=blue];
m6_66 -> m6_67  [key=0, style=solid];
m6_67 -> m6_44  [key=2, style=dotted];
m6_67 -> m6_4  [key=2, style=dotted];
m6_67 -> m6_68  [key=0, style=solid];
m6_68 -> m6_66  [key=0, style=bold, color=blue];
m6_32 -> m6_33  [key=0, style=solid];
m6_33 -> m6_4  [key=2, style=dotted];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> m6_3  [key=2, style=dotted];
m6_34 -> m6_32  [key=0, style=bold, color=blue];
m6_63 -> m6_64  [key=0, style=solid];
m6_64 -> m6_44  [key=2, style=dotted];
m6_64 -> m6_4  [key=2, style=dotted];
m6_64 -> m6_65  [key=0, style=solid];
m6_65 -> m6_63  [key=0, style=bold, color=blue];
m6_35 -> m6_36  [key=0, style=solid];
m6_36 -> m6_4  [key=2, style=dotted];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_3  [key=2, style=dotted];
m6_37 -> m6_35  [key=0, style=bold, color=blue];
m6_41 -> m6_42  [key=0, style=solid];
m6_42 -> m6_44  [key=2, style=dotted];
m6_42 -> m6_4  [key=2, style=dotted];
m6_42 -> m6_43  [key=0, style=solid];
m6_43 -> m6_41  [key=0, style=bold, color=blue];
m6_57 -> m6_58  [key=0, style=solid];
m6_58 -> m6_44  [key=2, style=dotted];
m6_58 -> m6_4  [key=2, style=dotted];
m6_58 -> m6_59  [key=0, style=solid];
m6_59 -> m6_57  [key=0, style=bold, color=blue];
m6_29 -> m6_30  [key=0, style=solid];
m6_30 -> m6_4  [key=2, style=dotted];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_3  [key=2, style=dotted];
m6_31 -> m6_29  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=green];
m7_1 -> m7_2  [key=0, style=solid, color=green];
m7_1 -> m7_3  [key=2, style=dotted, color=green];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid, color=green];
m8_0 -> m8_2  [key=1, style=dashed, color=green, label=string];
m8_0 -> m8_3  [key=1, style=dashed, color=green, label=string];
m8_1 -> m8_2  [key=0, style=solid, color=green];
m8_1 -> m8_3  [key=0, style=solid, color=green];
m8_2 -> m8_4  [key=0, style=solid, color=green];
m8_2 -> m8_5  [key=2, style=dotted, color=green];
m8_2 -> m8_6  [key=2, style=dotted, color=green];
m8_2 -> m8_7  [key=2, style=dotted, color=green];
m8_2 -> d19  [key=2, style=dotted, color=green];
m8_3 -> m8_4  [key=0, style=solid, color=green];
m8_3 -> m8_6  [key=2, style=dotted, color=green];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid, color=green];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> d14  [key=2, style=dotted, color=green];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid, color=green];
m10_1 -> m10_2  [key=0, style=solid, color=green];
m10_1 -> d16  [key=2, style=dotted, color=green];
m10_2 -> m10_0  [key=0, style=bold, color=blue];
m11_4 -> m11_5  [key=0, style=solid, color=green];
m11_5 -> m11_6  [key=0, style=solid, color=green];
m11_5 -> m11_7  [key=2, style=dotted, color=green];
m11_6 -> m11_4  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid, color=green];
m11_1 -> m11_2  [key=0, style=solid, color=green];
m11_1 -> m11_3  [key=2, style=dotted, color=green];
m11_1 -> m11_4  [key=1, style=dashed, color=green, label="lambda expression"];
m11_2 -> m11_0  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid, color=green];
m12_1 -> m12_2  [key=0, style=solid, color=green];
m12_1 -> m12_11  [key=2, style=dotted, color=green];
m12_1 -> n12  [key=2, style=dotted, color=green];
m12_2 -> m12_3  [key=0, style=solid, color=green];
m12_2 -> m12_13  [key=2, style=dotted, color=green];
m12_2 -> n12  [key=2, style=dotted, color=green];
m12_3 -> m12_4  [key=0, style=solid, color=green];
m12_3 -> m12_14  [key=2, style=dotted, color=green];
m12_3 -> n12  [key=2, style=dotted, color=green];
m12_4 -> m12_5  [key=0, style=solid, color=green];
m12_4 -> m12_15  [key=2, style=dotted, color=green];
m12_4 -> n12  [key=2, style=dotted, color=green];
m12_5 -> m12_6  [key=0, style=solid, color=green];
m12_5 -> m12_16  [key=2, style=dotted, color=green];
m12_5 -> n12  [key=2, style=dotted, color=green];
m12_6 -> m12_7  [key=0, style=solid, color=green];
m12_6 -> m12_17  [key=2, style=dotted, color=green];
m12_6 -> n12  [key=2, style=dotted, color=green];
m12_7 -> m12_8  [key=0, style=solid, color=green];
m12_7 -> m12_18  [key=2, style=dotted, color=green];
m12_7 -> n12  [key=2, style=dotted, color=green];
m12_8 -> m12_9  [key=0, style=solid, color=green];
m12_8 -> m12_19  [key=2, style=dotted, color=green];
m12_8 -> n12  [key=2, style=dotted, color=green];
m12_9 -> m12_10  [key=0, style=solid, color=green];
m12_9 -> m12_20  [key=2, style=dotted, color=green];
m12_9 -> n12  [key=2, style=dotted, color=green];
m12_10 -> m12_0  [key=0, style=bold, color=blue];
m12_21 -> m12_1  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_2  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_3  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_4  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_5  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_6  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_7  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_8  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
m12_21 -> m12_9  [key=1, style=dashed, color=green, label="Humanizer.Configuration.OrdinalizerRegistry"];
}
