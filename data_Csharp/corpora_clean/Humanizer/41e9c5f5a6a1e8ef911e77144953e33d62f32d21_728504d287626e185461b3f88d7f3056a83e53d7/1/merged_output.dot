digraph  {
n0 [cluster="Humanizer.InflectorExtensions.Pluralize(string, Humanizer.Plurality)", label="Entry Humanizer.InflectorExtensions.Pluralize(string, Humanizer.Plurality)", span="41-41"];
n1 [cluster="Humanizer.InflectorExtensions.Pluralize(string, Humanizer.Plurality)", color=red, community=0, label="18: return plurality == Plurality.Plural ? word : word.Pluralize(inputIsKnownToBeSingular: false);", span="43-43"];
n2 [cluster="Humanizer.InflectorExtensions.Pluralize(string, Humanizer.Plurality)", label="Exit Humanizer.InflectorExtensions.Pluralize(string, Humanizer.Plurality)", span="41-41"];
n3 [cluster="string.Pluralize(bool)", label="Entry string.Pluralize(bool)", span="52-52"];
n4 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="Entry Humanizer.InflectorExtensions.Pluralize(string, bool)", span="52-52"];
n5 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="return Vocabularies.Default.Pluralize(word, inputIsKnownToBeSingular);", span="54-54"];
n6 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="Exit Humanizer.InflectorExtensions.Pluralize(string, bool)", span="52-52"];
n7 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", label="Entry Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", span="67-67"];
n8 [cluster="Humanizer.InflectorExtensions.Singularize(string, Humanizer.Plurality)", label="Entry Humanizer.InflectorExtensions.Singularize(string, Humanizer.Plurality)", span="64-64"];
n9 [cluster="Humanizer.InflectorExtensions.Singularize(string, Humanizer.Plurality)", color=red, community=0, label="18: return plurality == Plurality.Singular ? word : word.Singularize(inputIsKnownToBePlural: false);", span="66-66"];
n10 [cluster="Humanizer.InflectorExtensions.Singularize(string, Humanizer.Plurality)", label="Exit Humanizer.InflectorExtensions.Singularize(string, Humanizer.Plurality)", span="64-64"];
n11 [cluster="string.Singularize(bool)", label="Entry string.Singularize(bool)", span="75-75"];
n12 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="Entry Humanizer.InflectorExtensions.Singularize(string, bool)", span="75-75"];
n13 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="return Vocabularies.Default.Singularize(word, inputIsKnownToBePlural);", span="77-77"];
n14 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="Exit Humanizer.InflectorExtensions.Singularize(string, bool)", span="75-75"];
n15 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", label="Entry Humanizer.Inflections.Vocabulary.Singularize(string, bool)", span="100-100"];
n16 [cluster="Humanizer.InflectorExtensions.Titleize(string)", label="Entry Humanizer.InflectorExtensions.Titleize(string)", span="85-85"];
n17 [cluster="Humanizer.InflectorExtensions.Titleize(string)", label="return input.Humanize(LetterCasing.Title);", span="87-87"];
n18 [cluster="Humanizer.InflectorExtensions.Titleize(string)", label="Exit Humanizer.InflectorExtensions.Titleize(string)", span="85-85"];
n19 [cluster="string.Humanize(Humanizer.LetterCasing)", label="Entry string.Humanize(Humanizer.LetterCasing)", span="67-67"];
n20 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", label="Entry Humanizer.InflectorExtensions.Pascalize(string)", span="95-95"];
n21 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", label="return Regex.Replace(input, ''(?:^|_)(.)'', match => match.Groups[1].Value.ToUpper());", span="97-97"];
n22 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", label="Exit Humanizer.InflectorExtensions.Pascalize(string)", span="95-95"];
n23 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", span="0-0"];
n24 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
n25 [cluster="lambda expression", label="match.Groups[1].Value.ToUpper()", span="97-97"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
n27 [cluster="string.ToUpper()", label="Entry string.ToUpper()", span="0-0"];
n28 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="Entry Humanizer.InflectorExtensions.Camelize(string)", span="105-105"];
n29 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="var word = Pascalize(input)", span="107-107"];
n30 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="return word.Substring(0, 1).ToLower() + word.Substring(1);", span="108-108"];
n31 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="Exit Humanizer.InflectorExtensions.Camelize(string)", span="105-105"];
n32 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n33 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n34 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n35 [cluster="Humanizer.InflectorExtensions.Underscore(string)", label="Entry Humanizer.InflectorExtensions.Underscore(string)", span="116-116"];
n36 [cluster="Humanizer.InflectorExtensions.Underscore(string)", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(input, @''([A-Z]+)([A-Z][a-z])'', ''$1_$2''), @''([a-z\d])([A-Z])'', ''$1_$2''), @''[-\s]'', ''_'').ToLower();", span="118-120"];
n37 [cluster="Humanizer.InflectorExtensions.Underscore(string)", label="Exit Humanizer.InflectorExtensions.Underscore(string)", span="116-116"];
n38 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, string)", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, string)", span="0-0"];
n39 [cluster="Humanizer.InflectorExtensions.Dasherize(string)", label="Entry Humanizer.InflectorExtensions.Dasherize(string)", span="128-128"];
n40 [cluster="Humanizer.InflectorExtensions.Dasherize(string)", label="return underscoredWord.Replace('_', '-');", span="130-130"];
n41 [cluster="Humanizer.InflectorExtensions.Dasherize(string)", label="Exit Humanizer.InflectorExtensions.Dasherize(string)", span="128-128"];
n42 [cluster="string.Replace(char, char)", label="Entry string.Replace(char, char)", span="0-0"];
n43 [cluster="Humanizer.InflectorExtensions.Hyphenate(string)", label="Entry Humanizer.InflectorExtensions.Hyphenate(string)", span="138-138"];
n44 [cluster="Humanizer.InflectorExtensions.Hyphenate(string)", label="return Dasherize(underscoredWord);", span="140-140"];
n45 [cluster="Humanizer.InflectorExtensions.Hyphenate(string)", label="Exit Humanizer.InflectorExtensions.Hyphenate(string)", span="138-138"];
m0_20 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="var result = ApplyRules(_plurals, word)", span="69-69"];
m0_21 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label=inputIsKnownToBeSingular, span="71-71"];
m0_23 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="var asSingular = ApplyRules(_singulars, word)", span="74-74"];
m0_25 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="asSingular != null && asSingular != word && asSingular + ''s'' != word && asSingularAsPlural == word && result != word", span="76-76"];
m0_26 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="return word;", span="77-77"];
m0_22 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="return result;", span="72-72"];
m0_27 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="return result;", span="79-79"];
m0_24 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="var asSingularAsPlural = ApplyRules(_plurals, asSingular)", span="75-75"];
m0_28 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Pluralize(string, bool)", span="67-67"];
m0_0 [cluster="Humanizer.Inflections.Vocabulary.Vocabulary()", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.Vocabulary()", span="13-13"];
m0_1 [cluster="Humanizer.Inflections.Vocabulary.Vocabulary()", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Vocabulary()", span="13-13"];
m0_33 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.Singularize(string, bool)", span="100-100"];
m0_34 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="var result = ApplyRules(_singulars, word)", span="102-102"];
m0_35 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label=inputIsKnownToBePlural, span="104-104"];
m0_37 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="var asPlural = ApplyRules(_plurals, word)", span="108-108"];
m0_39 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="asPlural != word && word + ''s'' != asPlural && asPluralAsSingular == word && result != word", span="110-110"];
m0_40 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="return word;", span="111-111"];
m0_41 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="return result ?? word;", span="113-113"];
m0_36 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="return result;", span="105-105"];
m0_38 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="var asPluralAsSingular = ApplyRules(_singulars, asPlural)", span="109-109"];
m0_42 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, bool)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Singularize(string, bool)", span="100-100"];
m0_65 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", file="Vocabulary.cs", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
m0_70 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", file="Vocabulary.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
m0_13 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Vocabulary.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_58 [cluster="Humanizer.Inflections.Vocabulary.Rule.Apply(string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.Rule.Apply(string)", span="161-161"];
m0_66 [cluster="Humanizer.Inflections.Vocabulary.Rule.Apply(string)", file="Vocabulary.cs", label="!_regex.IsMatch(word)", span="163-163"];
m0_68 [cluster="Humanizer.Inflections.Vocabulary.Rule.Apply(string)", file="Vocabulary.cs", label="return _regex.Replace(word, _replacement);", span="166-166"];
m0_67 [cluster="Humanizer.Inflections.Vocabulary.Rule.Apply(string)", file="Vocabulary.cs", label="return null;", span="164-164"];
m0_69 [cluster="Humanizer.Inflections.Vocabulary.Rule.Apply(string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Rule.Apply(string)", span="161-161"];
m0_61 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Vocabulary.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m0_16 [cluster="Humanizer.Inflections.Vocabulary.Rule.Rule(string, string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.Rule.Rule(string, string)", span="155-155"];
m0_62 [cluster="Humanizer.Inflections.Vocabulary.Rule.Rule(string, string)", file="Vocabulary.cs", label="_regex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptionsUtil.Compiled)", span="157-157"];
m0_63 [cluster="Humanizer.Inflections.Vocabulary.Rule.Rule(string, string)", file="Vocabulary.cs", label="_replacement = replacement", span="158-158"];
m0_64 [cluster="Humanizer.Inflections.Vocabulary.Rule.Rule(string, string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Rule.Rule(string, string)", span="155-155"];
m0_2 [cluster="Humanizer.Inflections.Vocabulary.AddIrregular(string, string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.AddIrregular(string, string)", span="26-26"];
m0_3 [cluster="Humanizer.Inflections.Vocabulary.AddIrregular(string, string)", file="Vocabulary.cs", label="AddPlural(''('' + singular[0] + '')'' + singular.Substring(1) + ''$'', ''$1'' + plural.Substring(1))", span="28-28"];
m0_4 [cluster="Humanizer.Inflections.Vocabulary.AddIrregular(string, string)", file="Vocabulary.cs", label="AddSingular(''('' + plural[0] + '')'' + plural.Substring(1) + ''$'', ''$1'' + singular.Substring(1))", span="29-29"];
m0_5 [cluster="Humanizer.Inflections.Vocabulary.AddIrregular(string, string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.AddIrregular(string, string)", span="26-26"];
m0_29 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", span="128-128"];
m0_46 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="word == null", span="130-130"];
m0_48 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="IsUncountable(word)", span="133-133"];
m0_49 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="return word;", span="134-134"];
m0_50 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="var result = word", span="136-136"];
m0_51 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="var i = rules.Count - 1", span="137-137"];
m0_53 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="(result = rules[i].Apply(word)) != null", span="139-139"];
m0_47 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="return null;", span="131-131"];
m0_55 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="return result;", span="142-142"];
m0_52 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="i >= 0", span="137-137"];
m0_54 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="i--", span="137-137"];
m0_56 [cluster="Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.ApplyRules(System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>, string)", span="128-128"];
m0_57 [cluster="Humanizer.Inflections.Vocabulary.IsUncountable(string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.IsUncountable(string)", span="145-145"];
m0_59 [cluster="Humanizer.Inflections.Vocabulary.IsUncountable(string)", file="Vocabulary.cs", label="return _uncountables.Contains(word.ToLower());", span="147-147"];
m0_60 [cluster="Humanizer.Inflections.Vocabulary.IsUncountable(string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.IsUncountable(string)", span="145-145"];
m0_9 [cluster="Humanizer.Inflections.Vocabulary.AddUncountable(string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.AddUncountable(string)", span="36-36"];
m0_10 [cluster="Humanizer.Inflections.Vocabulary.AddUncountable(string)", file="Vocabulary.cs", label="_uncountables.Add(word.ToLower())", span="38-38"];
m0_11 [cluster="Humanizer.Inflections.Vocabulary.AddUncountable(string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.AddUncountable(string)", span="36-36"];
m0_43 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, Humanizer.Plurality)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.Singularize(string, Humanizer.Plurality)", span="123-123"];
m0_44 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, Humanizer.Plurality)", color=red, community=0, file="Vocabulary.cs", label="19: return plurality == Plurality.Singular ? word : Singularize(word, inputIsKnownToBePlural: false);", span="125-125"];
m0_45 [cluster="Humanizer.Inflections.Vocabulary.Singularize(string, Humanizer.Plurality)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Singularize(string, Humanizer.Plurality)", span="123-123"];
m0_7 [cluster="Humanizer.Inflections.Vocabulary.AddPlural(string, string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.AddPlural(string, string)", span="46-46"];
m0_14 [cluster="Humanizer.Inflections.Vocabulary.AddPlural(string, string)", file="Vocabulary.cs", label="_plurals.Add(new Rule(rule, replacement))", span="48-48"];
m0_15 [cluster="Humanizer.Inflections.Vocabulary.AddPlural(string, string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.AddPlural(string, string)", span="46-46"];
m0_71 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", file="Vocabulary.cs", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0"];
m0_12 [cluster="string.ToLower()", file="Vocabulary.cs", label="Entry string.ToLower()", span="0-0"];
m0_30 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, Humanizer.Plurality)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.Pluralize(string, Humanizer.Plurality)", span="89-89"];
m0_31 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, Humanizer.Plurality)", color=red, community=0, file="Vocabulary.cs", label="2: return plurality == Plurality.Plural ? word : Pluralize(word, inputIsKnownToBeSingular: false);", span="91-91"];
m0_32 [cluster="Humanizer.Inflections.Vocabulary.Pluralize(string, Humanizer.Plurality)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.Pluralize(string, Humanizer.Plurality)", span="89-89"];
m0_6 [cluster="string.Substring(int)", file="Vocabulary.cs", label="Entry string.Substring(int)", span="0-0"];
m0_8 [cluster="Humanizer.Inflections.Vocabulary.AddSingular(string, string)", file="Vocabulary.cs", label="Entry Humanizer.Inflections.Vocabulary.AddSingular(string, string)", span="56-56"];
m0_17 [cluster="Humanizer.Inflections.Vocabulary.AddSingular(string, string)", file="Vocabulary.cs", label="_singulars.Add(new Rule(rule, replacement))", span="58-58"];
m0_18 [cluster="Humanizer.Inflections.Vocabulary.AddSingular(string, string)", file="Vocabulary.cs", label="Exit Humanizer.Inflections.Vocabulary.AddSingular(string, string)", span="56-56"];
m0_72 [file="Vocabulary.cs", label="Humanizer.Inflections.Vocabulary", span=""];
m0_73 [file="Vocabulary.cs", label="Humanizer.Inflections.Vocabulary.Rule", span=""];
n0 -> n1  [color=red, key=0, style=solid];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n3  [color=red, key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n1  [color=red, key=3, label="Parameter variable bool inputIsKnownToBeSingular", style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
n8 -> n9  [color=red, key=0, style=solid];
n9 -> n10  [color=red, key=0, style=solid];
n9 -> n11  [color=red, key=2, style=dotted];
n10 -> n8  [color=blue, key=0, style=bold];
n11 -> n1  [color=red, key=3, label="Parameter variable bool inputIsKnownToBePlural", style=bold];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=2, style=dotted];
n14 -> n12  [color=blue, key=0, style=bold];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n18 -> n16  [color=blue, key=0, style=bold];
n20 -> n21  [key=0, style=solid];
n20 -> n28  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n21 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n22 -> n20  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n26 -> n24  [color=blue, key=0, style=bold];
n28 -> n29  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n20  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=2, style=dotted];
n30 -> n33  [key=2, style=dotted];
n30 -> n34  [key=2, style=dotted];
n31 -> n28  [color=blue, key=0, style=bold];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n38  [key=2, style=dotted];
n36 -> n33  [key=2, style=dotted];
n37 -> n35  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n39 -> n43  [color=darkorchid, key=3, label="Parameter variable string underscoredWord", style=bold];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=2, style=dotted];
n41 -> n39  [color=blue, key=0, style=bold];
n43 -> n44  [key=0, style=solid];
n43 -> n39  [color=darkorchid, key=3, label="method methodReturn string Hyphenate", style=bold];
n44 -> n45  [key=0, style=solid];
n44 -> n39  [key=2, style=dotted];
n45 -> n43  [color=blue, key=0, style=bold];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_29  [key=2, style=dotted];
m0_20 -> m0_22  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_20 -> m0_25  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_20 -> m0_27  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_29  [key=2, style=dotted];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=asSingular, style=dashed];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=0, style=solid];
m0_26 -> m0_28  [key=0, style=solid];
m0_22 -> m0_28  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_29  [key=2, style=dotted];
m0_28 -> n7  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [color=blue, key=0, style=bold];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_33 -> m0_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_33 -> m0_39  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_33 -> m0_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_33 -> m0_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_33 -> m0_33  [color=darkorchid, key=3, label="method methodReturn string Singularize", style=bold];
m0_33 -> m0_43  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_33 -> m0_31  [color=red, key=3, label="Parameter variable bool inputIsKnownToBePlural", style=bold];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_29  [key=2, style=dotted];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_34 -> m0_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_34 -> m0_41  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_29  [key=2, style=dotted];
m0_37 -> m0_39  [color=darkseagreen4, key=1, label=asPlural, style=dashed];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_36 -> m0_42  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_29  [key=2, style=dotted];
m0_42 -> m0_33  [color=blue, key=0, style=bold];
m0_58 -> m0_66  [key=0, style=solid];
m0_58 -> m0_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_58 -> m0_29  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_58 -> m0_47  [color=darkorchid, key=3, label="method methodReturn string Apply", style=bold];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_68  [key=0, style=solid];
m0_66 -> m0_70  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_71  [key=2, style=dotted];
m0_67 -> m0_69  [key=0, style=solid];
m0_69 -> m0_58  [color=blue, key=0, style=bold];
m0_16 -> m0_62  [key=0, style=solid];
m0_16 -> m0_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_65  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_16  [color=blue, key=0, style=bold];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_7  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=2, style=dotted];
m0_4 -> m0_8  [key=2, style=dotted];
m0_5 -> m0_2  [color=blue, key=0, style=bold];
m0_29 -> m0_46  [key=0, style=solid];
m0_29 -> m0_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_29 -> m0_49  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_29 -> m0_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_29 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>", style=dashed];
m0_29 -> m0_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<Humanizer.Inflections.Vocabulary.Rule>", style=dashed];
m0_29 -> n7  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_29 -> m0_23  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_29 -> m0_33  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_29 -> m0_37  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_29 -> m0_47  [color=darkorchid, key=3, label="method methodReturn string ApplyRules", style=bold];
m0_29 -> m0_29  [color=darkorchid, key=3, label="method methodReturn string ApplyRules", style=bold];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_48  [key=0, style=solid];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [key=0, style=solid];
m0_48 -> m0_57  [key=2, style=dotted];
m0_49 -> m0_56  [key=0, style=solid];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_55  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_50 -> m0_29  [color=darkorchid, key=3, label="Local variable string result", style=bold];
m0_50 -> m0_58  [color=darkorchid, key=3, label="Local variable string result", style=bold];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_51 -> m0_54  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_55  [key=0, style=solid];
m0_53 -> m0_58  [key=2, style=dotted];
m0_47 -> m0_56  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_55  [key=0, style=solid];
m0_54 -> m0_52  [key=0, style=solid];
m0_54 -> m0_54  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_56 -> m0_29  [color=blue, key=0, style=bold];
m0_57 -> m0_59  [key=0, style=solid];
m0_57 -> m0_29  [color=darkorchid, key=3, label="Parameter variable string word", style=bold];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_12  [key=2, style=dotted];
m0_59 -> m0_61  [key=2, style=dotted];
m0_60 -> m0_57  [color=blue, key=0, style=bold];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=2, style=dotted];
m0_10 -> m0_13  [key=2, style=dotted];
m0_11 -> m0_9  [color=blue, key=0, style=bold];
m0_43 -> m0_44  [color=red, key=0, style=solid];
m0_44 -> m0_45  [color=red, key=0, style=solid];
m0_44 -> m0_33  [color=red, key=2, style=dotted];
m0_45 -> m0_43  [color=blue, key=0, style=bold];
m0_7 -> m0_14  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=2, style=dotted];
m0_14 -> m0_13  [key=2, style=dotted];
m0_15 -> m0_7  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [color=red, key=0, style=solid];
m0_31 -> m0_32  [color=red, key=0, style=solid];
m0_31 -> n7  [color=red, key=2, style=dotted];
m0_32 -> m0_30  [color=blue, key=0, style=bold];
m0_8 -> m0_17  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_16  [key=2, style=dotted];
m0_17 -> m0_13  [key=2, style=dotted];
m0_18 -> m0_8  [color=blue, key=0, style=bold];
m0_72 -> m0_3  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_4  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_10  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_14  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_17  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_20  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_23  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_24  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_31  [color=red, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_34  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_37  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_38  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_44  [color=red, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_48  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_72 -> m0_59  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary", style=dashed];
m0_73 -> m0_62  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary.Rule", style=dashed];
m0_73 -> m0_63  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary.Rule", style=dashed];
m0_73 -> m0_66  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary.Rule", style=dashed];
m0_73 -> m0_68  [color=darkseagreen4, key=1, label="Humanizer.Inflections.Vocabulary.Rule", style=dashed];
}
