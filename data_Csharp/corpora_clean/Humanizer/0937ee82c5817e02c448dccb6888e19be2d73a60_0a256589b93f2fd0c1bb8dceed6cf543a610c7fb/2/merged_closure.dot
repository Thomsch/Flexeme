digraph  {
n43 [label="Humanizer.Tests.CollectionHumanizeTests", span=""];
n0 [cluster="Humanizer.Tests.SomeClass.ToString()", label="Entry Humanizer.Tests.SomeClass.ToString()", span="9-9"];
n1 [cluster="Humanizer.Tests.SomeClass.ToString()", label="return ''ToString'';", span="11-11"];
n2 [cluster="Humanizer.Tests.SomeClass.ToString()", label="Exit Humanizer.Tests.SomeClass.ToString()", span="9-9"];
n3 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeReturnsOnlyNameWhenCollectionContainsOneItem()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeReturnsOnlyNameWhenCollectionContainsOneItem()", span="19-19"];
n4 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeReturnsOnlyNameWhenCollectionContainsOneItem()", label="var collection = new List<string> { ''A String'' }", span="21-21"];
n5 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeReturnsOnlyNameWhenCollectionContainsOneItem()", label="Assert.Equal(''A String'', collection.Humanize())", span="23-23"];
n7 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n6 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeReturnsOnlyNameWhenCollectionContainsOneItem()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeReturnsOnlyNameWhenCollectionContainsOneItem()", span="19-19"];
n8 [cluster="System.Collections.Generic.IEnumerable<T>.Humanize<T>()", label="Entry System.Collections.Generic.IEnumerable<T>.Humanize<T>()", span="17-17"];
n9 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n10 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesSeparatorWhenMoreThanOneItemIsInCollection()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesSeparatorWhenMoreThanOneItemIsInCollection()", span="27-27"];
n11 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesSeparatorWhenMoreThanOneItemIsInCollection()", label="var collection = new List<string>\r\n            {\r\n                ''A String'',\r\n                ''Another String'',\r\n            }", span="29-33"];
n12 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesSeparatorWhenMoreThanOneItemIsInCollection()", label="Assert.Equal(''A String or Another String'', collection.Humanize(''or''))", span="35-35"];
n13 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesSeparatorWhenMoreThanOneItemIsInCollection()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesSeparatorWhenMoreThanOneItemIsInCollection()", span="27-27"];
n14 [cluster="System.Collections.Generic.IEnumerable<T>.Humanize<T>(string)", label="Entry System.Collections.Generic.IEnumerable<T>.Humanize<T>(string)", span="40-40"];
n15 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsSeparatorToAnd()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsSeparatorToAnd()", span="39-39"];
n16 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsSeparatorToAnd()", label="var collection = new List<string>\r\n            {\r\n                ''A String'',\r\n                ''Another String'',\r\n            }", span="41-45"];
n17 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsSeparatorToAnd()", label="Assert.Equal(''A String and Another String'', collection.Humanize())", span="47-47"];
n18 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsSeparatorToAnd()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsSeparatorToAnd()", span="39-39"];
n19 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesOxfordComma()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesOxfordComma()", span="51-51"];
n20 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesOxfordComma()", label="var collection = new List<string>\r\n            {\r\n                ''A String'',\r\n                ''Another String'',\r\n                ''A Third String'',\r\n            }", span="53-58"];
n21 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesOxfordComma()", label="Assert.Equal(''A String, Another String, or A Third String'', collection.Humanize(''or''))", span="60-60"];
n22 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesOxfordComma()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesOxfordComma()", span="51-51"];
n23 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsToToString()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsToToString()", span="71-71"];
n24 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsToToString()", label="Assert.Equal(''ToString, ToString, or ToString'', _testCollection.Humanize(''or''))", span="73-73"];
n25 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsToToString()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeDefaultsToToString()", span="71-71"];
n26 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatter()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatter()", span="77-77"];
n27 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatter()", label="var humanized = _testCollection.Humanize(sc => string.Format(''SomeObject #{0} - {1}'', sc.SomeInt, sc.SomeString))", span="79-79"];
n28 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatter()", label="Assert.Equal(''SomeObject #1 - One, SomeObject #2 - Two, and SomeObject #3 - Three'', humanized)", span="80-80"];
n30 [cluster="System.Collections.Generic.IEnumerable<T>.Humanize<T>(System.Func<T, string>)", label="Entry System.Collections.Generic.IEnumerable<T>.Humanize<T>(System.Func<T, string>)", span="27-27"];
n31 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n29 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatter()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatter()", span="77-77"];
n32 [cluster="lambda expression", label="string.Format(''SomeObject #{0} - {1}'', sc.SomeInt, sc.SomeString)", span="79-79"];
n33 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n34 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n35 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatterWhenSeparatorIsProvided()", label="Entry Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatterWhenSeparatorIsProvided()", span="84-84"];
n36 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatterWhenSeparatorIsProvided()", label="var humanized = _testCollection.Humanize(sc => string.Format(''SomeObject #{0} - {1}'', sc.SomeInt, sc.SomeString), ''or'')", span="86-86"];
n37 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatterWhenSeparatorIsProvided()", label="Assert.Equal(''SomeObject #1 - One, SomeObject #2 - Two, or SomeObject #3 - Three'', humanized)", span="87-87"];
n39 [cluster="System.Collections.Generic.IEnumerable<T>.Humanize<T>(System.Func<T, string>, string)", label="Entry System.Collections.Generic.IEnumerable<T>.Humanize<T>(System.Func<T, string>, string)", span="51-51"];
n40 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
n38 [cluster="Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatterWhenSeparatorIsProvided()", label="Exit Humanizer.Tests.CollectionHumanizeTests.HumanizeUsesObjectFormatterWhenSeparatorIsProvided()", span="84-84"];
n41 [cluster="lambda expression", label="string.Format(''SomeObject #{0} - {1}'', sc.SomeInt, sc.SomeString)", span="86-86"];
n42 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
m0_18 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesFromNow(int, string)", span="55-55"];
m0_24 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MonthsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MonthsFromNow(int, string)", span="71-71"];
m0_25 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MonthsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Future)", span="73-73"];
m0_30 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.SecondsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.SecondsFromNow(int, string)", span="87-87"];
m0_32 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.SecondsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.SecondsFromNow(int, string)", span="87-87"];
m0_33 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.YearsAgo(int, string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.YearsAgo(int, string)", span="95-95"];
m0_31 [cluster="string.FormatWith(params object[])", file="DefaultCollectionFormatter.cs", label="Entry string.FormatWith(params object[])", span="15-15"];
m0_21 [cluster="Humanizer.Localisation.DefaultFormatter.GetResourceForTimeSpan(Humanizer.Localisation.TimeUnit, int)", file="DefaultCollectionFormatter.cs", label="return count == 1 ? Format(resourceKey) : Format(resourceKey, count);", span="44-44"];
m0_22 [cluster="Humanizer.Localisation.DefaultFormatter.GetResourceForTimeSpan(Humanizer.Localisation.TimeUnit, int)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Localisation.DefaultFormatter.GetResourceForTimeSpan(Humanizer.Localisation.TimeUnit, int)", span="41-41"];
m0_23 [cluster="Humanizer.Localisation.ResourceKeys.TimeSpanHumanize.GetResourceKey(Humanizer.Localisation.TimeUnit, int)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Localisation.ResourceKeys.TimeSpanHumanize.GetResourceKey(Humanizer.Localisation.TimeUnit, int)", span="19-19"];
m0_2 [cluster="Humanizer.Localisation.DefaultFormatter.DateHumanize_Now()", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Localisation.DefaultFormatter.DateHumanize_Now()", span="11-11"];
m0_3 [cluster="Humanizer.Localisation.DefaultFormatter.GetResourceForDate(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Localisation.DefaultFormatter.GetResourceForDate(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", span="35-35"];
m0_4 [cluster="Humanizer.Localisation.DefaultFormatter.DateHumanize(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Localisation.DefaultFormatter.DateHumanize(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", span="16-16"];
m0_11 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursAgo(int, string)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursAgo(int, string)", span="30-30"];
m0_12 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursFromNow(int, string)", span="38-38"];
m0_13 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Future)", span="40-40"];
m0_26 [cluster="Humanizer.Localisation.DefaultFormatter.GetResourceKey(string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Localisation.DefaultFormatter.GetResourceKey(string)", span="62-62"];
m0_0 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.DateHumanizeTests()", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.DateHumanizeTests()", span="7-7"];
m0_1 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.DateHumanizeTests()", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.DateHumanizeTests()", span="7-7"];
m0_27 [cluster="Humanizer.Localisation.Resources.GetResource(string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Localisation.Resources.GetResource(string)", span="16-16"];
m0_28 [cluster="Humanizer.Localisation.DefaultFormatter.Format(string, int)", file="DefaultCollectionFormatter.cs", label="return Resources.GetResource(GetResourceKey(resourceKey, number)).FormatWith(number);", span="54-54"];
m0_29 [cluster="Humanizer.Localisation.DefaultFormatter.Format(string, int)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Localisation.DefaultFormatter.Format(string, int)", span="52-52"];
m0_5 [cluster="Humanizer.Localisation.DefaultFormatter.DateHumanize(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", file="DefaultCollectionFormatter.cs", label="return GetResourceForDate(timeUnit, timeUnitTense, unit);", span="18-18"];
m0_36 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.YearsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Humanizer.Localisation.DefaultFormatter", span=""];
m0_37 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.YearsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Future)", span="105-105"];
m0_38 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.YearsFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.YearsFromNow(int, string)", span="103-103"];
m0_17 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesAgo(int, string)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesAgo(int, string)", span="47-47"];
m0_6 [cluster="Humanizer.Localisation.DefaultFormatter.DateHumanize(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Localisation.DefaultFormatter.DateHumanize(Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, int)", span="16-16"];
m0_7 [cluster="Humanizer.Localisation.DefaultFormatter.TimeSpanHumanize_Zero()", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Localisation.DefaultFormatter.TimeSpanHumanize_Zero()", span="25-25"];
m0_8 [cluster="Humanizer.Localisation.DefaultFormatter.TimeSpanHumanize_Zero()", color=green, community=0, file="DefaultCollectionFormatter.cs", label="return GetResourceForTimeSpan(TimeUnit.Millisecond, 0);", prediction=0, span="27-27"];
m0_9 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursAgo(int, string)", file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursAgo(int, string)", span="30-30"];
m0_14 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursFromNow(int, string)", color=green, community=0, file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursFromNow(int, string)", prediction=1, span="38-38"];
m0_15 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesAgo(int, string)", color=green, community=0, file="DefaultCollectionFormatter.cs", label="Entry Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesAgo(int, string)", prediction=0, span="47-47"];
m0_34 [cluster="Humanizer.Localisation.DefaultFormatter.GetResourceKey(string)", file="DefaultCollectionFormatter.cs", label="return resourceKey;", span="64-64"];
m0_35 [cluster="Humanizer.Localisation.DefaultFormatter.GetResourceKey(string)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Localisation.DefaultFormatter.GetResourceKey(string)", span="62-62"];
m0_19 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Future)", span="57-57"];
m0_10 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.HoursAgo(int, string)", file="DefaultCollectionFormatter.cs", label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Past)", span="32-32"];
m0_20 [cluster="Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesFromNow(int, string)", file="DefaultCollectionFormatter.cs", label="Exit Humanizer.Tests.Localisation.zhHans.DateHumanizeTests.MinutesFromNow(int, string)", span="55-55"];
m1_23 [cluster="string.Format(string, object, object, object)", file="OxfordStyleCollectionFormatter.cs", label="Entry string.Format(string, object, object, object)", span="0-0"];
m1_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="OxfordStyleCollectionFormatter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m1_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="OxfordStyleCollectionFormatter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_18 [cluster="System.Func<T, TResult>.Invoke(T)", file="OxfordStyleCollectionFormatter.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_14 [cluster="System.ArgumentException.ArgumentException(string)", file="OxfordStyleCollectionFormatter.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_2 [cluster="Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.Humanize<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, string>, string)", file="OxfordStyleCollectionFormatter.cs", label="Entry Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.Humanize<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, string>, string)", span="13-13"];
m1_13 [cluster="Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.Humanize<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, string>, string)", file="OxfordStyleCollectionFormatter.cs", label="Exit Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.Humanize<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, string>, string)", span="13-13"];
m1_21 [cluster="Unk.Join", file="OxfordStyleCollectionFormatter.cs", label="Entry Unk.Join", span=""];
m1_17 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="OxfordStyleCollectionFormatter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m1_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="OxfordStyleCollectionFormatter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m1_0 [cluster="Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.OxfordStyleCollectionFormatter(string)", file="OxfordStyleCollectionFormatter.cs", label="Entry Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.OxfordStyleCollectionFormatter(string)", span="8-8"];
m1_1 [cluster="Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.OxfordStyleCollectionFormatter(string)", file="OxfordStyleCollectionFormatter.cs", label="Exit Humanizer.Localisation.CollectionFormatters.OxfordStyleCollectionFormatter.OxfordStyleCollectionFormatter(string)", span="8-8"];
m1_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="OxfordStyleCollectionFormatter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m1_20 [cluster="Unk.Select", file="OxfordStyleCollectionFormatter.cs", label="Entry Unk.Select", span=""];
m3_11 [cluster="Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", span="43-43"];
m3_12 [cluster="Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedOutput, input.Transform(To.UpperCase))", span="45-45"];
m3_13 [cluster="Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.TransformersTests.TransformToUpperCase(string, string)", span="43-43"];
m3_3 [cluster="string.Transform(params Humanizer.IStringTransformer[])", file="StringHumanizeTests.cs", label="Entry string.Transform(params Humanizer.IStringTransformer[])", span="15-15"];
m3_5 [cluster="Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", span="25-25"];
m3_6 [cluster="Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedOutput, input.Transform(To.LowerCase))", span="27-27"];
m3_7 [cluster="Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.TransformersTests.TransformToLowerCase(string, string)", span="25-25"];
m3_0 [cluster="Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", span="15-15"];
m3_1 [cluster="Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedOutput, input.Transform(To.TitleCase))", span="17-17"];
m3_2 [cluster="Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.TransformersTests.TransformToTitleCase(string, string)", span="15-15"];
m3_8 [cluster="Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", span="34-34"];
m3_9 [cluster="Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedOutput, input.Transform(To.SentenceCase))", span="36-36"];
m3_10 [cluster="Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.TransformersTests.TransformToSentenceCase(string, string)", span="34-34"];
n43 -> n24  [color=darkseagreen4, key=1, label="Humanizer.Tests.CollectionHumanizeTests", style=dashed];
n27 -> n31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n36 -> n40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_15  [color=green, key=1, label=int, style=dashed];
m0_36 -> m0_8  [color=green, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_15  [color=green, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_1  [color=darkseagreen4, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_5  [color=darkseagreen4, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_12  [color=darkseagreen4, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_21  [color=darkseagreen4, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_24  [color=darkseagreen4, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_36 -> m0_28  [color=darkseagreen4, key=1, label="Humanizer.Localisation.DefaultFormatter", style=dashed];
m0_10 -> m0_21  [color=darkseagreen4, key=1, label=int, style=dashed];
}
