digraph  {
n0 [label="Entry Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", span="7-7", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)"];
n1 [label="var converter = new RomanianCardinalNumberConverter()", span="9-9", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)"];
n2 [label="return converter.Convert(number, gender);", span="10-10", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)"];
n4 [label="Entry Humanizer.Localisation.NumberToWords.Romanian.RomanianCardinalNumberConverter.RomanianCardinalNumberConverter()", span="6-6", cluster="Humanizer.Localisation.NumberToWords.Romanian.RomanianCardinalNumberConverter.RomanianCardinalNumberConverter()"];
n3 [label="Exit Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", span="7-7", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)"];
n5 [label="Entry Humanizer.Localisation.NumberToWords.Romanian.RomanianCardinalNumberConverter.Convert(int, Humanizer.GrammaticalGender)", span="98-98", cluster="Humanizer.Localisation.NumberToWords.Romanian.RomanianCardinalNumberConverter.Convert(int, Humanizer.GrammaticalGender)"];
n6 [label="Entry Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="13-13", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)"];
n7 [label="var converter = new RomanianOrdinalNumberConverter()", span="15-15", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", color=red, community=0];
n8 [label="return converter.Convert(number, gender);", span="16-16", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)"];
n10 [label="Entry Humanizer.Localisation.NumberToWords.Romanian.RomanianOrdinalNumberConverter.RomanianOrdinalNumberConverter()", span="5-5", cluster="Humanizer.Localisation.NumberToWords.Romanian.RomanianOrdinalNumberConverter.RomanianOrdinalNumberConverter()"];
n9 [label="Exit Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="13-13", cluster="Humanizer.Localisation.NumberToWords.RomanianNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)"];
n11 [label="Entry Humanizer.Localisation.NumberToWords.Romanian.RomanianOrdinalNumberConverter.Convert(int, Humanizer.GrammaticalGender)", span="28-28", cluster="Humanizer.Localisation.NumberToWords.Romanian.RomanianOrdinalNumberConverter.Convert(int, Humanizer.GrammaticalGender)"];
d3 [label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Past)", span="19-19", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.DaysAgo(int, string)", color=green, community=0];
d2 [label="Entry Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.DaysAgo(int, string)", span="17-17", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.DaysAgo(int, string)"];
d4 [label="Exit Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.DaysAgo(int, string)", span="17-17", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.DaysAgo(int, string)"];
d5 [label="Entry Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?)", span="29-29", cluster="Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?)"];
d7 [label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Past)", span="29-29", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.HoursAgo(int, string)", color=green, community=0];
d6 [label="Entry Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.HoursAgo(int, string)", span="27-27", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.HoursAgo(int, string)"];
d8 [label="Exit Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.HoursAgo(int, string)", span="27-27", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.HoursAgo(int, string)"];
d10 [label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Past)", span="39-39", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MinutesAgo(int, string)", color=green, community=0];
d9 [label="Entry Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MinutesAgo(int, string)", span="37-37", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MinutesAgo(int, string)"];
d11 [label="Exit Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MinutesAgo(int, string)", span="37-37", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MinutesAgo(int, string)"];
d13 [label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Past)", span="49-49", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MonthsAgo(int, string)", color=green, community=0];
d12 [label="Entry Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MonthsAgo(int, string)", span="47-47", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MonthsAgo(int, string)"];
d14 [label="Exit Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MonthsAgo(int, string)", span="47-47", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.MonthsAgo(int, string)"];
d16 [label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Past)", span="59-59", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.SecondsAgo(int, string)", color=green, community=0];
d15 [label="Entry Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.SecondsAgo(int, string)", span="57-57", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.SecondsAgo(int, string)"];
d17 [label="Exit Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.SecondsAgo(int, string)", span="57-57", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.SecondsAgo(int, string)"];
d19 [label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Past)", span="69-69", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.YearsAgo(int, string)", color=green, community=0];
d18 [label="Entry Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.YearsAgo(int, string)", span="67-67", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.YearsAgo(int, string)"];
d20 [label="Exit Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.YearsAgo(int, string)", span="67-67", cluster="Humanizer.Tests.Localisation.fiFI.DateHumanizeTests.YearsAgo(int, string)"];
m0_77 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="208-208", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_78 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_79 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Min_Constraint_For_Value>>(() => new Options_With_Sequence_And_Only_Min_Constraint_For_Value()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="214-219", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_80 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="222-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_81 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="208-208", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_200 [label="Entry CommandLine.Tests.Fakes.Options_With_Two_Sets.Options_With_Two_Sets()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Two_Sets.Options_With_Two_Sets()", file="ByteSizeTests.cs"];
m0_18 [label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29", cluster="CommandLine.TypeInfo.Create(System.Type)", file="ByteSizeTests.cs"];
m0_35 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Double_Value.Simple_Options_With_Double_Value()", span="4-4", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Double_Value.Simple_Options_With_Double_Value()", file="ByteSizeTests.cs"];
m0_196 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="329-329", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="ByteSizeTests.cs"];
m0_103 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint_For_Value.Options_With_Sequence_And_Only_Max_Constraint_For_Value()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint_For_Value.Options_With_Sequence_And_Only_Max_Constraint_For_Value()", file="ByteSizeTests.cs"];
m0_10 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="29-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ByteSizeTests.cs"];
m0_11 [label="var fakeOptions = new Simple_Options()", span="32-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ByteSizeTests.cs"];
m0_12 [label="var expectedResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)), new Error[] { new HelpRequestedError() })", span="33-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ByteSizeTests.cs"];
m0_13 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--help'' })", span="37-38", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ByteSizeTests.cs"];
m0_14 [label="result.ShouldBeEquivalentTo(expectedResult)", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ByteSizeTests.cs"];
m0_15 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="29-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ByteSizeTests.cs"];
m0_73 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ByteSizeTests.cs"];
m0_121 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_122 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_123 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="319-324", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_124 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="327-327", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_125 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_9 [label="Entry T.cstr", span="", cluster="T.cstr", file="ByteSizeTests.cs"];
m0_154 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ByteSizeTests.cs"];
m0_155 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Having_Separator_Set>>(() => new Options_With_Sequence_Having_Separator_Set()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="412-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ByteSizeTests.cs"];
m0_156 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.LongSequence)", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ByteSizeTests.cs"];
m0_157 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ByteSizeTests.cs"];
m0_82 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ByteSizeTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="ByteSizeTests.cs"];
m0_1 [label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                args,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="20-25", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="ByteSizeTests.cs"];
m0_2 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", file="ByteSizeTests.cs"];
m0_111 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Enum.Simple_Options_With_Enum()", span="11-11", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Enum.Simple_Options_With_Enum()", file="ByteSizeTests.cs"];
m0_227 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True.Options_With_Required_Set_To_True()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True.Options_With_Required_Set_To_True()", file="ByteSizeTests.cs"];
m0_161 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_Having_Separator_Set.Options_With_Sequence_Having_Separator_Set()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_Having_Separator_Set.Options_With_Sequence_Having_Separator_Set()", file="ByteSizeTests.cs"];
m0_66 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint.Options_With_Sequence_And_Only_Max_Constraint()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Max_Constraint.Options_With_Sequence_And_Only_Max_Constraint()", file="ByteSizeTests.cs"];
m0_129 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="333-333", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_130 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="336-336", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_131 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="339-344", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_132 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_133 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="333-333", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_182 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="ByteSizeTests.cs"];
m0_153 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_Without_Range_For_Value.Options_With_Sequence_Without_Range_For_Value()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_Without_Range_For_Value.Options_With_Sequence_Without_Range_For_Value()", file="ByteSizeTests.cs"];
m0_5 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="ByteSizeTests.cs"];
m0_210 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="526-526", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ByteSizeTests.cs"];
m0_211 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="528-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ByteSizeTests.cs"];
m0_212 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True_Within_Same_Set>>(() => new Options_With_Required_Set_To_True_Within_Same_Set()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="534-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ByteSizeTests.cs"];
m0_213 [label="((NotParsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ByteSizeTests.cs"];
m0_214 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="526-526", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ByteSizeTests.cs"];
m0_87 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="228-228", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_88 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_89 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Max_Constraint>>(() => new Options_With_Sequence_And_Only_Max_Constraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="234-239", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_90 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="242-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_91 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="228-228", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_3 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ByteSizeTests.cs"];
m0_86 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint_For_Value.Options_With_Sequence_And_Only_Min_Constraint_For_Value()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint_For_Value.Options_With_Sequence_And_Only_Min_Constraint_For_Value()", file="ByteSizeTests.cs"];
m0_146 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ByteSizeTests.cs"];
m0_147 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Without_Range_For_Value>>(() => new Options_With_Sequence_Without_Range_For_Value()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="389-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ByteSizeTests.cs"];
m0_148 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Without_Range_For_Value>)result).Value.LongSequence)", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ByteSizeTests.cs"];
m0_149 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ByteSizeTests.cs"];
m0_162 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="430-430", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ByteSizeTests.cs"];
m0_163 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_Having_Separator_Set>>(() => new Options_With_Sequence_Having_Separator_Set()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="435-440", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ByteSizeTests.cs"];
m0_164 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.StringSequence)", span="443-443", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ByteSizeTests.cs"];
m0_165 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="430-430", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ByteSizeTests.cs"];
m0_169 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="452-452", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ByteSizeTests.cs"];
m0_170 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="455-461", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ByteSizeTests.cs"];
m0_171 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="462-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ByteSizeTests.cs"];
m0_172 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="465-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ByteSizeTests.cs"];
m0_173 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="476-476", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ByteSizeTests.cs"];
m0_174 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="452-452", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ByteSizeTests.cs"];
m0_219 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="548-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ByteSizeTests.cs"];
m0_220 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ByteSizeTests.cs"];
m0_221 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True>>(() => new Options_With_Required_Set_To_True()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="554-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ByteSizeTests.cs"];
m0_222 [label="((NotParsed<Options_With_Required_Set_To_True>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="562-562", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ByteSizeTests.cs"];
m0_223 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="548-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ByteSizeTests.cs"];
m0_28 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="74-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ByteSizeTests.cs"];
m0_29 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Double_Value>>(() => new Simple_Options_With_Double_Value()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="79-84", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ByteSizeTests.cs"];
m0_30 [label="((Parsed<Simple_Options_With_Double_Value>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ByteSizeTests.cs"];
m0_31 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="74-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ByteSizeTests.cs"];
m0_72 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ByteSizeTests.cs"];
m0_112 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_113 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_114 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="299-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_115 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_116 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ByteSizeTests.cs"];
m0_215 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ByteSizeTests.cs"];
m0_201 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="506-506", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ByteSizeTests.cs"];
m0_202 [label="var expectedResult = new Options_With_Required_Set_To_True_Within_Same_Set {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="508-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ByteSizeTests.cs"];
m0_203 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Required_Set_To_True_Within_Same_Set>>(() => new Options_With_Required_Set_To_True_Within_Same_Set()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="513-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ByteSizeTests.cs"];
m0_204 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Value)", span="521-521", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ByteSizeTests.cs"];
m0_205 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="506-506", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ByteSizeTests.cs"];
m0_190 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ByteSizeTests.cs"];
m0_59 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_60 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Max_Constraint>>(() => new Options_With_Sequence_And_Only_Max_Constraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="174-179", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_61 [label="((Parsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="182-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_62 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_17 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ByteSizeTests.cs"];
m0_16 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="ByteSizeTests.cs"];
m0_36 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="99-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ByteSizeTests.cs"];
m0_37 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence>>(() => new Options_With_Sequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="104-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ByteSizeTests.cs"];
m0_38 [label="((Parsed<Options_With_Sequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ByteSizeTests.cs"];
m0_39 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="99-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ByteSizeTests.cs"];
m0_51 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_52 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Min_Constraint>>(() => new Options_With_Sequence_And_Only_Min_Constraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="151-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_53 [label="((Parsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="159-159", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_54 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ByteSizeTests.cs"];
m0_95 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="248-248", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_96 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="251-251", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_97 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Max_Constraint_For_Value>>(() => new Options_With_Sequence_And_Only_Max_Constraint_For_Value()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="254-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_98 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="262-262", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_99 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="248-248", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ByteSizeTests.cs"];
m0_117 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ByteSizeTests.cs"];
m0_43 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence.Options_With_Sequence()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence.Options_With_Sequence()", file="ByteSizeTests.cs"];
m0_224 [label="Entry lambda expression", span="555-555", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_6 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_7 [label="new T()", span="21-21", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_8 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_25 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_26 [label="new Simple_Options()", span="56-56", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_27 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_32 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_33 [label="new Simple_Options_With_Double_Value()", span="80-80", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_34 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_40 [label="Entry lambda expression", span="105-105", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_41 [label="new Options_With_Sequence()", span="105-105", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_42 [label="Exit lambda expression", span="105-105", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_48 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_49 [label="new Simple_Options()", span="128-128", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_50 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_55 [label="Entry lambda expression", span="152-152", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_56 [label="new Options_With_Sequence_And_Only_Min_Constraint()", span="152-152", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_57 [label="Exit lambda expression", span="152-152", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_63 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_64 [label="new Options_With_Sequence_And_Only_Max_Constraint()", span="175-175", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_65 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_74 [label="Entry lambda expression", span="195-195", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_75 [label="new Options_With_Sequence_And_Only_Min_Constraint()", span="195-195", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_76 [label="Exit lambda expression", span="195-195", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_83 [label="Entry lambda expression", span="215-215", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_84 [label="new Options_With_Sequence_And_Only_Min_Constraint_For_Value()", span="215-215", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_85 [label="Exit lambda expression", span="215-215", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_92 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_93 [label="new Options_With_Sequence_And_Only_Max_Constraint()", span="235-235", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_94 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_100 [label="Entry lambda expression", span="255-255", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_101 [label="new Options_With_Sequence_And_Only_Max_Constraint_For_Value()", span="255-255", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_102 [label="Exit lambda expression", span="255-255", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_108 [label="Entry lambda expression", span="280-280", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_109 [label="new Simple_Options_With_Enum()", span="280-280", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_110 [label="Exit lambda expression", span="280-280", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_118 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_119 [label="new Simple_Options_With_Enum()", span="300-300", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_120 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_126 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_127 [label="new Simple_Options_With_Enum()", span="320-320", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_128 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_134 [label="Entry lambda expression", span="340-340", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_135 [label="new Simple_Options_With_Enum()", span="340-340", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_136 [label="Exit lambda expression", span="340-340", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_143 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_144 [label="new Simple_Options_With_Values()", span="366-366", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_145 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_150 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_151 [label="new Options_With_Sequence_Without_Range_For_Value()", span="390-390", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_152 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_158 [label="Entry lambda expression", span="413-413", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_159 [label="new Options_With_Sequence_Having_Separator_Set()", span="413-413", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_160 [label="Exit lambda expression", span="413-413", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_166 [label="Entry lambda expression", span="436-436", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_167 [label="new Options_With_Sequence_Having_Separator_Set()", span="436-436", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_168 [label="Exit lambda expression", span="436-436", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_176 [label="Entry lambda expression", span="466-466", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_177 [label="new Simple_Options_With_Values()", span="466-466", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_178 [label="Exit lambda expression", span="466-466", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_179 [label="Entry lambda expression", span="467-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_180 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="468-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_181 [label="Exit lambda expression", span="467-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_183 [label="Entry lambda expression", span="469-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_184 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="469-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_185 [label="Exit lambda expression", span="469-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_187 [label="Entry lambda expression", span="469-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_188 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="469-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_189 [label="Exit lambda expression", span="469-469", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_197 [label="Entry lambda expression", span="493-493", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_198 [label="new Options_With_Two_Sets()", span="493-493", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_199 [label="Exit lambda expression", span="493-493", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_207 [label="Entry lambda expression", span="514-514", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_208 [label="new Options_With_Required_Set_To_True_Within_Same_Set()", span="514-514", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_209 [label="Exit lambda expression", span="514-514", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_216 [label="Entry lambda expression", span="535-535", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_217 [label="new Options_With_Required_Set_To_True_Within_Same_Set()", span="535-535", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_218 [label="Exit lambda expression", span="535-535", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_225 [label="new Options_With_Required_Set_To_True()", span="555-555", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_226 [label="Exit lambda expression", span="555-555", cluster="lambda expression", file="ByteSizeTests.cs"];
m0_186 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="ByteSizeTests.cs"];
m0_206 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", file="ByteSizeTests.cs"];
m0_67 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ByteSizeTests.cs"];
m0_68 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ByteSizeTests.cs"];
m0_69 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Sequence_And_Only_Min_Constraint>>(() => new Options_With_Sequence_And_Only_Min_Constraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="194-199", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ByteSizeTests.cs"];
m0_70 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="202-202", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ByteSizeTests.cs"];
m0_71 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ByteSizeTests.cs"];
m0_104 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ByteSizeTests.cs"];
m0_105 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Enum>>(() => new Simple_Options_With_Enum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="279-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ByteSizeTests.cs"];
m0_106 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="287-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ByteSizeTests.cs"];
m0_107 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ByteSizeTests.cs"];
m0_44 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="122-122", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ByteSizeTests.cs"];
m0_45 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="127-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ByteSizeTests.cs"];
m0_46 [label="((Parsed<Simple_Options>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ByteSizeTests.cs"];
m0_47 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="122-122", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ByteSizeTests.cs"];
m0_19 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ByteSizeTests.cs"];
m0_20 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ByteSizeTests.cs"];
m0_175 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="ByteSizeTests.cs"];
m0_58 [label="Entry CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint.Options_With_Sequence_And_Only_Min_Constraint()", span="6-6", cluster="CommandLine.Tests.Fakes.Options_With_Sequence_And_Only_Min_Constraint.Options_With_Sequence_And_Only_Min_Constraint()", file="ByteSizeTests.cs"];
m0_21 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="50-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ByteSizeTests.cs"];
m0_22 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options>>(() => new Simple_Options()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="55-60", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ByteSizeTests.cs"];
m0_23 [label="((Parsed<Simple_Options>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ByteSizeTests.cs"];
m0_24 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="50-50", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ByteSizeTests.cs"];
m0_137 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="353-353", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ByteSizeTests.cs"];
m0_138 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="356-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ByteSizeTests.cs"];
m0_139 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="365-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ByteSizeTests.cs"];
m0_140 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ByteSizeTests.cs"];
m0_141 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="353-353", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ByteSizeTests.cs"];
m0_191 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ByteSizeTests.cs"];
m0_192 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ByteSizeTests.cs"];
m0_193 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Options_With_Two_Sets>>(() => new Options_With_Two_Sets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="492-497", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ByteSizeTests.cs"];
m0_194 [label="((NotParsed<Options_With_Two_Sets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ByteSizeTests.cs"];
m0_195 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="482-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ByteSizeTests.cs"];
m0_142 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="ByteSizeTests.cs"];
m0_4 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ByteSizeTests.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label=int];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n3 -> n0  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid, color=red];
n6 -> n8  [key=1, style=dashed, color=darkseagreen4, label=int];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n10  [key=2, style=dotted, color=red];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [key=2, style=dotted];
n9 -> n6  [key=0, style=bold, color=blue];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d5  [key=2, style=dotted, color=green];
d2 -> d3  [key=0, style=solid, color=green];
d4 -> d2  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d5  [key=2, style=dotted, color=green];
d6 -> d7  [key=0, style=solid, color=green];
d8 -> d6  [key=0, style=bold, color=blue];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d5  [key=2, style=dotted, color=green];
d9 -> d10  [key=0, style=solid, color=green];
d11 -> d9  [key=0, style=bold, color=blue];
d13 -> d14  [key=0, style=solid, color=green];
d13 -> d5  [key=2, style=dotted, color=green];
d12 -> d13  [key=0, style=solid, color=green];
d14 -> d12  [key=0, style=bold, color=blue];
d16 -> d17  [key=0, style=solid, color=green];
d16 -> d5  [key=2, style=dotted, color=green];
d15 -> d16  [key=0, style=solid, color=green];
d17 -> d15  [key=0, style=bold, color=blue];
d19 -> d20  [key=0, style=solid, color=green];
d19 -> d5  [key=2, style=dotted, color=green];
d18 -> d19  [key=0, style=solid, color=green];
d20 -> d18  [key=0, style=bold, color=blue];
m0_11 -> m0_1  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<TSource, TSource, TResult> selector"];
m0_1 -> m0_11  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<TResult> Pairwise"];
m0_111 -> m0_5  [key=3, color=darkorchid, style=bold, label="Property variable T Next"];
m0_29 -> m0_29  [key=3, color=darkorchid, style=bold, label="method methodReturn object ToArray"];
}
