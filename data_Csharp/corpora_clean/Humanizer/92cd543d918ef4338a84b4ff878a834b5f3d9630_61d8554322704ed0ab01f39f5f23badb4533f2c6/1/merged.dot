digraph  {
n0 [label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", span="7-7", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()"];
n1 [label="Assert.Equal(EnumUnderTest.MemberWithDescriptionAttribute, EnumTestsResources.CustomDescription.DehumanizeTo<EnumUnderTest>())", span="9-9", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()"];
n2 [label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()", span="7-7", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.HonorsDescriptionAttribute()"];
n3 [label="Entry string.DehumanizeTo<TTargetEnum>(Humanizer.LetterCasing?)", span="6-6", cluster="string.DehumanizeTo<TTargetEnum>(Humanizer.LetterCasing?)"];
n4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n5 [label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", span="13-13", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()"];
n6 [label="Assert.Equal(EnumUnderTest.MemberWithoutDescriptionAttribute, EnumTestsResources.MemberWithoutDescriptionAttributeSentence.DehumanizeTo<EnumUnderTest>())", span="15-15", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()"];
n7 [label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()", span="13-13", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanHumanizeMembersWithoutDescriptionAttribute()"];
n8 [label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", span="19-19", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()"];
n9 [label="Assert.Equal(\r\n                EnumUnderTest.MemberWithoutDescriptionAttribute,\r\n                EnumTestsResources.MemberWithoutDescriptionAttributeTitle.DehumanizeTo<EnumUnderTest>(LetterCasing.Title))", span="21-23", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()"];
n10 [label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()", span="19-19", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyTitleCasingOnEnumHumanization()"];
n11 [label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", span="27-27", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()"];
n12 [label="Assert.Equal(\r\n                EnumUnderTest.MemberWithoutDescriptionAttribute,\r\n                EnumTestsResources.MemberWithoutDescriptionAttributeLowerCase.DehumanizeTo<EnumUnderTest>(LetterCasing.LowerCase))", span="29-31", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()"];
n13 [label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()", span="27-27", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.CanApplyLowerCaseCasingOnEnumHumanization()"];
n14 [label="Entry Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", span="35-35", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()"];
n15 [label="Assert.Equal(\r\n                EnumUnderTest.ALLCAPITALS,\r\n                EnumUnderTest.ALLCAPITALS.ToString().DehumanizeTo<EnumUnderTest>())", span="37-39", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()"];
n16 [label="Exit Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()", span="35-35", cluster="Humanizer.Tests.Extensions.DehumanizeToEnumTests.AllCapitalMembersAreReturnedAsIs()"];
n17 [label="Entry System.Enum.ToString()", span="0-0", cluster="System.Enum.ToString()"];
d1 [label="Assert.Equal(\r\n                ''Pascal case input string is turned into sentence'',\r\n                ''PascalCaseInputStringIsTurnedIntoSentence''.Humanize())", span="9-11", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", color=green, community=0];
d0 [label="Entry Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="7-7", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()"];
d2 [label="Exit Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()", span="7-7", cluster="Humanizer.Tests.StringHumanizeTests.PascalCaseInputStringIsTurnedIntoSentence()"];
d3 [label="Entry string.Humanize()", span="42-42", cluster="string.Humanize()"];
d4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d6 [label="Assert.Equal(\r\n                ''When I use an input a here'',\r\n                ''WhenIUseAnInputAHere''.Humanize())", span="17-19", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", color=green, community=0];
d5 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()"];
d7 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()", span="15-15", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringContainsConsequtiveCaptialLetters_ThenTheyAreTurnedIntoOneLetterWords()"];
d9 [label="Assert.Equal(''10 is in the begining'', ''10IsInTheBegining''.Humanize())", span="25-25", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()"];
d12 [label="Assert.Equal(''Number is at the end 100'', ''NumberIsAtTheEnd100''.Humanize())", span="31-31", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()"];
d15 [label="Assert.Equal(\r\n                ''Underscored input string is turned into sentence'',\r\n                ''Underscored_input_string_is_turned_into_sentence''.Humanize())", span="37-39", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()"];
d18 [label="Assert.Equal(\r\n                ''Underscored input String is turned INTO sentence'',\r\n                ''Underscored_input_String_is_turned_INTO_sentence''.Humanize())", span="45-47", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()"];
d21 [label="Assert.Equal(\r\n                ''X is first word in the sentence'',\r\n                ''XIsFirstWordInTheSentence''.Humanize())", span="53-55", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()"];
d24 [label="Assert.Equal(\r\n                ''HTML'',\r\n                ''HTML''.Humanize())", span="61-63", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()"];
d27 [label="Assert.Equal(\r\n                ''The HTML language'',\r\n                ''TheHTMLLanguage''.Humanize())", span="69-71", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()"];
d30 [label="Assert.Equal(\r\n                ''HTML is the language'',\r\n                ''HTMLIsTheLanguage''.Humanize())", span="77-79", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()"];
d33 [label="Assert.Equal(\r\n                ''The language is HTML'',\r\n                ''TheLanguageIsHTML''.Humanize())", span="85-87", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()"];
d36 [label="Assert.Equal(\r\n                ''HTML 5'',\r\n                ''HTML5''.Humanize())", span="93-95", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()"];
d39 [label="Assert.Equal(\r\n                ''1 HTML'',\r\n                ''1HTML''.Humanize())", span="101-103", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()"];
d42 [label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''CanReturnTitleCase''.Humanize(LetterCasing.Title))", span="109-111", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()"];
d46 [label="Assert.Equal(\r\n                ''Can Return Title Case'',\r\n                ''Can_return_title_Case''.Humanize(LetterCasing.Title))", span="117-119", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()"];
d49 [label="Assert.Equal(\r\n                ''Title Humanization Honors ALLCAPS'',\r\n                ''Title_humanization_Honors_ALLCAPS''.Humanize(LetterCasing.Title))", span="125-127", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()"];
d52 [label="Assert.Equal(\r\n                ''can return lower case'',\r\n                ''CanReturnLowerCase''.Humanize(LetterCasing.LowerCase))", span="133-135", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()"];
d55 [label="Assert.Equal(\r\n                ''Can return sentence case'',\r\n                ''CanReturnSentenceCase''.Humanize(LetterCasing.Sentence))", span="141-143", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()"];
d58 [label="Assert.Equal(\r\n                '''',\r\n                ''''.Humanize(LetterCasing.Sentence))", span="149-151", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()"];
d61 [label="Assert.Equal(\r\n                ''lowercase'',\r\n                ''LOWERCASE''.Humanize(LetterCasing.LowerCase))", span="157-159", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()"];
d64 [label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''CanHumanizeIntoUpperCase''.Humanize(LetterCasing.AllCaps))", span="165-167", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()"];
d67 [label="Assert.Equal(\r\n                ''CAN HUMANIZE INTO UPPER CASE'',\r\n                ''Can_Humanize_into_Upper_case''.Humanize(LetterCasing.AllCaps))", span="173-175", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()"];
d8 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="23-23", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()"];
d10 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()", span="23-23", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringStartsWithANumber_ThenNumberIsDealtWithLikeAWord()"];
d11 [label="Entry Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()"];
d13 [label="Exit Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()", span="29-29", cluster="Humanizer.Tests.StringHumanizeTests.WhenInputStringEndWithANumber_ThenNumberIsDealtWithLikeAWord()"];
d14 [label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="35-35", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()"];
d16 [label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()", span="35-35", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringIsTurnedIntoSentence()"];
d17 [label="Entry Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="43-43", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()"];
d19 [label="Exit Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()", span="43-43", cluster="Humanizer.Tests.StringHumanizeTests.UnderscoredInputStringPreservesCasing()"];
d20 [label="Entry Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()"];
d22 [label="Exit Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()", span="51-51", cluster="Humanizer.Tests.StringHumanizeTests.OneLetterWordInTheBeginningOfStringIsTurnedIntoAWord()"];
d23 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="59-59", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()"];
d25 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()", span="59-59", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreLeftIntact()"];
d26 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="67-67", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()"];
d28 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()", span="67-67", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheMiddle()"];
d29 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="75-75", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()"];
d31 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()", span="75-75", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheStart()"];
d32 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="83-83", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()"];
d34 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()", span="83-83", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromOtherWordsInTheEnd()"];
d35 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="91-91", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()"];
d37 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()", span="91-91", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheEnd()"];
d38 [label="Entry Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="99-99", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()"];
d40 [label="Exit Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()", span="99-99", cluster="Humanizer.Tests.StringHumanizeTests.AcronymsAreSeparatedFromNumbersInTheStart()"];
d41 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="107-107", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()"];
d43 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()", span="107-107", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWithoutUsingUnderscores()"];
d44 [label="Entry string.Humanize(Humanizer.LetterCasing)", span="60-60", cluster="string.Humanize(Humanizer.LetterCasing)"];
d45 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="115-115", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()"];
d47 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()", span="115-115", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTitleCaseWhenUsingUnderscores()"];
d48 [label="Entry Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="123-123", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()"];
d50 [label="Exit Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()", span="123-123", cluster="Humanizer.Tests.StringHumanizeTests.TitleHumanizationHonorsAllCaps()"];
d51 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="131-131", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()"];
d53 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()", span="131-131", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase()"];
d54 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="139-139", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()"];
d56 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()", span="139-139", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase()"];
d57 [label="Entry Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="147-147", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()"];
d59 [label="Exit Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()", span="147-147", cluster="Humanizer.Tests.StringHumanizeTests.SentenceCasingWorksOnEmptyStrings()"];
d60 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="155-155", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()"];
d62 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()", span="155-155", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCaseEvenWhenUsingAllCaps()"];
d63 [label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="163-163", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()"];
d65 [label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()", span="163-163", cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase()"];
d66 [label="Entry Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="171-171", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()"];
d68 [label="Exit Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()", span="171-171", cluster="Humanizer.Tests.StringHumanizeTests.CanTurnIntoUpperCasewhenUsingUnderscores()"];
m0_8 [label="return resourceKey;", span="21-21", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_9 [label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_10 [label="Exit Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int)", span="34-34", cluster="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int)", file="EnumDehumanizeExtensions.cs"];
m0_0 [label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_1 [label="var mod100 = number%100", span="9-9", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="EnumDehumanizeExtensions.cs"];
m0_2 [label="mod100/10 != 1", span="10-10", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_6 [label="mod10 > 1 && mod10 < 5", span="17-17", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_7 [label="return resourceKey + PaucalPostfix;", span="18-18", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_11 [label="Entry Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="45-45", cluster="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="EnumDehumanizeExtensions.cs"];
m0_12 [label="Exit Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="45-45", cluster="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="EnumDehumanizeExtensions.cs"];
m0_3 [label="var mod10 = number%10", span="12-12", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_4 [label="mod10 == 1", span="14-14", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_5 [label="return resourceKey + SingularPostfix;", span="15-15", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="EnumDehumanizeExtensions.cs"];
m0_13 [label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter", span="", file="EnumDehumanizeExtensions.cs"];
m1_0 [label="Entry Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", span="13-13", cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", file="StringDehumanizeExtensions.cs"];
m1_1 [label="Assert.Equal(Expected, Format.FormatWith(1, 2, 3))", span="15-15", cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", color=green, community=0, file="StringDehumanizeExtensions.cs"];
m1_2 [label="Exit Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", span="13-13", cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithExactNumberOfArguments()", file="StringDehumanizeExtensions.cs"];
m1_3 [label="Entry string.FormatWith(params object[])", span="15-15", cluster="string.FormatWith(params object[])", file="StringDehumanizeExtensions.cs"];
m1_4 [label="return resourceKey + PluralPostfix;", span="15-15", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.GetResourceKey(string, int)", file="StringDehumanizeExtensions.cs"];
m1_5 [label="Entry Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", span="19-19", cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", file="StringDehumanizeExtensions.cs"];
m1_6 [label="Assert.Equal(Expected, Format.FormatWith(1, 2, 3, 4, 5))", span="21-21", cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", file="StringDehumanizeExtensions.cs"];
m1_11 [label="Entry Unk.>", span="", cluster="Unk.>", file="StringDehumanizeExtensions.cs"];
m1_7 [label="Exit Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", span="19-19", cluster="Humanizer.Tests.StringExtensionsTests.CanFormatStringWithMoreArguments()", file="StringDehumanizeExtensions.cs"];
m1_15 [label="Entry Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", span="31-31", cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs"];
m1_16 [label="string format = null", span="33-33", cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs"];
m1_17 [label="Assert.Throws<ArgumentNullException>(() => format.FormatWith(1, 2))", span="34-34", cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs"];
m1_18 [label="Exit Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", span="31-31", cluster="Humanizer.Tests.StringExtensionsTests.FormatCannotBeNull()", file="StringDehumanizeExtensions.cs"];
m1_26 [label="Entry string.FormatWith(System.IFormatProvider, params object[])", span="27-27", cluster="string.FormatWith(System.IFormatProvider, params object[])", file="StringDehumanizeExtensions.cs"];
m1_8 [label="Entry Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", span="25-25", cluster="Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", file="StringDehumanizeExtensions.cs"];
m1_9 [label="Assert.Throws<FormatException>(() => Format.FormatWith(1, 2))", span="27-27", cluster="Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", file="StringDehumanizeExtensions.cs"];
m1_10 [label="Exit Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", span="25-25", cluster="Humanizer.Tests.StringExtensionsTests.CannotFormatStringWithLessArguments()", file="StringDehumanizeExtensions.cs"];
m1_19 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="StringDehumanizeExtensions.cs"];
m1_12 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="StringDehumanizeExtensions.cs"];
m1_13 [label="Format.FormatWith(1, 2)", span="27-27", cluster="lambda expression", file="StringDehumanizeExtensions.cs"];
m1_14 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="StringDehumanizeExtensions.cs"];
m1_20 [label="format.FormatWith(1, 2)", span="34-34", cluster="lambda expression", file="StringDehumanizeExtensions.cs"];
m1_21 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="StringDehumanizeExtensions.cs"];
m1_22 [label="Entry Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", span="40-40", cluster="Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", file="StringDehumanizeExtensions.cs"];
m1_23 [label="Assert.Equal(expected, ''{0:N2}''.FormatWith(new CultureInfo(culture), 6666.66))", span="42-42", cluster="Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", file="StringDehumanizeExtensions.cs"];
m1_24 [label="Exit Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", span="40-40", cluster="Humanizer.Tests.StringExtensionsTests.CanSpecifyCultureExplicitly(string, string)", file="StringDehumanizeExtensions.cs"];
m1_25 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StringDehumanizeExtensions.cs"];
m1_27 [label=format, span="", file="StringDehumanizeExtensions.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n6 -> n3  [key=2, style=dotted];
n6 -> n4  [key=2, style=dotted];
n7 -> n5  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n3  [key=2, style=dotted];
n9 -> n4  [key=2, style=dotted];
n10 -> n8  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n3  [key=2, style=dotted];
n12 -> n4  [key=2, style=dotted];
n13 -> n11  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=2, style=dotted];
n15 -> n3  [key=2, style=dotted];
n15 -> n4  [key=2, style=dotted];
n16 -> n14  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=2, style=dotted, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d0  [key=0, style=bold, color=blue];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d3  [key=2, style=dotted, color=green];
d6 -> d4  [key=2, style=dotted, color=green];
d5 -> d6  [key=0, style=solid, color=green];
d7 -> d5  [key=0, style=bold, color=blue];
d9 -> d3  [key=2, style=dotted];
d9 -> d4  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d12 -> d3  [key=2, style=dotted];
d12 -> d4  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d15 -> d3  [key=2, style=dotted];
d15 -> d4  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid];
d18 -> d3  [key=2, style=dotted];
d18 -> d4  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d21 -> d3  [key=2, style=dotted];
d21 -> d4  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d24 -> d3  [key=2, style=dotted];
d24 -> d4  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d27 -> d3  [key=2, style=dotted];
d27 -> d4  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d30 -> d3  [key=2, style=dotted];
d30 -> d4  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d33 -> d3  [key=2, style=dotted];
d33 -> d4  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d36 -> d3  [key=2, style=dotted];
d36 -> d4  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d39 -> d3  [key=2, style=dotted];
d39 -> d4  [key=2, style=dotted];
d39 -> d40  [key=0, style=solid];
d42 -> d4  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d42 -> d44  [key=2, style=dotted];
d46 -> d4  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d46 -> d44  [key=2, style=dotted];
d49 -> d4  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d44  [key=2, style=dotted];
d52 -> d4  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d52 -> d44  [key=2, style=dotted];
d55 -> d4  [key=2, style=dotted];
d55 -> d56  [key=0, style=solid];
d55 -> d44  [key=2, style=dotted];
d58 -> d4  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d58 -> d44  [key=2, style=dotted];
d61 -> d4  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid];
d61 -> d44  [key=2, style=dotted];
d64 -> d4  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d64 -> d44  [key=2, style=dotted];
d67 -> d4  [key=2, style=dotted];
d67 -> d68  [key=0, style=solid];
d67 -> d44  [key=2, style=dotted];
d8 -> d9  [key=0, style=solid];
d10 -> d8  [key=0, style=bold, color=blue];
d11 -> d12  [key=0, style=solid];
d13 -> d11  [key=0, style=bold, color=blue];
d14 -> d15  [key=0, style=solid];
d16 -> d14  [key=0, style=bold, color=blue];
d17 -> d18  [key=0, style=solid];
d19 -> d17  [key=0, style=bold, color=blue];
d20 -> d21  [key=0, style=solid];
d22 -> d20  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d25 -> d23  [key=0, style=bold, color=blue];
d26 -> d27  [key=0, style=solid];
d28 -> d26  [key=0, style=bold, color=blue];
d29 -> d30  [key=0, style=solid];
d31 -> d29  [key=0, style=bold, color=blue];
d32 -> d33  [key=0, style=solid];
d34 -> d32  [key=0, style=bold, color=blue];
d35 -> d36  [key=0, style=solid];
d37 -> d35  [key=0, style=bold, color=blue];
d38 -> d39  [key=0, style=solid];
d40 -> d38  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid];
d43 -> d41  [key=0, style=bold, color=blue];
d45 -> d46  [key=0, style=solid];
d47 -> d45  [key=0, style=bold, color=blue];
d48 -> d49  [key=0, style=solid];
d50 -> d48  [key=0, style=bold, color=blue];
d51 -> d52  [key=0, style=solid];
d53 -> d51  [key=0, style=bold, color=blue];
d54 -> d55  [key=0, style=solid];
d56 -> d54  [key=0, style=bold, color=blue];
d57 -> d58  [key=0, style=solid];
d59 -> d57  [key=0, style=bold, color=blue];
d60 -> d61  [key=0, style=solid];
d62 -> d60  [key=0, style=bold, color=blue];
d63 -> d64  [key=0, style=solid];
d65 -> d63  [key=0, style=bold, color=blue];
d66 -> d67  [key=0, style=solid];
d68 -> d66  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_11  [key=2, style=dotted];
m0_9 -> m0_0  [key=0, style=bold, color=blue];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_0 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_0 -> m0_0  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResourceKey"];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_1  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<System.Enum, string> humanize"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_8  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=0, style=solid];
m0_7 -> m0_6  [key=0, style=bold, color=blue];
m0_7 -> m0_9  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_12 -> m0_11  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=mod10];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=2, style=dotted];
m0_5 -> m0_3  [key=0, style=bold, color=blue];
m0_5 -> m0_9  [key=0, style=solid];
m0_13 -> m0_1  [key=1, style=dashed, color=green, label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter"];
m0_13 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter"];
m0_13 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Localisation.NumberToWords.GenderedNumberToWordsConverter"];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_0 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=0, style=solid, color=green];
m1_1 -> d4  [key=2, style=dotted];
m1_2 -> m1_6  [key=0, style=solid];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_4 -> m1_6  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_0  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_3  [key=2, style=dotted];
m1_6 -> d4  [key=2, style=dotted];
m1_7 -> m1_5  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label=format];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_11  [key=2, style=dotted];
m1_17 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_18 -> m1_15  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=2, style=dotted];
m1_9 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_19 -> m1_20  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_3  [key=2, style=dotted];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_3  [key=2, style=dotted];
m1_21 -> m1_19  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=2, style=dotted];
m1_23 -> m1_26  [key=2, style=dotted];
m1_23 -> d4  [key=2, style=dotted];
m1_24 -> m1_22  [key=0, style=bold, color=blue];
m1_27 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label=format];
}
