digraph  {
n95 [label=last, span=""];
n96 [label=double, span=""];
n0 [label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)"];
n1 [label="input == null", span="76-76", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n3 [label="input = input.Trim()", span="77-77", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n2 [label="throw new ArgumentNullException(''input'');", span="76-76", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n4 [label="input = ReplaceNameBySymbol(input)", span="78-78", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n17 [label="Entry string.Trim()", span="0-0", cluster="string.Trim()"];
n5 [label="input.Length == 0 || input.IsInvalidMetricNumeral()", span="79-79", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n18 [label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="90-90", cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)"];
n7 [label="input = input.Replace('' '', String.Empty)", span="81-81", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n6 [label="throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="80-80", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n19 [label="Entry string.IsInvalidMetricNumeral()", span="179-179", cluster="string.IsInvalidMetricNumeral()"];
n8 [label="var last = input[input.Length - 1]", span="82-82", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n21 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)"];
n10 [label="return Double.Parse(input);", span="83-83", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n12 [label="var number = Double.Parse(input.Remove(input.Length - 1))", span="85-85", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n9 [label="!Char.IsLetter(last)", span="83-83", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n11 [label="Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", span="84-84", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n29 [label="(symbols.IndexOf(last) + 1) * 3", span="84-84", cluster="lambda expression", color=red, community=0];
n13 [label="var exponent = Math.Pow(10, Symbols[0].Contains(last) ? getExponent(Symbols[0]) : -getExponent(Symbols[1]))", span="86-86", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n22 [label="Entry char.IsLetter(char)", span="0-0", cluster="char.IsLetter(char)"];
n24 [label="Entry string.Remove(int)", span="0-0", cluster="string.Remove(int)"];
n23 [label="Entry double.Parse(string)", span="0-0", cluster="double.Parse(string)"];
n14 [label="return number * exponent;", span="87-87", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0];
n25 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)"];
n26 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n27 [label="Entry System.Math.Pow(double, double)", span="0-0", cluster="System.Math.Pow(double, double)"];
n15 [label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)"];
n16 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n20 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)"];
n28 [label="Entry lambda expression", span="84-84", cluster="lambda expression"];
n30 [label="Exit lambda expression", span="84-84", cluster="lambda expression"];
n31 [label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="197-197", cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)"];
n32 [label="return Names.Aggregate(input, (current, name) => current.Replace(name.Value, name.Key.ToString()));", span="92-92", cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", color=red, community=0];
n33 [label="Exit Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="90-90", cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)"];
n34 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate"];
n35 [label="Entry lambda expression", span="92-92", cluster="lambda expression"];
n36 [label="current.Replace(name.Value, name.Key.ToString())", span="92-92", cluster="lambda expression", color=red, community=0];
n37 [label="Exit lambda expression", span="92-92", cluster="lambda expression"];
n38 [label="Entry char.ToString()", span="0-0", cluster="char.ToString()"];
n39 [label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="111-111", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)"];
n40 [label="input.Equals(0)", span="113-113", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n41 [label="return input.ToString();", span="113-113", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n42 [label="input.IsOutOfRange()", span="114-114", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n44 [label="var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="115-115", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n46 [label="return input.ToString();", span="116-116", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n47 [label="return input * Math.Pow(1000, -exponent)\r\n                                + (isSplitedBySpace ? '' '' : String.Empty)\r\n                                + GetUnit((Math.Sign(exponent) == 1 ? Symbols[0][exponent - 1] : Symbols[1][-exponent - 1]), useSymbol);", span="117-119", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n49 [label="Entry double.Equals(double)", span="0-0", cluster="double.Equals(double)"];
n43 [label="throw new ArgumentOutOfRangeException(''input'');", span="114-114", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n51 [label="Entry double.IsOutOfRange()", span="159-159", cluster="double.IsOutOfRange()"];
n45 [label="exponent == 0", span="116-116", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0];
n53 [label="Entry System.Math.Abs(double)", span="0-0", cluster="System.Math.Abs(double)"];
n54 [label="Entry System.Math.Log10(double)", span="0-0", cluster="System.Math.Log10(double)"];
n55 [label="Entry System.Math.Floor(double)", span="0-0", cluster="System.Math.Floor(double)"];
n48 [label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="111-111", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)"];
n50 [label="Entry double.ToString()", span="0-0", cluster="double.ToString()"];
n56 [label="Entry System.Math.Sign(int)", span="0-0", cluster="System.Math.Sign(int)"];
n57 [label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="149-149", cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)"];
n52 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
n58 [label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="138-138", cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)"];
n59 [label="return Convert.ToDouble(input).ToMetric(isSplitedBySpace, useSymbol);", span="140-140", cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", color=red, community=0];
n60 [label="Exit Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="138-138", cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)"];
n61 [label="Entry System.Convert.ToDouble(int)", span="0-0", cluster="System.Convert.ToDouble(int)"];
n62 [label="Entry double.ToMetric(bool, bool)", span="111-111", cluster="double.ToMetric(bool, bool)"];
n63 [label="return useSymbol ? symbol.ToString() : Names[symbol];", span="151-151", cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", color=red, community=0];
n64 [label="Exit Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="149-149", cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)"];
n65 [label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="159-159", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)"];
n66 [label="int limit = 27", span="161-161", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0];
n69 [label="Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="164-164", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0];
n75 [label="!(max > input && input > min)", span="164-164", cluster="lambda expression", color=red, community=0];
n70 [label="return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n                               || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", span="165-166", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=1];
n67 [label="var bigLimit = Math.Pow(10, limit)", span="162-162", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0];
n68 [label="var smallLimit = Math.Pow(10, -limit)", span="163-163", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0];
n71 [label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="159-159", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)"];
n72 [label="Entry System.Math.Sign(double)", span="0-0", cluster="System.Math.Sign(double)"];
n73 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n74 [label="Entry lambda expression", span="164-164", cluster="lambda expression"];
n76 [label="Exit lambda expression", span="164-164", cluster="lambda expression"];
n77 [label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="179-179", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)"];
n78 [label="double number", span="181-181", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0];
n79 [label="var index = input.Length - 1", span="182-182", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0];
n80 [label="var last = input[index]", span="183-183", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0];
n82 [label="return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="185-185", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0];
n81 [label="var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="184-184", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0];
n83 [label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="179-179", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)"];
n84 [label="Entry double.TryParse(string, out double)", span="0-0", cluster="double.TryParse(string, out double)"];
n85 [label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="197-197", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)"];
n86 [label="var i = 0", span="199-199", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0];
n87 [label="i < chars.Count", span="199-199", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0];
n88 [label="chars.ElementAt(i).Equals(value)", span="200-200", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0];
n89 [label="return i;", span="201-201", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0];
n90 [label="i++", span="199-199", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0];
n91 [label="return -1;", span="202-202", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0];
n93 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)"];
n94 [label="Entry char.Equals(char)", span="0-0", cluster="char.Equals(char)"];
n92 [label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="197-197", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)"];
d1 [label="input = CleanRepresentation(input)", span="78-78", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d0 [label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="76-76", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)"];
d2 [label="return BuildNumber(input, input[input.Length - 1]);", span="79-79", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0];
d4 [label="Entry Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)"];
d5 [label="Entry Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157", cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)"];
d7 [label="return Convert.ToDouble(input).ToMetric(hasSpace, useSymbol);", span="102-102", cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", color=green, community=0];
d6 [label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="100-100", cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)"];
d12 [label="input.Equals(0)", span="125-125", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0];
d11 [label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="123-123", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)"];
d13 [label="return input.ToString();", span="126-126", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0];
d14 [label="input.IsOutOfRange()", span="127-127", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0];
d15 [label="throw new ArgumentOutOfRangeException(''input'');", span="128-128", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0];
d16 [label="return BuildRepresentation(input, hasSpace, useSymbol);", span="130-130", cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0];
d22 [label="Entry Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198", cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)"];
d23 [label="input == null", span="140-140", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d24 [label="throw new ArgumentNullException(''input'');", span="141-141", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d25 [label="input = input.Trim()", span="143-143", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d26 [label="input = ReplaceNameBySymbol(input)", span="144-144", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d30 [label="Exit Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)"];
d27 [label="input.Length == 0 || input.IsInvalidMetricNumeral()", span="145-145", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d33 [label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="185-185", cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)"];
d29 [label="return input.Replace('' '', String.Empty);", span="148-148", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d28 [label="throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="146-146", cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0];
d37 [label="return Char.IsLetter(last)\r\n				? BuildMetricNumber(input, last)\r\n				: Double.Parse(input);", span="159-161", cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", color=green, community=1];
d38 [label="Exit Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157", cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)"];
d40 [label="Entry Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170", cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)"];
d42 [label="Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", span="172-172", cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0];
d43 [label="var number = Double.Parse(input.Remove(input.Length - 1))", span="173-173", cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0];
d52 [label="(symbols.IndexOf(last) + 1) * 3", span="172-172", cluster="lambda expression", color=green, community=0];
d44 [label="var exponent = Math.Pow(10, Symbols[0].Contains(last)\r\n				? getExponent(Symbols[0])\r\n				: -getExponent(Symbols[1]))", span="174-176", cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=1];
d108 [label=char, span=""];
d45 [label="return number * exponent;", span="177-177", cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0];
d46 [label="Exit Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170", cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)"];
d55 [label="return Names.Aggregate(input, (current, name) =>\r\n				current.Replace(name.Value, name.Key.ToString()));", span="187-188", cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", color=green, community=1];
d59 [label="current.Replace(name.Value, name.Key.ToString())", span="188-188", cluster="lambda expression", color=green, community=0];
d62 [label="var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="200-200", cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", color=green, community=0];
d69 [label="Entry Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214", cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)"];
d63 [label="return exponent.Equals(0)\r\n				? input.ToString()\r\n				: BuildMetricRepresentation(input, exponent, hasSpace, useSymbol);", span="201-203", cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", color=green, community=1];
d64 [label="Exit Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198", cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)"];
d68 [label="Entry int.Equals(int)", span="0-0", cluster="int.Equals(int)"];
d70 [label="var number = input * Math.Pow(1000, -exponent)", span="216-216", cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=0];
d71 [label="var symbol = Math.Sign(exponent) == 1\r\n				? Symbols[0][exponent - 1]\r\n				: Symbols[1][-exponent - 1]", span="217-219", cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=1];
d72 [label="return number\r\n				+ (hasSpace ? '' '' : String.Empty)\r\n				+ GetUnit(symbol, useSymbol);", span="220-222", cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=1];
d75 [label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="231-231", cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)"];
d73 [label="Exit Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214", cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)"];
d76 [label="return useSymbol ? symbol.ToString() : Names[symbol];", span="233-233", cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", color=green, community=0];
d79 [label="int limit = 27", span="243-243", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d80 [label="var bigLimit = Math.Pow(10, limit)", span="244-244", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d81 [label="var smallLimit = Math.Pow(10, -limit)", span="245-245", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d82 [label="Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="246-246", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0];
d83 [label="return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n			       || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", span="247-248", cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=1];
d88 [label="!(max > input && input > min)", span="246-246", cluster="lambda expression", color=green, community=0];
d91 [label="double number", span="263-263", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d92 [label="var index = input.Length - 1", span="264-264", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d93 [label="var last = input[index]", span="265-265", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d95 [label="return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="267-267", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d94 [label="var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="266-266", cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0];
d99 [label="var i = 0", span="281-281", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d100 [label="i < chars.Count", span="281-281", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d101 [label="chars.ElementAt(i).Equals(value)", span="282-282", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d102 [label="return i;", span="283-283", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d103 [label="i++", span="281-281", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
d104 [label="return -1;", span="284-284", cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0];
m0_46 [label="Entry System.Diagnostics.Debugger.Break()", span="0-0", cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs"];
m0_22 [label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs"];
m0_23 [label="Assert.Throws<ArgumentNullException>(() =>\r\n                                MetricNumeralExtensions.FromMetric(null))", span="66-67", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs"];
m0_24 [label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs"];
m0_15 [label="Entry string.FromMetric()", span="74-74", cluster="string.FromMetric()", file="MetricNumeralTests.cs"];
m0_29 [label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_30 [label="var b = true", span="74-74", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_31 [label="var i = -24", span="75-75", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_39 [label="b &= c", span="87-87", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_41 [label="Assert.True(b)", span="89-89", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_32 [label="i < 27", span="75-75", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_33 [label="var origin = Math.Pow(10, i)", span="77-77", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_40 [label="i++", span="75-75", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_34 [label="var to = origin.ToMetric()", span="78-78", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_36 [label="var c = Equals(\r\n                                        origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                        from.ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="81-83", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_35 [label="var from = to.FromMetric()", span="79-79", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_37 [label="!c", span="84-84", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_38 [label="Debugger.Break()", span="85-85", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_42 [label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs"];
m0_55 [label="Entry System.Convert.ToInt32(double)", span="0-0", cluster="System.Convert.ToInt32(double)", file="MetricNumeralTests.cs"];
m0_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="MetricNumeralTests.cs"];
m0_5 [label="Entry Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30", cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs"];
m0_6 [label="Assert.Throws<ArgumentOutOfRangeException>(() => input.ToMetric())", span="32-32", cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs"];
m0_7 [label="Exit Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30", cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs"];
m0_57 [label="Entry int.ToMetric(bool, bool)", span="138-138", cluster="int.ToMetric(bool, bool)", file="MetricNumeralTests.cs"];
m0_8 [label="Entry Unk.>", span="", cluster="Unk.>", file="MetricNumeralTests.cs"];
m0_28 [label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74", cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", file="MetricNumeralTests.cs"];
m0_56 [label="Entry int.ToString(string, System.IFormatProvider)", span="0-0", cluster="int.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs"];
m0_12 [label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43", cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs"];
m0_13 [label="Assert.Equal(expected, input.FromMetric())", span="45-45", cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs"];
m0_14 [label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43", cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs"];
m0_25 [label="Entry lambda expression", span="66-67", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_10 [label="input.ToMetric()", span="32-32", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_9 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_11 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_20 [label="input.FromMetric()", span="60-60", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_19 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_21 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_26 [label="MetricNumeralExtensions.FromMetric(null)", span="67-67", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_27 [label="Exit lambda expression", span="66-67", cluster="lambda expression", file="MetricNumeralTests.cs"];
m0_48 [label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_49 [label="var origin = Convert.ToInt32(Math.Pow(10, exponent))", span="104-104", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_50 [label="var isEquals = Equals(\r\n                                origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                origin.ToMetric().FromMetric().ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="105-107", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_51 [label="!isEquals", span="108-108", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_53 [label="Assert.True(isEquals)", span="110-110", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_52 [label="Debugger.Break()", span="109-109", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_54 [label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102", cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs"];
m0_44 [label="Entry double.ToString(string, System.IFormatProvider)", span="0-0", cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs"];
m0_3 [label="Entry double.ToMetric(bool, bool)", span="111-111", cluster="double.ToMetric(bool, bool)", file="MetricNumeralTests.cs"];
m0_47 [label="Entry Unk.True", span="", cluster="Unk.True", file="MetricNumeralTests.cs"];
m0_45 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="MetricNumeralTests.cs"];
m0_0 [label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19", cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs"];
m0_1 [label="Assert.Equal(expected, input.ToMetric(hasSpace, useSymbol))", span="22-22", cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", color=green, community=0, file="MetricNumeralTests.cs"];
m0_2 [label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19", cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs"];
m0_16 [label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs"];
m0_17 [label="Assert.Throws<ArgumentException>(() => input.FromMetric())", span="60-60", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs"];
m0_18 [label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58", cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs"];
m0_58 [label=double, span="", file="MetricNumeralTests.cs"];
m0_59 [label=string, span="", file="MetricNumeralTests.cs"];
n95 -> n29  [key=1, style=dashed, color=red, label=last];
n96 -> n75  [key=1, style=dashed, color=red, label=double];
n96 -> d88  [key=1, style=dashed, color=green, label=double];
n0 -> n1  [key=0, style=solid, color=red];
n0 -> n3  [key=1, style=dashed, color=red, label=string];
n0 -> n18  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n3  [key=0, style=solid, color=red];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n17  [key=2, style=dotted, color=red];
n3 -> n3  [key=1, style=dashed, color=red, label=string];
n2 -> n15  [key=0, style=solid, color=red];
n2 -> n16  [key=2, style=dotted, color=red];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n18  [key=2, style=dotted, color=red];
n4 -> n4  [key=1, style=dashed, color=red, label=string];
n4 -> n7  [key=1, style=dashed, color=red, label=string];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n7  [key=0, style=solid, color=red];
n5 -> n19  [key=2, style=dotted, color=red];
n18 -> n32  [key=0, style=solid, color=red];
n18 -> n0  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n21  [key=2, style=dotted, color=red];
n7 -> n7  [key=1, style=dashed, color=red, label=string];
n7 -> n10  [key=1, style=dashed, color=red, label=string];
n7 -> n12  [key=1, style=dashed, color=red, label=string];
n6 -> n15  [key=0, style=solid, color=red];
n6 -> n20  [key=2, style=dotted, color=red];
n8 -> n9  [key=0, style=solid, color=red];
n8 -> n11  [key=1, style=dashed, color=red, label=last];
n8 -> n29  [key=1, style=dashed, color=red, label=last];
n8 -> n13  [key=1, style=dashed, color=red, label=last];
n10 -> n15  [key=0, style=solid, color=red];
n10 -> n23  [key=2, style=dotted, color=red];
n12 -> n13  [key=0, style=solid, color=red];
n12 -> n24  [key=2, style=dotted, color=red];
n12 -> n23  [key=2, style=dotted, color=red];
n12 -> n14  [key=1, style=dashed, color=red, label=number];
n9 -> n10  [key=0, style=solid, color=red];
n9 -> n11  [key=0, style=solid, color=red];
n9 -> n22  [key=2, style=dotted, color=red];
n11 -> n12  [key=0, style=solid, color=red];
n11 -> n29  [key=1, style=dashed, color=red, label="char[]"];
n11 -> n13  [key=1, style=dashed, color=red, label=getExponent];
n11 -> n11  [key=3, color=red, style=bold, label="Local variable System.Func<char[], double> getExponent"];
n29 -> n30  [key=0, style=solid, color=red];
n29 -> n31  [key=2, style=dotted, color=red];
n13 -> n14  [key=0, style=solid, color=red];
n13 -> n25  [key=2, style=dotted, color=red];
n13 -> n26  [key=2, style=dotted, color=red];
n13 -> n27  [key=2, style=dotted, color=red];
n14 -> n15  [key=0, style=solid, color=red];
n15 -> n0  [key=0, style=bold, color=blue];
n15 -> d0  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid, color=red];
n28 -> d52  [key=0, style=solid, color=green];
n30 -> n28  [key=0, style=bold, color=blue];
n31 -> n8  [key=3, color=red, style=bold, label="Parameter variable char value"];
n31 -> n86  [key=3, color=red, style=bold, label="method methodReturn int IndexOf"];
n31 -> n91  [key=3, color=red, style=bold, label="method methodReturn int IndexOf"];
n31 -> d99  [key=3, color=green, style=bold, label="method methodReturn int IndexOf"];
n31 -> d104  [key=3, color=green, style=bold, label="method methodReturn int IndexOf"];
n31 -> d40  [key=3, color=darkorchid, style=bold, label="Parameter variable char value"];
n32 -> n33  [key=0, style=solid, color=red];
n32 -> n34  [key=2, style=dotted, color=red];
n32 -> n35  [key=1, style=dashed, color=red, label="lambda expression"];
n33 -> n18  [key=0, style=bold, color=blue];
n33 -> d33  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid, color=red];
n35 -> d59  [key=0, style=solid, color=green];
n36 -> n37  [key=0, style=solid, color=red];
n36 -> n38  [key=2, style=dotted, color=red];
n36 -> n21  [key=2, style=dotted, color=red];
n36 -> n36  [key=1, style=dashed, color=red, label="System.Collections.Generic.KeyValuePair<char, string>"];
n37 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid, color=red];
n39 -> n41  [key=1, style=dashed, color=red, label=double];
n39 -> n42  [key=1, style=dashed, color=red, label=double];
n39 -> n44  [key=1, style=dashed, color=red, label=double];
n39 -> n46  [key=1, style=dashed, color=red, label=double];
n39 -> n47  [key=1, style=dashed, color=red, label=double];
n39 -> n58  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useSymbol"];
n40 -> n41  [key=0, style=solid, color=red];
n40 -> n42  [key=0, style=solid, color=red];
n40 -> n49  [key=2, style=dotted, color=red];
n41 -> n48  [key=0, style=solid, color=red];
n41 -> n50  [key=2, style=dotted, color=red];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n44  [key=0, style=solid, color=red];
n42 -> n51  [key=2, style=dotted, color=red];
n44 -> n45  [key=0, style=solid, color=red];
n44 -> n53  [key=2, style=dotted, color=red];
n44 -> n54  [key=2, style=dotted, color=red];
n44 -> n55  [key=2, style=dotted, color=red];
n44 -> n47  [key=1, style=dashed, color=red, label=exponent];
n46 -> n48  [key=0, style=solid, color=red];
n46 -> n50  [key=2, style=dotted, color=red];
n47 -> n48  [key=0, style=solid, color=red];
n47 -> n27  [key=2, style=dotted, color=red];
n47 -> n56  [key=2, style=dotted, color=red];
n47 -> n57  [key=2, style=dotted, color=red];
n43 -> n48  [key=0, style=solid, color=red];
n43 -> n52  [key=2, style=dotted, color=red];
n45 -> n46  [key=0, style=solid, color=red];
n45 -> n47  [key=0, style=solid, color=red];
n48 -> n39  [key=0, style=bold, color=blue];
n48 -> d11  [key=0, style=bold, color=blue];
n57 -> n63  [key=0, style=solid, color=red];
n57 -> n39  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useSymbol"];
n58 -> n59  [key=0, style=solid, color=red];
n58 -> n39  [key=3, color=darkorchid, style=bold, label="method methodReturn string ToMetric"];
n59 -> n60  [key=0, style=solid, color=red];
n59 -> n61  [key=2, style=dotted, color=red];
n59 -> n62  [key=2, style=dotted, color=red];
n60 -> n58  [key=0, style=bold, color=blue];
n60 -> d6  [key=0, style=bold, color=blue];
n62 -> d6  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useSymbol"];
n62 -> d22  [key=3, color=darkorchid, style=bold, label="method methodReturn string ToMetric"];
n63 -> n64  [key=0, style=solid, color=red];
n63 -> n38  [key=2, style=dotted, color=red];
n64 -> n57  [key=0, style=bold, color=blue];
n64 -> d75  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid, color=red];
n65 -> n69  [key=1, style=dashed, color=red, label=double];
n65 -> n75  [key=1, style=dashed, color=red, label=double];
n65 -> n70  [key=1, style=dashed, color=red, label=double];
n65 -> d79  [key=0, style=solid, color=green];
n65 -> d82  [key=1, style=dashed, color=green, label=double];
n65 -> d88  [key=1, style=dashed, color=green, label=double];
n65 -> d83  [key=1, style=dashed, color=green, label=double];
n66 -> n67  [key=0, style=solid, color=red];
n66 -> n68  [key=1, style=dashed, color=red, label=limit];
n66 -> n66  [key=3, color=red, style=bold, label="Local variable int limit"];
n69 -> n70  [key=0, style=solid, color=red];
n69 -> n75  [key=1, style=dashed, color=red, label=double];
n69 -> n69  [key=3, color=red, style=bold, label="Local variable System.Func<double, double, bool> outside"];
n75 -> n76  [key=0, style=solid, color=red];
n70 -> n71  [key=0, style=solid, color=red];
n70 -> n72  [key=2, style=dotted, color=red];
n70 -> n73  [key=2, style=dotted, color=red];
n67 -> n68  [key=0, style=solid, color=red];
n67 -> n27  [key=2, style=dotted, color=red];
n67 -> n70  [key=1, style=dashed, color=red, label=bigLimit];
n68 -> n69  [key=0, style=solid, color=red];
n68 -> n27  [key=2, style=dotted, color=red];
n68 -> n70  [key=1, style=dashed, color=red, label=smallLimit];
n71 -> n65  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid, color=red];
n74 -> d88  [key=0, style=solid, color=green];
n76 -> n74  [key=0, style=bold, color=blue];
n77 -> n78  [key=0, style=solid, color=red];
n77 -> n79  [key=1, style=dashed, color=red, label=string];
n77 -> n80  [key=1, style=dashed, color=red, label=string];
n77 -> n82  [key=1, style=dashed, color=red, label=string];
n77 -> d91  [key=0, style=solid, color=green];
n77 -> d92  [key=1, style=dashed, color=green, label=string];
n77 -> d93  [key=1, style=dashed, color=green, label=string];
n77 -> d95  [key=1, style=dashed, color=green, label=string];
n78 -> n79  [key=0, style=solid, color=red];
n79 -> n80  [key=0, style=solid, color=red];
n79 -> n82  [key=1, style=dashed, color=red, label=index];
n80 -> n81  [key=0, style=solid, color=red];
n82 -> n83  [key=0, style=solid, color=red];
n82 -> n24  [key=2, style=dotted, color=red];
n82 -> n84  [key=2, style=dotted, color=red];
n81 -> n82  [key=0, style=solid, color=red];
n81 -> n25  [key=2, style=dotted, color=red];
n83 -> n77  [key=0, style=bold, color=blue];
n85 -> n86  [key=0, style=solid, color=red];
n85 -> n87  [key=1, style=dashed, color=red, label="System.Collections.Generic.ICollection<char>"];
n85 -> n88  [key=1, style=dashed, color=red, label="System.Collections.Generic.ICollection<char>"];
n85 -> d99  [key=0, style=solid, color=green];
n85 -> d100  [key=1, style=dashed, color=green, label="System.Collections.Generic.ICollection<char>"];
n85 -> d101  [key=1, style=dashed, color=green, label="System.Collections.Generic.ICollection<char>"];
n86 -> n87  [key=0, style=solid, color=red];
n86 -> n88  [key=1, style=dashed, color=red, label=i];
n86 -> n89  [key=1, style=dashed, color=red, label=i];
n86 -> n90  [key=1, style=dashed, color=red, label=i];
n86 -> n86  [key=3, color=red, style=bold, label="Local variable int i"];
n87 -> n88  [key=0, style=solid, color=red];
n87 -> n91  [key=0, style=solid, color=red];
n88 -> n89  [key=0, style=solid, color=red];
n88 -> n90  [key=0, style=solid, color=red];
n88 -> n93  [key=2, style=dotted, color=red];
n88 -> n94  [key=2, style=dotted, color=red];
n89 -> n92  [key=0, style=solid, color=red];
n90 -> n87  [key=0, style=solid, color=red];
n90 -> n90  [key=1, style=dashed, color=red, label=i];
n91 -> n92  [key=0, style=solid, color=red];
n92 -> n85  [key=0, style=bold, color=blue];
d1 -> d1  [key=1, style=dashed, color=green, label=string];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d4  [key=2, style=dotted, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d4  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
d0 -> d5  [key=3, color=darkorchid, style=bold, label="method methodReturn double FromMetric"];
d2 -> n15  [key=0, style=solid, color=green];
d2 -> d5  [key=2, style=dotted, color=green];
d4 -> d23  [key=0, style=solid, color=green];
d4 -> d25  [key=1, style=dashed, color=green, label=string];
d4 -> d0  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
d4 -> d33  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
d5 -> d37  [key=0, style=solid, color=green];
d5 -> d0  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
d7 -> n60  [key=0, style=solid, color=green];
d7 -> n61  [key=2, style=dotted, color=green];
d7 -> n62  [key=2, style=dotted, color=green];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> n62  [key=3, color=darkorchid, style=bold, label="method methodReturn string ToMetric"];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d14  [key=0, style=solid, color=green];
d12 -> n49  [key=2, style=dotted, color=green];
d11 -> d12  [key=0, style=solid, color=green];
d11 -> d13  [key=1, style=dashed, color=green, label=double];
d11 -> d14  [key=1, style=dashed, color=green, label=double];
d11 -> d16  [key=1, style=dashed, color=green, label=double];
d13 -> n48  [key=0, style=solid, color=green];
d13 -> n50  [key=2, style=dotted, color=green];
d14 -> d15  [key=0, style=solid, color=green];
d14 -> d16  [key=0, style=solid, color=green];
d14 -> n51  [key=2, style=dotted, color=green];
d15 -> n48  [key=0, style=solid, color=green];
d15 -> n52  [key=2, style=dotted, color=green];
d16 -> n48  [key=0, style=solid, color=green];
d16 -> d22  [key=2, style=dotted, color=green];
d22 -> d62  [key=0, style=solid, color=green];
d22 -> d63  [key=1, style=dashed, color=green, label=double];
d22 -> n62  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useSymbol"];
d23 -> d24  [key=0, style=solid, color=green];
d23 -> d25  [key=0, style=solid, color=green];
d24 -> d30  [key=0, style=solid, color=green];
d24 -> n16  [key=2, style=dotted, color=green];
d25 -> d25  [key=1, style=dashed, color=green, label=string];
d25 -> d26  [key=0, style=solid, color=green];
d25 -> n17  [key=2, style=dotted, color=green];
d26 -> d26  [key=1, style=dashed, color=green, label=string];
d26 -> d27  [key=0, style=solid, color=green];
d26 -> d33  [key=2, style=dotted, color=green];
d26 -> d29  [key=1, style=dashed, color=green, label=string];
d30 -> d4  [key=0, style=bold, color=blue];
d27 -> d28  [key=0, style=solid, color=green];
d27 -> d29  [key=0, style=solid, color=green];
d27 -> n19  [key=2, style=dotted, color=green];
d33 -> d55  [key=0, style=solid, color=green];
d33 -> d4  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
d29 -> d30  [key=0, style=solid, color=green];
d29 -> n21  [key=2, style=dotted, color=green];
d28 -> d30  [key=0, style=solid, color=green];
d28 -> n20  [key=2, style=dotted, color=green];
d37 -> d38  [key=0, style=solid, color=green];
d37 -> n22  [key=2, style=dotted, color=green];
d37 -> d40  [key=2, style=dotted, color=green];
d37 -> n23  [key=2, style=dotted, color=green];
d38 -> d5  [key=0, style=bold, color=blue];
d40 -> d42  [key=0, style=solid, color=green];
d40 -> d52  [key=1, style=dashed, color=green, label=char];
d40 -> d43  [key=1, style=dashed, color=green, label=string];
d40 -> d44  [key=1, style=dashed, color=green, label=char];
d40 -> d5  [key=3, color=darkorchid, style=bold, label="Parameter variable char last"];
d42 -> d42  [key=3, color=green, style=bold, label="Local variable System.Func<char[], double> getExponent"];
d42 -> d43  [key=0, style=solid, color=green];
d42 -> d52  [key=1, style=dashed, color=green, label="char[]"];
d42 -> d44  [key=1, style=dashed, color=green, label=getExponent];
d43 -> d44  [key=0, style=solid, color=green];
d43 -> n24  [key=2, style=dotted, color=green];
d43 -> n23  [key=2, style=dotted, color=green];
d43 -> d45  [key=1, style=dashed, color=green, label=number];
d52 -> n30  [key=0, style=solid, color=green];
d52 -> n31  [key=2, style=dotted, color=green];
d44 -> d45  [key=0, style=solid, color=green];
d44 -> n25  [key=2, style=dotted, color=green];
d44 -> n26  [key=2, style=dotted, color=green];
d44 -> n27  [key=2, style=dotted, color=green];
d108 -> d52  [key=1, style=dashed, color=green, label=char];
d45 -> d46  [key=0, style=solid, color=green];
d46 -> d40  [key=0, style=bold, color=blue];
d55 -> n33  [key=0, style=solid, color=green];
d55 -> n34  [key=2, style=dotted, color=green];
d55 -> n35  [key=1, style=dashed, color=green, label="lambda expression"];
d59 -> d59  [key=1, style=dashed, color=green, label="System.Collections.Generic.KeyValuePair<char, string>"];
d59 -> n37  [key=0, style=solid, color=green];
d59 -> n38  [key=2, style=dotted, color=green];
d59 -> n21  [key=2, style=dotted, color=green];
d62 -> d63  [key=0, style=solid, color=green];
d62 -> n53  [key=2, style=dotted, color=green];
d62 -> n54  [key=2, style=dotted, color=green];
d62 -> n55  [key=2, style=dotted, color=green];
d69 -> d62  [key=3, color=green, style=bold, label="Parameter variable int exponent"];
d69 -> d70  [key=0, style=solid, color=green];
d69 -> d71  [key=1, style=dashed, color=green, label=int];
d69 -> d72  [key=1, style=dashed, color=green, label=bool];
d69 -> d22  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useSymbol"];
d63 -> d64  [key=0, style=solid, color=green];
d63 -> d68  [key=2, style=dotted, color=green];
d63 -> n50  [key=2, style=dotted, color=green];
d63 -> d69  [key=2, style=dotted, color=green];
d64 -> d22  [key=0, style=bold, color=blue];
d70 -> d71  [key=0, style=solid, color=green];
d70 -> n27  [key=2, style=dotted, color=green];
d70 -> d72  [key=1, style=dashed, color=green, label=number];
d71 -> d72  [key=0, style=solid, color=green];
d71 -> n56  [key=2, style=dotted, color=green];
d72 -> d73  [key=0, style=solid, color=green];
d72 -> d75  [key=2, style=dotted, color=green];
d75 -> d71  [key=3, color=green, style=bold, label="Parameter variable char symbol"];
d75 -> d76  [key=0, style=solid, color=green];
d75 -> d69  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useSymbol"];
d73 -> d69  [key=0, style=bold, color=blue];
d76 -> n64  [key=0, style=solid, color=green];
d76 -> n38  [key=2, style=dotted, color=green];
d79 -> d79  [key=3, color=green, style=bold, label="Local variable int limit"];
d79 -> d80  [key=0, style=solid, color=green];
d79 -> d81  [key=1, style=dashed, color=green, label=limit];
d80 -> d83  [key=1, style=dashed, color=green, label=bigLimit];
d80 -> d81  [key=0, style=solid, color=green];
d80 -> n27  [key=2, style=dotted, color=green];
d81 -> d82  [key=0, style=solid, color=green];
d81 -> d83  [key=1, style=dashed, color=green, label=smallLimit];
d81 -> n27  [key=2, style=dotted, color=green];
d82 -> d82  [key=3, color=green, style=bold, label="Local variable System.Func<double, double, bool> outside"];
d82 -> d83  [key=0, style=solid, color=green];
d82 -> d88  [key=1, style=dashed, color=green, label=double];
d83 -> n71  [key=0, style=solid, color=green];
d83 -> n72  [key=2, style=dotted, color=green];
d83 -> n73  [key=2, style=dotted, color=green];
d88 -> n76  [key=0, style=solid, color=green];
d91 -> d92  [key=0, style=solid, color=green];
d92 -> d93  [key=0, style=solid, color=green];
d92 -> d95  [key=1, style=dashed, color=green, label=index];
d93 -> d94  [key=0, style=solid, color=green];
d95 -> n83  [key=0, style=solid, color=green];
d95 -> n24  [key=2, style=dotted, color=green];
d95 -> n84  [key=2, style=dotted, color=green];
d94 -> d95  [key=0, style=solid, color=green];
d94 -> n25  [key=2, style=dotted, color=green];
d99 -> d99  [key=3, color=green, style=bold, label="Local variable int i"];
d99 -> d100  [key=0, style=solid, color=green];
d99 -> d101  [key=1, style=dashed, color=green, label=i];
d99 -> d102  [key=1, style=dashed, color=green, label=i];
d99 -> d103  [key=1, style=dashed, color=green, label=i];
d100 -> d101  [key=0, style=solid, color=green];
d100 -> d104  [key=0, style=solid, color=green];
d101 -> d102  [key=0, style=solid, color=green];
d101 -> d103  [key=0, style=solid, color=green];
d101 -> n93  [key=2, style=dotted, color=green];
d101 -> n94  [key=2, style=dotted, color=green];
d102 -> n92  [key=0, style=solid, color=green];
d103 -> d100  [key=0, style=solid, color=green];
d103 -> d103  [key=1, style=dashed, color=green, label=i];
d104 -> n92  [key=0, style=solid, color=green];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_8  [key=2, style=dotted];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_15 -> m0_15  [key=3, color=darkorchid, style=bold, label="Local variable bool b"];
m0_15 -> m0_36  [key=3, color=darkorchid, style=bold, label="Local variable bool b"];
m0_29 -> m0_30  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=b];
m0_30 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=b];
m0_30 -> m0_30  [key=3, color=green, style=bold, label="Local variable bool b"];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_31 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_31 -> m0_31  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=b];
m0_39 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=b];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_47  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_41  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> n27  [key=2, style=dotted];
m0_33 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=origin];
m0_40 -> m0_32  [key=0, style=solid];
m0_40 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_3  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_44  [key=2, style=dotted];
m0_36 -> m0_45  [key=2, style=dotted];
m0_36 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_15  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_46  [key=2, style=dotted];
m0_42 -> m0_29  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=2, style=dotted];
m0_6 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_5  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=2, style=dotted];
m0_13 -> m0_4  [key=2, style=dotted];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_3  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_15  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_21 -> m0_19  [key=0, style=bold, color=blue];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_28  [key=2, style=dotted];
m0_27 -> m0_25  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> n27  [key=2, style=dotted];
m0_49 -> m0_55  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_56  [key=2, style=dotted];
m0_50 -> m0_57  [key=2, style=dotted];
m0_50 -> m0_15  [key=2, style=dotted];
m0_50 -> m0_44  [key=2, style=dotted];
m0_50 -> m0_45  [key=2, style=dotted];
m0_50 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=isEquals];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_47  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_46  [key=2, style=dotted];
m0_54 -> m0_48  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=2, style=dotted, color=green];
m0_1 -> m0_4  [key=2, style=dotted, color=green];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_8  [key=2, style=dotted];
m0_17 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_58 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_59 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label=string];
}
