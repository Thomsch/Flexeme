digraph  {
n95 [label=last, span=""];
n96 [label=double, span=""];
n0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74"];
n1 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="1: input == null", span="76-76"];
n3 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="1: input = input.Trim()", span="77-77"];
n2 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: throw new ArgumentNullException(''input'');", span="76-76"];
n4 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="1: input = ReplaceNameBySymbol(input)", span="78-78"];
n17 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
n5 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="1: input.Length == 0 || input.IsInvalidMetricNumeral()", span="79-79"];
n18 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="90-90"];
n7 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: input = input.Replace('' '', String.Empty)", span="81-81"];
n6 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="80-80"];
n19 [cluster="string.IsInvalidMetricNumeral()", label="Entry string.IsInvalidMetricNumeral()", span="179-179"];
n8 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: var last = input[input.Length - 1]", span="82-82"];
n21 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n10 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: return Double.Parse(input);", span="83-83"];
n12 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: var number = Double.Parse(input.Remove(input.Length - 1))", span="85-85"];
n9 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="1: !Char.IsLetter(last)", span="83-83"];
n11 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", span="84-84"];
n29 [cluster="lambda expression", color=red, community=0, label="0: (symbols.IndexOf(last) + 1) * 3", span="84-84"];
n13 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: var exponent = Math.Pow(10, Symbols[0].Contains(last) ? getExponent(Symbols[0]) : -getExponent(Symbols[1]))", span="86-86"];
n22 [cluster="char.IsLetter(char)", label="Entry char.IsLetter(char)", span="0-0"];
n24 [cluster="string.Remove(int)", label="Entry string.Remove(int)", span="0-0"];
n23 [cluster="double.Parse(string)", label="Entry double.Parse(string)", span="0-0"];
n14 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=red, community=0, label="0: return number * exponent;", span="87-87"];
n25 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
n26 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n27 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
n15 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74"];
n16 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n20 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n28 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
n31 [cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)", label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="197-197"];
n32 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", color=red, community=0, label="0: return Names.Aggregate(input, (current, name) => current.Replace(name.Value, name.Key.ToString()));", span="92-92"];
n33 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Exit Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="90-90"];
n34 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n35 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
n36 [cluster="lambda expression", color=red, community=0, label="0: current.Replace(name.Value, name.Key.ToString())", span="92-92"];
n37 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
n38 [cluster="char.ToString()", label="Entry char.ToString()", span="0-0"];
n39 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="111-111"];
n40 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: input.Equals(0)", span="113-113"];
n41 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: return input.ToString();", span="113-113"];
n42 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: input.IsOutOfRange()", span="114-114"];
n44 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="115-115"];
n46 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: return input.ToString();", span="116-116"];
n47 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: return input * Math.Pow(1000, -exponent)\r\n                                + (isSplitedBySpace ? '' '' : String.Empty)\r\n                                + GetUnit((Math.Sign(exponent) == 1 ? Symbols[0][exponent - 1] : Symbols[1][-exponent - 1]), useSymbol);", span="117-119"];
n49 [cluster="double.Equals(double)", label="Entry double.Equals(double)", span="0-0"];
n43 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: throw new ArgumentOutOfRangeException(''input'');", span="114-114"];
n51 [cluster="double.IsOutOfRange()", label="Entry double.IsOutOfRange()", span="159-159"];
n45 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=red, community=0, label="0: exponent == 0", span="116-116"];
n53 [cluster="System.Math.Abs(double)", label="Entry System.Math.Abs(double)", span="0-0"];
n54 [cluster="System.Math.Log10(double)", label="Entry System.Math.Log10(double)", span="0-0"];
n55 [cluster="System.Math.Floor(double)", label="Entry System.Math.Floor(double)", span="0-0"];
n48 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="111-111"];
n50 [cluster="double.ToString()", label="Entry double.ToString()", span="0-0"];
n56 [cluster="System.Math.Sign(int)", label="Entry System.Math.Sign(int)", span="0-0"];
n57 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="149-149"];
n52 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n58 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="138-138"];
n59 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", color=red, community=0, label="0: return Convert.ToDouble(input).ToMetric(isSplitedBySpace, useSymbol);", span="140-140"];
n60 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="138-138"];
n61 [cluster="System.Convert.ToDouble(int)", label="Entry System.Convert.ToDouble(int)", span="0-0"];
n62 [cluster="double.ToMetric(bool, bool)", label="Entry double.ToMetric(bool, bool)", span="111-111"];
n63 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", color=red, community=0, label="0: return useSymbol ? symbol.ToString() : Names[symbol];", span="151-151"];
n64 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Exit Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="149-149"];
n65 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="159-159"];
n66 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0, label="0: int limit = 27", span="161-161"];
n69 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0, label="0: Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="164-164"];
n75 [cluster="lambda expression", color=red, community=0, label="0: !(max > input && input > min)", span="164-164"];
n70 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=1, label="0: return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n                               || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", span="165-166"];
n67 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0, label="0: var bigLimit = Math.Pow(10, limit)", span="162-162"];
n68 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=red, community=0, label="0: var smallLimit = Math.Pow(10, -limit)", span="163-163"];
n71 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="159-159"];
n72 [cluster="System.Math.Sign(double)", label="Entry System.Math.Sign(double)", span="0-0"];
n73 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="164-164"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="164-164"];
n77 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="179-179"];
n78 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0, label="0: double number", span="181-181"];
n79 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0, label="0: var index = input.Length - 1", span="182-182"];
n80 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0, label="0: var last = input[index]", span="183-183"];
n82 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0, label="0: return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="185-185"];
n81 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=red, community=0, label="0: var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="184-184"];
n83 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="179-179"];
n84 [cluster="double.TryParse(string, out double)", label="Entry double.TryParse(string, out double)", span="0-0"];
n85 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="197-197"];
n86 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0, label="2: var i = 0", span="199-199"];
n87 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0, label="0: i < chars.Count", span="199-199"];
n88 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0, label="1: chars.ElementAt(i).Equals(value)", span="200-200"];
n89 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0, label="0: return i;", span="201-201"];
n90 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0, label="0: i++", span="199-199"];
n91 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=red, community=0, label="0: return -1;", span="202-202"];
n93 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
n94 [cluster="char.Equals(char)", label="Entry char.Equals(char)", span="0-0"];
n92 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="197-197"];
d1 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: input = CleanRepresentation(input)", span="78-78"];
d0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="76-76"];
d2 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="0: return BuildNumber(input, input[input.Length - 1]);", span="79-79"];
d4 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="Entry Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138"];
d5 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="Entry Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157"];
d7 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", color=green, community=0, label="0: return Convert.ToDouble(input).ToMetric(hasSpace, useSymbol);", span="102-102"];
d6 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="100-100"];
d12 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="0: input.Equals(0)", span="125-125"];
d11 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="123-123"];
d13 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="0: return input.ToString();", span="126-126"];
d14 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="0: input.IsOutOfRange()", span="127-127"];
d15 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="0: throw new ArgumentOutOfRangeException(''input'');", span="128-128"];
d16 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="0: return BuildRepresentation(input, hasSpace, useSymbol);", span="130-130"];
d22 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198"];
d23 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="1: input == null", span="140-140"];
d24 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="0: throw new ArgumentNullException(''input'');", span="141-141"];
d25 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="1: input = input.Trim()", span="143-143"];
d26 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="0: input = ReplaceNameBySymbol(input)", span="144-144"];
d30 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="Exit Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138"];
d27 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="0: input.Length == 0 || input.IsInvalidMetricNumeral()", span="145-145"];
d33 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="185-185"];
d29 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="0: return input.Replace('' '', String.Empty);", span="148-148"];
d28 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="0: throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", span="146-146"];
d37 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", color=green, community=1, label="0: return Char.IsLetter(last)\r\n				? BuildMetricNumber(input, last)\r\n				: Double.Parse(input);", span="159-161"];
d38 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="Exit Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157"];
d40 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="Entry Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170"];
d42 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0, label="0: Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", span="172-172"];
d43 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0, label="0: var number = Double.Parse(input.Remove(input.Length - 1))", span="173-173"];
d52 [cluster="lambda expression", color=green, community=0, label="0: (symbols.IndexOf(last) + 1) * 3", span="172-172"];
d44 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=1, label="0: var exponent = Math.Pow(10, Symbols[0].Contains(last)\r\n				? getExponent(Symbols[0])\r\n				: -getExponent(Symbols[1]))", span="174-176"];
d108 [label=char, span=""];
d45 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0, label="0: return number * exponent;", span="177-177"];
d46 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="Exit Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170"];
d55 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", color=green, community=1, label="0: return Names.Aggregate(input, (current, name) =>\r\n				current.Replace(name.Value, name.Key.ToString()));", span="187-188"];
d59 [cluster="lambda expression", color=green, community=0, label="0: current.Replace(name.Value, name.Key.ToString())", span="188-188"];
d62 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", color=green, community=0, label="0: var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", span="200-200"];
d69 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214"];
d63 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", color=green, community=1, label="0: return exponent.Equals(0)\r\n				? input.ToString()\r\n				: BuildMetricRepresentation(input, exponent, hasSpace, useSymbol);", span="201-203"];
d64 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198"];
d68 [cluster="int.Equals(int)", label="Entry int.Equals(int)", span="0-0"];
d70 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=0, label="0: var number = input * Math.Pow(1000, -exponent)", span="216-216"];
d71 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=1, label="0: var symbol = Math.Sign(exponent) == 1\r\n				? Symbols[0][exponent - 1]\r\n				: Symbols[1][-exponent - 1]", span="217-219"];
d72 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=1, label="0: return number\r\n				+ (hasSpace ? '' '' : String.Empty)\r\n				+ GetUnit(symbol, useSymbol);", span="220-222"];
d75 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="231-231"];
d73 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214"];
d76 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", color=green, community=0, label="0: return useSymbol ? symbol.ToString() : Names[symbol];", span="233-233"];
d79 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="0: int limit = 27", span="243-243"];
d80 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="0: var bigLimit = Math.Pow(10, limit)", span="244-244"];
d81 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="0: var smallLimit = Math.Pow(10, -limit)", span="245-245"];
d82 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="0: Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", span="246-246"];
d83 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=1, label="0: return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n			       || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", span="247-248"];
d88 [cluster="lambda expression", color=green, community=0, label="0: !(max > input && input > min)", span="246-246"];
d91 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="0: double number", span="263-263"];
d92 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="0: var index = input.Length - 1", span="264-264"];
d93 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="0: var last = input[index]", span="265-265"];
d95 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="0: return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", span="267-267"];
d94 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="0: var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", span="266-266"];
d99 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="2: var i = 0", span="281-281"];
d100 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="0: i < chars.Count", span="281-281"];
d101 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="1: chars.ElementAt(i).Equals(value)", span="282-282"];
d102 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="0: return i;", span="283-283"];
d103 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="0: i++", span="281-281"];
d104 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="0: return -1;", span="284-284"];
m0_46 [cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs", label="Entry System.Diagnostics.Debugger.Break()", span="0-0"];
m0_22 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64"];
m0_23 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentNullException>(() =>\r\n                                MetricNumeralExtensions.FromMetric(null))", span="66-67"];
m0_24 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64"];
m0_15 [cluster="string.FromMetric()", file="MetricNumeralTests.cs", label="Entry string.FromMetric()", span="74-74"];
m0_29 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72"];
m0_30 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var b = true", span="74-74"];
m0_31 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var i = -24", span="75-75"];
m0_39 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="b &= c", span="87-87"];
m0_41 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Assert.True(b)", span="89-89"];
m0_32 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="i < 27", span="75-75"];
m0_33 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var origin = Math.Pow(10, i)", span="77-77"];
m0_40 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="i++", span="75-75"];
m0_34 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var to = origin.ToMetric()", span="78-78"];
m0_36 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var c = Equals(\r\n                                        origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                        from.ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="81-83"];
m0_35 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var from = to.FromMetric()", span="79-79"];
m0_37 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="!c", span="84-84"];
m0_38 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Debugger.Break()", span="85-85"];
m0_42 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72"];
m0_55 [cluster="System.Convert.ToInt32(double)", file="MetricNumeralTests.cs", label="Entry System.Convert.ToInt32(double)", span="0-0"];
m0_4 [cluster="Unk.Equal", file="MetricNumeralTests.cs", label="Entry Unk.Equal", span=""];
m0_5 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30"];
m0_6 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentOutOfRangeException>(() => input.ToMetric())", span="32-32"];
m0_7 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30"];
m0_57 [cluster="int.ToMetric(bool, bool)", file="MetricNumeralTests.cs", label="Entry int.ToMetric(bool, bool)", span="138-138"];
m0_8 [cluster="Unk.>", file="MetricNumeralTests.cs", label="Entry Unk.>", span=""];
m0_28 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74"];
m0_56 [cluster="int.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry int.ToString(string, System.IFormatProvider)", span="0-0"];
m0_12 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43"];
m0_13 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Assert.Equal(expected, input.FromMetric())", span="45-45"];
m0_14 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43"];
m0_25 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="66-67"];
m0_10 [cluster="lambda expression", file="MetricNumeralTests.cs", label="input.ToMetric()", span="32-32"];
m0_9 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="32-32"];
m0_11 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="32-32"];
m0_20 [cluster="lambda expression", file="MetricNumeralTests.cs", label="input.FromMetric()", span="60-60"];
m0_19 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="60-60"];
m0_21 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="60-60"];
m0_26 [cluster="lambda expression", file="MetricNumeralTests.cs", label="MetricNumeralExtensions.FromMetric(null)", span="67-67"];
m0_27 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="66-67"];
m0_48 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102"];
m0_49 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="var origin = Convert.ToInt32(Math.Pow(10, exponent))", span="104-104"];
m0_50 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="var isEquals = Equals(\r\n                                origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                origin.ToMetric().FromMetric().ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="105-107"];
m0_51 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="!isEquals", span="108-108"];
m0_53 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Assert.True(isEquals)", span="110-110"];
m0_52 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Debugger.Break()", span="109-109"];
m0_54 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102"];
m0_44 [cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry double.ToString(string, System.IFormatProvider)", span="0-0"];
m0_3 [cluster="double.ToMetric(bool, bool)", file="MetricNumeralTests.cs", label="Entry double.ToMetric(bool, bool)", span="111-111"];
m0_47 [cluster="Unk.True", file="MetricNumeralTests.cs", label="Entry Unk.True", span=""];
m0_45 [cluster="object.Equals(object, object)", file="MetricNumeralTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_0 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19"];
m0_1 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", color=green, community=0, file="MetricNumeralTests.cs", label="0: Assert.Equal(expected, input.ToMetric(hasSpace, useSymbol))", span="22-22"];
m0_2 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19"];
m0_16 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58"];
m0_17 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentException>(() => input.FromMetric())", span="60-60"];
m0_18 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58"];
m0_58 [file="MetricNumeralTests.cs", label=double, span=""];
m0_59 [file="MetricNumeralTests.cs", label=string, span=""];
n95 -> n29  [color=red, key=1, label=last, style=dashed];
n96 -> n75  [color=red, key=1, label=double, style=dashed];
n96 -> d88  [color=green, key=1, label=double, style=dashed];
n0 -> n1  [color=red, key=0, style=solid];
n0 -> n3  [color=red, key=1, label=string, style=dashed];
n0 -> n18  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n3  [color=red, key=0, style=solid];
n3 -> n4  [color=red, key=0, style=solid];
n3 -> n17  [color=red, key=2, style=dotted];
n3 -> n3  [color=red, key=1, label=string, style=dashed];
n2 -> n15  [color=red, key=0, style=solid];
n2 -> n16  [color=red, key=2, style=dotted];
n4 -> n5  [color=red, key=0, style=solid];
n4 -> n18  [color=red, key=2, style=dotted];
n4 -> n4  [color=red, key=1, label=string, style=dashed];
n4 -> n7  [color=red, key=1, label=string, style=dashed];
n5 -> n6  [color=red, key=0, style=solid];
n5 -> n7  [color=red, key=0, style=solid];
n5 -> n19  [color=red, key=2, style=dotted];
n18 -> n32  [color=red, key=0, style=solid];
n18 -> n0  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n7 -> n8  [color=red, key=0, style=solid];
n7 -> n21  [color=red, key=2, style=dotted];
n7 -> n7  [color=red, key=1, label=string, style=dashed];
n7 -> n10  [color=red, key=1, label=string, style=dashed];
n7 -> n12  [color=red, key=1, label=string, style=dashed];
n6 -> n15  [color=red, key=0, style=solid];
n6 -> n20  [color=red, key=2, style=dotted];
n8 -> n9  [color=red, key=0, style=solid];
n8 -> n11  [color=red, key=1, label=last, style=dashed];
n8 -> n29  [color=red, key=1, label=last, style=dashed];
n8 -> n13  [color=red, key=1, label=last, style=dashed];
n10 -> n15  [color=red, key=0, style=solid];
n10 -> n23  [color=red, key=2, style=dotted];
n12 -> n13  [color=red, key=0, style=solid];
n12 -> n24  [color=red, key=2, style=dotted];
n12 -> n23  [color=red, key=2, style=dotted];
n12 -> n14  [color=red, key=1, label=number, style=dashed];
n9 -> n10  [color=red, key=0, style=solid];
n9 -> n11  [color=red, key=0, style=solid];
n9 -> n22  [color=red, key=2, style=dotted];
n11 -> n12  [color=red, key=0, style=solid];
n11 -> n29  [color=red, key=1, label="char[]", style=dashed];
n11 -> n13  [color=red, key=1, label=getExponent, style=dashed];
n11 -> n11  [color=red, key=3, label="Local variable System.Func<char[], double> getExponent", style=bold];
n29 -> n30  [color=red, key=0, style=solid];
n29 -> n31  [color=red, key=2, style=dotted];
n13 -> n14  [color=red, key=0, style=solid];
n13 -> n25  [color=red, key=2, style=dotted];
n13 -> n26  [color=red, key=2, style=dotted];
n13 -> n27  [color=red, key=2, style=dotted];
n14 -> n15  [color=red, key=0, style=solid];
n15 -> n0  [color=blue, key=0, style=bold];
n15 -> d0  [color=blue, key=0, style=bold];
n28 -> n29  [color=red, key=0, style=solid];
n28 -> d52  [color=green, key=0, style=solid];
n30 -> n28  [color=blue, key=0, style=bold];
n31 -> n8  [color=red, key=3, label="Parameter variable char value", style=bold];
n31 -> n86  [color=red, key=3, label="method methodReturn int IndexOf", style=bold];
n31 -> n91  [color=red, key=3, label="method methodReturn int IndexOf", style=bold];
n31 -> d99  [color=green, key=3, label="method methodReturn int IndexOf", style=bold];
n31 -> d104  [color=green, key=3, label="method methodReturn int IndexOf", style=bold];
n31 -> d40  [color=darkorchid, key=3, label="Parameter variable char value", style=bold];
n32 -> n33  [color=red, key=0, style=solid];
n32 -> n34  [color=red, key=2, style=dotted];
n32 -> n35  [color=red, key=1, label="lambda expression", style=dashed];
n33 -> n18  [color=blue, key=0, style=bold];
n33 -> d33  [color=blue, key=0, style=bold];
n35 -> n36  [color=red, key=0, style=solid];
n35 -> d59  [color=green, key=0, style=solid];
n36 -> n37  [color=red, key=0, style=solid];
n36 -> n38  [color=red, key=2, style=dotted];
n36 -> n21  [color=red, key=2, style=dotted];
n36 -> n36  [color=red, key=1, label="System.Collections.Generic.KeyValuePair<char, string>", style=dashed];
n37 -> n35  [color=blue, key=0, style=bold];
n39 -> n40  [color=red, key=0, style=solid];
n39 -> n41  [color=red, key=1, label=double, style=dashed];
n39 -> n42  [color=red, key=1, label=double, style=dashed];
n39 -> n44  [color=red, key=1, label=double, style=dashed];
n39 -> n46  [color=red, key=1, label=double, style=dashed];
n39 -> n47  [color=red, key=1, label=double, style=dashed];
n39 -> n58  [color=darkorchid, key=3, label="Parameter variable bool useSymbol", style=bold];
n40 -> n41  [color=red, key=0, style=solid];
n40 -> n42  [color=red, key=0, style=solid];
n40 -> n49  [color=red, key=2, style=dotted];
n41 -> n48  [color=red, key=0, style=solid];
n41 -> n50  [color=red, key=2, style=dotted];
n42 -> n43  [color=red, key=0, style=solid];
n42 -> n44  [color=red, key=0, style=solid];
n42 -> n51  [color=red, key=2, style=dotted];
n44 -> n45  [color=red, key=0, style=solid];
n44 -> n53  [color=red, key=2, style=dotted];
n44 -> n54  [color=red, key=2, style=dotted];
n44 -> n55  [color=red, key=2, style=dotted];
n44 -> n47  [color=red, key=1, label=exponent, style=dashed];
n46 -> n48  [color=red, key=0, style=solid];
n46 -> n50  [color=red, key=2, style=dotted];
n47 -> n48  [color=red, key=0, style=solid];
n47 -> n27  [color=red, key=2, style=dotted];
n47 -> n56  [color=red, key=2, style=dotted];
n47 -> n57  [color=red, key=2, style=dotted];
n43 -> n48  [color=red, key=0, style=solid];
n43 -> n52  [color=red, key=2, style=dotted];
n45 -> n46  [color=red, key=0, style=solid];
n45 -> n47  [color=red, key=0, style=solid];
n48 -> n39  [color=blue, key=0, style=bold];
n48 -> d11  [color=blue, key=0, style=bold];
n57 -> n63  [color=red, key=0, style=solid];
n57 -> n39  [color=darkorchid, key=3, label="Parameter variable bool useSymbol", style=bold];
n58 -> n59  [color=red, key=0, style=solid];
n58 -> n39  [color=darkorchid, key=3, label="method methodReturn string ToMetric", style=bold];
n59 -> n60  [color=red, key=0, style=solid];
n59 -> n61  [color=red, key=2, style=dotted];
n59 -> n62  [color=red, key=2, style=dotted];
n60 -> n58  [color=blue, key=0, style=bold];
n60 -> d6  [color=blue, key=0, style=bold];
n62 -> d6  [color=darkorchid, key=3, label="Parameter variable bool useSymbol", style=bold];
n62 -> d22  [color=darkorchid, key=3, label="method methodReturn string ToMetric", style=bold];
n63 -> n64  [color=red, key=0, style=solid];
n63 -> n38  [color=red, key=2, style=dotted];
n64 -> n57  [color=blue, key=0, style=bold];
n64 -> d75  [color=blue, key=0, style=bold];
n65 -> n66  [color=red, key=0, style=solid];
n65 -> n69  [color=red, key=1, label=double, style=dashed];
n65 -> n75  [color=red, key=1, label=double, style=dashed];
n65 -> n70  [color=red, key=1, label=double, style=dashed];
n65 -> d79  [color=green, key=0, style=solid];
n65 -> d82  [color=green, key=1, label=double, style=dashed];
n65 -> d88  [color=green, key=1, label=double, style=dashed];
n65 -> d83  [color=green, key=1, label=double, style=dashed];
n66 -> n67  [color=red, key=0, style=solid];
n66 -> n68  [color=red, key=1, label=limit, style=dashed];
n66 -> n66  [color=red, key=3, label="Local variable int limit", style=bold];
n69 -> n70  [color=red, key=0, style=solid];
n69 -> n75  [color=red, key=1, label=double, style=dashed];
n69 -> n69  [color=red, key=3, label="Local variable System.Func<double, double, bool> outside", style=bold];
n75 -> n76  [color=red, key=0, style=solid];
n70 -> n71  [color=red, key=0, style=solid];
n70 -> n72  [color=red, key=2, style=dotted];
n70 -> n73  [color=red, key=2, style=dotted];
n67 -> n68  [color=red, key=0, style=solid];
n67 -> n27  [color=red, key=2, style=dotted];
n67 -> n70  [color=red, key=1, label=bigLimit, style=dashed];
n68 -> n69  [color=red, key=0, style=solid];
n68 -> n27  [color=red, key=2, style=dotted];
n68 -> n70  [color=red, key=1, label=smallLimit, style=dashed];
n71 -> n65  [color=blue, key=0, style=bold];
n74 -> n75  [color=red, key=0, style=solid];
n74 -> d88  [color=green, key=0, style=solid];
n76 -> n74  [color=blue, key=0, style=bold];
n77 -> n78  [color=red, key=0, style=solid];
n77 -> n79  [color=red, key=1, label=string, style=dashed];
n77 -> n80  [color=red, key=1, label=string, style=dashed];
n77 -> n82  [color=red, key=1, label=string, style=dashed];
n77 -> d91  [color=green, key=0, style=solid];
n77 -> d92  [color=green, key=1, label=string, style=dashed];
n77 -> d93  [color=green, key=1, label=string, style=dashed];
n77 -> d95  [color=green, key=1, label=string, style=dashed];
n78 -> n79  [color=red, key=0, style=solid];
n79 -> n80  [color=red, key=0, style=solid];
n79 -> n82  [color=red, key=1, label=index, style=dashed];
n80 -> n81  [color=red, key=0, style=solid];
n82 -> n83  [color=red, key=0, style=solid];
n82 -> n24  [color=red, key=2, style=dotted];
n82 -> n84  [color=red, key=2, style=dotted];
n81 -> n82  [color=red, key=0, style=solid];
n81 -> n25  [color=red, key=2, style=dotted];
n83 -> n77  [color=blue, key=0, style=bold];
n85 -> n86  [color=red, key=0, style=solid];
n85 -> n87  [color=red, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
n85 -> n88  [color=red, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
n85 -> d99  [color=green, key=0, style=solid];
n85 -> d100  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
n85 -> d101  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
n86 -> n87  [color=red, key=0, style=solid];
n86 -> n88  [color=red, key=1, label=i, style=dashed];
n86 -> n89  [color=red, key=1, label=i, style=dashed];
n86 -> n90  [color=red, key=1, label=i, style=dashed];
n86 -> n86  [color=red, key=3, label="Local variable int i", style=bold];
n87 -> n88  [color=red, key=0, style=solid];
n87 -> n91  [color=red, key=0, style=solid];
n88 -> n89  [color=red, key=0, style=solid];
n88 -> n90  [color=red, key=0, style=solid];
n88 -> n93  [color=red, key=2, style=dotted];
n88 -> n94  [color=red, key=2, style=dotted];
n89 -> n92  [color=red, key=0, style=solid];
n90 -> n87  [color=red, key=0, style=solid];
n90 -> n90  [color=red, key=1, label=i, style=dashed];
n91 -> n92  [color=red, key=0, style=solid];
n92 -> n85  [color=blue, key=0, style=bold];
d1 -> d1  [color=green, key=1, label=string, style=dashed];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d4  [color=green, key=2, style=dotted];
d0 -> d1  [color=green, key=0, style=solid];
d0 -> d4  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
d0 -> d5  [color=darkorchid, key=3, label="method methodReturn double FromMetric", style=bold];
d2 -> n15  [color=green, key=0, style=solid];
d2 -> d5  [color=green, key=2, style=dotted];
d4 -> d23  [color=green, key=0, style=solid];
d4 -> d25  [color=green, key=1, label=string, style=dashed];
d4 -> d0  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
d4 -> d33  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
d5 -> d37  [color=green, key=0, style=solid];
d5 -> d0  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
d7 -> n60  [color=green, key=0, style=solid];
d7 -> n61  [color=green, key=2, style=dotted];
d7 -> n62  [color=green, key=2, style=dotted];
d6 -> d7  [color=green, key=0, style=solid];
d6 -> n62  [color=darkorchid, key=3, label="method methodReturn string ToMetric", style=bold];
d12 -> d13  [color=green, key=0, style=solid];
d12 -> d14  [color=green, key=0, style=solid];
d12 -> n49  [color=green, key=2, style=dotted];
d11 -> d12  [color=green, key=0, style=solid];
d11 -> d13  [color=green, key=1, label=double, style=dashed];
d11 -> d14  [color=green, key=1, label=double, style=dashed];
d11 -> d16  [color=green, key=1, label=double, style=dashed];
d13 -> n48  [color=green, key=0, style=solid];
d13 -> n50  [color=green, key=2, style=dotted];
d14 -> d15  [color=green, key=0, style=solid];
d14 -> d16  [color=green, key=0, style=solid];
d14 -> n51  [color=green, key=2, style=dotted];
d15 -> n48  [color=green, key=0, style=solid];
d15 -> n52  [color=green, key=2, style=dotted];
d16 -> n48  [color=green, key=0, style=solid];
d16 -> d22  [color=green, key=2, style=dotted];
d22 -> d62  [color=green, key=0, style=solid];
d22 -> d63  [color=green, key=1, label=double, style=dashed];
d22 -> n62  [color=darkorchid, key=3, label="Parameter variable bool useSymbol", style=bold];
d23 -> d24  [color=green, key=0, style=solid];
d23 -> d25  [color=green, key=0, style=solid];
d24 -> d30  [color=green, key=0, style=solid];
d24 -> n16  [color=green, key=2, style=dotted];
d25 -> d25  [color=green, key=1, label=string, style=dashed];
d25 -> d26  [color=green, key=0, style=solid];
d25 -> n17  [color=green, key=2, style=dotted];
d26 -> d26  [color=green, key=1, label=string, style=dashed];
d26 -> d27  [color=green, key=0, style=solid];
d26 -> d33  [color=green, key=2, style=dotted];
d26 -> d29  [color=green, key=1, label=string, style=dashed];
d30 -> d4  [color=blue, key=0, style=bold];
d27 -> d28  [color=green, key=0, style=solid];
d27 -> d29  [color=green, key=0, style=solid];
d27 -> n19  [color=green, key=2, style=dotted];
d33 -> d55  [color=green, key=0, style=solid];
d33 -> d4  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
d29 -> d30  [color=green, key=0, style=solid];
d29 -> n21  [color=green, key=2, style=dotted];
d28 -> d30  [color=green, key=0, style=solid];
d28 -> n20  [color=green, key=2, style=dotted];
d37 -> d38  [color=green, key=0, style=solid];
d37 -> n22  [color=green, key=2, style=dotted];
d37 -> d40  [color=green, key=2, style=dotted];
d37 -> n23  [color=green, key=2, style=dotted];
d38 -> d5  [color=blue, key=0, style=bold];
d40 -> d42  [color=green, key=0, style=solid];
d40 -> d52  [color=green, key=1, label=char, style=dashed];
d40 -> d43  [color=green, key=1, label=string, style=dashed];
d40 -> d44  [color=green, key=1, label=char, style=dashed];
d40 -> d5  [color=darkorchid, key=3, label="Parameter variable char last", style=bold];
d42 -> d42  [color=green, key=3, label="Local variable System.Func<char[], double> getExponent", style=bold];
d42 -> d43  [color=green, key=0, style=solid];
d42 -> d52  [color=green, key=1, label="char[]", style=dashed];
d42 -> d44  [color=green, key=1, label=getExponent, style=dashed];
d43 -> d44  [color=green, key=0, style=solid];
d43 -> n24  [color=green, key=2, style=dotted];
d43 -> n23  [color=green, key=2, style=dotted];
d43 -> d45  [color=green, key=1, label=number, style=dashed];
d52 -> n30  [color=green, key=0, style=solid];
d52 -> n31  [color=green, key=2, style=dotted];
d44 -> d45  [color=green, key=0, style=solid];
d44 -> n25  [color=green, key=2, style=dotted];
d44 -> n26  [color=green, key=2, style=dotted];
d44 -> n27  [color=green, key=2, style=dotted];
d108 -> d52  [color=green, key=1, label=char, style=dashed];
d45 -> d46  [color=green, key=0, style=solid];
d46 -> d40  [color=blue, key=0, style=bold];
d55 -> n33  [color=green, key=0, style=solid];
d55 -> n34  [color=green, key=2, style=dotted];
d55 -> n35  [color=green, key=1, label="lambda expression", style=dashed];
d59 -> d59  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<char, string>", style=dashed];
d59 -> n37  [color=green, key=0, style=solid];
d59 -> n38  [color=green, key=2, style=dotted];
d59 -> n21  [color=green, key=2, style=dotted];
d62 -> d63  [color=green, key=0, style=solid];
d62 -> n53  [color=green, key=2, style=dotted];
d62 -> n54  [color=green, key=2, style=dotted];
d62 -> n55  [color=green, key=2, style=dotted];
d69 -> d62  [color=green, key=3, label="Parameter variable int exponent", style=bold];
d69 -> d70  [color=green, key=0, style=solid];
d69 -> d71  [color=green, key=1, label=int, style=dashed];
d69 -> d72  [color=green, key=1, label=bool, style=dashed];
d69 -> d22  [color=darkorchid, key=3, label="Parameter variable bool useSymbol", style=bold];
d63 -> d64  [color=green, key=0, style=solid];
d63 -> d68  [color=green, key=2, style=dotted];
d63 -> n50  [color=green, key=2, style=dotted];
d63 -> d69  [color=green, key=2, style=dotted];
d64 -> d22  [color=blue, key=0, style=bold];
d70 -> d71  [color=green, key=0, style=solid];
d70 -> n27  [color=green, key=2, style=dotted];
d70 -> d72  [color=green, key=1, label=number, style=dashed];
d71 -> d72  [color=green, key=0, style=solid];
d71 -> n56  [color=green, key=2, style=dotted];
d72 -> d73  [color=green, key=0, style=solid];
d72 -> d75  [color=green, key=2, style=dotted];
d75 -> d71  [color=green, key=3, label="Parameter variable char symbol", style=bold];
d75 -> d76  [color=green, key=0, style=solid];
d75 -> d69  [color=darkorchid, key=3, label="Parameter variable bool useSymbol", style=bold];
d73 -> d69  [color=blue, key=0, style=bold];
d76 -> n64  [color=green, key=0, style=solid];
d76 -> n38  [color=green, key=2, style=dotted];
d79 -> d79  [color=green, key=3, label="Local variable int limit", style=bold];
d79 -> d80  [color=green, key=0, style=solid];
d79 -> d81  [color=green, key=1, label=limit, style=dashed];
d80 -> d83  [color=green, key=1, label=bigLimit, style=dashed];
d80 -> d81  [color=green, key=0, style=solid];
d80 -> n27  [color=green, key=2, style=dotted];
d81 -> d82  [color=green, key=0, style=solid];
d81 -> d83  [color=green, key=1, label=smallLimit, style=dashed];
d81 -> n27  [color=green, key=2, style=dotted];
d82 -> d82  [color=green, key=3, label="Local variable System.Func<double, double, bool> outside", style=bold];
d82 -> d83  [color=green, key=0, style=solid];
d82 -> d88  [color=green, key=1, label=double, style=dashed];
d83 -> n71  [color=green, key=0, style=solid];
d83 -> n72  [color=green, key=2, style=dotted];
d83 -> n73  [color=green, key=2, style=dotted];
d88 -> n76  [color=green, key=0, style=solid];
d91 -> d92  [color=green, key=0, style=solid];
d92 -> d93  [color=green, key=0, style=solid];
d92 -> d95  [color=green, key=1, label=index, style=dashed];
d93 -> d94  [color=green, key=0, style=solid];
d95 -> n83  [color=green, key=0, style=solid];
d95 -> n24  [color=green, key=2, style=dotted];
d95 -> n84  [color=green, key=2, style=dotted];
d94 -> d95  [color=green, key=0, style=solid];
d94 -> n25  [color=green, key=2, style=dotted];
d99 -> d99  [color=green, key=3, label="Local variable int i", style=bold];
d99 -> d100  [color=green, key=0, style=solid];
d99 -> d101  [color=green, key=1, label=i, style=dashed];
d99 -> d102  [color=green, key=1, label=i, style=dashed];
d99 -> d103  [color=green, key=1, label=i, style=dashed];
d100 -> d101  [color=green, key=0, style=solid];
d100 -> d104  [color=green, key=0, style=solid];
d101 -> d102  [color=green, key=0, style=solid];
d101 -> d103  [color=green, key=0, style=solid];
d101 -> n93  [color=green, key=2, style=dotted];
d101 -> n94  [color=green, key=2, style=dotted];
d102 -> n92  [color=green, key=0, style=solid];
d103 -> d100  [color=green, key=0, style=solid];
d103 -> d103  [color=green, key=1, label=i, style=dashed];
d104 -> n92  [color=green, key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_8  [key=2, style=dotted];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_24 -> m0_22  [color=blue, key=0, style=bold];
m0_15 -> m0_15  [color=darkorchid, key=3, label="Local variable bool b", style=bold];
m0_15 -> m0_36  [color=darkorchid, key=3, label="Local variable bool b", style=bold];
m0_29 -> m0_30  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_39  [color=darkseagreen4, key=1, label=b, style=dashed];
m0_30 -> m0_41  [color=darkseagreen4, key=1, label=b, style=dashed];
m0_30 -> m0_30  [color=green, key=3, label="Local variable bool b", style=bold];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_31 -> m0_40  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_31 -> m0_31  [color=darkorchid, key=3, label="Local variable int i", style=bold];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_39  [color=darkseagreen4, key=1, label=b, style=dashed];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=b, style=dashed];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_47  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_41  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> n27  [key=2, style=dotted];
m0_33 -> m0_36  [color=darkseagreen4, key=1, label=origin, style=dashed];
m0_40 -> m0_32  [key=0, style=solid];
m0_40 -> m0_40  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_3  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_44  [key=2, style=dotted];
m0_36 -> m0_45  [key=2, style=dotted];
m0_36 -> m0_39  [color=darkseagreen4, key=1, label=c, style=dashed];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_15  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_46  [key=2, style=dotted];
m0_42 -> m0_29  [color=blue, key=0, style=bold];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_10  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=2, style=dotted];
m0_6 -> m0_9  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_7 -> m0_5  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=2, style=dotted];
m0_13 -> m0_4  [key=2, style=dotted];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_25 -> m0_26  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_3  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_11 -> m0_9  [color=blue, key=0, style=bold];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_15  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_21 -> m0_19  [color=blue, key=0, style=bold];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_28  [key=2, style=dotted];
m0_27 -> m0_25  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> n27  [key=2, style=dotted];
m0_49 -> m0_55  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_56  [key=2, style=dotted];
m0_50 -> m0_57  [key=2, style=dotted];
m0_50 -> m0_15  [key=2, style=dotted];
m0_50 -> m0_44  [key=2, style=dotted];
m0_50 -> m0_45  [key=2, style=dotted];
m0_50 -> m0_53  [color=darkseagreen4, key=1, label=isEquals, style=dashed];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_47  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_46  [key=2, style=dotted];
m0_54 -> m0_48  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=2, style=dotted];
m0_1 -> m0_4  [color=green, key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_8  [key=2, style=dotted];
m0_17 -> m0_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_18 -> m0_16  [color=blue, key=0, style=bold];
m0_58 -> m0_10  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_59 -> m0_20  [color=darkseagreen4, key=1, label=string, style=dashed];
}
