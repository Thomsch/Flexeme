digraph  {
n109 [label="System.StringComparer", span=""];
n110 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n111 [label="System.StringComparer", span=""];
n112 [label=optionSpecs, span=""];
n113 [label="System.Globalization.CultureInfo", span=""];
n114 [label=token, span=""];
n0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return InstanceBuilder.Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-30"];
n5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22"];
n12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
n6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer))", span="23-25"];
n16 [cluster="lambda expression", label="NameLookup.WithSeparator(name, optionSpecs, nameComparer)", span="25-25"];
n2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="20-27"];
n9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
n7 [cluster="lambda expression", label="return explodedTokens;", span="26-26"];
n10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="20-27"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
n14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
n18 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
n19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var instance = factory()", span="40-40"];
n20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="42-42"];
n24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="57-57"];
n26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer))", span="61-63"];
n66 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer)", span="63-63"];
n27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="65-69"];
n70 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="68-68"];
n28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="71-74"];
n74 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="74-74"];
n29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameInfo.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="76-78"];
n77 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="78-78"];
n35 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    instance,\r\n                    new[] { new HelpRequestedError() });", span="44-47"];
n22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specProps = instance.GetType().GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="50-51"];
n31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = instance\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsJust(),\r\n                    sp => sp.Value.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                    sp => sp.Specification.DefaultValue.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing(),\r\n                    sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="82-93"];
n36 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n37 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n38 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
n23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecs = (from pt in specProps select pt.Specification)\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="53-55"];
n41 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n42 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
n59 [cluster="lambda expression", label="Entry lambda expression", span="50-51"];
n43 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
n44 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokens = tokenizerResult.Value", span="59-59"];
n45 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="98-105"];
n46 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
n65 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
n47 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
n48 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n69 [cluster="lambda expression", label="Entry lambda expression", span="68-68"];
n30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="80-80"];
n49 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="16-16"];
n73 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
n50 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
n51 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n52 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
n76 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n53 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup)\r\n                .OfType<Just<Error>>().Select(e => e.Value)", span="95-96"];
n54 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="38-38"];
n80 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
n84 [cluster="lambda expression", label="Entry lambda expression", span="85-85"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
n92 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n95 [cluster="lambda expression", label="Entry lambda expression", span="90-92"];
n100 [cluster="lambda expression", label="Entry lambda expression", span="93-93"];
n55 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="40-40"];
n56 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n106 [cluster="lambda expression", label="Entry lambda expression", span="96-96"];
n34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n57 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n58 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
n39 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
n40 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
n60 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="50-51"];
n61 [cluster="lambda expression", label="Exit lambda expression", span="50-51"];
n62 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="74-74"];
n63 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
n64 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21"];
n67 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
n68 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n71 [cluster="lambda expression", label="Exit lambda expression", span="68-68"];
n72 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n75 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
n78 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n79 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
n81 [cluster="lambda expression", label="sp.Value.IsJust()", span="84-84"];
n82 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
n83 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
n85 [cluster="lambda expression", label="sp.Value.FromJust()", span="85-85"];
n86 [cluster="lambda expression", label="Exit lambda expression", span="85-85"];
n87 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
n89 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="87-87"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
n91 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
n93 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="88-88"];
n94 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n96 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="90-92"];
n97 [cluster="lambda expression", label="Exit lambda expression", span="90-92"];
n98 [cluster="System.Type.ToDescriptorKind()", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
n99 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
n101 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="93-93"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="93-93"];
n103 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n104 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n105 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="81-81"];
n107 [cluster="lambda expression", label="e.Value", span="96-96"];
n108 [cluster="lambda expression", label="Exit lambda expression", span="96-96"];
d1 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''ar'', new ArabicFormatter())", prediction=0, span="8-8"];
d50 [label="Humanizer.Configuration.FormatterRegistry", span=""];
d0 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", label="Entry Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", span="6-6"];
d2 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''he'', new HebrewFormatter())", prediction=0, span="9-9"];
d35 [cluster="Humanizer.Localisation.Formatters.ArabicFormatter.ArabicFormatter()", label="Entry Humanizer.Localisation.Formatters.ArabicFormatter.ArabicFormatter()", span="7-7"];
d36 [cluster="Humanizer.Configuration.LocaliserRegistry<TLocaliser>.Register(string, TLocaliser)", label="Entry Humanizer.Configuration.LocaliserRegistry<TLocaliser>.Register(string, TLocaliser)", span="54-54"];
d3 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''ro'', new RomanianFormatter())", prediction=0, span="10-10"];
d37 [cluster="Humanizer.Localisation.Formatters.HebrewFormatter.HebrewFormatter()", label="Entry Humanizer.Localisation.Formatters.HebrewFormatter.HebrewFormatter()", span="7-7"];
d4 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''ru'', new RussianFormatter())", prediction=0, span="11-11"];
d38 [cluster="Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", label="Entry Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", span="6-6"];
d5 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''sl'', new SlovenianFormatter())", prediction=0, span="12-12"];
d39 [cluster="Humanizer.Localisation.Formatters.RussianFormatter.RussianFormatter()", label="Entry Humanizer.Localisation.Formatters.RussianFormatter.RussianFormatter()", span="6-6"];
d6 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''sr'', new SerbianFormatter(''sr''))", prediction=0, span="13-13"];
d40 [cluster="Humanizer.Localisation.Formatters.SlovenianFormatter.SlovenianFormatter()", label="Entry Humanizer.Localisation.Formatters.SlovenianFormatter.SlovenianFormatter()", span="7-7"];
d7 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="Register(''sr-Latn'', new SerbianFormatter(''sr-Latn''))", prediction=0, span="14-14"];
d41 [cluster="Humanizer.Localisation.Formatters.SerbianFormatter.SerbianFormatter(string)", label="Entry Humanizer.Localisation.Formatters.SerbianFormatter.SerbianFormatter(string)", span="6-6"];
d8 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterCzechSlovakPolishFormatter(''cs'')", prediction=0, span="15-15"];
d9 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterCzechSlovakPolishFormatter(''pl'')", prediction=0, span="16-16"];
d42 [cluster="Humanizer.Configuration.FormatterRegistry.RegisterCzechSlovakPolishFormatter(string)", label="Entry Humanizer.Configuration.FormatterRegistry.RegisterCzechSlovakPolishFormatter(string)", span="48-48"];
d10 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterCzechSlovakPolishFormatter(''sk'')", prediction=0, span="17-17"];
d11 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''bg'')", prediction=0, span="18-18"];
d12 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''pt-BR'')", prediction=0, span="19-19"];
d43 [cluster="Humanizer.Configuration.FormatterRegistry.RegisterDefaultFormatter(string)", label="Entry Humanizer.Configuration.FormatterRegistry.RegisterDefaultFormatter(string)", span="43-43"];
d13 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''sv'')", prediction=0, span="20-20"];
d14 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''tr'')", prediction=0, span="21-21"];
d15 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''vi'')", prediction=0, span="22-22"];
d16 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''en-US'')", prediction=0, span="23-23"];
d17 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''af'')", prediction=0, span="24-24"];
d18 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''da'')", prediction=0, span="25-25"];
d19 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''de'')", prediction=0, span="26-26"];
d20 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''el'')", prediction=0, span="27-27"];
d21 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''es'')", prediction=0, span="28-28"];
d22 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''fa'')", prediction=0, span="29-29"];
d23 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''fi-FI'')", prediction=0, span="30-30"];
d24 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''fr'')", prediction=0, span="31-31"];
d25 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''fr-BE'')", prediction=0, span="32-32"];
d26 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''hu'')", prediction=0, span="33-33"];
d27 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''id'')", prediction=0, span="34-34"];
d28 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''ja'')", prediction=0, span="35-35"];
d29 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''nb'')", prediction=0, span="36-36"];
d30 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''nb-NO'')", prediction=0, span="37-37"];
d31 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''nl'')", prediction=0, span="38-38"];
d32 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''bn-BD'')", prediction=0, span="39-39"];
d33 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", color=green, community=0, label="RegisterDefaultFormatter(''it'')", prediction=0, span="40-40"];
d34 [cluster="Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", label="Exit Humanizer.Configuration.FormatterRegistry.FormatterRegistry()", span="6-6"];
d44 [cluster="Humanizer.Configuration.FormatterRegistry.RegisterDefaultFormatter(string)", color=green, community=0, label="Register(localeCode, new DefaultFormatter(localeCode))", prediction=0, span="45-45"];
d45 [cluster="Humanizer.Configuration.FormatterRegistry.RegisterDefaultFormatter(string)", label="Exit Humanizer.Configuration.FormatterRegistry.RegisterDefaultFormatter(string)", span="43-43"];
d46 [cluster="Humanizer.Localisation.Formatters.DefaultFormatter.DefaultFormatter(string)", label="Entry Humanizer.Localisation.Formatters.DefaultFormatter.DefaultFormatter(string)", span="16-16"];
d47 [cluster="Humanizer.Configuration.FormatterRegistry.RegisterCzechSlovakPolishFormatter(string)", color=green, community=0, label="Register(localeCode, new CzechSlovakPolishFormatter(localeCode))", prediction=0, span="50-50"];
d48 [cluster="Humanizer.Configuration.FormatterRegistry.RegisterCzechSlovakPolishFormatter(string)", label="Exit Humanizer.Configuration.FormatterRegistry.RegisterCzechSlovakPolishFormatter(string)", span="48-48"];
d49 [cluster="Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.CzechSlovakPolishFormatter(string)", label="Entry Humanizer.Localisation.Formatters.CzechSlovakPolishFormatter.CzechSlovakPolishFormatter(string)", span="6-6"];
n109 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n109 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n110 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n110 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n111 -> n66  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n111 -> n77  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n112 -> n66  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n113 -> n70  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n113 -> n74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n114 -> n77  [color=darkseagreen4, key=1, label=token, style=dashed];
n0 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n5 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n6 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n3 -> n66  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n70  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n77  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n4 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n19 -> n21  [color=darkseagreen4, key=1, label=instance, style=dashed];
n24 -> n33  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n26 -> n65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n33  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
n28 -> n73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n28 -> n33  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
n29 -> n76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n29 -> n77  [color=darkseagreen4, key=1, label=token, style=dashed];
n29 -> n33  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
n22 -> n59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n33  [color=darkseagreen4, key=1, label=instance, style=dashed];
n23 -> n66  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n32 -> n106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d50 -> d1  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d2  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d3  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d4  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d5  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d6  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d7  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d8  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d9  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d10  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d11  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d12  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d13  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d14  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d15  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d16  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d17  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d18  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d19  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d20  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d21  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d22  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d23  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d24  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d25  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d26  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d27  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d28  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d29  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d30  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d31  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d32  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d33  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d44  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
d50 -> d47  [color=green, key=1, label="Humanizer.Configuration.FormatterRegistry", style=dashed];
}
