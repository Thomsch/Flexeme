digraph  {
n0 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="Entry Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", span="45-45"];
n1 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="var transformedInput = quantity == 1\r\n                ? input.Singularize(Plurality.CouldBeEither)\r\n                : input.Pluralize(Plurality.CouldBeEither)", span="47-49"];
n2 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="showQuantityAs == ShowQuantityAs.None", span="51-51"];
n4 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="showQuantityAs == ShowQuantityAs.Numeric", span="54-54"];
n6 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="return string.Format(''{0} {1}'', quantity.ToWords(), transformedInput);", span="57-57"];
n8 [cluster="string.Singularize(Humanizer.Plurality)", label="Entry string.Singularize(Humanizer.Plurality)", span="194-194"];
n9 [cluster="string.Pluralize(Humanizer.Plurality)", label="Entry string.Pluralize(Humanizer.Plurality)", span="170-170"];
n3 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="return transformedInput;", span="52-52"];
n7 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="Exit Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", span="45-45"];
n11 [cluster="int.ToWords()", label="Entry int.ToWords()", span="32-32"];
n10 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
d1 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", color=green, community=0, label="return input.ToQuantity(quantity, showQuantityAs, format: null, formatProvider: null);", prediction=0, span="48-48"];
d0 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", label="Entry Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", span="46-46"];
d3 [cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", span="69-69"];
d5 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, string, System.IFormatProvider)", color=green, community=0, label="return input.ToQuantity(quantity, showQuantityAs: ShowQuantityAs.Numeric, format: format, formatProvider: formatProvider);", prediction=1, span="66-66"];
d4 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, string, System.IFormatProvider)", label="Entry Humanizer.ToQuantityExtensions.ToQuantity(string, int, string, System.IFormatProvider)", span="64-64"];
d6 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, string, System.IFormatProvider)", label="Exit Humanizer.ToQuantityExtensions.ToQuantity(string, int, string, System.IFormatProvider)", span="64-64"];
d12 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", color=green, community=0, label="return string.Format(formatProvider, ''{0} {1}'', quantity.ToString(format, formatProvider), transformedInput);", prediction=2, span="79-79"];
d7 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="Entry Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", span="69-69"];
d8 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="var transformedInput = quantity == 1\r\n                ? input.Singularize(Plurality.CouldBeEither)\r\n                : input.Pluralize(Plurality.CouldBeEither)", span="71-73"];
d11 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="showQuantityAs == ShowQuantityAs.Numeric", span="78-78"];
d14 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="Exit Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", span="69-69"];
d17 [cluster="int.ToString(string, System.IFormatProvider)", label="Entry int.ToString(string, System.IFormatProvider)", span="0-0"];
d18 [cluster="string.Format(System.IFormatProvider, string, object, object)", label="Entry string.Format(System.IFormatProvider, string, object, object)", span="0-0"];
d9 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="showQuantityAs == ShowQuantityAs.None", span="75-75"];
d13 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="return string.Format(''{0} {1}'', quantity.ToWords(), transformedInput);", span="81-81"];
d10 [cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs, string, System.IFormatProvider)", label="return transformedInput;", span="76-76"];
n0 -> n2  [color=darkseagreen4, key=1, label="Humanizer.ShowQuantityAs", style=dashed];
n0 -> n4  [color=darkseagreen4, key=1, label="Humanizer.ShowQuantityAs", style=dashed];
n0 -> n6  [color=darkseagreen4, key=1, label=int, style=dashed];
n1 -> n3  [color=darkseagreen4, key=1, label=transformedInput, style=dashed];
n1 -> n6  [color=darkseagreen4, key=1, label=transformedInput, style=dashed];
d7 -> d12  [color=green, key=1, label=int, style=dashed];
d7 -> d9  [color=darkseagreen4, key=1, label="Humanizer.ShowQuantityAs", style=dashed];
d7 -> d11  [color=darkseagreen4, key=1, label="Humanizer.ShowQuantityAs", style=dashed];
d7 -> d13  [color=darkseagreen4, key=1, label=int, style=dashed];
d8 -> d12  [color=green, key=1, label=transformedInput, style=dashed];
d8 -> d10  [color=darkseagreen4, key=1, label=transformedInput, style=dashed];
d8 -> d13  [color=darkseagreen4, key=1, label=transformedInput, style=dashed];
}
