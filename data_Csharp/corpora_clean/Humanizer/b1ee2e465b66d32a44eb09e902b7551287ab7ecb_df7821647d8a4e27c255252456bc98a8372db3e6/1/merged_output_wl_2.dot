digraph  {
n384 [label=fakeOptions, span=""];
n385 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, label="0: var fakeOptions = new FakeOptions()", span="20-20"];
n2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
n6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
n3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, label="0: var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
n13 [cluster="lambda expression", color=red, community=0, label="1: fakeOptions", span="27-27"];
n7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
n8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
n4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, label="0: Assert.True(expectedResult.Equals(result))", span="33-33"];
n9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
n11 [cluster="Unk.True", label="Entry Unk.True", span=""];
n14 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
n17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="48-48"];
n18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="lambda expression", label="new FakeOptions()", span="48-48"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="48-48"];
n23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
n25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
n26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n28 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="71-71"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
n30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
n31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
n33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
n34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n37 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="95-95"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
n39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
n40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
n42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n45 [cluster="lambda expression", label="new FakeOptions()", span="117-117"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
n49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
n51 [cluster="lambda expression", label="Entry lambda expression", span="140-140"];
n50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n52 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="140-140"];
n54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
n55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
n57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
n59 [cluster="lambda expression", label="Entry lambda expression", span="162-162"];
n58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n60 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
n61 [cluster="lambda expression", label="Exit lambda expression", span="162-162"];
n62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
n63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
n65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
n68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
n69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="181-181"];
n67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n71 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="181-181"];
n73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
n75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
n78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
n76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
n79 [cluster="lambda expression", label="Entry lambda expression", span="200-200"];
n77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n80 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
n81 [cluster="lambda expression", label="Exit lambda expression", span="200-200"];
n82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
n83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
n85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
n86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
n87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n89 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
n91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
n93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
n94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
n96 [cluster="lambda expression", label="Entry lambda expression", span="239-239"];
n95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n97 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
n98 [cluster="lambda expression", label="Exit lambda expression", span="239-239"];
n99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
n100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
n102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
n103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n104 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n106 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="263-263"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
n108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
n109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
n111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
n114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
n112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
n113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n116 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="282-282"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
n118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
n120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
n121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
n122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n124 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="301-301"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
n126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
n128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
n129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
n131 [cluster="lambda expression", label="Entry lambda expression", span="320-320"];
n130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n132 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="320-320"];
n133 [cluster="lambda expression", label="Exit lambda expression", span="320-320"];
n134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
n136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
n139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
n137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
n140 [cluster="lambda expression", label="Entry lambda expression", span="345-345"];
n138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n141 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="345-345"];
n142 [cluster="lambda expression", label="Exit lambda expression", span="345-345"];
n143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
n145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
n147 [cluster="lambda expression", label="Entry lambda expression", span="368-368"];
n146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n148 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
n149 [cluster="lambda expression", label="Exit lambda expression", span="368-368"];
n150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
n151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
n153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
n155 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
n154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n156 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
n157 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
n158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
n159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
n161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
n163 [cluster="lambda expression", label="Entry lambda expression", span="412-412"];
n162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n164 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
n165 [cluster="lambda expression", label="Exit lambda expression", span="412-412"];
n166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
n168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
n170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
n169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
n172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n173 [cluster="lambda expression", label="Entry lambda expression", span="441-441"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="442-444"];
n171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n174 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="441-441"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="441-441"];
n177 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
n181 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
n185 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="442-444"];
n179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
n180 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n182 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n184 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n186 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
n190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
n193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
n191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
n194 [cluster="lambda expression", label="Entry lambda expression", span="467-467"];
n192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n195 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="467-467"];
n196 [cluster="lambda expression", label="Exit lambda expression", span="467-467"];
n197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
n198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
n200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
n203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
n201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
n204 [cluster="lambda expression", label="Entry lambda expression", span="487-487"];
n202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n205 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="487-487"];
n207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
n209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
n210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
n211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n213 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
n214 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
n215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
n217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
n220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
n218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
n221 [cluster="lambda expression", label="Entry lambda expression", span="527-527"];
n219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n222 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
n223 [cluster="lambda expression", label="Exit lambda expression", span="527-527"];
n224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
n226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
n227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
n229 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
n228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n230 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="545-545"];
n231 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
n232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
n233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
n235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
n236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
n238 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
n237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n239 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
n240 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
n241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
n243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
n246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
n244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
n247 [cluster="lambda expression", label="Entry lambda expression", span="583-583"];
n245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n248 [cluster="lambda expression", label="new FakeOptions()", span="583-583"];
n249 [cluster="lambda expression", label="Exit lambda expression", span="583-583"];
n250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
n252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
n253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
n255 [cluster="lambda expression", label="Entry lambda expression", span="602-602"];
n254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n256 [cluster="lambda expression", label="new FakeOptions()", span="602-602"];
n257 [cluster="lambda expression", label="Exit lambda expression", span="602-602"];
n258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
n260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
n261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
n263 [cluster="lambda expression", label="Entry lambda expression", span="621-621"];
n262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n264 [cluster="lambda expression", label="new FakeOptions()", span="621-621"];
n265 [cluster="lambda expression", label="Exit lambda expression", span="621-621"];
n266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
n268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
n271 [cluster="lambda expression", label="Entry lambda expression", span="641-641"];
n269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n270 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n272 [cluster="lambda expression", label="new FakeOptions()", span="641-641"];
n273 [cluster="lambda expression", label="Exit lambda expression", span="641-641"];
n274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
n276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
n277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
n279 [cluster="lambda expression", label="Entry lambda expression", span="660-660"];
n278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n280 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="660-660"];
n281 [cluster="lambda expression", label="Exit lambda expression", span="660-660"];
n282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
n283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
n284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
n285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
n287 [cluster="lambda expression", label="Entry lambda expression", span="682-682"];
n286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
n288 [cluster="lambda expression", label="new FakeOptions()", span="682-682"];
n289 [cluster="lambda expression", label="Exit lambda expression", span="682-682"];
n290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
n291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
n292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
n293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
n295 [cluster="lambda expression", label="Entry lambda expression", span="701-701"];
n294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
n296 [cluster="lambda expression", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
n297 [cluster="lambda expression", label="Exit lambda expression", span="701-701"];
n298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
n299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
n300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
n301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
n303 [cluster="lambda expression", label="Entry lambda expression", span="723-723"];
n302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
n304 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="723-723"];
n305 [cluster="lambda expression", label="Exit lambda expression", span="723-723"];
n306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
n307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
n308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
n309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
n311 [cluster="lambda expression", label="Entry lambda expression", span="745-745"];
n310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
n312 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="745-745"];
n313 [cluster="lambda expression", label="Exit lambda expression", span="745-745"];
n314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
n315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
n317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
n318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
n316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="result.Value.FileName != null", span="771-771"];
n321 [cluster="lambda expression", label="Entry lambda expression", span="765-765"];
n319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
n320 [cluster="Unk.get_IsSome", label="Entry Unk.get_IsSome", span=""];
n322 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="765-765"];
n323 [cluster="lambda expression", label="Exit lambda expression", span="765-765"];
n324 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
n325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
n326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
n328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
n329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
n327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="result.Value.Offset != null", span="795-795"];
n331 [cluster="lambda expression", label="Entry lambda expression", span="789-789"];
n330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
n332 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="789-789"];
n333 [cluster="lambda expression", label="Exit lambda expression", span="789-789"];
n334 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
n335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Action test = () => InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinZero(),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
n336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Assert.Throws<ApplicationException>(test)", span="816-816"];
n337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
n338 [cluster="Unk.>", label="Entry Unk.>", span=""];
n339 [cluster="lambda expression", label="Entry lambda expression", span="809-813"];
n340 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinZero(),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
n341 [cluster="lambda expression", label="Exit lambda expression", span="809-813"];
n342 [cluster="lambda expression", label="Entry lambda expression", span="810-810"];
n343 [cluster="lambda expression", label="new FakeOptionsWithMinZero()", span="810-810"];
n344 [cluster="lambda expression", label="Exit lambda expression", span="810-810"];
n345 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
n346 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
n347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Action test = () => InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
n348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Assert.Throws<ApplicationException>(test)", span="830-830"];
n349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
n350 [cluster="lambda expression", label="Entry lambda expression", span="823-827"];
n351 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
n352 [cluster="lambda expression", label="Exit lambda expression", span="823-827"];
n353 [cluster="Unk.Build", label="Entry Unk.Build", span=""];
n354 [cluster="lambda expression", label="Entry lambda expression", span="824-824"];
n355 [cluster="lambda expression", label="new FakeOptionsWithMaxZero()", span="824-824"];
n356 [cluster="lambda expression", label="Exit lambda expression", span="824-824"];
n357 [cluster="FakeOptionsWithMaxZero.cstr", label="Entry FakeOptionsWithMaxZero.cstr", span=""];
n358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
n359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Action test = () => InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
n360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Assert.Throws<ApplicationException>(test)", span="844-844"];
n361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
n362 [cluster="lambda expression", label="Entry lambda expression", span="837-841"];
n363 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
n364 [cluster="lambda expression", label="Exit lambda expression", span="837-841"];
n365 [cluster="lambda expression", label="Entry lambda expression", span="838-838"];
n366 [cluster="lambda expression", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
n367 [cluster="lambda expression", label="Exit lambda expression", span="838-838"];
n368 [cluster="FakeOptionsWithMinMaxZero.cstr", label="Entry FakeOptionsWithMinMaxZero.cstr", span=""];
n369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="849-849"];
n370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="854-858"];
n371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="861-861"];
n373 [cluster="lambda expression", label="Entry lambda expression", span="855-855"];
n372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="849-849"];
n374 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="855-855"];
n375 [cluster="lambda expression", label="Exit lambda expression", span="855-855"];
n376 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="868-868"];
n377 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="873-877"];
n378 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="880-880"];
n380 [cluster="lambda expression", label="Entry lambda expression", span="874-874"];
n379 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="868-868"];
n381 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="874-874"];
n382 [cluster="lambda expression", label="Exit lambda expression", span="874-874"];
n383 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_75 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
m0_76 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="DefaultFormatter.cs", label="return ReflectionHelper.IsTypeMutable(type);", span="117-117"];
m0_74 [cluster="System.Func<TResult>.Invoke()", file="DefaultFormatter.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_82 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="DefaultFormatter.cs", label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="126-126"];
m0_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m0_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m0_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m0_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m0_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m0_69 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="DefaultFormatter.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
m0_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m0_44 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="117-117"];
m0_45 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="117-117"];
m0_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m0_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m0_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="DefaultFormatter.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m0_51 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="140-140"];
m0_53 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="140-140"];
m0_46 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="117-117"];
m0_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m0_52 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m0_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m0_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m0_10 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="16-16"];
m0_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_78 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsTypeMutable(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsTypeMutable(System.Type)", span="39-39"];
m0_72 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="181-181"];
m0_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m0_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m0_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m0_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m0_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m0_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m0_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m0_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m0_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="DefaultFormatter.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m0_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m0_77 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="DefaultFormatter.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
m0_71 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m0_37 [cluster="lambda expression", color=green, community=0, file="DefaultFormatter.cs", label="0: new FakeOptionsWithSequence()", span="95-95"];
m0_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m0_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m0_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
m0_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m0_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m0_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="DefaultFormatter.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m0_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="DefaultFormatter.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m0_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m0_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m0_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m0_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m0_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m0_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m0_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m0_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m0_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="DefaultFormatter.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m0_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="DefaultFormatter.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m0_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m0_56 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="DefaultFormatter.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m0_57 [cluster="System.Action<T>.Invoke(T)", file="DefaultFormatter.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_58 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="75-75"];
m0_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="DefaultFormatter.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m0_306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m0_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m0_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m0_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="DefaultFormatter.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m0_15 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="type == null", span="27-27"];
m0_16 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="yield break;", span="29-29"];
m0_17 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="yield return type;", span="31-31"];
m0_18 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="type.SafeGetInterfaces()", span="32-32"];
m0_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m0_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m0_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m0_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="DefaultFormatter.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m0_35 [cluster="Unk.SequenceEqual", file="DefaultFormatter.cs", label="Entry Unk.SequenceEqual", span=""];
m0_345 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m0_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m0_9 [cluster="Unk.selector", file="DefaultFormatter.cs", label="Entry Unk.selector", span=""];
m0_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m0_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m0_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m0_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m0_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m0_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m0_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="DefaultFormatter.cs", label="result.Value.FileName != null", span="771-771"];
m0_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="DefaultFormatter.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m0_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="DefaultFormatter.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m0_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m0_383 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_270 [cluster="string.Equals(string)", file="DefaultFormatter.cs", label="Entry string.Equals(string)", span="0-0"];
m0_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m0_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m0_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m0_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="DefaultFormatter.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m0_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m0_73 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="DefaultFormatter.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m0_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m0_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m0_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m0_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m0_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m0_36 [cluster="Unk.Where", file="DefaultFormatter.cs", label="Entry Unk.Where", span=""];
m0_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m0_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m0_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m0_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m0_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m0_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m0_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label=T, span=""];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m0_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m0_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m0_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="DefaultFormatter.cs", label="var fakeOptions = new FakeOptions()", span="20-20"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="DefaultFormatter.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="DefaultFormatter.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m0_184 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="444-444"];
m0_11 [cluster="Unk.True", file="DefaultFormatter.cs", label="Entry Unk.True", span=""];
m0_12 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="27-27"];
m0_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m0_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m0_38 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="95-95"];
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m0_59 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="162-162"];
m0_60 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m0_340 [cluster="lambda expression", file="DefaultFormatter.cs", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinZero(),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m0_20 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="FlattenHierarchy(type.BaseType)", span="36-36"];
m0_27 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="DefaultFormatter.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_70 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="DefaultFormatter.cs", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
m0_79 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="120-120"];
m0_88 [cluster="System.Type.CreateEmptyArray()", file="DefaultFormatter.cs", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
m0_96 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="239-239"];
m0_105 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="263-263"];
m0_115 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="282-282"];
m0_123 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="301-301"];
m0_131 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="320-320"];
m0_140 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="345-345"];
m0_147 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="368-368"];
m0_155 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="390-390"];
m0_163 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="412-412"];
m0_194 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="467-467"];
m0_204 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="487-487"];
m0_212 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="507-507"];
m0_221 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="527-527"];
m0_229 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="545-545"];
m0_238 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="564-564"];
m0_247 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="583-583"];
m0_255 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="602-602"];
m0_263 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="621-621"];
m0_271 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="641-641"];
m0_279 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="660-660"];
m0_287 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="682-682"];
m0_295 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="701-701"];
m0_303 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="723-723"];
m0_311 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="745-745"];
m0_321 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="765-765"];
m0_331 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="789-789"];
m0_339 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="809-813"];
m0_341 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="809-813"];
m0_342 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="810-810"];
m0_373 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="855-855"];
m0_380 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="874-874"];
m0_13 [cluster="System.Type.GetProperties()", file="DefaultFormatter.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m0_14 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25"];
m0_22 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25"];
m0_21 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="DefaultFormatter.cs", label="yield return @interface;", span="38-38"];
m0_29 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47"];
m0_28 [cluster="System.Type.GetInterfaces()", file="DefaultFormatter.cs", label="Entry System.Type.GetInterfaces()", span="0-0"];
m0_61 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="DefaultFormatter.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m0_81 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="DefaultFormatter.cs", label="return string.Empty;", span="124-124"];
m0_80 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="DefaultFormatter.cs", label="type == typeof(string)", span="122-122"];
m0_90 [cluster="lambda expression", file="DefaultFormatter.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m0_89 [cluster="System.Type.GetDefaultValue()", file="DefaultFormatter.cs", label="Entry System.Type.GetDefaultValue()", span="106-106"];
m0_98 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="239-239"];
m0_97 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m0_107 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="263-263"];
m0_106 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m0_117 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="282-282"];
m0_116 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m0_125 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="301-301"];
m0_124 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m0_133 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="320-320"];
m0_132 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m0_142 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="345-345"];
m0_141 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithValues()", span="345-345"];
m0_149 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="368-368"];
m0_148 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m0_157 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="390-390"];
m0_156 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m0_165 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="412-412"];
m0_164 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m0_196 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="467-467"];
m0_195 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSets()", span="467-467"];
m0_206 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="487-487"];
m0_205 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m0_214 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="507-507"];
m0_213 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m0_223 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="527-527"];
m0_222 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m0_231 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="545-545"];
m0_230 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionWithRequired()", span="545-545"];
m0_240 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="564-564"];
m0_239 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="564-564"];
m0_249 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="583-583"];
m0_248 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="583-583"];
m0_257 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="602-602"];
m0_256 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="602-602"];
m0_265 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="621-621"];
m0_264 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="621-621"];
m0_273 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="641-641"];
m0_272 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="641-641"];
m0_281 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="660-660"];
m0_280 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m0_289 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="682-682"];
m0_288 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptions()", span="682-682"];
m0_297 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="701-701"];
m0_296 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m0_305 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="723-723"];
m0_304 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m0_313 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="745-745"];
m0_312 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m0_323 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="765-765"];
m0_322 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m0_333 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="789-789"];
m0_332 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m0_344 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="810-810"];
m0_343 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m0_375 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="855-855"];
m0_374 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithRequiredValue()", span="855-855"];
m0_382 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="874-874"];
m0_381 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="874-874"];
m0_174 [cluster="lambda expression", file="DefaultFormatter.cs", label="new FakeOptionsWithValues()", span="441-441"];
m0_173 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="441-441"];
m0_175 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="441-441"];
m0_176 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="442-444"];
m0_178 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="442-444"];
m0_177 [cluster="lambda expression", file="DefaultFormatter.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m0_181 [cluster="lambda expression", file="DefaultFormatter.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m0_185 [cluster="lambda expression", file="DefaultFormatter.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m0_180 [cluster="lambda expression", file="DefaultFormatter.cs", label="Entry lambda expression", span="444-444"];
m0_182 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="444-444"];
m0_186 [cluster="lambda expression", file="DefaultFormatter.cs", label="Exit lambda expression", span="444-444"];
m0_63 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="DefaultFormatter.cs", label="return Array.CreateInstance(type, 0);", span="103-103"];
m0_65 [cluster="System.Array.CreateInstance(System.Type, int)", file="DefaultFormatter.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m0_66 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
m0_64 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="DefaultFormatter.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
m0_67 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="DefaultFormatter.cs", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="108-111"];
m0_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m0_320 [cluster="Unk.get_IsSome", file="DefaultFormatter.cs", label="Entry Unk.get_IsSome", span=""];
m0_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_7 [cluster="Unk.Any", file="DefaultFormatter.cs", label="Entry Unk.Any", span=""];
m0_104 [cluster="Unk.ShouldBeEquivalentTo", file="DefaultFormatter.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m0_376 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="868-868"];
m0_377 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="873-877"];
m0_378 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="880-880"];
m0_379 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="868-868"];
m0_19 [cluster="Unk.Equal", file="DefaultFormatter.cs", label="Entry Unk.Equal", span=""];
m0_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m0_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m0_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m0_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m0_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m0_8 [cluster="Unk.First", file="DefaultFormatter.cs", label="Entry Unk.First", span=""];
m0_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m0_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m0_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="DefaultFormatter.cs", label="result.Value.Offset != null", span="795-795"];
m0_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="DefaultFormatter.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m0_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="DefaultFormatter.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m0_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m0_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m0_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m0_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m0_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m0_42 [cluster="Unk.SetValue", file="DefaultFormatter.cs", label="Entry Unk.SetValue", span=""];
m0_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_62 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="DefaultFormatter.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
m0_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m0_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="DefaultFormatter.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m0_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="DefaultFormatter.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m0_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m0_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m0_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m0_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m0_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m0_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m0_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m0_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m0_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m0_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m0_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m0_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m0_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m0_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="DefaultFormatter.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m0_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m0_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="DefaultFormatter.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="DefaultFormatter.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="DefaultFormatter.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m0_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m0_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m0_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m0_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m0_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m0_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m0_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m0_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m0_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m0_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m0_5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="DefaultFormatter.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0, file="DefaultFormatter.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m0_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m0_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m0_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m0_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m0_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m0_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m0_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m0_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m0_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m0_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="DefaultFormatter.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_68 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="DefaultFormatter.cs", label="return e.Compile()();", span="112-112"];
m0_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="DefaultFormatter.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_324 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m0_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="849-849"];
m0_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="DefaultFormatter.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="854-858"];
m0_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="DefaultFormatter.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="861-861"];
m0_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="DefaultFormatter.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="849-849"];
m0_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="DefaultFormatter.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m0_384 [file="DefaultFormatter.cs", label=fakeOptions, span=""];
m0_385 [file="DefaultFormatter.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n384 -> n13  [color=red, key=1, label=fakeOptions, style=dashed];
n385 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n385 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n0 -> n1  [color=red, key=0, style=solid];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n6  [color=red, key=2, style=dotted];
n1 -> n3  [color=red, key=1, label=fakeOptions, style=dashed];
n1 -> n13  [color=red, key=1, label=fakeOptions, style=dashed];
n2 -> n3  [color=red, key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [color=red, key=1, label=expectedResult, style=dashed];
n3 -> n4  [color=red, key=0, style=solid];
n3 -> n9  [color=red, key=2, style=dotted];
n3 -> n12  [color=red, key=1, label="lambda expression", style=dashed];
n13 -> n14  [color=red, key=0, style=solid];
n4 -> n5  [color=red, key=0, style=solid];
n4 -> n10  [color=red, key=2, style=dotted];
n4 -> n11  [color=red, key=2, style=dotted];
n12 -> n13  [color=red, key=0, style=solid];
n5 -> n0  [color=blue, key=0, style=bold];
n14 -> n12  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [color=darkseagreen4, key=1, label=long, style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n18 -> n15  [color=blue, key=0, style=bold];
n21 -> n22  [key=0, style=solid];
n21 -> n6  [key=2, style=dotted];
n22 -> n20  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [color=darkseagreen4, key=1, label=double, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n9  [key=2, style=dotted];
n24 -> n27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n26  [key=0, style=solid];
n25 -> n19  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n26 -> n23  [color=blue, key=0, style=bold];
n28 -> n29  [key=0, style=solid];
n28 -> n30  [key=2, style=dotted];
n29 -> n27  [color=blue, key=0, style=bold];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n32 -> n33  [key=0, style=solid];
n32 -> n9  [key=2, style=dotted];
n32 -> n36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n11  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n34 -> n31  [color=blue, key=0, style=bold];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [key=2, style=dotted];
n38 -> n36  [color=blue, key=0, style=bold];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n41 -> n42  [key=0, style=solid];
n41 -> n9  [key=2, style=dotted];
n41 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n42 -> n43  [key=0, style=solid];
n42 -> n35  [key=2, style=dotted];
n42 -> n11  [key=2, style=dotted];
n44 -> n45  [key=0, style=solid];
n43 -> n40  [color=blue, key=0, style=bold];
n45 -> n46  [key=0, style=solid];
n45 -> n6  [key=2, style=dotted];
n46 -> n44  [color=blue, key=0, style=bold];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n48 -> n49  [key=0, style=solid];
n48 -> n9  [key=2, style=dotted];
n48 -> n51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n49 -> n50  [key=0, style=solid];
n49 -> n35  [key=2, style=dotted];
n49 -> n11  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n50 -> n47  [color=blue, key=0, style=bold];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n53 -> n51  [color=blue, key=0, style=bold];
n55 -> n56  [key=0, style=solid];
n55 -> n57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n56 -> n57  [key=0, style=solid];
n56 -> n9  [key=2, style=dotted];
n56 -> n59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n58  [key=0, style=solid];
n57 -> n35  [key=2, style=dotted];
n57 -> n11  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n58 -> n55  [color=blue, key=0, style=bold];
n60 -> n61  [key=0, style=solid];
n60 -> n62  [key=2, style=dotted];
n61 -> n59  [color=blue, key=0, style=bold];
n63 -> n64  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n64 -> n68  [key=2, style=dotted];
n64 -> n69  [key=2, style=dotted];
n64 -> n66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n65 -> n66  [key=0, style=solid];
n65 -> n9  [key=2, style=dotted];
n65 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n66 -> n67  [key=0, style=solid];
n66 -> n35  [key=2, style=dotted];
n66 -> n11  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n67 -> n63  [color=blue, key=0, style=bold];
n71 -> n72  [key=0, style=solid];
n71 -> n54  [key=2, style=dotted];
n72 -> n70  [color=blue, key=0, style=bold];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n78  [key=2, style=dotted];
n74 -> n76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n75 -> n76  [key=0, style=solid];
n75 -> n9  [key=2, style=dotted];
n75 -> n79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n76 -> n77  [key=0, style=solid];
n76 -> n35  [key=2, style=dotted];
n76 -> n11  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n77 -> n73  [color=blue, key=0, style=bold];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n81 -> n79  [color=blue, key=0, style=bold];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n78  [key=2, style=dotted];
n84 -> n69  [key=2, style=dotted];
n84 -> n86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n85 -> n86  [key=0, style=solid];
n85 -> n9  [key=2, style=dotted];
n85 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n86 -> n87  [key=0, style=solid];
n86 -> n35  [key=2, style=dotted];
n86 -> n11  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n87 -> n83  [color=blue, key=0, style=bold];
n89 -> n90  [key=0, style=solid];
n89 -> n62  [key=2, style=dotted];
n90 -> n88  [color=blue, key=0, style=bold];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n78  [key=2, style=dotted];
n92 -> n94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n93 -> n94  [key=0, style=solid];
n93 -> n9  [key=2, style=dotted];
n93 -> n96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n94 -> n95  [key=0, style=solid];
n94 -> n35  [key=2, style=dotted];
n94 -> n11  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n95 -> n91  [color=blue, key=0, style=bold];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [key=2, style=dotted];
n98 -> n96  [color=blue, key=0, style=bold];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n101 -> n102  [key=0, style=solid];
n101 -> n9  [key=2, style=dotted];
n101 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n102 -> n103  [key=0, style=solid];
n102 -> n104  [key=2, style=dotted];
n102 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n105 -> n106  [key=0, style=solid];
n103 -> n100  [color=blue, key=0, style=bold];
n106 -> n107  [key=0, style=solid];
n106 -> n108  [key=2, style=dotted];
n107 -> n105  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n114  [key=2, style=dotted];
n110 -> n69  [key=2, style=dotted];
n110 -> n112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n111 -> n112  [key=0, style=solid];
n111 -> n9  [key=2, style=dotted];
n111 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n112 -> n113  [key=0, style=solid];
n112 -> n35  [key=2, style=dotted];
n112 -> n11  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n113 -> n109  [color=blue, key=0, style=bold];
n116 -> n117  [key=0, style=solid];
n116 -> n108  [key=2, style=dotted];
n117 -> n115  [color=blue, key=0, style=bold];
n118 -> n119  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n119 -> n114  [key=2, style=dotted];
n119 -> n69  [key=2, style=dotted];
n119 -> n121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n120 -> n121  [key=0, style=solid];
n120 -> n9  [key=2, style=dotted];
n120 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n121 -> n122  [key=0, style=solid];
n121 -> n35  [key=2, style=dotted];
n121 -> n11  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n122 -> n118  [color=blue, key=0, style=bold];
n124 -> n125  [key=0, style=solid];
n124 -> n108  [key=2, style=dotted];
n125 -> n123  [color=blue, key=0, style=bold];
n126 -> n127  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n114  [key=2, style=dotted];
n127 -> n69  [key=2, style=dotted];
n127 -> n129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n128 -> n129  [key=0, style=solid];
n128 -> n9  [key=2, style=dotted];
n128 -> n131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n35  [key=2, style=dotted];
n129 -> n11  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n130 -> n126  [color=blue, key=0, style=bold];
n132 -> n133  [key=0, style=solid];
n132 -> n108  [key=2, style=dotted];
n133 -> n131  [color=blue, key=0, style=bold];
n134 -> n135  [key=0, style=solid];
n135 -> n136  [key=0, style=solid];
n135 -> n139  [key=2, style=dotted];
n135 -> n137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n136 -> n137  [key=0, style=solid];
n136 -> n9  [key=2, style=dotted];
n136 -> n140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n137 -> n138  [key=0, style=solid];
n137 -> n104  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n138 -> n134  [color=blue, key=0, style=bold];
n141 -> n142  [key=0, style=solid];
n141 -> n139  [key=2, style=dotted];
n142 -> n140  [color=blue, key=0, style=bold];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n144 -> n145  [key=0, style=solid];
n144 -> n9  [key=2, style=dotted];
n144 -> n147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n145 -> n146  [key=0, style=solid];
n145 -> n104  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n146 -> n143  [color=blue, key=0, style=bold];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=2, style=dotted];
n149 -> n147  [color=blue, key=0, style=bold];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n152 -> n153  [key=0, style=solid];
n152 -> n9  [key=2, style=dotted];
n152 -> n155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n153 -> n154  [key=0, style=solid];
n153 -> n104  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n154 -> n151  [color=blue, key=0, style=bold];
n156 -> n157  [key=0, style=solid];
n156 -> n158  [key=2, style=dotted];
n157 -> n155  [color=blue, key=0, style=bold];
n159 -> n160  [key=0, style=solid];
n159 -> n161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n160 -> n161  [key=0, style=solid];
n160 -> n9  [key=2, style=dotted];
n160 -> n163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n161 -> n162  [key=0, style=solid];
n161 -> n104  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n162 -> n159  [color=blue, key=0, style=bold];
n164 -> n165  [key=0, style=solid];
n164 -> n158  [key=2, style=dotted];
n165 -> n163  [color=blue, key=0, style=bold];
n166 -> n167  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n139  [key=2, style=dotted];
n167 -> n170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n168 -> n169  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n104  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n169 -> n172  [key=2, style=dotted];
n169 -> n173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n169 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n173 -> n174  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n176 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n171 -> n166  [color=blue, key=0, style=bold];
n174 -> n175  [key=0, style=solid];
n174 -> n139  [key=2, style=dotted];
n175 -> n173  [color=blue, key=0, style=bold];
n177 -> n178  [key=0, style=solid];
n177 -> n179  [key=2, style=dotted];
n177 -> n180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n181 -> n182  [key=0, style=solid];
n181 -> n183  [key=2, style=dotted];
n181 -> n184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n185 -> n186  [key=0, style=solid];
n185 -> n187  [key=2, style=dotted];
n178 -> n176  [color=blue, key=0, style=bold];
n180 -> n181  [key=0, style=solid];
n182 -> n180  [color=blue, key=0, style=bold];
n184 -> n185  [key=0, style=solid];
n186 -> n184  [color=blue, key=0, style=bold];
n188 -> n189  [key=0, style=solid];
n189 -> n190  [key=0, style=solid];
n189 -> n193  [key=2, style=dotted];
n189 -> n69  [key=2, style=dotted];
n189 -> n191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n190 -> n191  [key=0, style=solid];
n190 -> n9  [key=2, style=dotted];
n190 -> n194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n191 -> n192  [key=0, style=solid];
n191 -> n35  [key=2, style=dotted];
n191 -> n11  [key=2, style=dotted];
n194 -> n195  [key=0, style=solid];
n192 -> n188  [color=blue, key=0, style=bold];
n195 -> n196  [key=0, style=solid];
n195 -> n197  [key=2, style=dotted];
n196 -> n194  [color=blue, key=0, style=bold];
n198 -> n199  [key=0, style=solid];
n199 -> n200  [key=0, style=solid];
n199 -> n203  [key=2, style=dotted];
n199 -> n201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n200 -> n201  [key=0, style=solid];
n200 -> n9  [key=2, style=dotted];
n200 -> n204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n201 -> n202  [key=0, style=solid];
n201 -> n104  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n202 -> n198  [color=blue, key=0, style=bold];
n205 -> n206  [key=0, style=solid];
n205 -> n203  [key=2, style=dotted];
n206 -> n204  [color=blue, key=0, style=bold];
n207 -> n208  [key=0, style=solid];
n208 -> n209  [key=0, style=solid];
n208 -> n203  [key=2, style=dotted];
n208 -> n210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n209 -> n210  [key=0, style=solid];
n209 -> n9  [key=2, style=dotted];
n209 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n210 -> n211  [key=0, style=solid];
n210 -> n104  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n211 -> n207  [color=blue, key=0, style=bold];
n213 -> n214  [key=0, style=solid];
n213 -> n203  [key=2, style=dotted];
n214 -> n212  [color=blue, key=0, style=bold];
n215 -> n216  [key=0, style=solid];
n216 -> n217  [key=0, style=solid];
n216 -> n220  [key=2, style=dotted];
n216 -> n69  [key=2, style=dotted];
n216 -> n218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n217 -> n218  [key=0, style=solid];
n217 -> n9  [key=2, style=dotted];
n217 -> n221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n218 -> n219  [key=0, style=solid];
n218 -> n35  [key=2, style=dotted];
n218 -> n11  [key=2, style=dotted];
n221 -> n222  [key=0, style=solid];
n219 -> n215  [color=blue, key=0, style=bold];
n222 -> n223  [key=0, style=solid];
n222 -> n203  [key=2, style=dotted];
n223 -> n221  [color=blue, key=0, style=bold];
n224 -> n225  [key=0, style=solid];
n225 -> n226  [key=0, style=solid];
n225 -> n220  [key=2, style=dotted];
n225 -> n69  [key=2, style=dotted];
n225 -> n227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n226 -> n227  [key=0, style=solid];
n226 -> n9  [key=2, style=dotted];
n226 -> n229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n227 -> n228  [key=0, style=solid];
n227 -> n35  [key=2, style=dotted];
n227 -> n11  [key=2, style=dotted];
n229 -> n230  [key=0, style=solid];
n228 -> n224  [color=blue, key=0, style=bold];
n230 -> n231  [key=0, style=solid];
n230 -> n232  [key=2, style=dotted];
n231 -> n229  [color=blue, key=0, style=bold];
n233 -> n234  [key=0, style=solid];
n234 -> n235  [key=0, style=solid];
n234 -> n78  [key=2, style=dotted];
n234 -> n69  [key=2, style=dotted];
n234 -> n236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n235 -> n236  [key=0, style=solid];
n235 -> n9  [key=2, style=dotted];
n235 -> n238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n236 -> n237  [key=0, style=solid];
n236 -> n35  [key=2, style=dotted];
n236 -> n11  [key=2, style=dotted];
n238 -> n239  [key=0, style=solid];
n237 -> n233  [color=blue, key=0, style=bold];
n239 -> n240  [key=0, style=solid];
n239 -> n6  [key=2, style=dotted];
n240 -> n238  [color=blue, key=0, style=bold];
n241 -> n242  [key=0, style=solid];
n242 -> n243  [key=0, style=solid];
n242 -> n246  [key=2, style=dotted];
n242 -> n244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n243 -> n244  [key=0, style=solid];
n243 -> n9  [key=2, style=dotted];
n243 -> n247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n244 -> n245  [key=0, style=solid];
n244 -> n35  [key=2, style=dotted];
n244 -> n11  [key=2, style=dotted];
n247 -> n248  [key=0, style=solid];
n245 -> n241  [color=blue, key=0, style=bold];
n248 -> n249  [key=0, style=solid];
n248 -> n6  [key=2, style=dotted];
n249 -> n247  [color=blue, key=0, style=bold];
n250 -> n251  [key=0, style=solid];
n251 -> n252  [key=0, style=solid];
n251 -> n246  [key=2, style=dotted];
n251 -> n253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n252 -> n253  [key=0, style=solid];
n252 -> n9  [key=2, style=dotted];
n252 -> n255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n253 -> n254  [key=0, style=solid];
n253 -> n35  [key=2, style=dotted];
n253 -> n11  [key=2, style=dotted];
n255 -> n256  [key=0, style=solid];
n254 -> n250  [color=blue, key=0, style=bold];
n256 -> n257  [key=0, style=solid];
n256 -> n6  [key=2, style=dotted];
n257 -> n255  [color=blue, key=0, style=bold];
n258 -> n259  [key=0, style=solid];
n259 -> n260  [key=0, style=solid];
n259 -> n246  [key=2, style=dotted];
n259 -> n261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n260 -> n261  [key=0, style=solid];
n260 -> n9  [key=2, style=dotted];
n260 -> n263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n261 -> n262  [key=0, style=solid];
n261 -> n35  [key=2, style=dotted];
n261 -> n11  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n262 -> n258  [color=blue, key=0, style=bold];
n264 -> n265  [key=0, style=solid];
n264 -> n6  [key=2, style=dotted];
n265 -> n263  [color=blue, key=0, style=bold];
n266 -> n267  [key=0, style=solid];
n266 -> n268  [color=darkseagreen4, key=1, label=string, style=dashed];
n267 -> n268  [key=0, style=solid];
n267 -> n9  [key=2, style=dotted];
n267 -> n271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n268 -> n269  [key=0, style=solid];
n268 -> n270  [key=2, style=dotted];
n268 -> n11  [key=2, style=dotted];
n271 -> n272  [key=0, style=solid];
n269 -> n266  [color=blue, key=0, style=bold];
n272 -> n273  [key=0, style=solid];
n272 -> n6  [key=2, style=dotted];
n273 -> n271  [color=blue, key=0, style=bold];
n274 -> n275  [key=0, style=solid];
n275 -> n276  [key=0, style=solid];
n275 -> n220  [key=2, style=dotted];
n275 -> n277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n276 -> n277  [key=0, style=solid];
n276 -> n9  [key=2, style=dotted];
n276 -> n279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n277 -> n278  [key=0, style=solid];
n277 -> n35  [key=2, style=dotted];
n277 -> n11  [key=2, style=dotted];
n279 -> n280  [key=0, style=solid];
n278 -> n274  [color=blue, key=0, style=bold];
n280 -> n281  [key=0, style=solid];
n280 -> n282  [key=2, style=dotted];
n281 -> n279  [color=blue, key=0, style=bold];
n283 -> n284  [key=0, style=solid];
n283 -> n285  [color=darkseagreen4, key=1, label=string, style=dashed];
n284 -> n285  [key=0, style=solid];
n284 -> n9  [key=2, style=dotted];
n284 -> n287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n285 -> n286  [key=0, style=solid];
n285 -> n104  [key=2, style=dotted];
n287 -> n288  [key=0, style=solid];
n286 -> n283  [color=blue, key=0, style=bold];
n288 -> n289  [key=0, style=solid];
n288 -> n6  [key=2, style=dotted];
n289 -> n287  [color=blue, key=0, style=bold];
n290 -> n291  [key=0, style=solid];
n291 -> n292  [key=0, style=solid];
n291 -> n78  [key=2, style=dotted];
n291 -> n293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n292 -> n293  [key=0, style=solid];
n292 -> n9  [key=2, style=dotted];
n292 -> n295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n293 -> n294  [key=0, style=solid];
n293 -> n35  [key=2, style=dotted];
n293 -> n11  [key=2, style=dotted];
n295 -> n296  [key=0, style=solid];
n294 -> n290  [color=blue, key=0, style=bold];
n296 -> n297  [key=0, style=solid];
n296 -> n298  [key=2, style=dotted];
n297 -> n295  [color=blue, key=0, style=bold];
n299 -> n300  [key=0, style=solid];
n299 -> n301  [color=darkseagreen4, key=1, label="int?", style=dashed];
n300 -> n301  [key=0, style=solid];
n300 -> n9  [key=2, style=dotted];
n300 -> n303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n301 -> n302  [key=0, style=solid];
n301 -> n104  [key=2, style=dotted];
n303 -> n304  [key=0, style=solid];
n302 -> n299  [color=blue, key=0, style=bold];
n304 -> n305  [key=0, style=solid];
n304 -> n306  [key=2, style=dotted];
n305 -> n303  [color=blue, key=0, style=bold];
n307 -> n308  [key=0, style=solid];
n307 -> n309  [color=darkseagreen4, key=1, label="long?", style=dashed];
n308 -> n309  [key=0, style=solid];
n308 -> n9  [key=2, style=dotted];
n308 -> n311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n309 -> n310  [key=0, style=solid];
n309 -> n104  [key=2, style=dotted];
n311 -> n312  [key=0, style=solid];
n310 -> n307  [color=blue, key=0, style=bold];
n312 -> n313  [key=0, style=solid];
n312 -> n306  [key=2, style=dotted];
n313 -> n311  [color=blue, key=0, style=bold];
n314 -> n315  [key=0, style=solid];
n314 -> n317  [color=darkseagreen4, key=1, label=string, style=dashed];
n314 -> n318  [color=darkseagreen4, key=1, label=bool, style=dashed];
n315 -> n316  [key=0, style=solid];
n315 -> n9  [key=2, style=dotted];
n315 -> n321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n315 -> n317  [color=darkseagreen4, key=1, label=result, style=dashed];
n315 -> n318  [color=darkseagreen4, key=1, label=result, style=dashed];
n317 -> n318  [key=0, style=solid];
n317 -> n104  [key=2, style=dotted];
n318 -> n319  [key=0, style=solid];
n318 -> n320  [key=2, style=dotted];
n318 -> n104  [key=2, style=dotted];
n316 -> n317  [key=0, style=solid];
n316 -> n318  [key=0, style=solid];
n321 -> n322  [key=0, style=solid];
n319 -> n314  [color=blue, key=0, style=bold];
n322 -> n323  [key=0, style=solid];
n322 -> n324  [key=2, style=dotted];
n323 -> n321  [color=blue, key=0, style=bold];
n325 -> n326  [key=0, style=solid];
n325 -> n328  [color=darkseagreen4, key=1, label=int, style=dashed];
n325 -> n329  [color=darkseagreen4, key=1, label=bool, style=dashed];
n326 -> n327  [key=0, style=solid];
n326 -> n9  [key=2, style=dotted];
n326 -> n331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n326 -> n328  [color=darkseagreen4, key=1, label=result, style=dashed];
n326 -> n329  [color=darkseagreen4, key=1, label=result, style=dashed];
n328 -> n329  [key=0, style=solid];
n328 -> n104  [key=2, style=dotted];
n329 -> n330  [key=0, style=solid];
n329 -> n320  [key=2, style=dotted];
n329 -> n104  [key=2, style=dotted];
n327 -> n328  [key=0, style=solid];
n327 -> n329  [key=0, style=solid];
n331 -> n332  [key=0, style=solid];
n330 -> n325  [color=blue, key=0, style=bold];
n332 -> n333  [key=0, style=solid];
n332 -> n324  [key=2, style=dotted];
n333 -> n331  [color=blue, key=0, style=bold];
n334 -> n335  [key=0, style=solid];
n335 -> n336  [key=0, style=solid];
n336 -> n337  [key=0, style=solid];
n336 -> n338  [key=2, style=dotted];
n337 -> n334  [color=blue, key=0, style=bold];
n339 -> n340  [key=0, style=solid];
n340 -> n341  [key=0, style=solid];
n340 -> n9  [key=2, style=dotted];
n340 -> n342  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n341 -> n339  [color=blue, key=0, style=bold];
n342 -> n343  [key=0, style=solid];
n343 -> n344  [key=0, style=solid];
n343 -> n345  [key=2, style=dotted];
n344 -> n342  [color=blue, key=0, style=bold];
n346 -> n347  [key=0, style=solid];
n347 -> n348  [key=0, style=solid];
n348 -> n349  [key=0, style=solid];
n348 -> n338  [key=2, style=dotted];
n349 -> n346  [color=blue, key=0, style=bold];
n350 -> n351  [key=0, style=solid];
n351 -> n352  [key=0, style=solid];
n351 -> n353  [key=2, style=dotted];
n351 -> n354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n352 -> n350  [color=blue, key=0, style=bold];
n354 -> n355  [key=0, style=solid];
n355 -> n356  [key=0, style=solid];
n355 -> n357  [key=2, style=dotted];
n356 -> n354  [color=blue, key=0, style=bold];
n358 -> n359  [key=0, style=solid];
n359 -> n360  [key=0, style=solid];
n360 -> n361  [key=0, style=solid];
n360 -> n338  [key=2, style=dotted];
n361 -> n358  [color=blue, key=0, style=bold];
n362 -> n363  [key=0, style=solid];
n363 -> n364  [key=0, style=solid];
n363 -> n353  [key=2, style=dotted];
n363 -> n365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n364 -> n362  [color=blue, key=0, style=bold];
n365 -> n366  [key=0, style=solid];
n366 -> n367  [key=0, style=solid];
n366 -> n368  [key=2, style=dotted];
n367 -> n365  [color=blue, key=0, style=bold];
n369 -> n370  [key=0, style=solid];
n369 -> n371  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
n370 -> n371  [key=0, style=solid];
n370 -> n9  [key=2, style=dotted];
n370 -> n373  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n371 -> n372  [key=0, style=solid];
n371 -> n104  [key=2, style=dotted];
n373 -> n374  [key=0, style=solid];
n372 -> n369  [color=blue, key=0, style=bold];
n374 -> n375  [key=0, style=solid];
n374 -> n282  [key=2, style=dotted];
n375 -> n373  [color=blue, key=0, style=bold];
n376 -> n377  [key=0, style=solid];
n376 -> n378  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
n377 -> n378  [key=0, style=solid];
n377 -> n9  [key=2, style=dotted];
n377 -> n380  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n378 -> n379  [key=0, style=solid];
n378 -> n104  [key=2, style=dotted];
n380 -> n381  [key=0, style=solid];
n379 -> n376  [color=blue, key=0, style=bold];
n381 -> n382  [key=0, style=solid];
n381 -> n383  [key=2, style=dotted];
n382 -> n380  [color=blue, key=0, style=bold];
m0_75 -> m0_9  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_76 -> m0_35  [key=2, style=dotted];
m0_76 -> m0_11  [key=2, style=dotted];
m0_76 -> n77  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_74 -> m0_78  [key=2, style=dotted];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [key=0, style=solid];
m0_82 -> m0_86  [key=2, style=dotted];
m0_250 -> m0_251  [key=0, style=solid];
m0_252 -> m0_9  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_253 -> m0_35  [key=2, style=dotted];
m0_253 -> m0_11  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_251 -> m0_246  [key=2, style=dotted];
m0_254 -> m0_250  [color=blue, key=0, style=bold];
m0_69 -> m0_66  [color=blue, key=0, style=bold];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m0_43 -> m0_54  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_43 -> m0_40  [color=blue, key=0, style=bold];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_59  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_44 -> m0_47  [color=darkseagreen4, key=1, label=fail, style=dashed];
m0_44 -> m0_49  [color=darkseagreen4, key=1, label=fail, style=dashed];
m0_44 -> m0_51  [color=darkseagreen4, key=1, label=fail, style=dashed];
m0_44 -> m0_53  [color=darkseagreen4, key=1, label=fail, style=dashed];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_48  [key=0, style=solid];
m0_45 -> m0_50  [key=0, style=solid];
m0_45 -> m0_52  [key=0, style=solid];
m0_45 -> m0_54  [key=0, style=solid];
m0_45 -> m0_56  [key=2, style=dotted];
m0_45 -> m0_6  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_47 -> m0_54  [key=0, style=solid];
m0_47 -> m0_57  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_49 -> m0_54  [key=0, style=solid];
m0_49 -> m0_57  [key=2, style=dotted];
m0_49 -> m0_35  [key=2, style=dotted];
m0_49 -> m0_11  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_51 -> m0_54  [key=0, style=solid];
m0_51 -> m0_57  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_57  [key=2, style=dotted];
m0_53 -> m0_51  [color=blue, key=0, style=bold];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_44  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_9  [key=2, style=dotted];
m0_48 -> m0_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_47  [color=blue, key=0, style=bold];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=2, style=dotted];
m0_55 -> m0_43  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_37  [color=green, key=0, style=solid];
m0_72 -> m0_70  [color=blue, key=0, style=bold];
m0_290 -> m0_291  [key=0, style=solid];
m0_292 -> m0_9  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_293 -> m0_35  [key=2, style=dotted];
m0_293 -> m0_11  [key=2, style=dotted];
m0_293 -> m0_294  [key=0, style=solid];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_291 -> m0_78  [key=2, style=dotted];
m0_294 -> m0_290  [color=blue, key=0, style=bold];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_215 -> m0_216  [key=0, style=solid];
m0_217 -> m0_9  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_218 -> m0_35  [key=2, style=dotted];
m0_218 -> m0_11  [key=2, style=dotted];
m0_218 -> m0_219  [key=0, style=solid];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_216 -> m0_220  [key=2, style=dotted];
m0_216 -> m0_69  [key=2, style=dotted];
m0_219 -> m0_215  [color=blue, key=0, style=bold];
m0_77 -> m0_75  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_54  [key=2, style=dotted];
m0_37 -> m0_38  [color=green, key=0, style=solid];
m0_37 -> m0_39  [color=green, key=2, style=dotted];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_144 -> m0_9  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_104  [key=2, style=dotted];
m0_146 -> m0_143  [color=blue, key=0, style=bold];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_209 -> m0_9  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_203  [key=2, style=dotted];
m0_208 -> m0_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_104  [key=2, style=dotted];
m0_211 -> m0_207  [color=blue, key=0, style=bold];
m0_274 -> m0_275  [key=0, style=solid];
m0_276 -> m0_9  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_277 -> m0_35  [key=2, style=dotted];
m0_277 -> m0_11  [key=2, style=dotted];
m0_277 -> m0_278  [key=0, style=solid];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_275 -> m0_220  [key=2, style=dotted];
m0_278 -> m0_274  [color=blue, key=0, style=bold];
m0_198 -> m0_199  [key=0, style=solid];
m0_200 -> m0_9  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_203  [key=2, style=dotted];
m0_199 -> m0_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_104  [key=2, style=dotted];
m0_202 -> m0_198  [color=blue, key=0, style=bold];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_11  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_58 -> m0_55  [color=blue, key=0, style=bold];
m0_58 -> m0_59  [key=0, style=solid];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_101 -> m0_9  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_102 -> m0_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_103 -> m0_100  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m0_16 -> m0_9  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_15  [color=blue, key=0, style=bold];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=0, style=solid];
m0_18 -> m0_23  [key=2, style=dotted];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_309  [color=darkseagreen4, key=1, label="long?", style=dashed];
m0_308 -> m0_9  [key=2, style=dotted];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_104  [key=2, style=dotted];
m0_310 -> m0_307  [color=blue, key=0, style=bold];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m0_33 -> m0_40  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_11  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_34 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_31  [color=blue, key=0, style=bold];
m0_35 -> m0_33  [color=blue, key=0, style=bold];
m0_118 -> m0_119  [key=0, style=solid];
m0_120 -> m0_9  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_121 -> m0_35  [key=2, style=dotted];
m0_121 -> m0_11  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_119 -> m0_114  [key=2, style=dotted];
m0_119 -> m0_69  [key=2, style=dotted];
m0_122 -> m0_118  [color=blue, key=0, style=bold];
m0_314 -> m0_315  [key=0, style=solid];
m0_314 -> m0_317  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_314 -> m0_318  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_315 -> m0_9  [key=2, style=dotted];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_315 -> m0_317  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_315 -> m0_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_318  [key=0, style=solid];
m0_317 -> m0_318  [key=0, style=solid];
m0_317 -> m0_104  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_320  [key=2, style=dotted];
m0_318 -> m0_104  [key=2, style=dotted];
m0_319 -> m0_314  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_267 -> m0_9  [key=2, style=dotted];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_268 -> m0_11  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_270  [key=2, style=dotted];
m0_269 -> m0_266  [color=blue, key=0, style=bold];
m0_126 -> m0_127  [key=0, style=solid];
m0_128 -> m0_9  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_129 -> m0_35  [key=2, style=dotted];
m0_129 -> m0_11  [key=2, style=dotted];
m0_129 -> m0_130  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_127 -> m0_114  [key=2, style=dotted];
m0_127 -> m0_69  [key=2, style=dotted];
m0_130 -> m0_126  [color=blue, key=0, style=bold];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_160 -> m0_9  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_104  [key=2, style=dotted];
m0_162 -> m0_159  [color=blue, key=0, style=bold];
m0_109 -> m0_110  [key=0, style=solid];
m0_111 -> m0_9  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_112 -> m0_35  [key=2, style=dotted];
m0_112 -> m0_11  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_110 -> m0_114  [key=2, style=dotted];
m0_110 -> m0_69  [key=2, style=dotted];
m0_113 -> m0_109  [color=blue, key=0, style=bold];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_40  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_93 -> m0_9  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_94 -> m0_35  [key=2, style=dotted];
m0_94 -> m0_11  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_92 -> m0_78  [key=2, style=dotted];
m0_95 -> m0_91  [color=blue, key=0, style=bold];
m0_87 -> m0_83  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_1  [color=darkseagreen4, key=1, label=pi, style=dashed];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_9  [key=2, style=dotted];
m0_24 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=2, style=dotted];
m0_25 -> m0_28  [key=2, style=dotted];
m0_25 -> m0_19  [key=2, style=dotted];
m0_26 -> m0_24  [color=blue, key=0, style=bold];
m0_26 -> m0_23  [color=blue, key=0, style=bold];
m0_184 -> m0_185  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_12 -> m0_10  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_9  [key=2, style=dotted];
m0_39 -> m0_42  [key=2, style=dotted];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_10  [color=blue, key=0, style=bold];
m0_41 -> m0_38  [color=blue, key=0, style=bold];
m0_41 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_61  [key=2, style=dotted];
m0_60 -> m0_58  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_340 -> m0_9  [key=2, style=dotted];
m0_340 -> m0_341  [key=0, style=solid];
m0_340 -> m0_342  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_22  [key=0, style=solid];
m0_20 -> m0_14  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_82  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_79 -> m0_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_79 -> m0_84  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_88 -> m0_89  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_115 -> m0_116  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_155 -> m0_156  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_194 -> m0_195  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_212 -> m0_213  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_229 -> m0_230  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_247 -> m0_248  [key=0, style=solid];
m0_255 -> m0_256  [key=0, style=solid];
m0_263 -> m0_264  [key=0, style=solid];
m0_271 -> m0_272  [key=0, style=solid];
m0_279 -> m0_280  [key=0, style=solid];
m0_287 -> m0_288  [key=0, style=solid];
m0_295 -> m0_296  [key=0, style=solid];
m0_303 -> m0_304  [key=0, style=solid];
m0_311 -> m0_312  [key=0, style=solid];
m0_321 -> m0_322  [key=0, style=solid];
m0_331 -> m0_332  [key=0, style=solid];
m0_339 -> m0_340  [key=0, style=solid];
m0_341 -> m0_339  [color=blue, key=0, style=bold];
m0_342 -> m0_343  [key=0, style=solid];
m0_373 -> m0_374  [key=0, style=solid];
m0_380 -> m0_381  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [color=crimson, key=0, style=bold];
m0_14 -> m0_17  [color=crimson, key=0, style=bold];
m0_14 -> m0_19  [color=crimson, key=0, style=bold];
m0_14 -> m0_21  [color=crimson, key=0, style=bold];
m0_14 -> m0_18  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_14 -> m0_20  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_22 -> m0_20  [color=blue, key=0, style=bold];
m0_22 -> m0_14  [color=blue, key=0, style=bold];
m0_21 -> m0_6  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_20  [key=0, style=solid];
m0_29 -> m0_27  [color=blue, key=0, style=bold];
m0_29 -> m0_30  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_61 -> m0_59  [color=blue, key=0, style=bold];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_81 -> m0_85  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_90 -> m0_88  [color=blue, key=0, style=bold];
m0_90 -> m0_39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_62  [key=2, style=dotted];
m0_98 -> m0_96  [color=blue, key=0, style=bold];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=2, style=dotted];
m0_107 -> m0_105  [color=blue, key=0, style=bold];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_117 -> m0_115  [color=blue, key=0, style=bold];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_108  [key=2, style=dotted];
m0_125 -> m0_123  [color=blue, key=0, style=bold];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_108  [key=2, style=dotted];
m0_133 -> m0_131  [color=blue, key=0, style=bold];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_108  [key=2, style=dotted];
m0_142 -> m0_140  [color=blue, key=0, style=bold];
m0_141 -> m0_139  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_149 -> m0_147  [color=blue, key=0, style=bold];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_150  [key=2, style=dotted];
m0_157 -> m0_155  [color=blue, key=0, style=bold];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_165 -> m0_163  [color=blue, key=0, style=bold];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_158  [key=2, style=dotted];
m0_196 -> m0_194  [color=blue, key=0, style=bold];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_197  [key=2, style=dotted];
m0_206 -> m0_204  [color=blue, key=0, style=bold];
m0_205 -> m0_203  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_214 -> m0_212  [color=blue, key=0, style=bold];
m0_213 -> m0_203  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_223 -> m0_221  [color=blue, key=0, style=bold];
m0_222 -> m0_203  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_231 -> m0_229  [color=blue, key=0, style=bold];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=2, style=dotted];
m0_240 -> m0_238  [color=blue, key=0, style=bold];
m0_239 -> m0_6  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_249 -> m0_247  [color=blue, key=0, style=bold];
m0_248 -> m0_6  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_257 -> m0_255  [color=blue, key=0, style=bold];
m0_256 -> m0_6  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_265 -> m0_263  [color=blue, key=0, style=bold];
m0_264 -> m0_6  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_273 -> m0_271  [color=blue, key=0, style=bold];
m0_272 -> m0_6  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_281 -> m0_279  [color=blue, key=0, style=bold];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_282  [key=2, style=dotted];
m0_289 -> m0_287  [color=blue, key=0, style=bold];
m0_288 -> m0_6  [key=2, style=dotted];
m0_288 -> m0_289  [key=0, style=solid];
m0_297 -> m0_295  [color=blue, key=0, style=bold];
m0_296 -> m0_297  [key=0, style=solid];
m0_296 -> m0_298  [key=2, style=dotted];
m0_305 -> m0_303  [color=blue, key=0, style=bold];
m0_304 -> m0_305  [key=0, style=solid];
m0_304 -> m0_306  [key=2, style=dotted];
m0_313 -> m0_311  [color=blue, key=0, style=bold];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_306  [key=2, style=dotted];
m0_323 -> m0_321  [color=blue, key=0, style=bold];
m0_322 -> m0_323  [key=0, style=solid];
m0_322 -> m0_324  [key=2, style=dotted];
m0_333 -> m0_331  [color=blue, key=0, style=bold];
m0_332 -> m0_333  [key=0, style=solid];
m0_332 -> m0_324  [key=2, style=dotted];
m0_344 -> m0_342  [color=blue, key=0, style=bold];
m0_343 -> m0_344  [key=0, style=solid];
m0_343 -> m0_345  [key=2, style=dotted];
m0_375 -> m0_373  [color=blue, key=0, style=bold];
m0_374 -> m0_375  [key=0, style=solid];
m0_374 -> m0_282  [key=2, style=dotted];
m0_382 -> m0_380  [color=blue, key=0, style=bold];
m0_381 -> m0_382  [key=0, style=solid];
m0_381 -> m0_383  [key=2, style=dotted];
m0_174 -> m0_139  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_175 -> m0_173  [color=blue, key=0, style=bold];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_176 -> m0_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_178 -> m0_176  [color=blue, key=0, style=bold];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_179  [key=2, style=dotted];
m0_177 -> m0_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_183  [key=2, style=dotted];
m0_181 -> m0_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_182 -> m0_180  [color=blue, key=0, style=bold];
m0_186 -> m0_184  [color=blue, key=0, style=bold];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_65  [key=2, style=dotted];
m0_65 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_66 -> m0_35  [key=2, style=dotted];
m0_66 -> m0_11  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_62  [color=blue, key=0, style=bold];
m0_67 -> m0_63  [color=blue, key=0, style=bold];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_70  [key=2, style=dotted];
m0_67 -> m0_71  [key=2, style=dotted];
m0_67 -> m0_72  [key=2, style=dotted];
m0_86 -> m0_35  [key=2, style=dotted];
m0_86 -> m0_11  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_378  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m0_377 -> m0_9  [key=2, style=dotted];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_380  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_104  [key=2, style=dotted];
m0_379 -> m0_376  [color=blue, key=0, style=bold];
m0_19 -> m0_18  [key=0, style=solid];
m0_83 -> m0_85  [key=0, style=solid];
m0_83 -> m0_87  [key=2, style=dotted];
m0_83 -> m0_88  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_89  [key=2, style=dotted];
m0_84 -> m0_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_84 -> m0_78  [key=2, style=dotted];
m0_84 -> m0_69  [key=2, style=dotted];
m0_85 -> m0_79  [color=blue, key=0, style=bold];
m0_85 -> m0_9  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_152 -> m0_9  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_104  [key=2, style=dotted];
m0_154 -> m0_151  [color=blue, key=0, style=bold];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_328  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_325 -> m0_329  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_326 -> m0_9  [key=2, style=dotted];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_326 -> m0_328  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_326 -> m0_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_329  [key=0, style=solid];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_104  [key=2, style=dotted];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_320  [key=2, style=dotted];
m0_329 -> m0_104  [key=2, style=dotted];
m0_330 -> m0_325  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_32  [key=2, style=dotted];
m0_31 -> m0_29  [color=blue, key=0, style=bold];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_42 -> m0_35  [key=2, style=dotted];
m0_42 -> m0_11  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_62 -> m0_63  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_136 -> m0_9  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_139  [key=2, style=dotted];
m0_135 -> m0_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_104  [key=2, style=dotted];
m0_138 -> m0_134  [color=blue, key=0, style=bold];
m0_233 -> m0_234  [key=0, style=solid];
m0_235 -> m0_9  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_236 -> m0_35  [key=2, style=dotted];
m0_236 -> m0_11  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_234 -> m0_78  [key=2, style=dotted];
m0_234 -> m0_69  [key=2, style=dotted];
m0_237 -> m0_233  [color=blue, key=0, style=bold];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_284 -> m0_9  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_104  [key=2, style=dotted];
m0_286 -> m0_283  [color=blue, key=0, style=bold];
m0_188 -> m0_189  [key=0, style=solid];
m0_190 -> m0_9  [key=2, style=dotted];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_191 -> m0_35  [key=2, style=dotted];
m0_191 -> m0_11  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_189 -> m0_193  [key=2, style=dotted];
m0_189 -> m0_69  [key=2, style=dotted];
m0_192 -> m0_188  [color=blue, key=0, style=bold];
m0_166 -> m0_167  [key=0, style=solid];
m0_170 -> m0_104  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_167 -> m0_139  [key=2, style=dotted];
m0_167 -> m0_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_167 -> m0_168  [key=0, style=solid];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_172  [key=2, style=dotted];
m0_169 -> m0_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_169 -> m0_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_168 -> m0_169  [key=0, style=solid];
m0_171 -> m0_166  [color=blue, key=0, style=bold];
m0_258 -> m0_259  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_261 -> m0_35  [key=2, style=dotted];
m0_261 -> m0_11  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_259 -> m0_246  [key=2, style=dotted];
m0_262 -> m0_258  [color=blue, key=0, style=bold];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_301  [color=darkseagreen4, key=1, label="int?", style=dashed];
m0_300 -> m0_9  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_104  [key=2, style=dotted];
m0_302 -> m0_299  [color=blue, key=0, style=bold];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_32 -> m0_33  [color=green, key=0, style=solid];
m0_32 -> m0_9  [color=green, key=2, style=dotted];
m0_32 -> m0_10  [color=green, key=1, label="lambda expression", style=dashed];
m0_241 -> m0_242  [key=0, style=solid];
m0_243 -> m0_9  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_244 -> m0_35  [key=2, style=dotted];
m0_244 -> m0_11  [key=2, style=dotted];
m0_244 -> m0_245  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_242 -> m0_246  [key=2, style=dotted];
m0_245 -> m0_241  [color=blue, key=0, style=bold];
m0_224 -> m0_225  [key=0, style=solid];
m0_226 -> m0_9  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_227 -> m0_35  [key=2, style=dotted];
m0_227 -> m0_11  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_225 -> m0_220  [key=2, style=dotted];
m0_225 -> m0_69  [key=2, style=dotted];
m0_228 -> m0_224  [color=blue, key=0, style=bold];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_73  [key=2, style=dotted];
m0_68 -> m0_74  [key=2, style=dotted];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_371  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m0_370 -> m0_9  [key=2, style=dotted];
m0_370 -> m0_371  [key=0, style=solid];
m0_370 -> m0_373  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_104  [key=2, style=dotted];
m0_372 -> m0_369  [color=blue, key=0, style=bold];
m0_384 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_385 -> m0_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_385 -> m0_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
