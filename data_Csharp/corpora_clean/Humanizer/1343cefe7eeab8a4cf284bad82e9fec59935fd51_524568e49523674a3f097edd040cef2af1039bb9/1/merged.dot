digraph  {
m2_0 [label="Entry Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_1 [label="var mod100 = number%100", span="9-9", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_3 [label="var mod10 = number%10", span="12-12", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_5 [label="return resourceKey + SingularPostfix;", span="15-15", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", color=red, community=0, file="EnglishNumberToWordsConverter.cs"];
m2_7 [label="return resourceKey + PaucalPostfix;", span="18-18", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_8 [label="return resourceKey;", span="21-21", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_2 [label="mod100/10 != 1", span="10-10", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_4 [label="mod10 == 1", span="14-14", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_6 [label="mod10 > 1 && mod10 < 5", span="17-17", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m2_9 [label="Exit Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.RussianFormatter.GetResourceKey(string, int)", file="EnglishNumberToWordsConverter.cs"];
m5_2 [label="return null;", span="13-13", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_3 [label="value.Length == 0", span="15-15", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs", color=green, community=0];
m5_0 [label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs"];
m5_1 [label="Exit Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12", cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="INumberToWordsConverter.cs"];
m5_4 [label="return value;", span="16-16", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs"];
m5_5 [label="truncationString == null || truncationString.Length > length", span="18-18", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs"];
m5_6 [label="return value.Substring(0, length);", span="19-19", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs"];
m5_7 [label="var alphaNumericalCharactersProcessed = 0", span="21-21", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs"];
m5_8 [label="var numberOfCharactersEqualToTruncateLength = value.ToCharArray().Count(Char.IsLetterOrDigit) == length", span="23-23", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", color=green, community=0, file="INumberToWordsConverter.cs"];
m5_9 [label="var i = 0", span="25-25", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_13 [label="numberOfCharactersEqualToTruncateLength && alphaNumericalCharactersProcessed == length", span="30-30", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_15 [label="!numberOfCharactersEqualToTruncateLength && alphaNumericalCharactersProcessed + truncationString.Length == length", span="33-33", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_12 [label="alphaNumericalCharactersProcessed++", span="28-28", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_10 [label="i < value.Length - truncationString.Length", span="25-25", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_11 [label="Char.IsLetterOrDigit(value[i])", span="27-27", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_14 [label="return value;", span="31-31", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_16 [label="return value.Substring(0, i + 1) + truncationString;", span="34-34", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_18 [label="return value;", span="37-37", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_17 [label="i++", span="25-25", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_19 [label="Exit Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", span="10-10", cluster="Humanizer.FixedNumberOfCharactersTruncator.Truncate(string, int, string)", file="INumberToWordsConverter.cs"];
m5_22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", file="INumberToWordsConverter.cs"];
m5_23 [label="Entry char.IsLetterOrDigit(char)", span="0-0", cluster="char.IsLetterOrDigit(char)", file="INumberToWordsConverter.cs"];
m5_20 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="INumberToWordsConverter.cs"];
m5_21 [label="Entry string.ToCharArray()", span="0-0", cluster="string.ToCharArray()", file="INumberToWordsConverter.cs"];
m6_0 [label="Entry Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14", cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="NumberToOrdinalWordsExtension.cs"];
m6_1 [label="return new EnglishNumberToWordsConverter().ConvertToOrdinal(number);", span="16-16", cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", color=red, community=0, file="NumberToOrdinalWordsExtension.cs"];
m6_2 [label="Exit Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14", cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="NumberToOrdinalWordsExtension.cs"];
m6_3 [label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5", cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", file="NumberToOrdinalWordsExtension.cs"];
m6_4 [label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", span="76-76", cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", file="NumberToOrdinalWordsExtension.cs"];
m7_4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="NumberToOrdinalWordsTests.cs"];
m7_0 [label="Entry Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="50-50", cluster="Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="NumberToOrdinalWordsTests.cs"];
m7_1 [label="Assert.Equal(words, number.ToOrdinalWords())", span="52-52", cluster="Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="NumberToOrdinalWordsTests.cs"];
m7_2 [label="Exit Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", span="50-50", cluster="Humanizer.Tests.NumberToOrdinalWordsTests.ToOrdinalWords(int, string)", file="NumberToOrdinalWordsTests.cs"];
m7_3 [label="Entry int.ToOrdinalWords()", span="14-14", cluster="int.ToOrdinalWords()", file="NumberToOrdinalWordsTests.cs"];
m8_28 [label="Entry System.Math.Abs(int)", span="0-0", cluster="System.Math.Abs(int)", file="NumberToWordsExtension.cs"];
m8_30 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NumberToWordsExtension.cs"];
m8_32 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="NumberToWordsExtension.cs"];
m8_31 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="NumberToWordsExtension.cs"];
m8_33 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="NumberToWordsExtension.cs"];
m8_0 [label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_3 [label="number < 0", span="19-19", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_1 [label="number == 0", span="16-16", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_4 [label="return string.Format(''minus {0}'', ToWords(Math.Abs(number)));", span="20-20", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_5 [label="var parts = new List<string>()", span="22-22", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_12 [label="(number / 100) > 0", span="36-36", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_8 [label="number %= 1000000", span="27-27", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_9 [label="(number / 1000) > 0", span="30-30", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_11 [label="number %= 1000", span="33-33", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_13 [label="parts.Add(string.Format(''{0} hundred'', ToWords(number / 100)))", span="38-38", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_15 [label="number > 0", span="42-42", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_14 [label="number %= 100", span="39-39", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_20 [label="number < 20", span="50-50", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_21 [label="parts.Add(unitsMap[number])", span="51-51", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_22 [label="var lastPart = tensMap[number / 10]", span="54-54", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_23 [label="(number % 10) > 0", span="55-55", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_24 [label="lastPart += string.Format(''-{0}'', unitsMap[number % 10])", span="56-56", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_16 [label="parts.Count != 0", span="44-44", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_26 [label="return string.Join('' '', parts.ToArray());", span="61-61", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_19 [label="var tensMap = new[] { ''zero'', ''ten'', ''twenty'', ''thirty'', ''forty'', ''fifty'', ''sixty'', ''seventy'', ''eighty'', ''ninety'' }", span="48-48", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_18 [label="var unitsMap = new[] { ''zero'', ''one'', ''two'', ''three'', ''four'', ''five'', ''six'', ''seven'', ''eight'', ''nine'', ''ten'', ''eleven'', ''twelve'', ''thirteen'', ''fourteen'', ''fifteen'', ''sixteen'', ''seventeen'', ''eighteen'', ''nineteen'' }", span="47-47", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_25 [label="parts.Add(lastPart)", span="57-57", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_17 [label="parts.Add(''and'')", span="45-45", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", color=green, community=0, file="NumberToWordsExtension.cs"];
m8_7 [label="parts.Add(string.Format(''{0} million'', ToWords(number / 1000000)))", span="26-26", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_10 [label="parts.Add(string.Format(''{0} thousand'', ToWords(number / 1000)))", span="32-32", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_6 [label="(number / 1000000) > 0", span="24-24", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_2 [label="return ''zero'';", span="17-17", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_27 [label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14", cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="NumberToWordsExtension.cs"];
m8_29 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="NumberToWordsExtension.cs"];
m10_0 [label="Entry Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m10_1 [label="var mod100 = number%100", span="9-9", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs"];
m10_3 [label="var mod10 = number%10", span="12-12", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=red, community=0, file="RussianFormatter.cs"];
m10_5 [label="return resourceKey + SingularPostfix;", span="15-15", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs"];
m10_7 [label="return resourceKey + PaucalPostfix;", span="18-18", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs"];
m10_8 [label="return resourceKey;", span="21-21", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=red, community=0, file="RussianFormatter.cs"];
m10_2 [label="mod100/10 != 1", span="10-10", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs"];
m10_4 [label="mod10 == 1", span="14-14", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs"];
m10_6 [label="mod10 > 1 && mod10 < 5", span="17-17", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", color=green, community=0, file="RussianFormatter.cs"];
m10_9 [label="Exit Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", span="7-7", cluster="Humanizer.Localisation.Formatters.RussianFormatter.GetResourceKey(string, int)", file="RussianFormatter.cs"];
m12_76 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="RussianGrammaticalNumberDetector.cs"];
m12_49 [label="Entry System.Type.IsPrimitiveEx()", span="228-228", cluster="System.Type.IsPrimitiveEx()", file="RussianGrammaticalNumberDetector.cs"];
m12_17 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="RussianGrammaticalNumberDetector.cs"];
m12_44 [label="Entry System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", span="11-11", cluster="System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", file="RussianGrammaticalNumberDetector.cs"];
m12_91 [label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="110-110", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_92 [label="object parsedValue", span="112-112", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_93 [label="parsedValue = Enum.Parse(conversionType, value, ignoreValueCase)", span="115-115", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_96 [label="Enum.IsDefined(conversionType, parsedValue)", span="121-121", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_94 [label=ArgumentException, span="117-117", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_97 [label="return parsedValue;", span="123-123", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_95 [label="throw new FormatException();", span="119-119", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_98 [label="throw new FormatException();", span="125-125", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_99 [label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="110-110", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_102 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)", file="RussianGrammaticalNumberDetector.cs"];
m12_18 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="RussianGrammaticalNumberDetector.cs"];
m12_100 [label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0", cluster="System.Enum.Parse(System.Type, string, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_72 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)", file="RussianGrammaticalNumberDetector.cs"];
m12_13 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="RussianGrammaticalNumberDetector.cs"];
m12_27 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing", file="RussianGrammaticalNumberDetector.cs"];
m12_77 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="21-21", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="RussianGrammaticalNumberDetector.cs"];
m12_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="RussianGrammaticalNumberDetector.cs"];
m12_37 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", span="25-25", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", file="RussianGrammaticalNumberDetector.cs"];
m12_35 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_45 [label="Func<object> changeType = () =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture);\r\n\r\n#if !SKIP_FSHARP\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n#else\r\n                    Func<object> empty = () => null;\r\n#endif\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                };\r\n\r\n                return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();\r\n            }", span="53-89", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_46 [label="Func<object> makeType = () =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { value });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="91-102", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_47 [label="return Result.Try(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType);", span="104-107", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_48 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_15 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="RussianGrammaticalNumberDetector.cs"];
m12_14 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="RussianGrammaticalNumberDetector.cs"];
m12_20 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="RussianGrammaticalNumberDetector.cs"];
m12_0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_1 [label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture, ignoreValueCase)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture, ignoreValueCase);", span="20-22", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_2 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_90 [label="Entry System.FormatException.FormatException(string)", span="0-0", cluster="System.FormatException.FormatException(string)", file="RussianGrammaticalNumberDetector.cs"];
m12_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="RussianGrammaticalNumberDetector.cs"];
m12_101 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()", file="RussianGrammaticalNumberDetector.cs"];
m12_71 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="12-12", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="RussianGrammaticalNumberDetector.cs"];
m12_5 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_6 [label="var type =\r\n                conversionType.GetTypeInfo()\r\n                              .GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJustOrFail(\r\n                                  new InvalidOperationException(''Non scalar properties should be sequence of type IEnumerable<T>.'')\r\n                    )", span="27-34", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_7 [label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase))", span="36-36", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="38-40", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_9 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_11 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="RussianGrammaticalNumberDetector.cs"];
m12_43 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="RussianGrammaticalNumberDetector.cs"];
m12_36 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", span="495-495", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="RussianGrammaticalNumberDetector.cs"];
m12_10 [label="Entry System.Type.GetTypeInfo()", span="0-0", cluster="System.Type.GetTypeInfo()", file="RussianGrammaticalNumberDetector.cs"];
m12_82 [label="Entry lambda expression", span="91-102", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_22 [label="ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase)", span="36-36", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_21 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_24 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_28 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_23 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_25 [label="a.MatchNothing()", span="38-38", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_26 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_29 [label="((Just<object>)c).Value", span="40-40", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_30 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_38 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_40 [label="Entry lambda expression", span="46-47", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_39 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_41 [label="e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="46-47", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_42 [label="Exit lambda expression", span="46-47", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_53 [label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture);\r\n\r\n#if !SKIP_FSHARP\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n#else\r\n                    Func<object> empty = () => null;\r\n#endif\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                }", span="55-84", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_61 [label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="57-57", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_62 [label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType)", span="59-65", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_69 [label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType) :\r\n#endif\r\n                                Nullable.GetUnderlyingType(conversionType)", span="62-65", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_63 [label="var type = getUnderlyingType() ?? conversionType", span="67-67", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_64 [label="Func<object> withValue =\r\n                        () =>\r\n#if !SKIP_FSHARP\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture)", span="69-75", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_74 [label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture)) :\r\n#endif\r\n                                Convert.ChangeType(value, type, conversionCulture)", span="72-75", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_66 [label="return (value == null) ? empty() : withValue();", span="83-83", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_54 [label="return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();", span="86-88", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_83 [label="var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) })", span="95-95", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_84 [label="return ctor.Invoke(new object[] { value });", span="96-96", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_52 [label="Entry lambda expression", span="53-89", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_55 [label="Exit lambda expression", span="53-89", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_60 [label="Entry lambda expression", span="55-84", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_65 [label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="78-78", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_79 [label="isFsOption ? FSharpOptionHelper.None(type) : null", span="78-78", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_67 [label="Exit lambda expression", span="55-84", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_68 [label="Entry lambda expression", span="60-65", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_70 [label="Exit lambda expression", span="60-65", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_73 [label="Entry lambda expression", span="70-75", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_75 [label="Exit lambda expression", span="70-75", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_78 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_80 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_85 [label=Exception, span="98-98", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_86 [label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="100-100", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_87 [label="Exit lambda expression", span="91-102", cluster="lambda expression", file="RussianGrammaticalNumberDetector.cs"];
m12_4 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_31 [label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture, ignoreValueCase)", span="45-45", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_32 [label="result.Match((_,__) => { }, e => e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="46-47", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_33 [label="return result.ToMaybe();", span="48-48", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_34 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_16 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="RussianGrammaticalNumberDetector.cs"];
m12_57 [label="Entry string.ToBoolean()", span="71-71", cluster="string.ToBoolean()", file="RussianGrammaticalNumberDetector.cs"];
m12_51 [label="Entry RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", span="210-210", cluster="RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", file="RussianGrammaticalNumberDetector.cs"];
m12_89 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="RussianGrammaticalNumberDetector.cs"];
m12_56 [label="Entry string.IsBooleanString()", span="65-65", cluster="string.IsBooleanString()", file="RussianGrammaticalNumberDetector.cs"];
m12_58 [label="Entry string.ToEnum(System.Type, bool)", span="110-110", cluster="string.ToEnum(System.Type, bool)", file="RussianGrammaticalNumberDetector.cs"];
m12_88 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="RussianGrammaticalNumberDetector.cs"];
m12_19 [label="Entry Unk.ToUntypedArray", span="", cluster="Unk.ToUntypedArray", file="RussianGrammaticalNumberDetector.cs"];
m12_50 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="79-79", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="RussianGrammaticalNumberDetector.cs"];
m12_81 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="29-29", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="RussianGrammaticalNumberDetector.cs"];
m12_59 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="RussianGrammaticalNumberDetector.cs"];
m12_103 [label="System.Globalization.CultureInfo", span="", file="RussianGrammaticalNumberDetector.cs"];
m12_104 [label=bool, span="", file="RussianGrammaticalNumberDetector.cs"];
m12_105 [label=type, span="", file="RussianGrammaticalNumberDetector.cs"];
m12_106 [label=string, span="", file="RussianGrammaticalNumberDetector.cs"];
m12_107 [label="System.Type", span="", file="RussianGrammaticalNumberDetector.cs"];
m12_108 [label="System.Globalization.CultureInfo", span="", file="RussianGrammaticalNumberDetector.cs"];
m12_109 [label=bool, span="", file="RussianGrammaticalNumberDetector.cs"];
m12_110 [label=isFsOption, span="", file="RussianGrammaticalNumberDetector.cs"];
m12_111 [label=type, span="", file="RussianGrammaticalNumberDetector.cs"];
m13_11 [label="Entry Unk.BeTrue", span="", cluster="Unk.BeTrue", file="RussianNumberToWordsConverter.cs"];
m13_0 [label="Entry CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", span="19-19", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", file="RussianNumberToWordsConverter.cs"];
m13_1 [label="Maybe<object> result = TypeConverter.ChangeType(new[] {testValue}, destinationType, true, CultureInfo.InvariantCulture, true)", span="21-21", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs"];
m13_2 [label=expectFail, span="23-23", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs"];
m13_3 [label="result.MatchNothing().Should().BeTrue(''should fail parsing'')", span="25-25", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs"];
m13_5 [label="result.MatchJust(out matchedValue).Should().BeTrue(''should parse successfully'')", span="31-31", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs"];
m13_4 [label="object matchedValue", span="29-29", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs"];
m13_6 [label="Assert.Equal(matchedValue, expectedResult)", span="32-32", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", color=green, community=0, file="RussianNumberToWordsConverter.cs"];
m13_7 [label="Exit CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", span="19-19", cluster="CommandLine.Tests.Unit.Core.TypeConverterTests.ChangeType_scalars(string, System.Type, bool, object)", file="RussianNumberToWordsConverter.cs"];
m13_13 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RussianNumberToWordsConverter.cs"];
m13_12 [label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="48-48", cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="RussianNumberToWordsConverter.cs"];
m13_9 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="RussianNumberToWordsConverter.cs"];
m13_10 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="RussianNumberToWordsConverter.cs"];
m13_8 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="RussianNumberToWordsConverter.cs"];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_5  [key=1, style=dashed, color=red, label=string];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_1 -> m2_2  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=mod10];
m2_5 -> m2_9  [key=0, style=solid, color=red];
m2_7 -> m2_9  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_8  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid, color=red];
m2_4 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_8  [key=0, style=solid];
m2_9 -> m2_0  [key=0, style=bold, color=blue];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_19  [key=0, style=solid];
m5_3 -> m5_2  [key=0, style=bold, color=blue];
m5_3 -> m5_4  [key=0, style=solid, color=green];
m5_3 -> m5_5  [key=0, style=solid, color=green];
m5_0 -> m5_3  [key=1, style=dashed, color=green, label=string];
m5_0 -> m5_4  [key=1, style=dashed, color=green, label=string];
m5_0 -> m5_5  [key=1, style=dashed, color=green, label=int];
m5_0 -> m5_6  [key=1, style=dashed, color=green, label=string];
m5_0 -> m5_8  [key=1, style=dashed, color=green, label=string];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_13  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_0 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_0 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_1 -> m5_3  [key=0, style=solid, color=green];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m5_4 -> m5_19  [key=0, style=solid, color=green];
m5_5 -> m5_6  [key=0, style=solid, color=green];
m5_5 -> m5_7  [key=0, style=solid, color=green];
m5_6 -> m5_19  [key=0, style=solid, color=green];
m5_6 -> m5_20  [key=2, style=dotted, color=green];
m5_7 -> m5_8  [key=0, style=solid, color=green];
m5_7 -> m5_12  [key=1, style=dashed, color=green, label=alphaNumericalCharactersProcessed];
m5_7 -> m5_13  [key=1, style=dashed, color=green, label=alphaNumericalCharactersProcessed];
m5_7 -> m5_15  [key=1, style=dashed, color=green, label=alphaNumericalCharactersProcessed];
m5_8 -> m5_9  [key=0, style=solid, color=green];
m5_8 -> m5_21  [key=2, style=dotted, color=green];
m5_8 -> m5_22  [key=2, style=dotted, color=green];
m5_8 -> m5_13  [key=1, style=dashed, color=green, label=numberOfCharactersEqualToTruncateLength];
m5_8 -> m5_15  [key=1, style=dashed, color=green, label=numberOfCharactersEqualToTruncateLength];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_9 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_9 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_15  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_17  [key=0, style=solid];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m5_12 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label=alphaNumericalCharactersProcessed];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_18  [key=0, style=solid];
m5_11 -> m5_13  [key=0, style=solid];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_23  [key=2, style=dotted];
m5_14 -> m5_19  [key=0, style=solid];
m5_16 -> m5_19  [key=0, style=solid];
m5_16 -> m5_20  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_17 -> m5_10  [key=0, style=solid];
m5_17 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_19 -> m5_0  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid, color=red];
m6_1 -> m6_2  [key=0, style=solid, color=red];
m6_1 -> m6_3  [key=2, style=dotted, color=red];
m6_1 -> m6_4  [key=2, style=dotted, color=red];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=2, style=dotted];
m7_1 -> m7_4  [key=2, style=dotted];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
m8_0 -> m8_3  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_4  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_12  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_13  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_14  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_15  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_20  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_21  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_22  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_23  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_24  [key=1, style=dashed, color=green, label=int];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_0 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_0 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_0 -> m8_9  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_0 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_0 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_3 -> m8_4  [key=0, style=solid, color=green];
m8_3 -> m8_5  [key=0, style=solid, color=green];
m8_1 -> m8_3  [key=0, style=solid, color=green];
m8_1 -> m8_2  [key=0, style=solid];
m8_4 -> m8_27  [key=0, style=solid, color=green];
m8_4 -> m8_28  [key=2, style=dotted, color=green];
m8_4 -> m8_0  [key=2, style=dotted, color=green];
m8_4 -> m8_29  [key=2, style=dotted, color=green];
m8_5 -> m8_13  [key=1, style=dashed, color=green, label=parts];
m8_5 -> m8_21  [key=1, style=dashed, color=green, label=parts];
m8_5 -> m8_16  [key=1, style=dashed, color=green, label=parts];
m8_5 -> m8_17  [key=1, style=dashed, color=green, label=parts];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_30  [key=2, style=dotted];
m8_5 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_5 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_5 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_5 -> m8_26  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_12 -> m8_13  [key=0, style=solid, color=green];
m8_12 -> m8_15  [key=0, style=solid, color=green];
m8_8 -> m8_12  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_13  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_14  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_15  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_20  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_21  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_22  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_23  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_24  [key=1, style=dashed, color=green, label=int];
m8_8 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_8 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_9 -> m8_12  [key=0, style=solid, color=green];
m8_9 -> m8_10  [key=0, style=solid];
m8_11 -> m8_12  [key=0, style=solid, color=green];
m8_11 -> m8_13  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_14  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_15  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_20  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_21  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_22  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_23  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_24  [key=1, style=dashed, color=green, label=int];
m8_11 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_13 -> m8_14  [key=0, style=solid, color=green];
m8_13 -> m8_0  [key=2, style=dotted, color=green];
m8_13 -> m8_29  [key=2, style=dotted, color=green];
m8_13 -> m8_31  [key=2, style=dotted, color=green];
m8_15 -> m8_16  [key=0, style=solid, color=green];
m8_15 -> m8_26  [key=0, style=solid, color=green];
m8_14 -> m8_14  [key=1, style=dashed, color=green, label=int];
m8_14 -> m8_15  [key=0, style=solid, color=green];
m8_14 -> m8_20  [key=1, style=dashed, color=green, label=int];
m8_14 -> m8_21  [key=1, style=dashed, color=green, label=int];
m8_14 -> m8_22  [key=1, style=dashed, color=green, label=int];
m8_14 -> m8_23  [key=1, style=dashed, color=green, label=int];
m8_14 -> m8_24  [key=1, style=dashed, color=green, label=int];
m8_20 -> m8_21  [key=0, style=solid, color=green];
m8_20 -> m8_22  [key=0, style=solid, color=green];
m8_21 -> m8_26  [key=0, style=solid, color=green];
m8_21 -> m8_31  [key=2, style=dotted, color=green];
m8_22 -> m8_23  [key=0, style=solid, color=green];
m8_22 -> m8_24  [key=1, style=dashed, color=green, label=lastPart];
m8_22 -> m8_25  [key=1, style=dashed, color=green, label=lastPart];
m8_23 -> m8_24  [key=0, style=solid, color=green];
m8_23 -> m8_25  [key=0, style=solid, color=green];
m8_24 -> m8_24  [key=1, style=dashed, color=green, label=lastPart];
m8_24 -> m8_25  [key=0, style=solid, color=green];
m8_24 -> m8_29  [key=2, style=dotted, color=green];
m8_16 -> m8_17  [key=0, style=solid, color=green];
m8_16 -> m8_18  [key=0, style=solid, color=green];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_32  [key=2, style=dotted];
m8_26 -> m8_33  [key=2, style=dotted];
m8_19 -> m8_20  [key=0, style=solid, color=green];
m8_19 -> m8_22  [key=1, style=dashed, color=green, label=tensMap];
m8_18 -> m8_21  [key=1, style=dashed, color=green, label=unitsMap];
m8_18 -> m8_24  [key=1, style=dashed, color=green, label=unitsMap];
m8_18 -> m8_19  [key=0, style=solid, color=green];
m8_25 -> m8_31  [key=2, style=dotted];
m8_25 -> m8_26  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid, color=green];
m8_17 -> m8_31  [key=2, style=dotted, color=green];
m8_7 -> m8_0  [key=2, style=dotted];
m8_7 -> m8_29  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_31  [key=2, style=dotted];
m8_10 -> m8_0  [key=2, style=dotted];
m8_10 -> m8_29  [key=2, style=dotted];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_31  [key=2, style=dotted];
m8_6 -> m8_9  [key=0, style=solid];
m8_6 -> m8_7  [key=0, style=solid];
m8_2 -> m8_27  [key=0, style=solid];
m8_27 -> m8_0  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid, color=green];
m10_0 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_0 -> m10_5  [key=1, style=dashed, color=green, label=string];
m10_0 -> m10_7  [key=1, style=dashed, color=green, label=string];
m10_0 -> m10_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_0 -> m10_0  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResourceKey"];
m10_1 -> m10_2  [key=0, style=solid, color=green];
m10_3 -> m10_4  [key=0, style=solid, color=green];
m10_3 -> m10_6  [key=1, style=dashed, color=green, label=mod10];
m10_5 -> m10_9  [key=0, style=solid, color=green];
m10_7 -> m10_9  [key=0, style=solid, color=green];
m10_8 -> m10_9  [key=0, style=solid, color=red];
m10_2 -> m10_3  [key=0, style=solid, color=green];
m10_2 -> m10_8  [key=0, style=solid, color=green];
m10_4 -> m10_5  [key=0, style=solid, color=green];
m10_4 -> m10_6  [key=0, style=solid, color=green];
m10_6 -> m10_7  [key=0, style=solid, color=green];
m10_6 -> m10_8  [key=0, style=solid, color=green];
m10_9 -> m10_0  [key=0, style=bold, color=blue];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_91 -> m12_96  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_92 -> m12_93  [key=0, style=solid];
m12_93 -> m12_94  [key=0, style=solid];
m12_93 -> m12_96  [key=0, style=solid];
m12_93 -> m12_100  [key=2, style=dotted];
m12_93 -> m12_97  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
m12_96 -> m12_97  [key=0, style=solid];
m12_96 -> m12_98  [key=0, style=solid];
m12_96 -> m12_102  [key=2, style=dotted];
m12_94 -> m12_95  [key=0, style=solid];
m12_97 -> m12_99  [key=0, style=solid];
m12_95 -> m12_99  [key=0, style=solid];
m12_95 -> m12_101  [key=2, style=dotted];
m12_98 -> m12_99  [key=0, style=solid];
m12_98 -> m12_101  [key=2, style=dotted];
m12_99 -> m12_91  [key=0, style=bold, color=blue];
m12_35 -> m12_45  [key=0, style=solid];
m12_35 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_35 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_35 -> m12_69  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_35 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_35 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_46  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_35 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_45 -> m12_46  [key=0, style=solid];
m12_45 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label=changeType];
m12_46 -> m12_47  [key=0, style=solid];
m12_47 -> m12_48  [key=0, style=solid];
m12_47 -> m12_49  [key=2, style=dotted];
m12_47 -> m12_50  [key=2, style=dotted];
m12_47 -> m12_51  [key=2, style=dotted];
m12_48 -> m12_35  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_3  [key=2, style=dotted];
m12_1 -> m12_4  [key=2, style=dotted];
m12_1 -> m12_5  [key=2, style=dotted];
m12_2 -> m12_0  [key=0, style=bold, color=blue];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m12_5 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_10  [key=2, style=dotted];
m12_6 -> m12_11  [key=2, style=dotted];
m12_6 -> m12_12  [key=2, style=dotted];
m12_6 -> m12_13  [key=2, style=dotted];
m12_6 -> m12_14  [key=2, style=dotted];
m12_6 -> m12_15  [key=2, style=dotted];
m12_6 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_6 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_7 -> m12_8  [key=0, style=solid];
m12_7 -> m12_16  [key=2, style=dotted];
m12_7 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_17  [key=2, style=dotted];
m12_8 -> m12_18  [key=2, style=dotted];
m12_8 -> m12_16  [key=2, style=dotted];
m12_8 -> m12_19  [key=2, style=dotted];
m12_8 -> m12_20  [key=2, style=dotted];
m12_8 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_8 -> m12_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_9 -> m12_5  [key=0, style=bold, color=blue];
m12_82 -> m12_83  [key=0, style=solid];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_4  [key=2, style=dotted];
m12_21 -> m12_22  [key=0, style=solid];
m12_24 -> m12_25  [key=0, style=solid];
m12_28 -> m12_29  [key=0, style=solid];
m12_23 -> m12_21  [key=0, style=bold, color=blue];
m12_25 -> m12_26  [key=0, style=solid];
m12_25 -> m12_27  [key=2, style=dotted];
m12_26 -> m12_24  [key=0, style=bold, color=blue];
m12_29 -> m12_30  [key=0, style=solid];
m12_30 -> m12_28  [key=0, style=bold, color=blue];
m12_38 -> m12_39  [key=0, style=solid];
m12_40 -> m12_41  [key=0, style=solid];
m12_39 -> m12_38  [key=0, style=bold, color=blue];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_43  [key=2, style=dotted];
m12_41 -> m12_44  [key=2, style=dotted];
m12_42 -> m12_40  [key=0, style=bold, color=blue];
m12_53 -> m12_54  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_50  [key=2, style=dotted];
m12_61 -> m12_69  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_61 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_61 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_61 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_61 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_62 -> m12_63  [key=0, style=solid];
m12_69 -> m12_70  [key=0, style=solid];
m12_69 -> m12_71  [key=2, style=dotted];
m12_69 -> m12_72  [key=2, style=dotted];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_59  [key=2, style=dotted];
m12_63 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_63 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_63 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=withValue];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_76  [key=2, style=dotted];
m12_74 -> m12_77  [key=2, style=dotted];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_59  [key=2, style=dotted];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_56  [key=2, style=dotted];
m12_54 -> m12_57  [key=2, style=dotted];
m12_54 -> m12_10  [key=2, style=dotted];
m12_54 -> m12_58  [key=2, style=dotted];
m12_54 -> m12_59  [key=2, style=dotted];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_10  [key=2, style=dotted];
m12_83 -> m12_88  [key=2, style=dotted];
m12_84 -> m12_87  [key=0, style=solid];
m12_84 -> m12_89  [key=2, style=dotted];
m12_52 -> m12_53  [key=0, style=solid];
m12_55 -> m12_52  [key=0, style=bold, color=blue];
m12_60 -> m12_61  [key=0, style=solid];
m12_65 -> m12_66  [key=0, style=solid];
m12_79 -> m12_80  [key=0, style=solid];
m12_79 -> m12_81  [key=2, style=dotted];
m12_67 -> m12_60  [key=0, style=bold, color=blue];
m12_68 -> m12_69  [key=0, style=solid];
m12_70 -> m12_68  [key=0, style=bold, color=blue];
m12_73 -> m12_74  [key=0, style=solid];
m12_75 -> m12_73  [key=0, style=bold, color=blue];
m12_78 -> m12_79  [key=0, style=solid];
m12_80 -> m12_78  [key=0, style=bold, color=blue];
m12_85 -> m12_86  [key=0, style=solid];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_90  [key=2, style=dotted];
m12_87 -> m12_82  [key=0, style=bold, color=blue];
m12_4 -> m12_31  [key=0, style=solid];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_35  [key=2, style=dotted];
m12_31 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_32 -> m12_33  [key=0, style=solid];
m12_32 -> m12_36  [key=2, style=dotted];
m12_32 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_32 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_33 -> m12_34  [key=0, style=solid];
m12_33 -> m12_37  [key=2, style=dotted];
m12_34 -> m12_4  [key=0, style=bold, color=blue];
m12_103 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m12_104 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=bool];
m12_105 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_106 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_106 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_106 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_106 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_106 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_106 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_107 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_107 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_107 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_107 -> m12_69  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_107 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_107 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_107 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_108 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m12_108 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m12_108 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m12_109 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=bool];
m12_110 -> m12_69  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_110 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_110 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m12_111 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=type];
m12_111 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label=type];
m13_0 -> m13_1  [key=0, style=solid, color=green];
m13_0 -> m13_2  [key=1, style=dashed, color=green, label=bool];
m13_0 -> m13_6  [key=1, style=dashed, color=green, label=object];
m13_1 -> m13_2  [key=0, style=solid, color=green];
m13_1 -> m13_8  [key=2, style=dotted, color=green];
m13_1 -> m13_3  [key=1, style=dashed, color=green, label=result];
m13_1 -> m13_5  [key=1, style=dashed, color=green, label=result];
m13_2 -> m13_3  [key=0, style=solid, color=green];
m13_2 -> m13_4  [key=0, style=solid, color=green];
m13_3 -> m13_7  [key=0, style=solid, color=green];
m13_3 -> m13_9  [key=2, style=dotted, color=green];
m13_3 -> m13_10  [key=2, style=dotted, color=green];
m13_3 -> m13_11  [key=2, style=dotted, color=green];
m13_5 -> m13_6  [key=0, style=solid, color=green];
m13_5 -> m13_12  [key=2, style=dotted, color=green];
m13_5 -> m13_10  [key=2, style=dotted, color=green];
m13_5 -> m13_11  [key=2, style=dotted, color=green];
m13_4 -> m13_5  [key=0, style=solid, color=green];
m13_6 -> m13_7  [key=0, style=solid, color=green];
m13_6 -> m13_13  [key=2, style=dotted, color=green];
m13_7 -> m13_0  [key=0, style=bold, color=blue];
}
