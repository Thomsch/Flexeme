digraph  {
n66 [label="System.Globalization.CultureInfo", span=""];
n67 [label=type, span=""];
n68 [label="System.Type", span=""];
n69 [label=string, span=""];
n70 [label="System.Globalization.CultureInfo", span=""];
n0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="14-16"];
n2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n4 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
n5 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
n6 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="21-26"];
n7 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="28-28"];
n21 [cluster="lambda expression", label="ChangeType(value, type, conversionCulture)", span="28-28"];
n10 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n12 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="79-79"];
n13 [cluster="System.ApplicationException.ApplicationException(string)", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
n14 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
n8 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="30-32"];
n15 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n9 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
n16 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
n18 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n19 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
n23 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="32-32"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n24 [cluster="lambda expression", label="a.MatchNothing()", span="30-30"];
n25 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
n26 [cluster="Unk.MatchNothing", label="Entry Unk.MatchNothing", span=""];
n28 [cluster="lambda expression", label="((Just<object>)c).Value", span="32-32"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="32-32"];
n32 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label=InvalidCastException, span="52-52"];
n33 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Nothing<object>();", span="54-54"];
n34 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label=FormatException, span="56-56"];
n35 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Nothing<object>();", span="58-58"];
n36 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label=OverflowException, span="60-60"];
n37 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.Nothing<object>();", span="62-62"];
n38 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
n39 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="66-66"];
n40 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="72-72"];
n41 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="77-77"];
n42 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n43 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="39-43"];
n48 [cluster="System.Nullable.GetUnderlyingType(System.Type)", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="39-43"];
n49 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
n50 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="68-69"];
n51 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="66-66"];
n52 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
n53 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="74-74"];
n54 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="72-72"];
n55 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="object parsedValue", span="79-79"];
n56 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="parsedValue = Enum.Parse(conversionType, value)", span="82-82"];
n59 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="Enum.IsDefined(conversionType, parsedValue)", span="88-88"];
n57 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label=ArgumentException, span="84-84"];
n63 [cluster="System.Enum.Parse(System.Type, string)", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
n60 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="return parsedValue;", span="90-90"];
n58 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="throw new FormatException();", span="86-86"];
n61 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="throw new FormatException();", span="92-92"];
n65 [cluster="System.Enum.IsDefined(System.Type, object)", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
n62 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="77-77"];
n64 [cluster="System.FormatException.FormatException()", label="Entry System.FormatException.FormatException()", span="0-0"];
n66 -> n21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n67 -> n21  [color=darkseagreen4, key=1, label=type, style=dashed];
n5 -> n21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n6 -> n21  [color=darkseagreen4, key=1, label=type, style=dashed];
n6 -> n8  [color=darkseagreen4, key=1, label=type, style=dashed];
n7 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n8 -> n23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n8 -> n27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n59  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n56 -> n60  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
}
