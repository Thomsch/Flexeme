digraph  {
n42 [label=string, span=""];
n0 [cluster="Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", label="Entry Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", span="14-14"];
n1 [cluster="Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", color=red, community=1, label="0: PascalCaseWordPartsRegex = new Regex(@''[A-Z]?[a-z]+|[0-9]+|[A-Z]+(?=[A-Z][a-z]|[0-9]|\b)'',\r\n                RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptionsUtil.Compiled)", span="16-17"];
n2 [cluster="Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", label="FreestandingSpacingCharRegex = new Regex(@''\s[-_]|[-_]\s'', RegexOptionsUtil.Compiled)", span="18-18"];
n4 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
n3 [cluster="Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", label="Exit Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", span="14-14"];
n5 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="Entry Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="21-21"];
n6 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="return string.Join('' '', input.Split(new[] {'_', '-'}));", span="23-23"];
n7 [cluster="Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", label="Exit Humanizer.StringHumanizeExtensions.FromUnderscoreDashSeparatedWords(string)", span="21-21"];
n8 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n9 [cluster="string.Join(string, params string[])", label="Entry string.Join(string, params string[])", span="0-0"];
n10 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="Entry Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="26-26"];
n11 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="var result = string.Join('' '', PascalCaseWordPartsRegex\r\n                .Matches(input).Cast<Match>()\r\n                .Select(match => match.Value.ToCharArray().All(char.IsUpper) &&\r\n                    (match.Value.Length > 1 || (match.Index > 0 && input[match.Index - 1] == ' ') || match.Value == ''I'')\r\n                    ? match.Value\r\n                    : match.Value.ToLower()))", span="28-33"];
n21 [cluster="lambda expression", label="match.Value.ToCharArray().All(char.IsUpper) &&\r\n                    (match.Value.Length > 1 || (match.Index > 0 && input[match.Index - 1] == ' ') || match.Value == ''I'')\r\n                    ? match.Value\r\n                    : match.Value.ToLower()", span="30-33"];
n12 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="return result.Length > 0 ? char.ToUpper(result[0]) +\r\n                result.Substring(1, result.Length - 1) : result;", span="35-36"];
n14 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
n15 [cluster="System.Collections.IEnumerable.Cast<TResult>()", label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0"];
n16 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n17 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="30-33"];
n13 [cluster="Humanizer.StringHumanizeExtensions.FromPascalCase(string)", label="Exit Humanizer.StringHumanizeExtensions.FromPascalCase(string)", span="26-26"];
n18 [cluster="char.ToUpper(char)", label="Entry char.ToUpper(char)", span="0-0"];
n19 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="30-33"];
n23 [cluster="string.ToCharArray()", label="Entry string.ToCharArray()", span="0-0"];
n24 [cluster="Unk.All", label="Entry Unk.All", span=""];
n25 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n26 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="Entry Humanizer.StringHumanizeExtensions.Humanize(string)", span="44-44"];
n27 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="input.ToCharArray().All(char.IsUpper)", span="47-47"];
n28 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return input;", span="48-48"];
n29 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="FreestandingSpacingCharRegex.IsMatch(input)", span="52-52"];
n30 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromPascalCase(FromUnderscoreDashSeparatedWords(input));", span="53-53"];
n31 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="input.Contains(''_'') || input.Contains(''-'')", span="55-55"];
n32 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromUnderscoreDashSeparatedWords(input);", span="56-56"];
n33 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="return FromPascalCase(input);", span="58-58"];
n35 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
n36 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n34 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string)", label="Exit Humanizer.StringHumanizeExtensions.Humanize(string)", span="44-44"];
n37 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="Entry Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="67-67"];
n38 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="return input.Humanize().ApplyCase(casing);", span="69-69"];
n39 [cluster="Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", label="Exit Humanizer.StringHumanizeExtensions.Humanize(string, Humanizer.LetterCasing)", span="67-67"];
n40 [cluster="string.Humanize()", label="Entry string.Humanize()", span="44-44"];
n41 [cluster="string.ApplyCase(Humanizer.LetterCasing)", label="Entry string.ApplyCase(Humanizer.LetterCasing)", span="15-15"];
d1 [cluster="Humanizer.StringHumanizeExtensions.StringHumanizeExtensions()", color=green, community=0, label="0: PascalCaseWordPartsRegex = new Regex(@''[A-Z]?[a-z]+|[0-9]+|[A-Z]+(?=[A-Z][a-z]|[0-9]|\b)'',\r\n                RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptionsUtil.Compiled)", span="16-17"];
m0_18 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase(string, string)", span="73-73"];
m0_19 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedResult, input.Humanize(LetterCasing.Sentence))", span="75-75"];
m0_20 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoSentenceCase(string, string)", span="73-73"];
m0_5 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithUnderscoresAndDashes(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithUnderscoresAndDashes(string, string)", span="35-35"];
m0_6 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithUnderscoresAndDashes(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedReseult, input.Humanize())", span="37-37"];
m0_7 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithUnderscoresAndDashes(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithUnderscoresAndDashes(string, string)", span="35-35"];
m0_8 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithAcronyms(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithAcronyms(string, string)", span="48-48"];
m0_9 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithAcronyms(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedValue, input.Humanize())", span="50-50"];
m0_10 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithAcronyms(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeStringWithAcronyms(string, string)", span="48-48"];
m0_0 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringInPascalCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeStringInPascalCase(string, string)", span="19-19"];
m0_1 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringInPascalCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedResult, input.Humanize())", span="21-21"];
m0_2 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeStringInPascalCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeStringInPascalCase(string, string)", span="19-19"];
m0_11 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTileCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTileCase(string, string)", span="57-57"];
m0_12 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTileCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedResult, input.Humanize(LetterCasing.Title))", span="59-59"];
m0_13 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTileCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoTileCase(string, string)", span="57-57"];
m0_14 [cluster="string.Humanize(Humanizer.LetterCasing)", file="StringHumanizeTests.cs", label="Entry string.Humanize(Humanizer.LetterCasing)", span="67-67"];
m0_4 [cluster="Unk.Equal", file="StringHumanizeTests.cs", label="Entry Unk.Equal", span=""];
m0_21 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase(string, string)", span="81-81"];
m0_22 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedResult, input.Humanize(LetterCasing.AllCaps))", span="83-83"];
m0_23 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoUpperCase(string, string)", span="81-81"];
m0_15 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase(string, string)", file="StringHumanizeTests.cs", label="Entry Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase(string, string)", span="65-65"];
m0_16 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase(string, string)", file="StringHumanizeTests.cs", label="Assert.Equal(expectedResult, input.Humanize(LetterCasing.LowerCase))", span="67-67"];
m0_17 [cluster="Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase(string, string)", file="StringHumanizeTests.cs", label="Exit Humanizer.Tests.StringHumanizeTests.CanHumanizeIntoLowerCase(string, string)", span="65-65"];
n42 -> n21  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n1  [color=red, key=0, style=solid];
n0 -> d1  [color=green, key=0, style=solid];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n4  [color=red, key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n4  [key=2, style=dotted];
n3 -> n0  [color=blue, key=0, style=bold];
n5 -> n6  [key=0, style=solid];
n5 -> n26  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n6 -> n7  [key=0, style=solid];
n6 -> n8  [key=2, style=dotted];
n6 -> n9  [key=2, style=dotted];
n7 -> n5  [color=blue, key=0, style=bold];
n10 -> n11  [key=0, style=solid];
n10 -> n21  [color=darkseagreen4, key=1, label=string, style=dashed];
n10 -> n5  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n10 -> n26  [color=darkorchid, key=3, label="Parameter variable string input", style=bold];
n11 -> n12  [key=0, style=solid];
n11 -> n14  [key=2, style=dotted];
n11 -> n15  [key=2, style=dotted];
n11 -> n16  [key=2, style=dotted];
n11 -> n17  [key=2, style=dotted];
n11 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n21 -> n24  [key=2, style=dotted];
n21 -> n25  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n12 -> n18  [key=2, style=dotted];
n12 -> n19  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n13 -> n10  [color=blue, key=0, style=bold];
n22 -> n20  [color=blue, key=0, style=bold];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n29  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n30  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n31  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n32  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n33  [color=darkseagreen4, key=1, label=string, style=dashed];
n26 -> n26  [color=darkorchid, key=3, label="method methodReturn string Humanize", style=bold];
n26 -> n10  [color=darkorchid, key=3, label="method methodReturn string Humanize", style=bold];
n26 -> n5  [color=darkorchid, key=3, label="method methodReturn string Humanize", style=bold];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=0, style=solid];
n27 -> n23  [key=2, style=dotted];
n27 -> n24  [key=2, style=dotted];
n28 -> n34  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n31  [key=0, style=solid];
n29 -> n35  [key=2, style=dotted];
n30 -> n34  [key=0, style=solid];
n30 -> n5  [key=2, style=dotted];
n30 -> n10  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [key=0, style=solid];
n31 -> n36  [key=2, style=dotted];
n32 -> n34  [key=0, style=solid];
n32 -> n5  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n10  [key=2, style=dotted];
n34 -> n26  [color=blue, key=0, style=bold];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n40  [key=2, style=dotted];
n38 -> n41  [key=2, style=dotted];
n39 -> n37  [color=blue, key=0, style=bold];
d1 -> n2  [color=green, key=0, style=solid];
d1 -> n4  [color=green, key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_14  [key=2, style=dotted];
m0_19 -> m0_4  [key=2, style=dotted];
m0_20 -> m0_18  [color=blue, key=0, style=bold];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> n40  [key=2, style=dotted];
m0_6 -> m0_4  [key=2, style=dotted];
m0_7 -> m0_5  [color=blue, key=0, style=bold];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> n40  [key=2, style=dotted];
m0_9 -> m0_4  [key=2, style=dotted];
m0_10 -> m0_8  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> n40  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_12 -> m0_4  [key=2, style=dotted];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_14  [key=2, style=dotted];
m0_22 -> m0_4  [key=2, style=dotted];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_14  [key=2, style=dotted];
m0_16 -> m0_4  [key=2, style=dotted];
m0_17 -> m0_15  [color=blue, key=0, style=bold];
}
