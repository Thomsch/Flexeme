digraph  {
d1 [cluster="Humanizer.NumberToNumberExtensions.Tens(int)", color=green, community=0, label="-1: return input*10;", span="18-18"];
d0 [cluster="Humanizer.NumberToNumberExtensions.Tens(int)", label="Entry Humanizer.NumberToNumberExtensions.Tens(int)", span="16-16"];
d2 [cluster="Humanizer.NumberToNumberExtensions.Tens(int)", label="Exit Humanizer.NumberToNumberExtensions.Tens(int)", span="16-16"];
d4 [cluster="Humanizer.NumberToNumberExtensions.Tens(uint)", color=green, community=0, label="-1: return input*10;", span="26-26"];
d3 [cluster="Humanizer.NumberToNumberExtensions.Tens(uint)", label="Entry Humanizer.NumberToNumberExtensions.Tens(uint)", span="24-24"];
d5 [cluster="Humanizer.NumberToNumberExtensions.Tens(uint)", label="Exit Humanizer.NumberToNumberExtensions.Tens(uint)", span="24-24"];
d7 [cluster="Humanizer.NumberToNumberExtensions.Tens(long)", color=green, community=0, label="-1: return input*10;", span="34-34"];
d6 [cluster="Humanizer.NumberToNumberExtensions.Tens(long)", label="Entry Humanizer.NumberToNumberExtensions.Tens(long)", span="32-32"];
d8 [cluster="Humanizer.NumberToNumberExtensions.Tens(long)", label="Exit Humanizer.NumberToNumberExtensions.Tens(long)", span="32-32"];
d10 [cluster="Humanizer.NumberToNumberExtensions.Tens(ulong)", color=green, community=0, label="-1: return input*10;", span="42-42"];
d9 [cluster="Humanizer.NumberToNumberExtensions.Tens(ulong)", label="Entry Humanizer.NumberToNumberExtensions.Tens(ulong)", span="40-40"];
d11 [cluster="Humanizer.NumberToNumberExtensions.Tens(ulong)", label="Exit Humanizer.NumberToNumberExtensions.Tens(ulong)", span="40-40"];
d13 [cluster="Humanizer.NumberToNumberExtensions.Tens(double)", color=green, community=0, label="-1: return input*10;", span="50-50"];
d12 [cluster="Humanizer.NumberToNumberExtensions.Tens(double)", label="Entry Humanizer.NumberToNumberExtensions.Tens(double)", span="48-48"];
d14 [cluster="Humanizer.NumberToNumberExtensions.Tens(double)", label="Exit Humanizer.NumberToNumberExtensions.Tens(double)", span="48-48"];
d16 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(int)", color=green, community=0, label="-1: return input*100;", span="58-58"];
d15 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(int)", label="Entry Humanizer.NumberToNumberExtensions.Hundreds(int)", span="56-56"];
d17 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(int)", label="Exit Humanizer.NumberToNumberExtensions.Hundreds(int)", span="56-56"];
d19 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(uint)", color=green, community=0, label="-1: return input*100;", span="66-66"];
d18 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(uint)", label="Entry Humanizer.NumberToNumberExtensions.Hundreds(uint)", span="64-64"];
d20 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(uint)", label="Exit Humanizer.NumberToNumberExtensions.Hundreds(uint)", span="64-64"];
d22 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(long)", color=green, community=0, label="-1: return input*100;", span="74-74"];
d21 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(long)", label="Entry Humanizer.NumberToNumberExtensions.Hundreds(long)", span="72-72"];
d23 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(long)", label="Exit Humanizer.NumberToNumberExtensions.Hundreds(long)", span="72-72"];
d25 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(ulong)", color=green, community=0, label="-1: return input*100;", span="82-82"];
d24 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(ulong)", label="Entry Humanizer.NumberToNumberExtensions.Hundreds(ulong)", span="80-80"];
d26 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(ulong)", label="Exit Humanizer.NumberToNumberExtensions.Hundreds(ulong)", span="80-80"];
d28 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(double)", color=green, community=0, label="-1: return input*100;", span="90-90"];
d27 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(double)", label="Entry Humanizer.NumberToNumberExtensions.Hundreds(double)", span="88-88"];
d29 [cluster="Humanizer.NumberToNumberExtensions.Hundreds(double)", label="Exit Humanizer.NumberToNumberExtensions.Hundreds(double)", span="88-88"];
d31 [cluster="Humanizer.NumberToNumberExtensions.Thousands(int)", color=green, community=0, label="-1: return input*1000;", span="98-98"];
d30 [cluster="Humanizer.NumberToNumberExtensions.Thousands(int)", label="Entry Humanizer.NumberToNumberExtensions.Thousands(int)", span="96-96"];
d32 [cluster="Humanizer.NumberToNumberExtensions.Thousands(int)", label="Exit Humanizer.NumberToNumberExtensions.Thousands(int)", span="96-96"];
d34 [cluster="Humanizer.NumberToNumberExtensions.Thousands(uint)", color=green, community=0, label="-1: return input*1000;", span="106-106"];
d33 [cluster="Humanizer.NumberToNumberExtensions.Thousands(uint)", label="Entry Humanizer.NumberToNumberExtensions.Thousands(uint)", span="104-104"];
d35 [cluster="Humanizer.NumberToNumberExtensions.Thousands(uint)", label="Exit Humanizer.NumberToNumberExtensions.Thousands(uint)", span="104-104"];
d37 [cluster="Humanizer.NumberToNumberExtensions.Thousands(long)", color=green, community=0, label="-1: return input*1000;", span="114-114"];
d36 [cluster="Humanizer.NumberToNumberExtensions.Thousands(long)", label="Entry Humanizer.NumberToNumberExtensions.Thousands(long)", span="112-112"];
d38 [cluster="Humanizer.NumberToNumberExtensions.Thousands(long)", label="Exit Humanizer.NumberToNumberExtensions.Thousands(long)", span="112-112"];
d40 [cluster="Humanizer.NumberToNumberExtensions.Thousands(ulong)", color=green, community=0, label="-1: return input*1000;", span="122-122"];
d39 [cluster="Humanizer.NumberToNumberExtensions.Thousands(ulong)", label="Entry Humanizer.NumberToNumberExtensions.Thousands(ulong)", span="120-120"];
d41 [cluster="Humanizer.NumberToNumberExtensions.Thousands(ulong)", label="Exit Humanizer.NumberToNumberExtensions.Thousands(ulong)", span="120-120"];
d43 [cluster="Humanizer.NumberToNumberExtensions.Thousands(double)", color=green, community=0, label="-1: return input*1000;", span="130-130"];
d42 [cluster="Humanizer.NumberToNumberExtensions.Thousands(double)", label="Entry Humanizer.NumberToNumberExtensions.Thousands(double)", span="128-128"];
d44 [cluster="Humanizer.NumberToNumberExtensions.Thousands(double)", label="Exit Humanizer.NumberToNumberExtensions.Thousands(double)", span="128-128"];
d46 [cluster="Humanizer.NumberToNumberExtensions.Millions(int)", color=green, community=0, label="-1: return input*1000000;", span="138-138"];
d45 [cluster="Humanizer.NumberToNumberExtensions.Millions(int)", label="Entry Humanizer.NumberToNumberExtensions.Millions(int)", span="136-136"];
d47 [cluster="Humanizer.NumberToNumberExtensions.Millions(int)", label="Exit Humanizer.NumberToNumberExtensions.Millions(int)", span="136-136"];
d49 [cluster="Humanizer.NumberToNumberExtensions.Millions(uint)", color=green, community=0, label="-1: return input*1000000;", span="146-146"];
d48 [cluster="Humanizer.NumberToNumberExtensions.Millions(uint)", label="Entry Humanizer.NumberToNumberExtensions.Millions(uint)", span="144-144"];
d50 [cluster="Humanizer.NumberToNumberExtensions.Millions(uint)", label="Exit Humanizer.NumberToNumberExtensions.Millions(uint)", span="144-144"];
d52 [cluster="Humanizer.NumberToNumberExtensions.Millions(long)", color=green, community=0, label="-1: return input*1000000;", span="154-154"];
d51 [cluster="Humanizer.NumberToNumberExtensions.Millions(long)", label="Entry Humanizer.NumberToNumberExtensions.Millions(long)", span="152-152"];
d53 [cluster="Humanizer.NumberToNumberExtensions.Millions(long)", label="Exit Humanizer.NumberToNumberExtensions.Millions(long)", span="152-152"];
d55 [cluster="Humanizer.NumberToNumberExtensions.Millions(ulong)", color=green, community=0, label="-1: return input*1000000;", span="162-162"];
d54 [cluster="Humanizer.NumberToNumberExtensions.Millions(ulong)", label="Entry Humanizer.NumberToNumberExtensions.Millions(ulong)", span="160-160"];
d56 [cluster="Humanizer.NumberToNumberExtensions.Millions(ulong)", label="Exit Humanizer.NumberToNumberExtensions.Millions(ulong)", span="160-160"];
d58 [cluster="Humanizer.NumberToNumberExtensions.Millions(double)", color=green, community=0, label="-1: return input*1000000;", span="170-170"];
d57 [cluster="Humanizer.NumberToNumberExtensions.Millions(double)", label="Entry Humanizer.NumberToNumberExtensions.Millions(double)", span="168-168"];
d59 [cluster="Humanizer.NumberToNumberExtensions.Millions(double)", label="Exit Humanizer.NumberToNumberExtensions.Millions(double)", span="168-168"];
d61 [cluster="Humanizer.NumberToNumberExtensions.Billions(int)", color=green, community=0, label="-1: return input*1000000000;", span="178-178"];
d60 [cluster="Humanizer.NumberToNumberExtensions.Billions(int)", label="Entry Humanizer.NumberToNumberExtensions.Billions(int)", span="176-176"];
d62 [cluster="Humanizer.NumberToNumberExtensions.Billions(int)", label="Exit Humanizer.NumberToNumberExtensions.Billions(int)", span="176-176"];
d64 [cluster="Humanizer.NumberToNumberExtensions.Billions(uint)", color=green, community=0, label="-1: return input*1000000000;", span="186-186"];
d63 [cluster="Humanizer.NumberToNumberExtensions.Billions(uint)", label="Entry Humanizer.NumberToNumberExtensions.Billions(uint)", span="184-184"];
d65 [cluster="Humanizer.NumberToNumberExtensions.Billions(uint)", label="Exit Humanizer.NumberToNumberExtensions.Billions(uint)", span="184-184"];
d67 [cluster="Humanizer.NumberToNumberExtensions.Billions(long)", color=green, community=0, label="-1: return input*1000000000;", span="194-194"];
d66 [cluster="Humanizer.NumberToNumberExtensions.Billions(long)", label="Entry Humanizer.NumberToNumberExtensions.Billions(long)", span="192-192"];
d68 [cluster="Humanizer.NumberToNumberExtensions.Billions(long)", label="Exit Humanizer.NumberToNumberExtensions.Billions(long)", span="192-192"];
d70 [cluster="Humanizer.NumberToNumberExtensions.Billions(ulong)", color=green, community=0, label="-1: return input*1000000000;", span="202-202"];
d69 [cluster="Humanizer.NumberToNumberExtensions.Billions(ulong)", label="Entry Humanizer.NumberToNumberExtensions.Billions(ulong)", span="200-200"];
d71 [cluster="Humanizer.NumberToNumberExtensions.Billions(ulong)", label="Exit Humanizer.NumberToNumberExtensions.Billions(ulong)", span="200-200"];
d73 [cluster="Humanizer.NumberToNumberExtensions.Billions(double)", color=green, community=0, label="-1: return input*1000000000;", span="210-210"];
d72 [cluster="Humanizer.NumberToNumberExtensions.Billions(double)", label="Entry Humanizer.NumberToNumberExtensions.Billions(double)", span="208-208"];
d74 [cluster="Humanizer.NumberToNumberExtensions.Billions(double)", label="Exit Humanizer.NumberToNumberExtensions.Billions(double)", span="208-208"];
m0_96 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToMillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.DoubleToMillions()", span="140-140"];
m0_97 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: double number = 4", span="142-142"];
m0_98 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(4000000d, number.Millions())", span="143-143"];
m0_99 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToMillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.DoubleToMillions()", span="140-140"];
m0_80 [cluster="int.Millions()", file="NumberToNumberTests.cs", label="Entry int.Millions()", span="136-136"];
m0_71 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToThousands()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.DoubleToThousands()", span="105-105"];
m0_72 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: double number = 3", span="107-107"];
m0_73 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(3000d, number.Thousands())", span="108-108"];
m0_74 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToThousands()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.DoubleToThousands()", span="105-105"];
m0_85 [cluster="uint.Millions()", file="NumberToNumberTests.cs", label="Entry uint.Millions()", span="144-144"];
m0_125 [cluster="double.Billions()", file="NumberToNumberTests.cs", label="Entry double.Billions()", span="208-208"];
m0_116 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToBillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UlongToBillions()", span="168-168"];
m0_117 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: ulong number = 1", span="170-170"];
m0_118 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(1000000000UL, number.Billions())", span="171-171"];
m0_119 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToBillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UlongToBillions()", span="168-168"];
m0_31 [cluster="Humanizer.Tests.NumberToNumberTests.UintToHundreds()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UintToHundreds()", span="49-49"];
m0_32 [cluster="Humanizer.Tests.NumberToNumberTests.UintToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: uint number = 2", span="51-51"];
m0_33 [cluster="Humanizer.Tests.NumberToNumberTests.UintToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(200U, number.Hundreds())", span="52-52"];
m0_34 [cluster="Humanizer.Tests.NumberToNumberTests.UintToHundreds()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UintToHundreds()", span="49-49"];
m0_45 [cluster="ulong.Hundreds()", file="NumberToNumberTests.cs", label="Entry ulong.Hundreds()", span="80-80"];
m0_5 [cluster="Unk.Equal", file="NumberToNumberTests.cs", label="Entry Unk.Equal", span=""];
m0_60 [cluster="uint.Thousands()", file="NumberToNumberTests.cs", label="Entry uint.Thousands()", span="104-104"];
m0_6 [cluster="Humanizer.Tests.NumberToNumberTests.UintToTens()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UintToTens()", span="14-14"];
m0_7 [cluster="Humanizer.Tests.NumberToNumberTests.UintToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: uint number = 1", span="16-16"];
m0_8 [cluster="Humanizer.Tests.NumberToNumberTests.UintToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(10U, number.Tens())", span="17-17"];
m0_9 [cluster="Humanizer.Tests.NumberToNumberTests.UintToTens()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UintToTens()", span="14-14"];
m0_110 [cluster="uint.Billions()", file="NumberToNumberTests.cs", label="Entry uint.Billions()", span="184-184"];
m0_120 [cluster="ulong.Billions()", file="NumberToNumberTests.cs", label="Entry ulong.Billions()", span="200-200"];
m0_41 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToHundreds()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UlongToHundreds()", span="63-63"];
m0_42 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: ulong number = 2", span="65-65"];
m0_43 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(200UL, number.Hundreds())", span="66-66"];
m0_44 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToHundreds()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UlongToHundreds()", span="63-63"];
m0_21 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToTens()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.DoubleToTens()", span="35-35"];
m0_22 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: double number = 1", span="37-37"];
m0_23 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(10d, number.Tens())", span="38-38"];
m0_24 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToTens()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.DoubleToTens()", span="35-35"];
m0_50 [cluster="double.Hundreds()", file="NumberToNumberTests.cs", label="Entry double.Hundreds()", span="88-88"];
m0_35 [cluster="uint.Hundreds()", file="NumberToNumberTests.cs", label="Entry uint.Hundreds()", span="64-64"];
m0_111 [cluster="Humanizer.Tests.NumberToNumberTests.LongToBillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.LongToBillions()", span="161-161"];
m0_112 [cluster="Humanizer.Tests.NumberToNumberTests.LongToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: long number = 1", span="163-163"];
m0_113 [cluster="Humanizer.Tests.NumberToNumberTests.LongToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(1000000000L, number.Billions())", span="164-164"];
m0_114 [cluster="Humanizer.Tests.NumberToNumberTests.LongToBillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.LongToBillions()", span="161-161"];
m0_121 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToBillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.DoubleToBillions()", span="175-175"];
m0_122 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: double number = 1", span="177-177"];
m0_123 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(1000000000d, number.Billions())", span="178-178"];
m0_124 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToBillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.DoubleToBillions()", span="175-175"];
m0_61 [cluster="Humanizer.Tests.NumberToNumberTests.LongToThousands()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.LongToThousands()", span="91-91"];
m0_62 [cluster="Humanizer.Tests.NumberToNumberTests.LongToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: long number = 3", span="93-93"];
m0_63 [cluster="Humanizer.Tests.NumberToNumberTests.LongToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(3000L, number.Thousands())", span="94-94"];
m0_64 [cluster="Humanizer.Tests.NumberToNumberTests.LongToThousands()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.LongToThousands()", span="91-91"];
m0_55 [cluster="int.Thousands()", file="NumberToNumberTests.cs", label="Entry int.Thousands()", span="96-96"];
m0_20 [cluster="ulong.Tens()", file="NumberToNumberTests.cs", label="Entry ulong.Tens()", span="40-40"];
m0_81 [cluster="Humanizer.Tests.NumberToNumberTests.UintToMillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UintToMillions()", span="119-119"];
m0_82 [cluster="Humanizer.Tests.NumberToNumberTests.UintToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: uint number = 4", span="121-121"];
m0_83 [cluster="Humanizer.Tests.NumberToNumberTests.UintToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(4000000U, number.Millions())", span="122-122"];
m0_84 [cluster="Humanizer.Tests.NumberToNumberTests.UintToMillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UintToMillions()", span="119-119"];
m0_115 [cluster="long.Billions()", file="NumberToNumberTests.cs", label="Entry long.Billions()", span="192-192"];
m0_76 [cluster="Humanizer.Tests.NumberToNumberTests.IntToMillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.IntToMillions()", span="112-112"];
m0_77 [cluster="Humanizer.Tests.NumberToNumberTests.IntToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: int number = 4", span="114-114"];
m0_78 [cluster="Humanizer.Tests.NumberToNumberTests.IntToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(4000000, number.Millions())", span="115-115"];
m0_79 [cluster="Humanizer.Tests.NumberToNumberTests.IntToMillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.IntToMillions()", span="112-112"];
m0_66 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToThousands()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UlongToThousands()", span="98-98"];
m0_67 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: ulong number = 3", span="100-100"];
m0_68 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(3000UL, number.Thousands())", span="101-101"];
m0_69 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToThousands()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UlongToThousands()", span="98-98"];
m0_25 [cluster="double.Tens()", file="NumberToNumberTests.cs", label="Entry double.Tens()", span="48-48"];
m0_30 [cluster="int.Hundreds()", file="NumberToNumberTests.cs", label="Entry int.Hundreds()", span="56-56"];
m0_86 [cluster="Humanizer.Tests.NumberToNumberTests.LongToMillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.LongToMillions()", span="126-126"];
m0_87 [cluster="Humanizer.Tests.NumberToNumberTests.LongToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: long number = 4", span="128-128"];
m0_88 [cluster="Humanizer.Tests.NumberToNumberTests.LongToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(4000000L, number.Millions())", span="129-129"];
m0_89 [cluster="Humanizer.Tests.NumberToNumberTests.LongToMillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.LongToMillions()", span="126-126"];
m0_4 [cluster="int.Tens()", file="NumberToNumberTests.cs", label="Entry int.Tens()", span="16-16"];
m0_51 [cluster="Humanizer.Tests.NumberToNumberTests.IntToThousands()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.IntToThousands()", span="77-77"];
m0_52 [cluster="Humanizer.Tests.NumberToNumberTests.IntToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: int number = 3", span="79-79"];
m0_53 [cluster="Humanizer.Tests.NumberToNumberTests.IntToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(3000, number.Thousands())", span="80-80"];
m0_54 [cluster="Humanizer.Tests.NumberToNumberTests.IntToThousands()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.IntToThousands()", span="77-77"];
m0_90 [cluster="long.Millions()", file="NumberToNumberTests.cs", label="Entry long.Millions()", span="152-152"];
m0_105 [cluster="int.Billions()", file="NumberToNumberTests.cs", label="Entry int.Billions()", span="176-176"];
m0_11 [cluster="Humanizer.Tests.NumberToNumberTests.LongToTens()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.LongToTens()", span="21-21"];
m0_12 [cluster="Humanizer.Tests.NumberToNumberTests.LongToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: long number = 1", span="23-23"];
m0_13 [cluster="Humanizer.Tests.NumberToNumberTests.LongToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(10L, number.Tens())", span="24-24"];
m0_14 [cluster="Humanizer.Tests.NumberToNumberTests.LongToTens()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.LongToTens()", span="21-21"];
m0_75 [cluster="double.Thousands()", file="NumberToNumberTests.cs", label="Entry double.Thousands()", span="128-128"];
m0_15 [cluster="long.Tens()", file="NumberToNumberTests.cs", label="Entry long.Tens()", span="32-32"];
m0_106 [cluster="Humanizer.Tests.NumberToNumberTests.UintToBillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UintToBillions()", span="154-154"];
m0_107 [cluster="Humanizer.Tests.NumberToNumberTests.UintToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: uint number = 1", span="156-156"];
m0_108 [cluster="Humanizer.Tests.NumberToNumberTests.UintToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(1000000000U, number.Billions())", span="157-157"];
m0_109 [cluster="Humanizer.Tests.NumberToNumberTests.UintToBillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UintToBillions()", span="154-154"];
m0_65 [cluster="long.Thousands()", file="NumberToNumberTests.cs", label="Entry long.Thousands()", span="112-112"];
m0_95 [cluster="ulong.Millions()", file="NumberToNumberTests.cs", label="Entry ulong.Millions()", span="160-160"];
m0_26 [cluster="Humanizer.Tests.NumberToNumberTests.IntToHundreds()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.IntToHundreds()", span="42-42"];
m0_27 [cluster="Humanizer.Tests.NumberToNumberTests.IntToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: int number = 2", span="44-44"];
m0_28 [cluster="Humanizer.Tests.NumberToNumberTests.IntToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(200, number.Hundreds())", span="45-45"];
m0_29 [cluster="Humanizer.Tests.NumberToNumberTests.IntToHundreds()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.IntToHundreds()", span="42-42"];
m0_46 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToHundreds()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.DoubleToHundreds()", span="70-70"];
m0_47 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: double number = 2", span="72-72"];
m0_48 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(200d, number.Hundreds())", span="73-73"];
m0_49 [cluster="Humanizer.Tests.NumberToNumberTests.DoubleToHundreds()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.DoubleToHundreds()", span="70-70"];
m0_16 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToTens()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UlongToTens()", span="28-28"];
m0_17 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: ulong number = 1", span="30-30"];
m0_18 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(10UL, number.Tens())", span="31-31"];
m0_19 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToTens()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UlongToTens()", span="28-28"];
m0_36 [cluster="Humanizer.Tests.NumberToNumberTests.LongToHundreds()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.LongToHundreds()", span="56-56"];
m0_37 [cluster="Humanizer.Tests.NumberToNumberTests.LongToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: long number = 2", span="58-58"];
m0_38 [cluster="Humanizer.Tests.NumberToNumberTests.LongToHundreds()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(200L, number.Hundreds())", span="59-59"];
m0_39 [cluster="Humanizer.Tests.NumberToNumberTests.LongToHundreds()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.LongToHundreds()", span="56-56"];
m0_40 [cluster="long.Hundreds()", file="NumberToNumberTests.cs", label="Entry long.Hundreds()", span="72-72"];
m0_91 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToMillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UlongToMillions()", span="133-133"];
m0_92 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: ulong number = 4", span="135-135"];
m0_93 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToMillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(4000000UL, number.Millions())", span="136-136"];
m0_94 [cluster="Humanizer.Tests.NumberToNumberTests.UlongToMillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UlongToMillions()", span="133-133"];
m0_70 [cluster="ulong.Thousands()", file="NumberToNumberTests.cs", label="Entry ulong.Thousands()", span="120-120"];
m0_100 [cluster="double.Millions()", file="NumberToNumberTests.cs", label="Entry double.Millions()", span="168-168"];
m0_101 [cluster="Humanizer.Tests.NumberToNumberTests.IntToBillions()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.IntToBillions()", span="147-147"];
m0_102 [cluster="Humanizer.Tests.NumberToNumberTests.IntToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: int number = 1", span="149-149"];
m0_103 [cluster="Humanizer.Tests.NumberToNumberTests.IntToBillions()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(1000000000, number.Billions())", span="150-150"];
m0_104 [cluster="Humanizer.Tests.NumberToNumberTests.IntToBillions()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.IntToBillions()", span="147-147"];
m0_0 [cluster="Humanizer.Tests.NumberToNumberTests.IntToTens()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.IntToTens()", span="7-7"];
m0_1 [cluster="Humanizer.Tests.NumberToNumberTests.IntToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: int number = 1", span="9-9"];
m0_2 [cluster="Humanizer.Tests.NumberToNumberTests.IntToTens()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(10, number.Tens())", span="10-10"];
m0_3 [cluster="Humanizer.Tests.NumberToNumberTests.IntToTens()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.IntToTens()", span="7-7"];
m0_56 [cluster="Humanizer.Tests.NumberToNumberTests.UintToThousands()", file="NumberToNumberTests.cs", label="Entry Humanizer.Tests.NumberToNumberTests.UintToThousands()", span="84-84"];
m0_57 [cluster="Humanizer.Tests.NumberToNumberTests.UintToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: uint number = 3", span="86-86"];
m0_58 [cluster="Humanizer.Tests.NumberToNumberTests.UintToThousands()", color=green, community=0, file="NumberToNumberTests.cs", label="-1: Assert.Equal(3000U, number.Thousands())", span="87-87"];
m0_59 [cluster="Humanizer.Tests.NumberToNumberTests.UintToThousands()", file="NumberToNumberTests.cs", label="Exit Humanizer.Tests.NumberToNumberTests.UintToThousands()", span="84-84"];
m0_10 [cluster="uint.Tens()", file="NumberToNumberTests.cs", label="Entry uint.Tens()", span="24-24"];
d1 -> d2  [color=green, key=0, style=solid];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d0  [color=blue, key=0, style=bold];
d4 -> d5  [color=green, key=0, style=solid];
d3 -> d4  [color=green, key=0, style=solid];
d5 -> d3  [color=blue, key=0, style=bold];
d7 -> d8  [color=green, key=0, style=solid];
d6 -> d7  [color=green, key=0, style=solid];
d8 -> d6  [color=blue, key=0, style=bold];
d10 -> d11  [color=green, key=0, style=solid];
d9 -> d10  [color=green, key=0, style=solid];
d11 -> d9  [color=blue, key=0, style=bold];
d13 -> d14  [color=green, key=0, style=solid];
d12 -> d13  [color=green, key=0, style=solid];
d14 -> d12  [color=blue, key=0, style=bold];
d16 -> d17  [color=green, key=0, style=solid];
d15 -> d16  [color=green, key=0, style=solid];
d17 -> d15  [color=blue, key=0, style=bold];
d19 -> d20  [color=green, key=0, style=solid];
d18 -> d19  [color=green, key=0, style=solid];
d20 -> d18  [color=blue, key=0, style=bold];
d22 -> d23  [color=green, key=0, style=solid];
d21 -> d22  [color=green, key=0, style=solid];
d23 -> d21  [color=blue, key=0, style=bold];
d25 -> d26  [color=green, key=0, style=solid];
d24 -> d25  [color=green, key=0, style=solid];
d26 -> d24  [color=blue, key=0, style=bold];
d28 -> d29  [color=green, key=0, style=solid];
d27 -> d28  [color=green, key=0, style=solid];
d29 -> d27  [color=blue, key=0, style=bold];
d31 -> d32  [color=green, key=0, style=solid];
d30 -> d31  [color=green, key=0, style=solid];
d32 -> d30  [color=blue, key=0, style=bold];
d34 -> d35  [color=green, key=0, style=solid];
d33 -> d34  [color=green, key=0, style=solid];
d35 -> d33  [color=blue, key=0, style=bold];
d37 -> d38  [color=green, key=0, style=solid];
d36 -> d37  [color=green, key=0, style=solid];
d38 -> d36  [color=blue, key=0, style=bold];
d40 -> d41  [color=green, key=0, style=solid];
d39 -> d40  [color=green, key=0, style=solid];
d41 -> d39  [color=blue, key=0, style=bold];
d43 -> d44  [color=green, key=0, style=solid];
d42 -> d43  [color=green, key=0, style=solid];
d44 -> d42  [color=blue, key=0, style=bold];
d46 -> d47  [color=green, key=0, style=solid];
d45 -> d46  [color=green, key=0, style=solid];
d47 -> d45  [color=blue, key=0, style=bold];
d49 -> d50  [color=green, key=0, style=solid];
d48 -> d49  [color=green, key=0, style=solid];
d50 -> d48  [color=blue, key=0, style=bold];
d52 -> d53  [color=green, key=0, style=solid];
d51 -> d52  [color=green, key=0, style=solid];
d53 -> d51  [color=blue, key=0, style=bold];
d55 -> d56  [color=green, key=0, style=solid];
d54 -> d55  [color=green, key=0, style=solid];
d56 -> d54  [color=blue, key=0, style=bold];
d58 -> d59  [color=green, key=0, style=solid];
d57 -> d58  [color=green, key=0, style=solid];
d59 -> d57  [color=blue, key=0, style=bold];
d61 -> d62  [color=green, key=0, style=solid];
d60 -> d61  [color=green, key=0, style=solid];
d62 -> d60  [color=blue, key=0, style=bold];
d64 -> d65  [color=green, key=0, style=solid];
d63 -> d64  [color=green, key=0, style=solid];
d65 -> d63  [color=blue, key=0, style=bold];
d67 -> d68  [color=green, key=0, style=solid];
d66 -> d67  [color=green, key=0, style=solid];
d68 -> d66  [color=blue, key=0, style=bold];
d70 -> d71  [color=green, key=0, style=solid];
d69 -> d70  [color=green, key=0, style=solid];
d71 -> d69  [color=blue, key=0, style=bold];
d73 -> d74  [color=green, key=0, style=solid];
d72 -> d73  [color=green, key=0, style=solid];
d74 -> d72  [color=blue, key=0, style=bold];
m0_96 -> m0_97  [color=green, key=0, style=solid];
m0_97 -> m0_77  [color=green, key=3, label="Local variable double number", style=bold];
m0_97 -> m0_98  [color=green, key=0, style=solid];
m0_98 -> m0_99  [color=green, key=0, style=solid];
m0_98 -> m0_100  [color=green, key=2, style=dotted];
m0_98 -> m0_5  [color=green, key=2, style=dotted];
m0_99 -> m0_96  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [color=green, key=0, style=solid];
m0_72 -> m0_52  [color=green, key=3, label="Local variable double number", style=bold];
m0_72 -> m0_73  [color=green, key=0, style=solid];
m0_73 -> m0_74  [color=green, key=0, style=solid];
m0_73 -> m0_75  [color=green, key=2, style=dotted];
m0_73 -> m0_5  [color=green, key=2, style=dotted];
m0_74 -> m0_71  [color=blue, key=0, style=bold];
m0_116 -> m0_117  [color=green, key=0, style=solid];
m0_117 -> m0_1  [color=green, key=3, label="Local variable ulong number", style=bold];
m0_117 -> m0_118  [color=green, key=0, style=solid];
m0_118 -> m0_119  [color=green, key=0, style=solid];
m0_118 -> m0_120  [color=green, key=2, style=dotted];
m0_118 -> m0_5  [color=green, key=2, style=dotted];
m0_119 -> m0_116  [color=blue, key=0, style=bold];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_32 -> m0_27  [color=green, key=3, label="Local variable uint number", style=bold];
m0_32 -> m0_33  [color=green, key=0, style=solid];
m0_33 -> m0_34  [color=green, key=0, style=solid];
m0_33 -> m0_35  [color=green, key=2, style=dotted];
m0_33 -> m0_5  [color=green, key=2, style=dotted];
m0_34 -> m0_31  [color=blue, key=0, style=bold];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_7 -> m0_8  [color=green, key=0, style=solid];
m0_8 -> m0_9  [color=green, key=0, style=solid];
m0_8 -> m0_10  [color=green, key=2, style=dotted];
m0_8 -> m0_5  [color=green, key=2, style=dotted];
m0_9 -> m0_6  [color=blue, key=0, style=bold];
m0_41 -> m0_42  [color=green, key=0, style=solid];
m0_42 -> m0_27  [color=green, key=3, label="Local variable ulong number", style=bold];
m0_42 -> m0_43  [color=green, key=0, style=solid];
m0_43 -> m0_44  [color=green, key=0, style=solid];
m0_43 -> m0_45  [color=green, key=2, style=dotted];
m0_43 -> m0_5  [color=green, key=2, style=dotted];
m0_44 -> m0_41  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [color=green, key=0, style=solid];
m0_22 -> m0_1  [color=green, key=3, label="Local variable double number", style=bold];
m0_22 -> m0_23  [color=green, key=0, style=solid];
m0_23 -> m0_24  [color=green, key=0, style=solid];
m0_23 -> m0_25  [color=green, key=2, style=dotted];
m0_23 -> m0_5  [color=green, key=2, style=dotted];
m0_24 -> m0_21  [color=blue, key=0, style=bold];
m0_111 -> m0_112  [color=green, key=0, style=solid];
m0_112 -> m0_1  [color=green, key=3, label="Local variable long number", style=bold];
m0_112 -> m0_113  [color=green, key=0, style=solid];
m0_113 -> m0_114  [color=green, key=0, style=solid];
m0_113 -> m0_115  [color=green, key=2, style=dotted];
m0_113 -> m0_5  [color=green, key=2, style=dotted];
m0_114 -> m0_111  [color=blue, key=0, style=bold];
m0_121 -> m0_122  [color=green, key=0, style=solid];
m0_122 -> m0_1  [color=green, key=3, label="Local variable double number", style=bold];
m0_122 -> m0_123  [color=green, key=0, style=solid];
m0_123 -> m0_124  [color=green, key=0, style=solid];
m0_123 -> m0_125  [color=green, key=2, style=dotted];
m0_123 -> m0_5  [color=green, key=2, style=dotted];
m0_124 -> m0_121  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [color=green, key=0, style=solid];
m0_62 -> m0_52  [color=green, key=3, label="Local variable long number", style=bold];
m0_62 -> m0_63  [color=green, key=0, style=solid];
m0_63 -> m0_64  [color=green, key=0, style=solid];
m0_63 -> m0_65  [color=green, key=2, style=dotted];
m0_63 -> m0_5  [color=green, key=2, style=dotted];
m0_64 -> m0_61  [color=blue, key=0, style=bold];
m0_81 -> m0_82  [color=green, key=0, style=solid];
m0_82 -> m0_77  [color=green, key=3, label="Local variable uint number", style=bold];
m0_82 -> m0_83  [color=green, key=0, style=solid];
m0_83 -> m0_84  [color=green, key=0, style=solid];
m0_83 -> m0_85  [color=green, key=2, style=dotted];
m0_83 -> m0_5  [color=green, key=2, style=dotted];
m0_84 -> m0_81  [color=blue, key=0, style=bold];
m0_76 -> m0_77  [color=green, key=0, style=solid];
m0_77 -> m0_77  [color=green, key=3, label="Local variable int number", style=bold];
m0_77 -> m0_78  [color=green, key=0, style=solid];
m0_78 -> m0_79  [color=green, key=0, style=solid];
m0_78 -> m0_80  [color=green, key=2, style=dotted];
m0_78 -> m0_5  [color=green, key=2, style=dotted];
m0_79 -> m0_76  [color=blue, key=0, style=bold];
m0_66 -> m0_67  [color=green, key=0, style=solid];
m0_67 -> m0_52  [color=green, key=3, label="Local variable ulong number", style=bold];
m0_67 -> m0_68  [color=green, key=0, style=solid];
m0_68 -> m0_69  [color=green, key=0, style=solid];
m0_68 -> m0_70  [color=green, key=2, style=dotted];
m0_68 -> m0_5  [color=green, key=2, style=dotted];
m0_69 -> m0_66  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [color=green, key=0, style=solid];
m0_87 -> m0_88  [color=green, key=0, style=solid];
m0_88 -> m0_89  [color=green, key=0, style=solid];
m0_88 -> m0_90  [color=green, key=2, style=dotted];
m0_88 -> m0_5  [color=green, key=2, style=dotted];
m0_89 -> m0_86  [color=blue, key=0, style=bold];
m0_4 -> m0_1  [color=green, key=3, label="Local variable uint number", style=bold];
m0_51 -> m0_52  [color=green, key=0, style=solid];
m0_52 -> m0_52  [color=green, key=3, label="Local variable int number", style=bold];
m0_52 -> m0_53  [color=green, key=0, style=solid];
m0_53 -> m0_54  [color=green, key=0, style=solid];
m0_53 -> m0_55  [color=green, key=2, style=dotted];
m0_53 -> m0_5  [color=green, key=2, style=dotted];
m0_54 -> m0_51  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [color=green, key=0, style=solid];
m0_12 -> m0_1  [color=green, key=3, label="Local variable long number", style=bold];
m0_12 -> m0_13  [color=green, key=0, style=solid];
m0_13 -> m0_14  [color=green, key=0, style=solid];
m0_13 -> m0_15  [color=green, key=2, style=dotted];
m0_13 -> m0_5  [color=green, key=2, style=dotted];
m0_14 -> m0_11  [color=blue, key=0, style=bold];
m0_75 -> m0_77  [color=green, key=3, label="Local variable long number", style=bold];
m0_106 -> m0_107  [color=green, key=0, style=solid];
m0_107 -> m0_1  [color=green, key=3, label="Local variable uint number", style=bold];
m0_107 -> m0_108  [color=green, key=0, style=solid];
m0_108 -> m0_109  [color=green, key=0, style=solid];
m0_108 -> m0_110  [color=green, key=2, style=dotted];
m0_108 -> m0_5  [color=green, key=2, style=dotted];
m0_109 -> m0_106  [color=blue, key=0, style=bold];
m0_26 -> m0_27  [color=green, key=0, style=solid];
m0_27 -> m0_27  [color=green, key=3, label="Local variable int number", style=bold];
m0_27 -> m0_28  [color=green, key=0, style=solid];
m0_28 -> m0_29  [color=green, key=0, style=solid];
m0_28 -> m0_30  [color=green, key=2, style=dotted];
m0_28 -> m0_5  [color=green, key=2, style=dotted];
m0_29 -> m0_26  [color=blue, key=0, style=bold];
m0_46 -> m0_47  [color=green, key=0, style=solid];
m0_47 -> m0_48  [color=green, key=0, style=solid];
m0_48 -> m0_49  [color=green, key=0, style=solid];
m0_48 -> m0_50  [color=green, key=2, style=dotted];
m0_48 -> m0_5  [color=green, key=2, style=dotted];
m0_49 -> m0_46  [color=blue, key=0, style=bold];
m0_16 -> m0_17  [color=green, key=0, style=solid];
m0_17 -> m0_1  [color=green, key=3, label="Local variable ulong number", style=bold];
m0_17 -> m0_18  [color=green, key=0, style=solid];
m0_18 -> m0_19  [color=green, key=0, style=solid];
m0_18 -> m0_20  [color=green, key=2, style=dotted];
m0_18 -> m0_5  [color=green, key=2, style=dotted];
m0_19 -> m0_16  [color=blue, key=0, style=bold];
m0_36 -> m0_37  [color=green, key=0, style=solid];
m0_37 -> m0_27  [color=green, key=3, label="Local variable long number", style=bold];
m0_37 -> m0_38  [color=green, key=0, style=solid];
m0_38 -> m0_39  [color=green, key=0, style=solid];
m0_38 -> m0_40  [color=green, key=2, style=dotted];
m0_38 -> m0_5  [color=green, key=2, style=dotted];
m0_39 -> m0_36  [color=blue, key=0, style=bold];
m0_40 -> m0_27  [color=green, key=3, label="Local variable double number", style=bold];
m0_91 -> m0_92  [color=green, key=0, style=solid];
m0_92 -> m0_77  [color=green, key=3, label="Local variable ulong number", style=bold];
m0_92 -> m0_93  [color=green, key=0, style=solid];
m0_93 -> m0_94  [color=green, key=0, style=solid];
m0_93 -> m0_95  [color=green, key=2, style=dotted];
m0_93 -> m0_5  [color=green, key=2, style=dotted];
m0_94 -> m0_91  [color=blue, key=0, style=bold];
m0_101 -> m0_102  [color=green, key=0, style=solid];
m0_102 -> m0_1  [color=green, key=3, label="Local variable int number", style=bold];
m0_102 -> m0_103  [color=green, key=0, style=solid];
m0_103 -> m0_104  [color=green, key=0, style=solid];
m0_103 -> m0_105  [color=green, key=2, style=dotted];
m0_103 -> m0_5  [color=green, key=2, style=dotted];
m0_104 -> m0_101  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_1  [color=green, key=3, label="Local variable int number", style=bold];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_4  [color=green, key=2, style=dotted];
m0_2 -> m0_5  [color=green, key=2, style=dotted];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [color=green, key=0, style=solid];
m0_57 -> m0_52  [color=green, key=3, label="Local variable uint number", style=bold];
m0_57 -> m0_58  [color=green, key=0, style=solid];
m0_58 -> m0_59  [color=green, key=0, style=solid];
m0_58 -> m0_60  [color=green, key=2, style=dotted];
m0_58 -> m0_5  [color=green, key=2, style=dotted];
m0_59 -> m0_56  [color=blue, key=0, style=bold];
}
