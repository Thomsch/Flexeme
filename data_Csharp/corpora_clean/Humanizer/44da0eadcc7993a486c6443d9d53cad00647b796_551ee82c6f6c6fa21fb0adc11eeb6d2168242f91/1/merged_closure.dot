digraph  {
n95 [label=last, span=""];
n96 [label=double, span=""];
n0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74"];
n17 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
n18 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="90-90"];
n19 [cluster="string.IsInvalidMetricNumeral()", label="Entry string.IsInvalidMetricNumeral()", span="179-179"];
n21 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n22 [cluster="char.IsLetter(char)", label="Entry char.IsLetter(char)", span="0-0"];
n24 [cluster="string.Remove(int)", label="Entry string.Remove(int)", span="0-0"];
n23 [cluster="double.Parse(string)", label="Entry double.Parse(string)", span="0-0"];
n25 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
n26 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n27 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
n15 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Exit Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74"];
n16 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n20 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n28 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
n31 [cluster="System.Collections.Generic.ICollection<char>.IndexOf(char)", label="Entry System.Collections.Generic.ICollection<char>.IndexOf(char)", span="197-197"];
n33 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Exit Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="90-90"];
n34 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n35 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
n37 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
n38 [cluster="char.ToString()", label="Entry char.ToString()", span="0-0"];
n39 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="111-111"];
n49 [cluster="double.Equals(double)", label="Entry double.Equals(double)", span="0-0"];
n51 [cluster="double.IsOutOfRange()", label="Entry double.IsOutOfRange()", span="159-159"];
n53 [cluster="System.Math.Abs(double)", label="Entry System.Math.Abs(double)", span="0-0"];
n54 [cluster="System.Math.Log10(double)", label="Entry System.Math.Log10(double)", span="0-0"];
n55 [cluster="System.Math.Floor(double)", label="Entry System.Math.Floor(double)", span="0-0"];
n48 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="111-111"];
n50 [cluster="double.ToString()", label="Entry double.ToString()", span="0-0"];
n56 [cluster="System.Math.Sign(int)", label="Entry System.Math.Sign(int)", span="0-0"];
n57 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="149-149"];
n52 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n58 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="138-138"];
n60 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="138-138"];
n61 [cluster="System.Convert.ToDouble(int)", label="Entry System.Convert.ToDouble(int)", span="0-0"];
n62 [cluster="double.ToMetric(bool, bool)", label="Entry double.ToMetric(bool, bool)", span="111-111"];
n64 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Exit Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="149-149"];
n65 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Entry Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="159-159"];
n71 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", label="Exit Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", span="159-159"];
n72 [cluster="System.Math.Sign(double)", label="Entry System.Math.Sign(double)", span="0-0"];
n73 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="164-164"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="164-164"];
n77 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Entry Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="179-179"];
n83 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", label="Exit Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", span="179-179"];
n84 [cluster="double.TryParse(string, out double)", label="Entry double.TryParse(string, out double)", span="0-0"];
n85 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Entry Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="197-197"];
n93 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
n94 [cluster="char.Equals(char)", label="Entry char.Equals(char)", span="0-0"];
n92 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", label="Exit Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", span="197-197"];
d1 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="input = CleanRepresentation(input)", prediction=0, span="78-78"];
d0 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="76-76"];
d2 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", color=green, community=0, label="return BuildNumber(input, input[input.Length - 1]);", prediction=1, span="79-79"];
d4 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="Entry Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138"];
d5 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="Entry Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157"];
d7 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", color=green, community=0, label="return Convert.ToDouble(input).ToMetric(hasSpace, useSymbol);", prediction=2, span="102-102"];
d6 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(int, bool, bool)", span="100-100"];
d12 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="input.Equals(0)", prediction=3, span="125-125"];
d11 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", span="123-123"];
d13 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="return input.ToString();", prediction=4, span="126-126"];
d14 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="input.IsOutOfRange()", prediction=4, span="127-127"];
d15 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="throw new ArgumentOutOfRangeException(''input'');", prediction=6, span="128-128"];
d16 [cluster="Humanizer.MetricNumeralExtensions.ToMetric(double, bool, bool)", color=green, community=0, label="return BuildRepresentation(input, hasSpace, useSymbol);", prediction=4, span="130-130"];
d22 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198"];
d23 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="input == null", prediction=8, span="140-140"];
d24 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="throw new ArgumentNullException(''input'');", prediction=9, span="141-141"];
d25 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="input = input.Trim()", prediction=10, span="143-143"];
d26 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="input = ReplaceNameBySymbol(input)", prediction=11, span="144-144"];
d30 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", label="Exit Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", span="138-138"];
d27 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="input.Length == 0 || input.IsInvalidMetricNumeral()", prediction=12, span="145-145"];
d33 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", label="Entry Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", span="185-185"];
d29 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="return input.Replace('' '', String.Empty);", prediction=11, span="148-148"];
d28 [cluster="Humanizer.MetricNumeralExtensions.CleanRepresentation(string)", color=green, community=0, label="throw new ArgumentException(''Empty or invalid Metric string.'', ''input'');", prediction=14, span="146-146"];
d37 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", color=green, community=1, label="return Char.IsLetter(last)\r\n				? BuildMetricNumber(input, last)\r\n				: Double.Parse(input);", prediction=15, span="159-161"];
d38 [cluster="Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", label="Exit Humanizer.MetricNumeralExtensions.BuildNumber(string, char)", span="157-157"];
d40 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="Entry Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170"];
d42 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0, label="Func<char[], double> getExponent = symbols => (symbols.IndexOf(last) + 1) * 3", prediction=16, span="172-172"];
d43 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0, label="var number = Double.Parse(input.Remove(input.Length - 1))", prediction=17, span="173-173"];
d52 [cluster="lambda expression", color=green, community=0, label="(symbols.IndexOf(last) + 1) * 3", prediction=16, span="172-172"];
d44 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=1, label="var exponent = Math.Pow(10, Symbols[0].Contains(last)\r\n				? getExponent(Symbols[0])\r\n				: -getExponent(Symbols[1]))", prediction=19, span="174-176"];
d108 [label=char, span=""];
d45 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", color=green, community=0, label="return number * exponent;", prediction=17, span="177-177"];
d46 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", label="Exit Humanizer.MetricNumeralExtensions.BuildMetricNumber(string, char)", span="170-170"];
d55 [cluster="Humanizer.MetricNumeralExtensions.ReplaceNameBySymbol(string)", color=green, community=1, label="return Names.Aggregate(input, (current, name) =>\r\n				current.Replace(name.Value, name.Key.ToString()));", prediction=21, span="187-188"];
d59 [cluster="lambda expression", color=green, community=0, label="current.Replace(name.Value, name.Key.ToString())", prediction=22, span="188-188"];
d62 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", color=green, community=0, label="var exponent = (int)Math.Floor(Math.Log10(Math.Abs(input)) / 3)", prediction=23, span="200-200"];
d69 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="Entry Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214"];
d63 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", color=green, community=1, label="return exponent.Equals(0)\r\n				? input.ToString()\r\n				: BuildMetricRepresentation(input, exponent, hasSpace, useSymbol);", prediction=24, span="201-203"];
d64 [cluster="Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.BuildRepresentation(double, bool, bool)", span="198-198"];
d68 [cluster="int.Equals(int)", label="Entry int.Equals(int)", span="0-0"];
d70 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=0, label="var number = input * Math.Pow(1000, -exponent)", prediction=25, span="216-216"];
d71 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=1, label="var symbol = Math.Sign(exponent) == 1\r\n				? Symbols[0][exponent - 1]\r\n				: Symbols[1][-exponent - 1]", prediction=26, span="217-219"];
d72 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", color=green, community=1, label="return number\r\n				+ (hasSpace ? '' '' : String.Empty)\r\n				+ GetUnit(symbol, useSymbol);", prediction=25, span="220-222"];
d75 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", label="Entry Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", span="231-231"];
d73 [cluster="Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", label="Exit Humanizer.MetricNumeralExtensions.BuildMetricRepresentation(double, int, bool, bool)", span="214-214"];
d76 [cluster="Humanizer.MetricNumeralExtensions.GetUnit(char, bool)", color=green, community=0, label="return useSymbol ? symbol.ToString() : Names[symbol];", prediction=28, span="233-233"];
d79 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="int limit = 27", prediction=29, span="243-243"];
d80 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="var bigLimit = Math.Pow(10, limit)", prediction=30, span="244-244"];
d81 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="var smallLimit = Math.Pow(10, -limit)", prediction=30, span="245-245"];
d82 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=0, label="Func<double, double, bool> outside = (min, max) => !(max > input && input > min)", prediction=30, span="246-246"];
d83 [cluster="Humanizer.MetricNumeralExtensions.IsOutOfRange(double)", color=green, community=1, label="return (Math.Sign(input) == 1 && outside(smallLimit, bigLimit))\r\n			       || (Math.Sign(input) == -1 && outside(-bigLimit, -smallLimit));", prediction=30, span="247-248"];
d88 [cluster="lambda expression", color=green, community=0, label="!(max > input && input > min)", prediction=30, span="246-246"];
d91 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="double number", prediction=35, span="263-263"];
d92 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="var index = input.Length - 1", prediction=36, span="264-264"];
d93 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="var last = input[index]", prediction=37, span="265-265"];
d95 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="return !Double.TryParse(isSymbol ? input.Remove(index) : input, out number);", prediction=36, span="267-267"];
d94 [cluster="Humanizer.MetricNumeralExtensions.IsInvalidMetricNumeral(string)", color=green, community=0, label="var isSymbol = Symbols[0].Contains(last) || Symbols[1].Contains(last)", prediction=39, span="266-266"];
d99 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="var i = 0", prediction=40, span="281-281"];
d100 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="i < chars.Count", prediction=40, span="281-281"];
d101 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="chars.ElementAt(i).Equals(value)", prediction=40, span="282-282"];
d102 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="return i;", prediction=40, span="283-283"];
d103 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="i++", prediction=40, span="281-281"];
d104 [cluster="Humanizer.MetricNumeralExtensions.IndexOf(System.Collections.Generic.ICollection<char>, char)", color=green, community=0, label="return -1;", prediction=45, span="284-284"];
m0_46 [cluster="System.Diagnostics.Debugger.Break()", file="MetricNumeralTests.cs", label="Entry System.Diagnostics.Debugger.Break()", span="0-0"];
m0_22 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64"];
m0_23 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentNullException>(() =>\r\n                                MetricNumeralExtensions.FromMetric(null))", span="66-67"];
m0_24 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnNull()", span="64-64"];
m0_15 [cluster="string.FromMetric()", file="MetricNumeralTests.cs", label="Entry string.FromMetric()", span="74-74"];
m0_29 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72"];
m0_30 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var b = true", span="74-74"];
m0_31 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var i = -24", span="75-75"];
m0_39 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="b &= c", span="87-87"];
m0_41 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Assert.True(b)", span="89-89"];
m0_32 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="i < 27", span="75-75"];
m0_33 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var origin = Math.Pow(10, i)", span="77-77"];
m0_40 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="i++", span="75-75"];
m0_34 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var to = origin.ToMetric()", span="78-78"];
m0_36 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var c = Equals(\r\n                                        origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                        from.ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="81-83"];
m0_35 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="var from = to.FromMetric()", span="79-79"];
m0_37 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="!c", span="84-84"];
m0_38 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Debugger.Break()", span="85-85"];
m0_42 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbols()", span="72-72"];
m0_55 [cluster="System.Convert.ToInt32(double)", file="MetricNumeralTests.cs", label="Entry System.Convert.ToInt32(double)", span="0-0"];
m0_4 [cluster="Unk.Equal", file="MetricNumeralTests.cs", label="Entry Unk.Equal", span=""];
m0_5 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30"];
m0_6 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentOutOfRangeException>(() => input.ToMetric())", span="32-32"];
m0_7 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetricOnInvalid(double)", span="30-30"];
m0_57 [cluster="int.ToMetric(bool, bool)", file="MetricNumeralTests.cs", label="Entry int.ToMetric(bool, bool)", span="138-138"];
m0_8 [cluster="Unk.>", file="MetricNumeralTests.cs", label="Entry Unk.>", span=""];
m0_28 [cluster="Humanizer.MetricNumeralExtensions.FromMetric(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.MetricNumeralExtensions.FromMetric(string)", span="74-74"];
m0_56 [cluster="int.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry int.ToString(string, System.IFormatProvider)", span="0-0"];
m0_12 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43"];
m0_13 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Assert.Equal(expected, input.FromMetric())", span="45-45"];
m0_14 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetric(double, string)", span="43-43"];
m0_25 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="66-67"];
m0_10 [cluster="lambda expression", file="MetricNumeralTests.cs", label="input.ToMetric()", span="32-32"];
m0_9 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="32-32"];
m0_11 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="32-32"];
m0_20 [cluster="lambda expression", file="MetricNumeralTests.cs", label="input.FromMetric()", span="60-60"];
m0_19 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Entry lambda expression", span="60-60"];
m0_21 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="60-60"];
m0_26 [cluster="lambda expression", file="MetricNumeralTests.cs", label="MetricNumeralExtensions.FromMetric(null)", span="67-67"];
m0_27 [cluster="lambda expression", file="MetricNumeralTests.cs", label="Exit lambda expression", span="66-67"];
m0_48 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102"];
m0_49 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="var origin = Convert.ToInt32(Math.Pow(10, exponent))", span="104-104"];
m0_50 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="var isEquals = Equals(\r\n                                origin.ToString(''0.##E+0'', CultureInfo.InvariantCulture),\r\n                                origin.ToMetric().FromMetric().ToString(''0.##E+0'', CultureInfo.InvariantCulture))", span="105-107"];
m0_51 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="!isEquals", span="108-108"];
m0_53 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Assert.True(isEquals)", span="110-110"];
m0_52 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Debugger.Break()", span="109-109"];
m0_54 [cluster="Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.TestAllSymbolsAsInt(int)", span="102-102"];
m0_44 [cluster="double.ToString(string, System.IFormatProvider)", file="MetricNumeralTests.cs", label="Entry double.ToString(string, System.IFormatProvider)", span="0-0"];
m0_3 [cluster="double.ToMetric(bool, bool)", file="MetricNumeralTests.cs", label="Entry double.ToMetric(bool, bool)", span="111-111"];
m0_47 [cluster="Unk.True", file="MetricNumeralTests.cs", label="Entry Unk.True", span=""];
m0_45 [cluster="object.Equals(object, object)", file="MetricNumeralTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_0 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19"];
m0_1 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", color=green, community=0, file="MetricNumeralTests.cs", label="Assert.Equal(expected, input.ToMetric(hasSpace, useSymbol))", prediction=46, span="22-22"];
m0_2 [cluster="Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.ToMetric(string, double, bool, bool)", span="19-19"];
m0_16 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Entry Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58"];
m0_17 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Assert.Throws<ArgumentException>(() => input.FromMetric())", span="60-60"];
m0_18 [cluster="Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", file="MetricNumeralTests.cs", label="Exit Humanizer.Tests.MetricNumeralTests.FromMetricOnInvalid(string)", span="58-58"];
m0_58 [file="MetricNumeralTests.cs", label=double, span=""];
m0_59 [file="MetricNumeralTests.cs", label=string, span=""];
n96 -> d88  [color=green, key=1, label=double, style=dashed];
n65 -> d88  [color=green, key=1, label=double, style=dashed];
n65 -> d83  [color=green, key=1, label=double, style=dashed];
n77 -> d95  [color=green, key=1, label=string, style=dashed];
n85 -> d100  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
n85 -> d101  [color=green, key=1, label="System.Collections.Generic.ICollection<char>", style=dashed];
d11 -> d13  [color=green, key=1, label=double, style=dashed];
d11 -> d14  [color=green, key=1, label=double, style=dashed];
d11 -> d16  [color=green, key=1, label=double, style=dashed];
d22 -> d63  [color=green, key=1, label=double, style=dashed];
d26 -> d29  [color=green, key=1, label=string, style=dashed];
d40 -> d52  [color=green, key=1, label=char, style=dashed];
d42 -> d52  [color=green, key=1, label="char[]", style=dashed];
d43 -> d45  [color=green, key=1, label=number, style=dashed];
d108 -> d52  [color=green, key=1, label=char, style=dashed];
d55 -> n35  [color=green, key=1, label="lambda expression", style=dashed];
d59 -> d59  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<char, string>", style=dashed];
d69 -> d72  [color=green, key=1, label=bool, style=dashed];
d70 -> d72  [color=green, key=1, label=number, style=dashed];
d80 -> d83  [color=green, key=1, label=bigLimit, style=dashed];
d81 -> d83  [color=green, key=1, label=smallLimit, style=dashed];
d82 -> d88  [color=green, key=1, label=double, style=dashed];
d92 -> d95  [color=green, key=1, label=index, style=dashed];
d99 -> d101  [color=green, key=1, label=i, style=dashed];
d99 -> d102  [color=green, key=1, label=i, style=dashed];
d99 -> d103  [color=green, key=1, label=i, style=dashed];
d103 -> d103  [color=green, key=1, label=i, style=dashed];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_41  [color=darkseagreen4, key=1, label=b, style=dashed];
m0_31 -> m0_40  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=b, style=dashed];
m0_40 -> m0_40  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_5 -> m0_10  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_6 -> m0_9  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_53  [color=darkseagreen4, key=1, label=isEquals, style=dashed];
m0_16 -> m0_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_17 -> m0_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_58 -> m0_10  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_59 -> m0_20  [color=darkseagreen4, key=1, label=string, style=dashed];
}
