import os
import networkx as nx
import pytest

from deltaPDG.deltaPDG import deltaPDG
from tangle_concerns.generate_corpus import mark_originating_commit, mark_origin, METHOD_FUZINESS, NODE_FUZZINESS


def test_delta_pdg_generation_resultextensions():
    # Define the necessary paths
    resources_dir = 'tests/resources/ResultExtensions'
    before_path = os.path.join(resources_dir, 'before_pdg.dot')
    after_path = os.path.join(resources_dir, 'after_pdg.dot')
    expected_output_path = os.path.join(resources_dir, 'ResultExtensions.cs.dot')
    output_path = 'tmp.dot'

    method_fuzziness = METHOD_FUZINESS
    node_fuzziness = NODE_FUZZINESS
    filename = "/src/CommandLine/Infrastructure/ResultExtensions.cs"
    changes = [('-', '/paket.lock', -1, 21, '    src/CSharpx/Either.cs (e078c7f441aec196db027375f5d822607d3c1249)'), ('-', '/paket.lock', -1, 22, '    src/CSharpx/EnumerableExtensions.cs (e078c7f441aec196db027375f5d822607d3c1249)'), ('-', '/paket.lock', -1, 23, '    src/CSharpx/Maybe.cs (e078c7f441aec196db027375f5d822607d3c1249)'), ('+', '/paket.lock', 21, -1, '    src/CSharpx/Either.cs (2eb4a65c63a498025ea312863f18cb1d93e780a1)'), ('+', '/paket.lock', 22, -1, '    src/CSharpx/EnumerableExtensions.cs (2eb4a65c63a498025ea312863f18cb1d93e780a1)'), ('+', '/paket.lock', 23, -1, '    src/CSharpx/Maybe.cs (2eb4a65c63a498025ea312863f18cb1d93e780a1)'), ('-', '/src/CommandLine/Core/InstanceBuilder.cs', -1, 126, '            var allErrors = tokenizerResult.Messages()'), ('+', '/src/CommandLine/Core/InstanceBuilder.cs', 126, -1, '            var allErrors = tokenizerResult.SuccessfulMessages()'), ('-', '/src/CommandLine/Core/InstanceBuilder.cs', -1, 128, '                .Concat(optionSpecProps.Messages())'), ('-', '/src/CommandLine/Core/InstanceBuilder.cs', -1, 129, '                .Concat(valueSpecProps.Messages())'), ('+', '/src/CommandLine/Core/InstanceBuilder.cs', 128, -1, '                .Concat(optionSpecProps.SuccessfulMessages())'), ('+', '/src/CommandLine/Core/InstanceBuilder.cs', 129, -1, '                .Concat(valueSpecProps.SuccessfulMessages())'), ('+', '/src/CommandLine/Core/InstanceChooser.cs', 7, -1, 'using CommandLine.Infrastructure;'), ('-', '/src/CommandLine/Core/Tokenizer.cs', -1, 65, '            return Result.Succeed(flattened, tokenizerResult.Messages());'), ('+', '/src/CommandLine/Core/Tokenizer.cs', 65, -1, '            return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());'), ('+', '/src/CommandLine/Core/ValueMapper.cs', 6, -1, 'using CommandLine.Infrastructure;'), ('-', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', -1, 7, 'namespace CSharpx'), ('+', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', 7, -1, 'namespace CommandLine.Infrastructure'), ('-', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', -1, 9, '    static partial class EnumerableExtensions'), ('+', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', 9, -1, '    static class EnumerableExtensions'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 1, '\ufeffusing System;'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 1, -1, '\ufeff// Copyright 2005-2015 Giacomo Stelluti Scala & Contributors. All rights reserved. See doc/License.md in the project root for license information.'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 2, -1, ''), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 3, -1, 'using System;'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 11, '        public static IEnumerable<TMessage> Messages<TSuccess, TMessage>(this Result<TSuccess, TMessage> result)'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 13, -1, '        public static IEnumerable<TMessage> SuccessfulMessages<TSuccess, TMessage>(this Result<TSuccess, TMessage> result)'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 18, '            var bad = (Bad<TSuccess, TMessage>)result;'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 19, '            return bad.Messages;'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 20, -1, '            return Enumerable.Empty<TMessage>();')]
    labeli_changes = {0: [('+', '/src/CommandLine/Core/InstanceChooser.cs', 7, -1, 'using CommandLine.Infrastructure;'), ('+', '/src/CommandLine/Core/ValueMapper.cs', 6, -1, 'using CommandLine.Infrastructure;'), ('-', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', -1, 7, 'namespace CSharpx'), ('+', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', 7, -1, 'namespace CommandLine.Infrastructure'), ('-', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', -1, 9, '    static partial class EnumerableExtensions'), ('+', '/src/CommandLine/Infrastructure/EnumerableExtensionsExtra.cs', 9, -1, '    static class EnumerableExtensions')], 1: [('-', '/paket.lock', -1, 21, '    src/CSharpx/Either.cs (e078c7f441aec196db027375f5d822607d3c1249)'), ('-', '/paket.lock', -1, 22, '    src/CSharpx/EnumerableExtensions.cs (e078c7f441aec196db027375f5d822607d3c1249)'), ('-', '/paket.lock', -1, 23, '    src/CSharpx/Maybe.cs (e078c7f441aec196db027375f5d822607d3c1249)'), ('+', '/paket.lock', 21, -1, '    src/CSharpx/Either.cs (2eb4a65c63a498025ea312863f18cb1d93e780a1)'), ('+', '/paket.lock', 22, -1, '    src/CSharpx/EnumerableExtensions.cs (2eb4a65c63a498025ea312863f18cb1d93e780a1)'), ('+', '/paket.lock', 23, -1, '    src/CSharpx/Maybe.cs (2eb4a65c63a498025ea312863f18cb1d93e780a1)'), ('-', '/src/CommandLine/Core/InstanceBuilder.cs', -1, 126, '            var allErrors = tokenizerResult.Messages()'), ('+', '/src/CommandLine/Core/InstanceBuilder.cs', 126, -1, '            var allErrors = tokenizerResult.SuccessfulMessages()'), ('-', '/src/CommandLine/Core/InstanceBuilder.cs', -1, 128, '                .Concat(optionSpecProps.Messages())'), ('-', '/src/CommandLine/Core/InstanceBuilder.cs', -1, 129, '                .Concat(valueSpecProps.Messages())'), ('+', '/src/CommandLine/Core/InstanceBuilder.cs', 128, -1, '                .Concat(optionSpecProps.SuccessfulMessages())'), ('+', '/src/CommandLine/Core/InstanceBuilder.cs', 129, -1, '                .Concat(valueSpecProps.SuccessfulMessages())'), ('-', '/src/CommandLine/Core/Tokenizer.cs', -1, 65, '            return Result.Succeed(flattened, tokenizerResult.Messages());'), ('+', '/src/CommandLine/Core/Tokenizer.cs', 65, -1, '            return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 1, '\ufeffusing System;'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 1, -1, '\ufeff// Copyright 2005-2015 Giacomo Stelluti Scala & Contributors. All rights reserved. See doc/License.md in the project root for license information.'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 2, -1, ''), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 3, -1, 'using System;'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 11, '        public static IEnumerable<TMessage> Messages<TSuccess, TMessage>(this Result<TSuccess, TMessage> result)'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 13, -1, '        public static IEnumerable<TMessage> SuccessfulMessages<TSuccess, TMessage>(this Result<TSuccess, TMessage> result)'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 18, '            var bad = (Bad<TSuccess, TMessage>)result;'), ('-', '/src/CommandLine/Infrastructure/ResultExtensions.cs', -1, 19, '            return bad.Messages;'), ('+', '/src/CommandLine/Infrastructure/ResultExtensions.cs', 20, -1, '            return Enumerable.Empty<TMessage>();')]}

    try:
        # Run the code under test
        delta_gen = deltaPDG(before_path, m_fuzziness=method_fuzziness, n_fuzziness=node_fuzziness)
        delta_pdg = delta_gen(after_path, [ch for ch in changes if ch[1] == filename])
        delta_pdg = mark_originating_commit(delta_pdg, mark_origin(changes, labeli_changes), filename)
        nx.drawing.nx_pydot.write_dot(delta_pdg, output_path)

        # Compare the output with the expected result
        with open(expected_output_path, 'r') as expected_file:
            expected_content = expected_file.read()

        with open(output_path, 'r') as output_file:
            output_content = output_file.read()
    finally:
        if os.path.exists(output_path):
            os.remove(output_path)

    assert output_content == expected_content, "The dot format of the output does not match the expected format"

def test_delta_pdg_generation_helptext():
    # Define the necessary paths
    resources_dir = 'tests/resources/HelpText'
    before_path = os.path.join(resources_dir, 'before_pdg.dot')
    after_path = os.path.join(resources_dir, 'after_pdg.dot')
    expected_output_path = os.path.join(resources_dir, 'HelpText.cs.dot')
    output_path = 'tmp.dot'

    method_fuzziness = METHOD_FUZINESS
    node_fuzziness = NODE_FUZZINESS
    filename = "/src/CommandLine/Text/HelpText.cs"
    changes = [('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 3, -1, 'using System.Collections.Generic;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 4, -1, 'using CommandLine.Text;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 5, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 43, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 44, -1, '    class FakeOptionsWithUsageText'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 45, -1, '    {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 46, -1, '        [Option(\'i\',"input", HelpText = "Set input file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 47, -1, '        public string InputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 48, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 49, -1, '        [Option(\'i\', "output", HelpText = "Set output file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 50, -1, '        public string OutputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 51, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 52, -1, '        [Option(HelpText = "Set verbosity level.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 53, -1, '        public bool Verbose { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 54, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 55, -1, '        [Option(\'w\', "Log warnings.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 56, -1, '        public bool LogWarning { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 57, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 58, -1, '        [Option(\'e\', "Log errors.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 59, -1, '        public bool LogError { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 60, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 61, -1, '        [Usage]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 62, -1, '        public static IEnumerable<Example> Examples'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 63, -1, '        {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 64, -1, '            get'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 65, -1, '            {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 66, -1, '                yield return new Example("grp1", "Logging warnings", new[] { new UnParserSettings { GroupSwitches = true } } , new FakeOptionsWithUsageText { InputFile = "file.bin", LogWarning = true });'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 67, -1, '            }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 68, -1, '        }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 69, -1, '    }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 13, '        private readonly string group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 14, '        private readonly string groupDescription;'), ('+', '/src/CommandLine/Text/Example.cs', 13, -1, '        //private readonly string group;'), ('+', '/src/CommandLine/Text/Example.cs', 14, -1, '        //private readonly string groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 19, '        internal Example(string group, string groupDescription, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('+', '/src/CommandLine/Text/Example.cs', 19, -1, '        internal Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 21, '            if (group == null) throw new ArgumentNullException("group");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 22, '            if (groupDescription == null) throw new ArgumentNullException("groupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 27, '            this.group = group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 28, '            this.group = groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 34, '        public Example(string group, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 35, '            : this(group, string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 36, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 37, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 38, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 39, '        public Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 40, '            : this(string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 41, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 42, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 43, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 45, '            : this(string.Empty, helpText, new[] { formatStyle }, sample)'), ('+', '/src/CommandLine/Text/Example.cs', 31, -1, '            : this(helpText, new[] { formatStyle }, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 50, '            : this(string.Empty, helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('+', '/src/CommandLine/Text/Example.cs', 36, -1, '            : this(helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 54, '        public string Group'), ('-', '/src/CommandLine/Text/Example.cs', -1, 55, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 56, '            get { return group; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 57, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 58, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 59, '        internal string GroupDescription'), ('-', '/src/CommandLine/Text/Example.cs', -1, 60, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 61, '            get { return groupDescription; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 62, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 63, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 101, '            return new { Group, GroupDescription, HelpText, FormatStyles, Sample }.GetHashCode();'), ('+', '/src/CommandLine/Text/Example.cs', 77, -1, '            return new { HelpText, FormatStyles, Sample }.GetHashCode();'), ('-', '/src/CommandLine/Text/Example.cs', -1, 116, '            return Group.Equals(other.Group)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 117, '                && GroupDescription.Equals(other.GroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 118, '                && HelpText.Equals(other.HelpText)'), ('+', '/src/CommandLine/Text/Example.cs', 92, -1, '            return HelpText.Equals(other.HelpText)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 126, '        public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 127, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 128, '            if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 129, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 130, '            return new Example('), ('-', '/src/CommandLine/Text/Example.cs', -1, 131, '                example.Group,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 132, '                newGroupDescription,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 133, '                example.HelpText,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 134, '                example.FormatStyles,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 135, '                example.Sample);'), ('-', '/src/CommandLine/Text/Example.cs', -1, 136, '        }'), ('+', '/src/CommandLine/Text/Example.cs', 100, -1, '        //public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('+', '/src/CommandLine/Text/Example.cs', 101, -1, '        //{'), ('+', '/src/CommandLine/Text/Example.cs', 102, -1, '        //    if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('+', '/src/CommandLine/Text/Example.cs', 103, -1, ''), ('+', '/src/CommandLine/Text/Example.cs', 104, -1, '        //    return new Example('), ('+', '/src/CommandLine/Text/Example.cs', 105, -1, '        //        example.Group,'), ('+', '/src/CommandLine/Text/Example.cs', 106, -1, '        //        newGroupDescription,'), ('+', '/src/CommandLine/Text/Example.cs', 107, -1, '        //        example.HelpText,'), ('+', '/src/CommandLine/Text/Example.cs', 108, -1, '        //        example.FormatStyles,'), ('+', '/src/CommandLine/Text/Example.cs', 109, -1, '        //        example.Sample);'), ('+', '/src/CommandLine/Text/Example.cs', 110, -1, '        //}'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 433, '            var examples = GetUsageFromType(parserResult.TypeInfo.Current)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 434, '                .Return(x => x, Enumerable.Empty<Example>());'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 435, '            if (examples.Empty())'), ('+', '/src/CommandLine/Text/HelpText.cs', 433, -1, '            var usage = GetUsageFromType(parserResult.TypeInfo.Current);'), ('+', '/src/CommandLine/Text/HelpText.cs', 434, -1, '            if (usage.MatchNothing())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 438, '            var grouped = from e in examples'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 439, '                          group e by e.Group into g'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 440, '                          select new { Group = g.Key, Examples = g.ToList() };'), ('+', '/src/CommandLine/Text/HelpText.cs', 437, -1, '            var usageTuple = usage.FromJust();'), ('+', '/src/CommandLine/Text/HelpText.cs', 438, -1, '            var examples = usageTuple.Item2;'), ('+', '/src/CommandLine/Text/HelpText.cs', 439, -1, '            var appAlias = usageTuple.Item1.ApplicationAlias ?? ReflectionHelper.GetAssemblyName();'), ('+', '/src/CommandLine/Text/HelpText.cs', 440, -1, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 442, '            foreach (var g in grouped)'), ('+', '/src/CommandLine/Text/HelpText.cs', 442, -1, '            foreach (var e in examples)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 444, '                var baseIndent = 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 445, '                var groupText = new StringBuilder();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 446, '                var hasGroupDesc = g.Examples.First().GroupDescription.Length > 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 447, '                if (hasGroupDesc) baseIndent = 2;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 448, '                groupText'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 449, '                    .AppendWhen(hasGroupDesc, g.Examples.First().GroupDescription, ":", Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 450, '                foreach (var e in g.Examples)'), ('+', '/src/CommandLine/Text/HelpText.cs', 444, -1, '                var exampleText = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 445, -1, '                    .Append(e.HelpText)'), ('+', '/src/CommandLine/Text/HelpText.cs', 446, -1, "                    .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 447, -1, '                    .Append(Environment.NewLine);'), ('+', '/src/CommandLine/Text/HelpText.cs', 448, -1, '                var styles = e.GetFormatStylesOrDefault();'), ('+', '/src/CommandLine/Text/HelpText.cs', 449, -1, '                foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 452, '                    var exampleText = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 453, '                        .AppendWhen(baseIndent > 0, baseIndent.Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 454, '                        .Append(e.HelpText)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 455, "                        .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 451, -1, '                    var commandLine = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 452, -1, '                        .Append(2.Spaces())'), ('+', '/src/CommandLine/Text/HelpText.cs', 453, -1, '                        .Append(appAlias)'), ('+', '/src/CommandLine/Text/HelpText.cs', 454, -1, "                        .Append(' ')"), ('+', '/src/CommandLine/Text/HelpText.cs', 455, -1, '                        .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('+', '/src/CommandLine/Text/HelpText.cs', 456, -1, '                            config =>'), ('+', '/src/CommandLine/Text/HelpText.cs', 457, -1, '                                {'), ('+', '/src/CommandLine/Text/HelpText.cs', 458, -1, '                                    config.PreferShortName = s.PreferShortName;'), ('+', '/src/CommandLine/Text/HelpText.cs', 459, -1, '                                    config.GroupSwitches = s.GroupSwitches;'), ('+', '/src/CommandLine/Text/HelpText.cs', 460, -1, '                                    config.UseEqualToken = s.UseEqualToken;'), ('+', '/src/CommandLine/Text/HelpText.cs', 461, -1, '                                }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 457, '                    var styles = e.GetFormatStylesOrDefault();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 458, '                    foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 459, '                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 460, '                        var commandLine = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 461, '                            .Append((baseIndent + 2).Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 462, '                            .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 463, '                                config =>'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 464, '                                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 465, '                                        config.PreferShortName = s.PreferShortName;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 466, '                                        config.GroupSwitches = s.GroupSwitches;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 467, '                                        config.UseEqualToken = s.UseEqualToken;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 468, '                                    }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 469, '                            .Append(Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 470, '                        exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 471, '                    }'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 472, '                    groupText.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 463, -1, '                    exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 474, '                text.Append(groupText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 465, -1, '                text.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 467, -1, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 556, '        private static Maybe<IEnumerable<Example>> GetUsageFromType(Type type)'), ('+', '/src/CommandLine/Text/HelpText.cs', 548, -1, '        private static Maybe<Tuple<UsageAttribute, IEnumerable<Example>>> GetUsageFromType(Type type)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 566, '                    var groups = attr.Groups;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 567, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 568, '                    return examples.Select(example => groups.ContainsKey(example.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 569, '                        ? example.WithGroupDescription(groups[example.Group])'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 570, '                        : example)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 571, '                            .OrderBy(x => x.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 572, '                            .ThenBy(x => x.GroupDescription)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 573, '                        .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 558, -1, '                    //var groups = attr.Groups;'), ('+', '/src/CommandLine/Text/HelpText.cs', 559, -1, ''), ('+', '/src/CommandLine/Text/HelpText.cs', 560, -1, '                    //return examples.Select(example => groups.ContainsKey(example.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 561, -1, '                    //    ? example.WithGroupDescription(groups[example.Group])'), ('+', '/src/CommandLine/Text/HelpText.cs', 562, -1, '                    //    : example)'), ('+', '/src/CommandLine/Text/HelpText.cs', 563, -1, '                    //        .OrderBy(x => x.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 564, -1, '                    //        .ThenBy(x => x.GroupDescription)'), ('+', '/src/CommandLine/Text/HelpText.cs', 565, -1, '                    //    .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 566, -1, '                    return Tuple.Create(attr, examples);'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 11, '        private readonly IDictionary<string, string> groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 12, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 13, '        public UsageAttribute(IDictionary<string, string> groups)'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 14, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 15, '            this.groups = groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 16, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 17, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 18, '        public UsageAttribute()'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 19, '            : this(new Dictionary<string, string>())'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 20, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 21, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 22, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 23, '        public IDictionary<string, string> Groups'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 24, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 25, '            get { return groups; }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 26, '        }'), ('+', '/src/CommandLine/Text/UsageAttribute.cs', 11, -1, '        public string ApplicationAlias { get; set; }')]
    labeli_changes = {0: [('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 3, -1, 'using System.Collections.Generic;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 4, -1, 'using CommandLine.Text;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 5, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 43, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 44, -1, '    class FakeOptionsWithUsageText'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 45, -1, '    {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 46, -1, '        [Option(\'i\',"input", HelpText = "Set input file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 47, -1, '        public string InputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 48, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 49, -1, '        [Option(\'i\', "output", HelpText = "Set output file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 50, -1, '        public string OutputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 51, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 52, -1, '        [Option(HelpText = "Set verbosity level.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 53, -1, '        public bool Verbose { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 54, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 55, -1, '        [Option(\'w\', "Log warnings.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 56, -1, '        public bool LogWarning { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 57, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 58, -1, '        [Option(\'e\', "Log errors.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 59, -1, '        public bool LogError { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 60, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 61, -1, '        [Usage]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 62, -1, '        public static IEnumerable<Example> Examples'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 63, -1, '        {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 64, -1, '            get'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 65, -1, '            {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 66, -1, '                yield return new Example("grp1", "Logging warnings", new[] { new UnParserSettings { GroupSwitches = true } } , new FakeOptionsWithUsageText { InputFile = "file.bin", LogWarning = true });'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 67, -1, '            }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 68, -1, '        }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 69, -1, '    }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 13, '        private readonly string group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 14, '        private readonly string groupDescription;'), ('+', '/src/CommandLine/Text/Example.cs', 13, -1, '        //private readonly string group;'), ('+', '/src/CommandLine/Text/Example.cs', 14, -1, '        //private readonly string groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 19, '        internal Example(string group, string groupDescription, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('+', '/src/CommandLine/Text/Example.cs', 19, -1, '        internal Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 21, '            if (group == null) throw new ArgumentNullException("group");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 22, '            if (groupDescription == null) throw new ArgumentNullException("groupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 27, '            this.group = group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 28, '            this.group = groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 34, '        public Example(string group, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 35, '            : this(group, string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 36, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 37, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 38, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 39, '        public Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 40, '            : this(string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 41, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 42, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 43, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 45, '            : this(string.Empty, helpText, new[] { formatStyle }, sample)'), ('+', '/src/CommandLine/Text/Example.cs', 31, -1, '            : this(helpText, new[] { formatStyle }, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 50, '            : this(string.Empty, helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('+', '/src/CommandLine/Text/Example.cs', 36, -1, '            : this(helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 54, '        public string Group'), ('-', '/src/CommandLine/Text/Example.cs', -1, 55, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 56, '            get { return group; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 57, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 58, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 59, '        internal string GroupDescription'), ('-', '/src/CommandLine/Text/Example.cs', -1, 60, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 61, '            get { return groupDescription; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 62, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 63, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 101, '            return new { Group, GroupDescription, HelpText, FormatStyles, Sample }.GetHashCode();'), ('+', '/src/CommandLine/Text/Example.cs', 77, -1, '            return new { HelpText, FormatStyles, Sample }.GetHashCode();'), ('-', '/src/CommandLine/Text/Example.cs', -1, 116, '            return Group.Equals(other.Group)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 117, '                && GroupDescription.Equals(other.GroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 118, '                && HelpText.Equals(other.HelpText)'), ('+', '/src/CommandLine/Text/Example.cs', 92, -1, '            return HelpText.Equals(other.HelpText)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 126, '        public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 127, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 128, '            if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 129, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 130, '            return new Example('), ('-', '/src/CommandLine/Text/Example.cs', -1, 131, '                example.Group,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 132, '                newGroupDescription,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 133, '                example.HelpText,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 134, '                example.FormatStyles,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 135, '                example.Sample);'), ('-', '/src/CommandLine/Text/Example.cs', -1, 136, '        }'), ('+', '/src/CommandLine/Text/Example.cs', 100, -1, '        //public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('+', '/src/CommandLine/Text/Example.cs', 101, -1, '        //{'), ('+', '/src/CommandLine/Text/Example.cs', 102, -1, '        //    if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('+', '/src/CommandLine/Text/Example.cs', 103, -1, ''), ('+', '/src/CommandLine/Text/Example.cs', 104, -1, '        //    return new Example('), ('+', '/src/CommandLine/Text/Example.cs', 105, -1, '        //        example.Group,'), ('+', '/src/CommandLine/Text/Example.cs', 106, -1, '        //        newGroupDescription,'), ('+', '/src/CommandLine/Text/Example.cs', 107, -1, '        //        example.HelpText,'), ('+', '/src/CommandLine/Text/Example.cs', 108, -1, '        //        example.FormatStyles,'), ('+', '/src/CommandLine/Text/Example.cs', 109, -1, '        //        example.Sample);'), ('+', '/src/CommandLine/Text/Example.cs', 110, -1, '        //}'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 438, '            var grouped = from e in examples'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 439, '                          group e by e.Group into g'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 440, '                          select new { Group = g.Key, Examples = g.ToList() };'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 442, '            foreach (var g in grouped)'), ('+', '/src/CommandLine/Text/HelpText.cs', 439, -1, '            foreach (var e in examples)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 444, '                var baseIndent = 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 445, '                var groupText = new StringBuilder();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 446, '                var hasGroupDesc = g.Examples.First().GroupDescription.Length > 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 447, '                if (hasGroupDesc) baseIndent = 2;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 448, '                groupText'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 449, '                    .AppendWhen(hasGroupDesc, g.Examples.First().GroupDescription, ":", Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 450, '                foreach (var e in g.Examples)'), ('+', '/src/CommandLine/Text/HelpText.cs', 441, -1, '                var exampleText = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 442, -1, '                    .Append(e.HelpText)'), ('+', '/src/CommandLine/Text/HelpText.cs', 443, -1, "                    .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 444, -1, '                    .Append(Environment.NewLine);'), ('+', '/src/CommandLine/Text/HelpText.cs', 445, -1, '                var styles = e.GetFormatStylesOrDefault();'), ('+', '/src/CommandLine/Text/HelpText.cs', 446, -1, '                foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 452, '                    var exampleText = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 453, '                        .AppendWhen(baseIndent > 0, baseIndent.Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 454, '                        .Append(e.HelpText)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 455, "                        .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 448, -1, '                    var commandLine = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 449, -1, '                        .Append(2.Spaces())'), ('+', '/src/CommandLine/Text/HelpText.cs', 450, -1, '                        .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('+', '/src/CommandLine/Text/HelpText.cs', 451, -1, '                            config =>'), ('+', '/src/CommandLine/Text/HelpText.cs', 452, -1, '                                {'), ('+', '/src/CommandLine/Text/HelpText.cs', 453, -1, '                                    config.PreferShortName = s.PreferShortName;'), ('+', '/src/CommandLine/Text/HelpText.cs', 454, -1, '                                    config.GroupSwitches = s.GroupSwitches;'), ('+', '/src/CommandLine/Text/HelpText.cs', 455, -1, '                                    config.UseEqualToken = s.UseEqualToken;'), ('+', '/src/CommandLine/Text/HelpText.cs', 456, -1, '                                }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 457, '                    var styles = e.GetFormatStylesOrDefault();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 458, '                    foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 459, '                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 460, '                        var commandLine = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 461, '                            .Append((baseIndent + 2).Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 462, '                            .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 463, '                                config =>'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 464, '                                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 465, '                                        config.PreferShortName = s.PreferShortName;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 466, '                                        config.GroupSwitches = s.GroupSwitches;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 467, '                                        config.UseEqualToken = s.UseEqualToken;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 468, '                                    }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 469, '                            .Append(Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 470, '                        exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 471, '                    }'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 472, '                    groupText.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 458, -1, '                    exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 474, '                text.Append(groupText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 460, -1, '                text.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 462, -1, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 11, '        private readonly IDictionary<string, string> groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 12, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 13, '        public UsageAttribute(IDictionary<string, string> groups)'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 14, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 15, '            this.groups = groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 16, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 17, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 19, '            : this(new Dictionary<string, string>())'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 20, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 21, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 22, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 23, '        public IDictionary<string, string> Groups'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 25, '            get { return groups; }')], 1: [('-', '/src/CommandLine/Text/HelpText.cs', -1, 433, '            var examples = GetUsageFromType(parserResult.TypeInfo.Current)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 434, '                .Return(x => x, Enumerable.Empty<Example>());'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 435, '            if (examples.Empty())'), ('+', '/src/CommandLine/Text/HelpText.cs', 433, -1, '            var usage = GetUsageFromType(parserResult.TypeInfo.Current);'), ('+', '/src/CommandLine/Text/HelpText.cs', 434, -1, '            if (usage.MatchNothing())'), ('+', '/src/CommandLine/Text/HelpText.cs', 437, -1, '            var usageTuple = usage.FromJust();'), ('+', '/src/CommandLine/Text/HelpText.cs', 438, -1, '            var examples = usageTuple.Item2;'), ('+', '/src/CommandLine/Text/HelpText.cs', 439, -1, '            var appAlias = usageTuple.Item1.ApplicationAlias ?? ReflectionHelper.GetAssemblyName();'), ('+', '/src/CommandLine/Text/HelpText.cs', 440, -1, ''), ('+', '/src/CommandLine/Text/HelpText.cs', 453, -1, '                        .Append(appAlias)'), ('+', '/src/CommandLine/Text/HelpText.cs', 454, -1, "                        .Append(' ')"), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 543, '        private static Maybe<IEnumerable<Example>> GetUsageFromType(Type type)'), ('+', '/src/CommandLine/Text/HelpText.cs', 548, -1, '        private static Maybe<Tuple<UsageAttribute, IEnumerable<Example>>> GetUsageFromType(Type type)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 553, '                    var groups = attr.Groups;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 554, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 555, '                    return examples.Select(example => groups.ContainsKey(example.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 556, '                        ? example.WithGroupDescription(groups[example.Group])'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 557, '                        : example)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 558, '                            .OrderBy(x => x.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 559, '                            .ThenBy(x => x.GroupDescription)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 560, '                        .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 558, -1, '                    //var groups = attr.Groups;'), ('+', '/src/CommandLine/Text/HelpText.cs', 559, -1, ''), ('+', '/src/CommandLine/Text/HelpText.cs', 560, -1, '                    //return examples.Select(example => groups.ContainsKey(example.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 561, -1, '                    //    ? example.WithGroupDescription(groups[example.Group])'), ('+', '/src/CommandLine/Text/HelpText.cs', 562, -1, '                    //    : example)'), ('+', '/src/CommandLine/Text/HelpText.cs', 563, -1, '                    //        .OrderBy(x => x.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 564, -1, '                    //        .ThenBy(x => x.GroupDescription)'), ('+', '/src/CommandLine/Text/HelpText.cs', 565, -1, '                    //    .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 566, -1, '                    return Tuple.Create(attr, examples);'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 11, '        public UsageAttribute()'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 12, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 13, '        }'), ('+', '/src/CommandLine/Text/UsageAttribute.cs', 11, -1, '        public string ApplicationAlias { get; set; }')]}


    try:
        # Run the code under test
        delta_gen = deltaPDG(before_path, m_fuzziness=method_fuzziness, n_fuzziness=node_fuzziness)
        delta_pdg = delta_gen(after_path, [ch for ch in changes if ch[1] == filename])
        delta_pdg = mark_originating_commit(delta_pdg, mark_origin(changes, labeli_changes), filename)
        nx.drawing.nx_pydot.write_dot(delta_pdg, output_path)

        # Compare the output with the expected result
        with open(expected_output_path, 'r') as expected_file:
            expected_content = expected_file.read()

        with open(output_path, 'r') as output_file:
            output_content = output_file.read()
    finally:
        if os.path.exists(output_path):
            os.remove(output_path)

    assert output_content == expected_content, "The dot format of the output does not match the expected format"

def test_delta_pdg_generation_usageattribute():
    # Define the necessary paths
    resources_dir = 'tests/resources/UsageAttribute'
    before_path = os.path.join(resources_dir, 'before_pdg.dot')
    after_path = os.path.join(resources_dir, 'after_pdg.dot')
    expected_output_path = os.path.join(resources_dir, 'UsageAttribute.cs.dot')
    output_path = 'tmp.dot'

    method_fuzziness = METHOD_FUZINESS
    node_fuzziness = NODE_FUZZINESS
    filename = "/src/CommandLine/Text/UsageAttribute.cs"
    changes = [('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 3, -1, 'using System.Collections.Generic;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 4, -1, 'using CommandLine.Text;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 5, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 43, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 44, -1, '    class FakeOptionsWithUsageText'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 45, -1, '    {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 46, -1, '        [Option(\'i\',"input", HelpText = "Set input file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 47, -1, '        public string InputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 48, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 49, -1, '        [Option(\'i\', "output", HelpText = "Set output file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 50, -1, '        public string OutputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 51, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 52, -1, '        [Option(HelpText = "Set verbosity level.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 53, -1, '        public bool Verbose { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 54, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 55, -1, '        [Option(\'w\', "Log warnings.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 56, -1, '        public bool LogWarning { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 57, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 58, -1, '        [Option(\'e\', "Log errors.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 59, -1, '        public bool LogError { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 60, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 61, -1, '        [Usage]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 62, -1, '        public static IEnumerable<Example> Examples'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 63, -1, '        {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 64, -1, '            get'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 65, -1, '            {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 66, -1, '                yield return new Example("grp1", "Logging warnings", new[] { new UnParserSettings { GroupSwitches = true } } , new FakeOptionsWithUsageText { InputFile = "file.bin", LogWarning = true });'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 67, -1, '            }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 68, -1, '        }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 69, -1, '    }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 13, '        private readonly string group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 14, '        private readonly string groupDescription;'), ('+', '/src/CommandLine/Text/Example.cs', 13, -1, '        //private readonly string group;'), ('+', '/src/CommandLine/Text/Example.cs', 14, -1, '        //private readonly string groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 19, '        internal Example(string group, string groupDescription, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('+', '/src/CommandLine/Text/Example.cs', 19, -1, '        internal Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 21, '            if (group == null) throw new ArgumentNullException("group");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 22, '            if (groupDescription == null) throw new ArgumentNullException("groupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 27, '            this.group = group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 28, '            this.group = groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 34, '        public Example(string group, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 35, '            : this(group, string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 36, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 37, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 38, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 39, '        public Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 40, '            : this(string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 41, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 42, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 43, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 45, '            : this(string.Empty, helpText, new[] { formatStyle }, sample)'), ('+', '/src/CommandLine/Text/Example.cs', 31, -1, '            : this(helpText, new[] { formatStyle }, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 50, '            : this(string.Empty, helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('+', '/src/CommandLine/Text/Example.cs', 36, -1, '            : this(helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 54, '        public string Group'), ('-', '/src/CommandLine/Text/Example.cs', -1, 55, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 56, '            get { return group; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 57, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 58, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 59, '        internal string GroupDescription'), ('-', '/src/CommandLine/Text/Example.cs', -1, 60, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 61, '            get { return groupDescription; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 62, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 63, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 101, '            return new { Group, GroupDescription, HelpText, FormatStyles, Sample }.GetHashCode();'), ('+', '/src/CommandLine/Text/Example.cs', 77, -1, '            return new { HelpText, FormatStyles, Sample }.GetHashCode();'), ('-', '/src/CommandLine/Text/Example.cs', -1, 116, '            return Group.Equals(other.Group)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 117, '                && GroupDescription.Equals(other.GroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 118, '                && HelpText.Equals(other.HelpText)'), ('+', '/src/CommandLine/Text/Example.cs', 92, -1, '            return HelpText.Equals(other.HelpText)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 126, '        public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 127, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 128, '            if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 129, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 130, '            return new Example('), ('-', '/src/CommandLine/Text/Example.cs', -1, 131, '                example.Group,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 132, '                newGroupDescription,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 133, '                example.HelpText,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 134, '                example.FormatStyles,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 135, '                example.Sample);'), ('-', '/src/CommandLine/Text/Example.cs', -1, 136, '        }'), ('+', '/src/CommandLine/Text/Example.cs', 100, -1, '        //public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('+', '/src/CommandLine/Text/Example.cs', 101, -1, '        //{'), ('+', '/src/CommandLine/Text/Example.cs', 102, -1, '        //    if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('+', '/src/CommandLine/Text/Example.cs', 103, -1, ''), ('+', '/src/CommandLine/Text/Example.cs', 104, -1, '        //    return new Example('), ('+', '/src/CommandLine/Text/Example.cs', 105, -1, '        //        example.Group,'), ('+', '/src/CommandLine/Text/Example.cs', 106, -1, '        //        newGroupDescription,'), ('+', '/src/CommandLine/Text/Example.cs', 107, -1, '        //        example.HelpText,'), ('+', '/src/CommandLine/Text/Example.cs', 108, -1, '        //        example.FormatStyles,'), ('+', '/src/CommandLine/Text/Example.cs', 109, -1, '        //        example.Sample);'), ('+', '/src/CommandLine/Text/Example.cs', 110, -1, '        //}'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 433, '            var examples = GetUsageFromType(parserResult.TypeInfo.Current)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 434, '                .Return(x => x, Enumerable.Empty<Example>());'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 435, '            if (examples.Empty())'), ('+', '/src/CommandLine/Text/HelpText.cs', 433, -1, '            var usage = GetUsageFromType(parserResult.TypeInfo.Current);'), ('+', '/src/CommandLine/Text/HelpText.cs', 434, -1, '            if (usage.MatchNothing())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 438, '            var grouped = from e in examples'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 439, '                          group e by e.Group into g'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 440, '                          select new { Group = g.Key, Examples = g.ToList() };'), ('+', '/src/CommandLine/Text/HelpText.cs', 437, -1, '            var usageTuple = usage.FromJust();'), ('+', '/src/CommandLine/Text/HelpText.cs', 438, -1, '            var examples = usageTuple.Item2;'), ('+', '/src/CommandLine/Text/HelpText.cs', 439, -1, '            var appAlias = usageTuple.Item1.ApplicationAlias ?? ReflectionHelper.GetAssemblyName();'), ('+', '/src/CommandLine/Text/HelpText.cs', 440, -1, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 442, '            foreach (var g in grouped)'), ('+', '/src/CommandLine/Text/HelpText.cs', 442, -1, '            foreach (var e in examples)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 444, '                var baseIndent = 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 445, '                var groupText = new StringBuilder();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 446, '                var hasGroupDesc = g.Examples.First().GroupDescription.Length > 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 447, '                if (hasGroupDesc) baseIndent = 2;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 448, '                groupText'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 449, '                    .AppendWhen(hasGroupDesc, g.Examples.First().GroupDescription, ":", Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 450, '                foreach (var e in g.Examples)'), ('+', '/src/CommandLine/Text/HelpText.cs', 444, -1, '                var exampleText = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 445, -1, '                    .Append(e.HelpText)'), ('+', '/src/CommandLine/Text/HelpText.cs', 446, -1, "                    .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 447, -1, '                    .Append(Environment.NewLine);'), ('+', '/src/CommandLine/Text/HelpText.cs', 448, -1, '                var styles = e.GetFormatStylesOrDefault();'), ('+', '/src/CommandLine/Text/HelpText.cs', 449, -1, '                foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 452, '                    var exampleText = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 453, '                        .AppendWhen(baseIndent > 0, baseIndent.Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 454, '                        .Append(e.HelpText)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 455, "                        .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 451, -1, '                    var commandLine = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 452, -1, '                        .Append(2.Spaces())'), ('+', '/src/CommandLine/Text/HelpText.cs', 453, -1, '                        .Append(appAlias)'), ('+', '/src/CommandLine/Text/HelpText.cs', 454, -1, "                        .Append(' ')"), ('+', '/src/CommandLine/Text/HelpText.cs', 455, -1, '                        .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('+', '/src/CommandLine/Text/HelpText.cs', 456, -1, '                            config =>'), ('+', '/src/CommandLine/Text/HelpText.cs', 457, -1, '                                {'), ('+', '/src/CommandLine/Text/HelpText.cs', 458, -1, '                                    config.PreferShortName = s.PreferShortName;'), ('+', '/src/CommandLine/Text/HelpText.cs', 459, -1, '                                    config.GroupSwitches = s.GroupSwitches;'), ('+', '/src/CommandLine/Text/HelpText.cs', 460, -1, '                                    config.UseEqualToken = s.UseEqualToken;'), ('+', '/src/CommandLine/Text/HelpText.cs', 461, -1, '                                }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 457, '                    var styles = e.GetFormatStylesOrDefault();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 458, '                    foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 459, '                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 460, '                        var commandLine = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 461, '                            .Append((baseIndent + 2).Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 462, '                            .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 463, '                                config =>'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 464, '                                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 465, '                                        config.PreferShortName = s.PreferShortName;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 466, '                                        config.GroupSwitches = s.GroupSwitches;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 467, '                                        config.UseEqualToken = s.UseEqualToken;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 468, '                                    }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 469, '                            .Append(Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 470, '                        exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 471, '                    }'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 472, '                    groupText.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 463, -1, '                    exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 474, '                text.Append(groupText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 465, -1, '                text.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 467, -1, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 556, '        private static Maybe<IEnumerable<Example>> GetUsageFromType(Type type)'), ('+', '/src/CommandLine/Text/HelpText.cs', 548, -1, '        private static Maybe<Tuple<UsageAttribute, IEnumerable<Example>>> GetUsageFromType(Type type)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 566, '                    var groups = attr.Groups;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 567, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 568, '                    return examples.Select(example => groups.ContainsKey(example.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 569, '                        ? example.WithGroupDescription(groups[example.Group])'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 570, '                        : example)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 571, '                            .OrderBy(x => x.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 572, '                            .ThenBy(x => x.GroupDescription)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 573, '                        .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 558, -1, '                    //var groups = attr.Groups;'), ('+', '/src/CommandLine/Text/HelpText.cs', 559, -1, ''), ('+', '/src/CommandLine/Text/HelpText.cs', 560, -1, '                    //return examples.Select(example => groups.ContainsKey(example.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 561, -1, '                    //    ? example.WithGroupDescription(groups[example.Group])'), ('+', '/src/CommandLine/Text/HelpText.cs', 562, -1, '                    //    : example)'), ('+', '/src/CommandLine/Text/HelpText.cs', 563, -1, '                    //        .OrderBy(x => x.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 564, -1, '                    //        .ThenBy(x => x.GroupDescription)'), ('+', '/src/CommandLine/Text/HelpText.cs', 565, -1, '                    //    .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 566, -1, '                    return Tuple.Create(attr, examples);'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 11, '        private readonly IDictionary<string, string> groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 12, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 13, '        public UsageAttribute(IDictionary<string, string> groups)'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 14, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 15, '            this.groups = groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 16, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 17, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 18, '        public UsageAttribute()'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 19, '            : this(new Dictionary<string, string>())'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 20, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 21, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 22, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 23, '        public IDictionary<string, string> Groups'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 24, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 25, '            get { return groups; }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 26, '        }'), ('+', '/src/CommandLine/Text/UsageAttribute.cs', 11, -1, '        public string ApplicationAlias { get; set; }')]
    labeli_changes = {0: [('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 3, -1, 'using System.Collections.Generic;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 4, -1, 'using CommandLine.Text;'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 5, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 43, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 44, -1, '    class FakeOptionsWithUsageText'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 45, -1, '    {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 46, -1, '        [Option(\'i\',"input", HelpText = "Set input file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 47, -1, '        public string InputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 48, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 49, -1, '        [Option(\'i\', "output", HelpText = "Set output file.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 50, -1, '        public string OutputFile { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 51, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 52, -1, '        [Option(HelpText = "Set verbosity level.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 53, -1, '        public bool Verbose { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 54, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 55, -1, '        [Option(\'w\', "Log warnings.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 56, -1, '        public bool LogWarning { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 57, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 58, -1, '        [Option(\'e\', "Log errors.")]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 59, -1, '        public bool LogError { get; set; }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 60, -1, ''), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 61, -1, '        [Usage]'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 62, -1, '        public static IEnumerable<Example> Examples'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 63, -1, '        {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 64, -1, '            get'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 65, -1, '            {'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 66, -1, '                yield return new Example("grp1", "Logging warnings", new[] { new UnParserSettings { GroupSwitches = true } } , new FakeOptionsWithUsageText { InputFile = "file.bin", LogWarning = true });'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 67, -1, '            }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 68, -1, '        }'), ('+', '/src/CommandLine.Tests/Fakes/HelpFakes.cs', 69, -1, '    }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 13, '        private readonly string group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 14, '        private readonly string groupDescription;'), ('+', '/src/CommandLine/Text/Example.cs', 13, -1, '        //private readonly string group;'), ('+', '/src/CommandLine/Text/Example.cs', 14, -1, '        //private readonly string groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 19, '        internal Example(string group, string groupDescription, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('+', '/src/CommandLine/Text/Example.cs', 19, -1, '        internal Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 21, '            if (group == null) throw new ArgumentNullException("group");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 22, '            if (groupDescription == null) throw new ArgumentNullException("groupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 27, '            this.group = group;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 28, '            this.group = groupDescription;'), ('-', '/src/CommandLine/Text/Example.cs', -1, 34, '        public Example(string group, string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 35, '            : this(group, string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 36, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 37, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 38, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 39, '        public Example(string helpText, IEnumerable<UnParserSettings> formatStyles, object sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 40, '            : this(string.Empty, helpText, formatStyles, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 41, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 42, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 43, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 45, '            : this(string.Empty, helpText, new[] { formatStyle }, sample)'), ('+', '/src/CommandLine/Text/Example.cs', 31, -1, '            : this(helpText, new[] { formatStyle }, sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 50, '            : this(string.Empty, helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('+', '/src/CommandLine/Text/Example.cs', 36, -1, '            : this(helpText, Enumerable.Empty<UnParserSettings>(), sample)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 54, '        public string Group'), ('-', '/src/CommandLine/Text/Example.cs', -1, 55, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 56, '            get { return group; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 57, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 58, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 59, '        internal string GroupDescription'), ('-', '/src/CommandLine/Text/Example.cs', -1, 60, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 61, '            get { return groupDescription; }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 62, '        }'), ('-', '/src/CommandLine/Text/Example.cs', -1, 63, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 101, '            return new { Group, GroupDescription, HelpText, FormatStyles, Sample }.GetHashCode();'), ('+', '/src/CommandLine/Text/Example.cs', 77, -1, '            return new { HelpText, FormatStyles, Sample }.GetHashCode();'), ('-', '/src/CommandLine/Text/Example.cs', -1, 116, '            return Group.Equals(other.Group)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 117, '                && GroupDescription.Equals(other.GroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 118, '                && HelpText.Equals(other.HelpText)'), ('+', '/src/CommandLine/Text/Example.cs', 92, -1, '            return HelpText.Equals(other.HelpText)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 126, '        public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('-', '/src/CommandLine/Text/Example.cs', -1, 127, '        {'), ('-', '/src/CommandLine/Text/Example.cs', -1, 128, '            if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('-', '/src/CommandLine/Text/Example.cs', -1, 129, ''), ('-', '/src/CommandLine/Text/Example.cs', -1, 130, '            return new Example('), ('-', '/src/CommandLine/Text/Example.cs', -1, 131, '                example.Group,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 132, '                newGroupDescription,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 133, '                example.HelpText,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 134, '                example.FormatStyles,'), ('-', '/src/CommandLine/Text/Example.cs', -1, 135, '                example.Sample);'), ('-', '/src/CommandLine/Text/Example.cs', -1, 136, '        }'), ('+', '/src/CommandLine/Text/Example.cs', 100, -1, '        //public static Example WithGroupDescription(this Example example, string newGroupDescription)'), ('+', '/src/CommandLine/Text/Example.cs', 101, -1, '        //{'), ('+', '/src/CommandLine/Text/Example.cs', 102, -1, '        //    if (string.IsNullOrEmpty(newGroupDescription)) throw new ArgumentException("newGroupDescription can\'t be null or empty", "newGroupDescription");'), ('+', '/src/CommandLine/Text/Example.cs', 103, -1, ''), ('+', '/src/CommandLine/Text/Example.cs', 104, -1, '        //    return new Example('), ('+', '/src/CommandLine/Text/Example.cs', 105, -1, '        //        example.Group,'), ('+', '/src/CommandLine/Text/Example.cs', 106, -1, '        //        newGroupDescription,'), ('+', '/src/CommandLine/Text/Example.cs', 107, -1, '        //        example.HelpText,'), ('+', '/src/CommandLine/Text/Example.cs', 108, -1, '        //        example.FormatStyles,'), ('+', '/src/CommandLine/Text/Example.cs', 109, -1, '        //        example.Sample);'), ('+', '/src/CommandLine/Text/Example.cs', 110, -1, '        //}'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 438, '            var grouped = from e in examples'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 439, '                          group e by e.Group into g'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 440, '                          select new { Group = g.Key, Examples = g.ToList() };'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 442, '            foreach (var g in grouped)'), ('+', '/src/CommandLine/Text/HelpText.cs', 439, -1, '            foreach (var e in examples)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 444, '                var baseIndent = 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 445, '                var groupText = new StringBuilder();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 446, '                var hasGroupDesc = g.Examples.First().GroupDescription.Length > 0;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 447, '                if (hasGroupDesc) baseIndent = 2;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 448, '                groupText'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 449, '                    .AppendWhen(hasGroupDesc, g.Examples.First().GroupDescription, ":", Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 450, '                foreach (var e in g.Examples)'), ('+', '/src/CommandLine/Text/HelpText.cs', 441, -1, '                var exampleText = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 442, -1, '                    .Append(e.HelpText)'), ('+', '/src/CommandLine/Text/HelpText.cs', 443, -1, "                    .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 444, -1, '                    .Append(Environment.NewLine);'), ('+', '/src/CommandLine/Text/HelpText.cs', 445, -1, '                var styles = e.GetFormatStylesOrDefault();'), ('+', '/src/CommandLine/Text/HelpText.cs', 446, -1, '                foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 452, '                    var exampleText = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 453, '                        .AppendWhen(baseIndent > 0, baseIndent.Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 454, '                        .Append(e.HelpText)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 455, "                        .Append(':')"), ('+', '/src/CommandLine/Text/HelpText.cs', 448, -1, '                    var commandLine = new StringBuilder()'), ('+', '/src/CommandLine/Text/HelpText.cs', 449, -1, '                        .Append(2.Spaces())'), ('+', '/src/CommandLine/Text/HelpText.cs', 450, -1, '                        .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('+', '/src/CommandLine/Text/HelpText.cs', 451, -1, '                            config =>'), ('+', '/src/CommandLine/Text/HelpText.cs', 452, -1, '                                {'), ('+', '/src/CommandLine/Text/HelpText.cs', 453, -1, '                                    config.PreferShortName = s.PreferShortName;'), ('+', '/src/CommandLine/Text/HelpText.cs', 454, -1, '                                    config.GroupSwitches = s.GroupSwitches;'), ('+', '/src/CommandLine/Text/HelpText.cs', 455, -1, '                                    config.UseEqualToken = s.UseEqualToken;'), ('+', '/src/CommandLine/Text/HelpText.cs', 456, -1, '                                }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 457, '                    var styles = e.GetFormatStylesOrDefault();'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 458, '                    foreach (var s in styles)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 459, '                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 460, '                        var commandLine = new StringBuilder()'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 461, '                            .Append((baseIndent + 2).Spaces())'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 462, '                            .Append(Parser.Default.FormatCommandLine(e.Sample,'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 463, '                                config =>'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 464, '                                    {'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 465, '                                        config.PreferShortName = s.PreferShortName;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 466, '                                        config.GroupSwitches = s.GroupSwitches;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 467, '                                        config.UseEqualToken = s.UseEqualToken;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 468, '                                    }))'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 469, '                            .Append(Environment.NewLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 470, '                        exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 471, '                    }'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 472, '                    groupText.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 458, -1, '                    exampleText.Append(commandLine);'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 474, '                text.Append(groupText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 460, -1, '                text.Append(exampleText);'), ('+', '/src/CommandLine/Text/HelpText.cs', 462, -1, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 11, '        private readonly IDictionary<string, string> groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 12, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 13, '        public UsageAttribute(IDictionary<string, string> groups)'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 14, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 15, '            this.groups = groups;'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 16, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 17, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 19, '            : this(new Dictionary<string, string>())'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 20, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 21, '        }'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 22, ''), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 23, '        public IDictionary<string, string> Groups'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 25, '            get { return groups; }')], 1: [('-', '/src/CommandLine/Text/HelpText.cs', -1, 433, '            var examples = GetUsageFromType(parserResult.TypeInfo.Current)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 434, '                .Return(x => x, Enumerable.Empty<Example>());'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 435, '            if (examples.Empty())'), ('+', '/src/CommandLine/Text/HelpText.cs', 433, -1, '            var usage = GetUsageFromType(parserResult.TypeInfo.Current);'), ('+', '/src/CommandLine/Text/HelpText.cs', 434, -1, '            if (usage.MatchNothing())'), ('+', '/src/CommandLine/Text/HelpText.cs', 437, -1, '            var usageTuple = usage.FromJust();'), ('+', '/src/CommandLine/Text/HelpText.cs', 438, -1, '            var examples = usageTuple.Item2;'), ('+', '/src/CommandLine/Text/HelpText.cs', 439, -1, '            var appAlias = usageTuple.Item1.ApplicationAlias ?? ReflectionHelper.GetAssemblyName();'), ('+', '/src/CommandLine/Text/HelpText.cs', 440, -1, ''), ('+', '/src/CommandLine/Text/HelpText.cs', 453, -1, '                        .Append(appAlias)'), ('+', '/src/CommandLine/Text/HelpText.cs', 454, -1, "                        .Append(' ')"), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 543, '        private static Maybe<IEnumerable<Example>> GetUsageFromType(Type type)'), ('+', '/src/CommandLine/Text/HelpText.cs', 548, -1, '        private static Maybe<Tuple<UsageAttribute, IEnumerable<Example>>> GetUsageFromType(Type type)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 553, '                    var groups = attr.Groups;'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 554, ''), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 555, '                    return examples.Select(example => groups.ContainsKey(example.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 556, '                        ? example.WithGroupDescription(groups[example.Group])'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 557, '                        : example)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 558, '                            .OrderBy(x => x.Group)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 559, '                            .ThenBy(x => x.GroupDescription)'), ('-', '/src/CommandLine/Text/HelpText.cs', -1, 560, '                        .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 558, -1, '                    //var groups = attr.Groups;'), ('+', '/src/CommandLine/Text/HelpText.cs', 559, -1, ''), ('+', '/src/CommandLine/Text/HelpText.cs', 560, -1, '                    //return examples.Select(example => groups.ContainsKey(example.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 561, -1, '                    //    ? example.WithGroupDescription(groups[example.Group])'), ('+', '/src/CommandLine/Text/HelpText.cs', 562, -1, '                    //    : example)'), ('+', '/src/CommandLine/Text/HelpText.cs', 563, -1, '                    //        .OrderBy(x => x.Group)'), ('+', '/src/CommandLine/Text/HelpText.cs', 564, -1, '                    //        .ThenBy(x => x.GroupDescription)'), ('+', '/src/CommandLine/Text/HelpText.cs', 565, -1, '                    //    .Memorize();'), ('+', '/src/CommandLine/Text/HelpText.cs', 566, -1, '                    return Tuple.Create(attr, examples);'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 11, '        public UsageAttribute()'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 12, '        {'), ('-', '/src/CommandLine/Text/UsageAttribute.cs', -1, 13, '        }'), ('+', '/src/CommandLine/Text/UsageAttribute.cs', 11, -1, '        public string ApplicationAlias { get; set; }')]}


    try:
        # Run the code under test
        delta_gen = deltaPDG(before_path, m_fuzziness=method_fuzziness, n_fuzziness=node_fuzziness)
        delta_pdg = delta_gen(after_path, [ch for ch in changes if ch[1] == filename])
        delta_pdg = mark_originating_commit(delta_pdg, mark_origin(changes, labeli_changes), filename)
        nx.drawing.nx_pydot.write_dot(delta_pdg, output_path)

        # Compare the output with the expected result
        with open(expected_output_path, 'r') as expected_file:
            expected_content = expected_file.read()

        with open(output_path, 'r') as output_file:
            output_content = output_file.read()
    finally:
        if os.path.exists(output_path):
            os.remove(output_path)

    assert output_content == expected_content, "The dot format of the output does not match the expected format"
